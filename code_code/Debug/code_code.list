
code_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000179a0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad0  08017ae0  08017ae0  00027ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080185b0  080185b0  00030154  2**0
                  CONTENTS
  4 .ARM          00000008  080185b0  080185b0  000285b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080185b8  080185b8  00030154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080185b8  080185b8  000285b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080185bc  080185bc  000285bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  080185c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001178  20000154  08018714  00030154  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012cc  08018714  000312cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052548  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008f23  00000000  00000000  000826c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a28  00000000  00000000  0008b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002730  00000000  00000000  0008e018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002422b  00000000  00000000  00090748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034d2c  00000000  00000000  000b4973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bcfb0  00000000  00000000  000e969f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a664f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b5a4  00000000  00000000  001a66a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000154 	.word	0x20000154
 800015c:	00000000 	.word	0x00000000
 8000160:	08017ac8 	.word	0x08017ac8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000158 	.word	0x20000158
 800017c:	08017ac8 	.word	0x08017ac8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__gedf2>:
 8000598:	f04f 3cff 	mov.w	ip, #4294967295
 800059c:	e006      	b.n	80005ac <__cmpdf2+0x4>
 800059e:	bf00      	nop

080005a0 <__ledf2>:
 80005a0:	f04f 0c01 	mov.w	ip, #1
 80005a4:	e002      	b.n	80005ac <__cmpdf2+0x4>
 80005a6:	bf00      	nop

080005a8 <__cmpdf2>:
 80005a8:	f04f 0c01 	mov.w	ip, #1
 80005ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005bc:	bf18      	it	ne
 80005be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005c2:	d01b      	beq.n	80005fc <__cmpdf2+0x54>
 80005c4:	b001      	add	sp, #4
 80005c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005ca:	bf0c      	ite	eq
 80005cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005d0:	ea91 0f03 	teqne	r1, r3
 80005d4:	bf02      	ittt	eq
 80005d6:	ea90 0f02 	teqeq	r0, r2
 80005da:	2000      	moveq	r0, #0
 80005dc:	4770      	bxeq	lr
 80005de:	f110 0f00 	cmn.w	r0, #0
 80005e2:	ea91 0f03 	teq	r1, r3
 80005e6:	bf58      	it	pl
 80005e8:	4299      	cmppl	r1, r3
 80005ea:	bf08      	it	eq
 80005ec:	4290      	cmpeq	r0, r2
 80005ee:	bf2c      	ite	cs
 80005f0:	17d8      	asrcs	r0, r3, #31
 80005f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005f6:	f040 0001 	orr.w	r0, r0, #1
 80005fa:	4770      	bx	lr
 80005fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000600:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000604:	d102      	bne.n	800060c <__cmpdf2+0x64>
 8000606:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800060a:	d107      	bne.n	800061c <__cmpdf2+0x74>
 800060c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d1d6      	bne.n	80005c4 <__cmpdf2+0x1c>
 8000616:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800061a:	d0d3      	beq.n	80005c4 <__cmpdf2+0x1c>
 800061c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <__aeabi_cdrcmple>:
 8000624:	4684      	mov	ip, r0
 8000626:	4610      	mov	r0, r2
 8000628:	4662      	mov	r2, ip
 800062a:	468c      	mov	ip, r1
 800062c:	4619      	mov	r1, r3
 800062e:	4663      	mov	r3, ip
 8000630:	e000      	b.n	8000634 <__aeabi_cdcmpeq>
 8000632:	bf00      	nop

08000634 <__aeabi_cdcmpeq>:
 8000634:	b501      	push	{r0, lr}
 8000636:	f7ff ffb7 	bl	80005a8 <__cmpdf2>
 800063a:	2800      	cmp	r0, #0
 800063c:	bf48      	it	mi
 800063e:	f110 0f00 	cmnmi.w	r0, #0
 8000642:	bd01      	pop	{r0, pc}

08000644 <__aeabi_dcmpeq>:
 8000644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000648:	f7ff fff4 	bl	8000634 <__aeabi_cdcmpeq>
 800064c:	bf0c      	ite	eq
 800064e:	2001      	moveq	r0, #1
 8000650:	2000      	movne	r0, #0
 8000652:	f85d fb08 	ldr.w	pc, [sp], #8
 8000656:	bf00      	nop

08000658 <__aeabi_dcmplt>:
 8000658:	f84d ed08 	str.w	lr, [sp, #-8]!
 800065c:	f7ff ffea 	bl	8000634 <__aeabi_cdcmpeq>
 8000660:	bf34      	ite	cc
 8000662:	2001      	movcc	r0, #1
 8000664:	2000      	movcs	r0, #0
 8000666:	f85d fb08 	ldr.w	pc, [sp], #8
 800066a:	bf00      	nop

0800066c <__aeabi_dcmple>:
 800066c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000670:	f7ff ffe0 	bl	8000634 <__aeabi_cdcmpeq>
 8000674:	bf94      	ite	ls
 8000676:	2001      	movls	r0, #1
 8000678:	2000      	movhi	r0, #0
 800067a:	f85d fb08 	ldr.w	pc, [sp], #8
 800067e:	bf00      	nop

08000680 <__aeabi_dcmpge>:
 8000680:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000684:	f7ff ffce 	bl	8000624 <__aeabi_cdrcmple>
 8000688:	bf94      	ite	ls
 800068a:	2001      	movls	r0, #1
 800068c:	2000      	movhi	r0, #0
 800068e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000692:	bf00      	nop

08000694 <__aeabi_dcmpgt>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff ffc4 	bl	8000624 <__aeabi_cdrcmple>
 800069c:	bf34      	ite	cc
 800069e:	2001      	movcc	r0, #1
 80006a0:	2000      	movcs	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_d2iz>:
 80006a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80006b0:	d215      	bcs.n	80006de <__aeabi_d2iz+0x36>
 80006b2:	d511      	bpl.n	80006d8 <__aeabi_d2iz+0x30>
 80006b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80006b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006bc:	d912      	bls.n	80006e4 <__aeabi_d2iz+0x3c>
 80006be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ce:	fa23 f002 	lsr.w	r0, r3, r2
 80006d2:	bf18      	it	ne
 80006d4:	4240      	negne	r0, r0
 80006d6:	4770      	bx	lr
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	4770      	bx	lr
 80006de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006e2:	d105      	bne.n	80006f0 <__aeabi_d2iz+0x48>
 80006e4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80006e8:	bf08      	it	eq
 80006ea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006ee:	4770      	bx	lr
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop

080006f8 <__aeabi_frsub>:
 80006f8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80006fc:	e002      	b.n	8000704 <__addsf3>
 80006fe:	bf00      	nop

08000700 <__aeabi_fsub>:
 8000700:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000704 <__addsf3>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	bf1f      	itttt	ne
 8000708:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800070c:	ea92 0f03 	teqne	r2, r3
 8000710:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000714:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000718:	d06a      	beq.n	80007f0 <__addsf3+0xec>
 800071a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800071e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000722:	bfc1      	itttt	gt
 8000724:	18d2      	addgt	r2, r2, r3
 8000726:	4041      	eorgt	r1, r0
 8000728:	4048      	eorgt	r0, r1
 800072a:	4041      	eorgt	r1, r0
 800072c:	bfb8      	it	lt
 800072e:	425b      	neglt	r3, r3
 8000730:	2b19      	cmp	r3, #25
 8000732:	bf88      	it	hi
 8000734:	4770      	bxhi	lr
 8000736:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800073a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800073e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000742:	bf18      	it	ne
 8000744:	4240      	negne	r0, r0
 8000746:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800074a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800074e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4249      	negne	r1, r1
 8000756:	ea92 0f03 	teq	r2, r3
 800075a:	d03f      	beq.n	80007dc <__addsf3+0xd8>
 800075c:	f1a2 0201 	sub.w	r2, r2, #1
 8000760:	fa41 fc03 	asr.w	ip, r1, r3
 8000764:	eb10 000c 	adds.w	r0, r0, ip
 8000768:	f1c3 0320 	rsb	r3, r3, #32
 800076c:	fa01 f103 	lsl.w	r1, r1, r3
 8000770:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000774:	d502      	bpl.n	800077c <__addsf3+0x78>
 8000776:	4249      	negs	r1, r1
 8000778:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800077c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000780:	d313      	bcc.n	80007aa <__addsf3+0xa6>
 8000782:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000786:	d306      	bcc.n	8000796 <__addsf3+0x92>
 8000788:	0840      	lsrs	r0, r0, #1
 800078a:	ea4f 0131 	mov.w	r1, r1, rrx
 800078e:	f102 0201 	add.w	r2, r2, #1
 8000792:	2afe      	cmp	r2, #254	; 0xfe
 8000794:	d251      	bcs.n	800083a <__addsf3+0x136>
 8000796:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800079a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800079e:	bf08      	it	eq
 80007a0:	f020 0001 	biceq.w	r0, r0, #1
 80007a4:	ea40 0003 	orr.w	r0, r0, r3
 80007a8:	4770      	bx	lr
 80007aa:	0049      	lsls	r1, r1, #1
 80007ac:	eb40 0000 	adc.w	r0, r0, r0
 80007b0:	3a01      	subs	r2, #1
 80007b2:	bf28      	it	cs
 80007b4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80007b8:	d2ed      	bcs.n	8000796 <__addsf3+0x92>
 80007ba:	fab0 fc80 	clz	ip, r0
 80007be:	f1ac 0c08 	sub.w	ip, ip, #8
 80007c2:	ebb2 020c 	subs.w	r2, r2, ip
 80007c6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007ca:	bfaa      	itet	ge
 80007cc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007d0:	4252      	neglt	r2, r2
 80007d2:	4318      	orrge	r0, r3
 80007d4:	bfbc      	itt	lt
 80007d6:	40d0      	lsrlt	r0, r2
 80007d8:	4318      	orrlt	r0, r3
 80007da:	4770      	bx	lr
 80007dc:	f092 0f00 	teq	r2, #0
 80007e0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007e4:	bf06      	itte	eq
 80007e6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007ea:	3201      	addeq	r2, #1
 80007ec:	3b01      	subne	r3, #1
 80007ee:	e7b5      	b.n	800075c <__addsf3+0x58>
 80007f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007f8:	bf18      	it	ne
 80007fa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007fe:	d021      	beq.n	8000844 <__addsf3+0x140>
 8000800:	ea92 0f03 	teq	r2, r3
 8000804:	d004      	beq.n	8000810 <__addsf3+0x10c>
 8000806:	f092 0f00 	teq	r2, #0
 800080a:	bf08      	it	eq
 800080c:	4608      	moveq	r0, r1
 800080e:	4770      	bx	lr
 8000810:	ea90 0f01 	teq	r0, r1
 8000814:	bf1c      	itt	ne
 8000816:	2000      	movne	r0, #0
 8000818:	4770      	bxne	lr
 800081a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800081e:	d104      	bne.n	800082a <__addsf3+0x126>
 8000820:	0040      	lsls	r0, r0, #1
 8000822:	bf28      	it	cs
 8000824:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000828:	4770      	bx	lr
 800082a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800082e:	bf3c      	itt	cc
 8000830:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000834:	4770      	bxcc	lr
 8000836:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800083a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800083e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000842:	4770      	bx	lr
 8000844:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000848:	bf16      	itet	ne
 800084a:	4608      	movne	r0, r1
 800084c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000850:	4601      	movne	r1, r0
 8000852:	0242      	lsls	r2, r0, #9
 8000854:	bf06      	itte	eq
 8000856:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800085a:	ea90 0f01 	teqeq	r0, r1
 800085e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000862:	4770      	bx	lr

08000864 <__aeabi_ui2f>:
 8000864:	f04f 0300 	mov.w	r3, #0
 8000868:	e004      	b.n	8000874 <__aeabi_i2f+0x8>
 800086a:	bf00      	nop

0800086c <__aeabi_i2f>:
 800086c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000870:	bf48      	it	mi
 8000872:	4240      	negmi	r0, r0
 8000874:	ea5f 0c00 	movs.w	ip, r0
 8000878:	bf08      	it	eq
 800087a:	4770      	bxeq	lr
 800087c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000880:	4601      	mov	r1, r0
 8000882:	f04f 0000 	mov.w	r0, #0
 8000886:	e01c      	b.n	80008c2 <__aeabi_l2f+0x2a>

08000888 <__aeabi_ul2f>:
 8000888:	ea50 0201 	orrs.w	r2, r0, r1
 800088c:	bf08      	it	eq
 800088e:	4770      	bxeq	lr
 8000890:	f04f 0300 	mov.w	r3, #0
 8000894:	e00a      	b.n	80008ac <__aeabi_l2f+0x14>
 8000896:	bf00      	nop

08000898 <__aeabi_l2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80008a4:	d502      	bpl.n	80008ac <__aeabi_l2f+0x14>
 80008a6:	4240      	negs	r0, r0
 80008a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ac:	ea5f 0c01 	movs.w	ip, r1
 80008b0:	bf02      	ittt	eq
 80008b2:	4684      	moveq	ip, r0
 80008b4:	4601      	moveq	r1, r0
 80008b6:	2000      	moveq	r0, #0
 80008b8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80008bc:	bf08      	it	eq
 80008be:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80008c2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80008c6:	fabc f28c 	clz	r2, ip
 80008ca:	3a08      	subs	r2, #8
 80008cc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008d0:	db10      	blt.n	80008f4 <__aeabi_l2f+0x5c>
 80008d2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008d6:	4463      	add	r3, ip
 80008d8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008dc:	f1c2 0220 	rsb	r2, r2, #32
 80008e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008e4:	fa20 f202 	lsr.w	r2, r0, r2
 80008e8:	eb43 0002 	adc.w	r0, r3, r2
 80008ec:	bf08      	it	eq
 80008ee:	f020 0001 	biceq.w	r0, r0, #1
 80008f2:	4770      	bx	lr
 80008f4:	f102 0220 	add.w	r2, r2, #32
 80008f8:	fa01 fc02 	lsl.w	ip, r1, r2
 80008fc:	f1c2 0220 	rsb	r2, r2, #32
 8000900:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000904:	fa21 f202 	lsr.w	r2, r1, r2
 8000908:	eb43 0002 	adc.w	r0, r3, r2
 800090c:	bf08      	it	eq
 800090e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000912:	4770      	bx	lr

08000914 <__aeabi_uldivmod>:
 8000914:	b953      	cbnz	r3, 800092c <__aeabi_uldivmod+0x18>
 8000916:	b94a      	cbnz	r2, 800092c <__aeabi_uldivmod+0x18>
 8000918:	2900      	cmp	r1, #0
 800091a:	bf08      	it	eq
 800091c:	2800      	cmpeq	r0, #0
 800091e:	bf1c      	itt	ne
 8000920:	f04f 31ff 	movne.w	r1, #4294967295
 8000924:	f04f 30ff 	movne.w	r0, #4294967295
 8000928:	f000 b96c 	b.w	8000c04 <__aeabi_idiv0>
 800092c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000930:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000934:	f000 f806 	bl	8000944 <__udivmoddi4>
 8000938:	f8dd e004 	ldr.w	lr, [sp, #4]
 800093c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000940:	b004      	add	sp, #16
 8000942:	4770      	bx	lr

08000944 <__udivmoddi4>:
 8000944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000948:	9e08      	ldr	r6, [sp, #32]
 800094a:	460d      	mov	r5, r1
 800094c:	4604      	mov	r4, r0
 800094e:	468e      	mov	lr, r1
 8000950:	2b00      	cmp	r3, #0
 8000952:	f040 8082 	bne.w	8000a5a <__udivmoddi4+0x116>
 8000956:	428a      	cmp	r2, r1
 8000958:	4617      	mov	r7, r2
 800095a:	d946      	bls.n	80009ea <__udivmoddi4+0xa6>
 800095c:	fab2 f282 	clz	r2, r2
 8000960:	b14a      	cbz	r2, 8000976 <__udivmoddi4+0x32>
 8000962:	f1c2 0120 	rsb	r1, r2, #32
 8000966:	fa05 f302 	lsl.w	r3, r5, r2
 800096a:	fa20 f101 	lsr.w	r1, r0, r1
 800096e:	4097      	lsls	r7, r2
 8000970:	ea41 0e03 	orr.w	lr, r1, r3
 8000974:	4094      	lsls	r4, r2
 8000976:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800097a:	0c23      	lsrs	r3, r4, #16
 800097c:	fbbe fcf8 	udiv	ip, lr, r8
 8000980:	b2b9      	uxth	r1, r7
 8000982:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000986:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800098a:	fb0c f001 	mul.w	r0, ip, r1
 800098e:	4298      	cmp	r0, r3
 8000990:	d90a      	bls.n	80009a8 <__udivmoddi4+0x64>
 8000992:	18fb      	adds	r3, r7, r3
 8000994:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000998:	f080 8116 	bcs.w	8000bc8 <__udivmoddi4+0x284>
 800099c:	4298      	cmp	r0, r3
 800099e:	f240 8113 	bls.w	8000bc8 <__udivmoddi4+0x284>
 80009a2:	f1ac 0c02 	sub.w	ip, ip, #2
 80009a6:	443b      	add	r3, r7
 80009a8:	1a1b      	subs	r3, r3, r0
 80009aa:	b2a4      	uxth	r4, r4
 80009ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80009b0:	fb08 3310 	mls	r3, r8, r0, r3
 80009b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009b8:	fb00 f101 	mul.w	r1, r0, r1
 80009bc:	42a1      	cmp	r1, r4
 80009be:	d909      	bls.n	80009d4 <__udivmoddi4+0x90>
 80009c0:	193c      	adds	r4, r7, r4
 80009c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80009c6:	f080 8101 	bcs.w	8000bcc <__udivmoddi4+0x288>
 80009ca:	42a1      	cmp	r1, r4
 80009cc:	f240 80fe 	bls.w	8000bcc <__udivmoddi4+0x288>
 80009d0:	3802      	subs	r0, #2
 80009d2:	443c      	add	r4, r7
 80009d4:	1a64      	subs	r4, r4, r1
 80009d6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009da:	2100      	movs	r1, #0
 80009dc:	b11e      	cbz	r6, 80009e6 <__udivmoddi4+0xa2>
 80009de:	40d4      	lsrs	r4, r2
 80009e0:	2300      	movs	r3, #0
 80009e2:	e9c6 4300 	strd	r4, r3, [r6]
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	b902      	cbnz	r2, 80009ee <__udivmoddi4+0xaa>
 80009ec:	deff      	udf	#255	; 0xff
 80009ee:	fab2 f282 	clz	r2, r2
 80009f2:	2a00      	cmp	r2, #0
 80009f4:	d14f      	bne.n	8000a96 <__udivmoddi4+0x152>
 80009f6:	1bcb      	subs	r3, r1, r7
 80009f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009fc:	fa1f f887 	uxth.w	r8, r7
 8000a00:	2101      	movs	r1, #1
 8000a02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a06:	0c25      	lsrs	r5, r4, #16
 8000a08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a0c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000a10:	fb08 f30c 	mul.w	r3, r8, ip
 8000a14:	42ab      	cmp	r3, r5
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0xe4>
 8000a18:	197d      	adds	r5, r7, r5
 8000a1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0xe2>
 8000a20:	42ab      	cmp	r3, r5
 8000a22:	f200 80e7 	bhi.w	8000bf4 <__udivmoddi4+0x2b0>
 8000a26:	4684      	mov	ip, r0
 8000a28:	1aed      	subs	r5, r5, r3
 8000a2a:	b2a3      	uxth	r3, r4
 8000a2c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000a30:	fb0e 5510 	mls	r5, lr, r0, r5
 8000a34:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000a38:	fb08 f800 	mul.w	r8, r8, r0
 8000a3c:	45a0      	cmp	r8, r4
 8000a3e:	d907      	bls.n	8000a50 <__udivmoddi4+0x10c>
 8000a40:	193c      	adds	r4, r7, r4
 8000a42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0x10a>
 8000a48:	45a0      	cmp	r8, r4
 8000a4a:	f200 80d7 	bhi.w	8000bfc <__udivmoddi4+0x2b8>
 8000a4e:	4618      	mov	r0, r3
 8000a50:	eba4 0408 	sub.w	r4, r4, r8
 8000a54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a58:	e7c0      	b.n	80009dc <__udivmoddi4+0x98>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x12c>
 8000a5e:	2e00      	cmp	r6, #0
 8000a60:	f000 80af 	beq.w	8000bc2 <__udivmoddi4+0x27e>
 8000a64:	2100      	movs	r1, #0
 8000a66:	e9c6 0500 	strd	r0, r5, [r6]
 8000a6a:	4608      	mov	r0, r1
 8000a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a70:	fab3 f183 	clz	r1, r3
 8000a74:	2900      	cmp	r1, #0
 8000a76:	d14b      	bne.n	8000b10 <__udivmoddi4+0x1cc>
 8000a78:	42ab      	cmp	r3, r5
 8000a7a:	d302      	bcc.n	8000a82 <__udivmoddi4+0x13e>
 8000a7c:	4282      	cmp	r2, r0
 8000a7e:	f200 80b7 	bhi.w	8000bf0 <__udivmoddi4+0x2ac>
 8000a82:	1a84      	subs	r4, r0, r2
 8000a84:	eb65 0303 	sbc.w	r3, r5, r3
 8000a88:	2001      	movs	r0, #1
 8000a8a:	469e      	mov	lr, r3
 8000a8c:	2e00      	cmp	r6, #0
 8000a8e:	d0aa      	beq.n	80009e6 <__udivmoddi4+0xa2>
 8000a90:	e9c6 4e00 	strd	r4, lr, [r6]
 8000a94:	e7a7      	b.n	80009e6 <__udivmoddi4+0xa2>
 8000a96:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9e:	4097      	lsls	r7, r2
 8000aa0:	fa20 f00c 	lsr.w	r0, r0, ip
 8000aa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aa8:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000aac:	4318      	orrs	r0, r3
 8000aae:	fbbc f1fe 	udiv	r1, ip, lr
 8000ab2:	0c05      	lsrs	r5, r0, #16
 8000ab4:	fb0e cc11 	mls	ip, lr, r1, ip
 8000ab8:	fa1f f887 	uxth.w	r8, r7
 8000abc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000ac0:	fb01 f308 	mul.w	r3, r1, r8
 8000ac4:	42ab      	cmp	r3, r5
 8000ac6:	fa04 f402 	lsl.w	r4, r4, r2
 8000aca:	d909      	bls.n	8000ae0 <__udivmoddi4+0x19c>
 8000acc:	197d      	adds	r5, r7, r5
 8000ace:	f101 3cff 	add.w	ip, r1, #4294967295
 8000ad2:	f080 808b 	bcs.w	8000bec <__udivmoddi4+0x2a8>
 8000ad6:	42ab      	cmp	r3, r5
 8000ad8:	f240 8088 	bls.w	8000bec <__udivmoddi4+0x2a8>
 8000adc:	3902      	subs	r1, #2
 8000ade:	443d      	add	r5, r7
 8000ae0:	1aeb      	subs	r3, r5, r3
 8000ae2:	b285      	uxth	r5, r0
 8000ae4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ae8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000af0:	fb00 f308 	mul.w	r3, r0, r8
 8000af4:	42ab      	cmp	r3, r5
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x1c4>
 8000af8:	197d      	adds	r5, r7, r5
 8000afa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000afe:	d271      	bcs.n	8000be4 <__udivmoddi4+0x2a0>
 8000b00:	42ab      	cmp	r3, r5
 8000b02:	d96f      	bls.n	8000be4 <__udivmoddi4+0x2a0>
 8000b04:	3802      	subs	r0, #2
 8000b06:	443d      	add	r5, r7
 8000b08:	1aeb      	subs	r3, r5, r3
 8000b0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b0e:	e778      	b.n	8000a02 <__udivmoddi4+0xbe>
 8000b10:	f1c1 0c20 	rsb	ip, r1, #32
 8000b14:	408b      	lsls	r3, r1
 8000b16:	fa22 f70c 	lsr.w	r7, r2, ip
 8000b1a:	431f      	orrs	r7, r3
 8000b1c:	fa20 f40c 	lsr.w	r4, r0, ip
 8000b20:	fa05 f301 	lsl.w	r3, r5, r1
 8000b24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b28:	fa25 f50c 	lsr.w	r5, r5, ip
 8000b2c:	431c      	orrs	r4, r3
 8000b2e:	0c23      	lsrs	r3, r4, #16
 8000b30:	fbb5 f9fe 	udiv	r9, r5, lr
 8000b34:	fa1f f887 	uxth.w	r8, r7
 8000b38:	fb0e 5519 	mls	r5, lr, r9, r5
 8000b3c:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000b40:	fb09 fa08 	mul.w	sl, r9, r8
 8000b44:	45aa      	cmp	sl, r5
 8000b46:	fa02 f201 	lsl.w	r2, r2, r1
 8000b4a:	fa00 f301 	lsl.w	r3, r0, r1
 8000b4e:	d908      	bls.n	8000b62 <__udivmoddi4+0x21e>
 8000b50:	197d      	adds	r5, r7, r5
 8000b52:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b56:	d247      	bcs.n	8000be8 <__udivmoddi4+0x2a4>
 8000b58:	45aa      	cmp	sl, r5
 8000b5a:	d945      	bls.n	8000be8 <__udivmoddi4+0x2a4>
 8000b5c:	f1a9 0902 	sub.w	r9, r9, #2
 8000b60:	443d      	add	r5, r7
 8000b62:	eba5 050a 	sub.w	r5, r5, sl
 8000b66:	b2a4      	uxth	r4, r4
 8000b68:	fbb5 f0fe 	udiv	r0, r5, lr
 8000b6c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000b70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b74:	fb00 f808 	mul.w	r8, r0, r8
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	d907      	bls.n	8000b8c <__udivmoddi4+0x248>
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	f100 35ff 	add.w	r5, r0, #4294967295
 8000b82:	d22d      	bcs.n	8000be0 <__udivmoddi4+0x29c>
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d92b      	bls.n	8000be0 <__udivmoddi4+0x29c>
 8000b88:	3802      	subs	r0, #2
 8000b8a:	443c      	add	r4, r7
 8000b8c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b90:	eba4 0408 	sub.w	r4, r4, r8
 8000b94:	fba0 8902 	umull	r8, r9, r0, r2
 8000b98:	454c      	cmp	r4, r9
 8000b9a:	46c6      	mov	lr, r8
 8000b9c:	464d      	mov	r5, r9
 8000b9e:	d319      	bcc.n	8000bd4 <__udivmoddi4+0x290>
 8000ba0:	d016      	beq.n	8000bd0 <__udivmoddi4+0x28c>
 8000ba2:	b15e      	cbz	r6, 8000bbc <__udivmoddi4+0x278>
 8000ba4:	ebb3 020e 	subs.w	r2, r3, lr
 8000ba8:	eb64 0405 	sbc.w	r4, r4, r5
 8000bac:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bb0:	40ca      	lsrs	r2, r1
 8000bb2:	ea4c 0202 	orr.w	r2, ip, r2
 8000bb6:	40cc      	lsrs	r4, r1
 8000bb8:	e9c6 2400 	strd	r2, r4, [r6]
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	4631      	mov	r1, r6
 8000bc4:	4630      	mov	r0, r6
 8000bc6:	e70e      	b.n	80009e6 <__udivmoddi4+0xa2>
 8000bc8:	46ac      	mov	ip, r5
 8000bca:	e6ed      	b.n	80009a8 <__udivmoddi4+0x64>
 8000bcc:	4618      	mov	r0, r3
 8000bce:	e701      	b.n	80009d4 <__udivmoddi4+0x90>
 8000bd0:	4543      	cmp	r3, r8
 8000bd2:	d2e6      	bcs.n	8000ba2 <__udivmoddi4+0x25e>
 8000bd4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bd8:	eb69 0507 	sbc.w	r5, r9, r7
 8000bdc:	3801      	subs	r0, #1
 8000bde:	e7e0      	b.n	8000ba2 <__udivmoddi4+0x25e>
 8000be0:	4628      	mov	r0, r5
 8000be2:	e7d3      	b.n	8000b8c <__udivmoddi4+0x248>
 8000be4:	4660      	mov	r0, ip
 8000be6:	e78f      	b.n	8000b08 <__udivmoddi4+0x1c4>
 8000be8:	4681      	mov	r9, r0
 8000bea:	e7ba      	b.n	8000b62 <__udivmoddi4+0x21e>
 8000bec:	4661      	mov	r1, ip
 8000bee:	e777      	b.n	8000ae0 <__udivmoddi4+0x19c>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	e74b      	b.n	8000a8c <__udivmoddi4+0x148>
 8000bf4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bf8:	443d      	add	r5, r7
 8000bfa:	e715      	b.n	8000a28 <__udivmoddi4+0xe4>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	443c      	add	r4, r7
 8000c00:	e726      	b.n	8000a50 <__udivmoddi4+0x10c>
 8000c02:	bf00      	nop

08000c04 <__aeabi_idiv0>:
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
}
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c3c:	2004      	movs	r0, #4
 8000c3e:	f7ff ffe3 	bl	8000c08 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c42:	2001      	movs	r0, #1
 8000c44:	f7ff ffe0 	bl	8000c08 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	200b      	movs	r0, #11
 8000c4e:	f001 f814 	bl	8001c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c52:	200b      	movs	r0, #11
 8000c54:	f001 f82b 	bl	8001cae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	200c      	movs	r0, #12
 8000c5e:	f001 f80c 	bl	8001c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c62:	200c      	movs	r0, #12
 8000c64:	f001 f823 	bl	8001cae <HAL_NVIC_EnableIRQ>

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c90:	68fb      	ldr	r3, [r7, #12]
}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff ffdb 	bl	8000c6c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f001 fc08 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cde:	f001 fa99 	bl	8002214 <HAL_GPIO_Init>

}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b090      	sub	sp, #64	; 0x40
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf2:	f000 fe61 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf6:	f000 f8db 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfa:	f7ff ffcf 	bl	8000c9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cfe:	f7ff ff9b 	bl	8000c38 <MX_DMA_Init>
  MX_RTC_Init();
 8000d02:	f000 f959 	bl	8000fb8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000d06:	f000 fd39 	bl	800177c <MX_USART2_UART_Init>
  MX_SUBGHZ_Init();
 8000d0a:	f000 faa5 	bl	8001258 <MX_SUBGHZ_Init>
  MX_LoRaWAN_Init();
 8000d0e:	f005 f8bb 	bl	8005e88 <MX_LoRaWAN_Init>
  /* USER CODE BEGIN 2 */
   LmHandlerConfigure(&LoRaWANParams);
 8000d12:	485c      	ldr	r0, [pc, #368]	; (8000e84 <main+0x198>)
 8000d14:	f006 fdfa 	bl	800790c <LmHandlerConfigure>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8000d18:	f005 f8be 	bl	8005e98 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */
    LmHandlerProcess();
 8000d1c:	f006 fea2 	bl	8007a64 <LmHandlerProcess>
        static bool first = true;
    LmHandlerMsgTypes_t confirm = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    static LmHandlerErrorStatus_t send_status = 0;
    static uint32_t time;
    if (first == true || HAL_GetTick() - time > 10000) {
 8000d26:	4b58      	ldr	r3, [pc, #352]	; (8000e88 <main+0x19c>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10a      	bne.n	8000d44 <main+0x58>
 8000d2e:	f000 fb90 	bl	8001452 <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	4b55      	ldr	r3, [pc, #340]	; (8000e8c <main+0x1a0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	f240 8099 	bls.w	8000e76 <main+0x18a>
        time = HAL_GetTick();
 8000d44:	f000 fb85 	bl	8001452 <HAL_GetTick>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4a50      	ldr	r2, [pc, #320]	; (8000e8c <main+0x1a0>)
 8000d4c:	6013      	str	r3, [r2, #0]
    } else {
        return;
    }

    if(first == false && LoRaMacIsBusy() == true) {
 8000d4e:	4b4e      	ldr	r3, [pc, #312]	; (8000e88 <main+0x19c>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	f083 0301 	eor.w	r3, r3, #1
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d008      	beq.n	8000d6e <main+0x82>
 8000d5c:	f008 fda0 	bl	80098a0 <LoRaMacIsBusy>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <main+0x82>
        printf("The Mac is Busy\r\n");
 8000d66:	484a      	ldr	r0, [pc, #296]	; (8000e90 <main+0x1a4>)
 8000d68:	f015 feec 	bl	8016b44 <puts>
    if(first == false && LoRaMacIsBusy() == true) {
 8000d6c:	e082      	b.n	8000e74 <main+0x188>
    } else if(LmHandlerJoinStatus() == LORAMAC_HANDLER_RESET) {
 8000d6e:	f006 fedd 	bl	8007b2c <LmHandlerJoinStatus>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1cf      	bne.n	8000d18 <main+0x2c>
        first = false;
 8000d78:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <main+0x19c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
        MibRequestConfirm_t mibReq = {0};
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2224      	movs	r2, #36	; 0x24
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f015 fe4f 	bl	8016a28 <memset>

        /*打印DevEui 与 AppEui参数*/
        mibReq.Type = MIB_DEV_EUI;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	703b      	strb	r3, [r7, #0]
        LoRaMacMibGetRequestConfirm(&mibReq);
 8000d8e:	463b      	mov	r3, r7
 8000d90:	4618      	mov	r0, r3
 8000d92:	f00b fbb7 	bl	800c504 <LoRaMacMibGetRequestConfirm>
        printf( "Default DevEui      : %02X", mibReq.Param.DevEui[0] );
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	483d      	ldr	r0, [pc, #244]	; (8000e94 <main+0x1a8>)
 8000d9e:	f015 fe4b 	bl	8016a38 <iprintf>
        for( int i = 1; i < 8; i++ ){
 8000da2:	2301      	movs	r3, #1
 8000da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000da6:	e00a      	b.n	8000dbe <main+0xd2>
            printf( "-%02X", mibReq.Param.DevEui[i] );
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	4839      	ldr	r0, [pc, #228]	; (8000e98 <main+0x1ac>)
 8000db4:	f015 fe40 	bl	8016a38 <iprintf>
        for( int i = 1; i < 8; i++ ){
 8000db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dba:	3301      	adds	r3, #1
 8000dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dc0:	2b07      	cmp	r3, #7
 8000dc2:	ddf1      	ble.n	8000da8 <main+0xbc>
        }
            printf( "\r\n" );
 8000dc4:	4835      	ldr	r0, [pc, #212]	; (8000e9c <main+0x1b0>)
 8000dc6:	f015 febd 	bl	8016b44 <puts>
        
        /*打印 AppKey */
        mibReq.Type = MIB_APP_KEY; 
 8000dca:	2307      	movs	r3, #7
 8000dcc:	703b      	strb	r3, [r7, #0]
        LoRaMacMibGetRequestConfirm(&mibReq);
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f00b fb97 	bl	800c504 <LoRaMacMibGetRequestConfirm>
        printf( "AppKey      : %02X", mibReq.Param.AppKey[0] );
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4830      	ldr	r0, [pc, #192]	; (8000ea0 <main+0x1b4>)
 8000dde:	f015 fe2b 	bl	8016a38 <iprintf>
        for( int i = 1; i < 16; i++ ){
 8000de2:	2301      	movs	r3, #1
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000de6:	e00a      	b.n	8000dfe <main+0x112>
            printf( "-%02X", mibReq.Param.AppKey[i] );
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dec:	4413      	add	r3, r2
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	4829      	ldr	r0, [pc, #164]	; (8000e98 <main+0x1ac>)
 8000df4:	f015 fe20 	bl	8016a38 <iprintf>
        for( int i = 1; i < 16; i++ ){
 8000df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8000dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	ddf1      	ble.n	8000de8 <main+0xfc>
        }
            printf( "\r\n" );
 8000e04:	4825      	ldr	r0, [pc, #148]	; (8000e9c <main+0x1b0>)
 8000e06:	f015 fe9d 	bl	8016b44 <puts>


        mibReq.Type = MIB_JOIN_EUI; //其实就是appeui
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	703b      	strb	r3, [r7, #0]
        LoRaMacMibGetRequestConfirm(&mibReq);
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4618      	mov	r0, r3
 8000e12:	f00b fb77 	bl	800c504 <LoRaMacMibGetRequestConfirm>
        printf( "AppEui      : %02X", mibReq.Param.JoinEui[0] );
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4821      	ldr	r0, [pc, #132]	; (8000ea4 <main+0x1b8>)
 8000e1e:	f015 fe0b 	bl	8016a38 <iprintf>
        for( int i = 1; i < 8; i++ ){
 8000e22:	2301      	movs	r3, #1
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
 8000e26:	e00a      	b.n	8000e3e <main+0x152>
            printf( "-%02X", mibReq.Param.JoinEui[i] );
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e2c:	4413      	add	r3, r2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	4819      	ldr	r0, [pc, #100]	; (8000e98 <main+0x1ac>)
 8000e34:	f015 fe00 	bl	8016a38 <iprintf>
        for( int i = 1; i < 8; i++ ){
 8000e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e40:	2b07      	cmp	r3, #7
 8000e42:	ddf1      	ble.n	8000e28 <main+0x13c>
        }
            printf( "\r\n" );
 8000e44:	4815      	ldr	r0, [pc, #84]	; (8000e9c <main+0x1b0>)
 8000e46:	f015 fe7d 	bl	8016b44 <puts>


        /*设置信道掩码*/
        uint16_t chan_mask[6] = {0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff};
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <main+0x1bc>)
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        mibReq.Type = MIB_CHANNELS_DEFAULT_MASK;
 8000e56:	2317      	movs	r3, #23
 8000e58:	703b      	strb	r3, [r7, #0]
        mibReq.Param.ChannelsMask = chan_mask;
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	607b      	str	r3, [r7, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8000e60:	463b      	mov	r3, r7
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00b fcac 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>

        printf("The netting\r\n");
 8000e68:	4810      	ldr	r0, [pc, #64]	; (8000eac <main+0x1c0>)
 8000e6a:	f015 fe6b 	bl	8016b44 <puts>
        LmHandlerJoin(ACTIVATION_TYPE_OTAA);
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f006 fe02 	bl	8007a78 <LmHandlerJoin>
  {
 8000e74:	e750      	b.n	8000d18 <main+0x2c>
        return;
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
    }
  }
  /* USER CODE END 3 */
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3740      	adds	r7, #64	; 0x40
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000010 	.word	0x20000010
 8000e8c:	20000170 	.word	0x20000170
 8000e90:	08017ae0 	.word	0x08017ae0
 8000e94:	08017af4 	.word	0x08017af4
 8000e98:	08017b10 	.word	0x08017b10
 8000e9c:	08017b18 	.word	0x08017b18
 8000ea0:	08017b1c 	.word	0x08017b1c
 8000ea4:	08017b30 	.word	0x08017b30
 8000ea8:	08017b54 	.word	0x08017b54
 8000eac:	08017b44 	.word	0x08017b44

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b09a      	sub	sp, #104	; 0x68
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	2248      	movs	r2, #72	; 0x48
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f015 fdb2 	bl	8016a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
 8000ed4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <SystemClock_Config+0xa8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ede:	4a1e      	ldr	r2, [pc, #120]	; (8000f58 <SystemClock_Config+0xa8>)
 8000ee0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <SystemClock_Config+0xa8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000efc:	2340      	movs	r3, #64	; 0x40
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f04:	2301      	movs	r3, #1
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 fda1 	bl	8002a58 <HAL_RCC_OscConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000f1c:	f000 f81e 	bl	8000f5c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000f20:	234f      	movs	r3, #79	; 0x4f
 8000f22:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f24:	2301      	movs	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 f924 	bl	800318c <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f4a:	f000 f807 	bl	8000f5c <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3768      	adds	r7, #104	; 0x68
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	58000400 	.word	0x58000400

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>

08000f66 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b085      	sub	sp, #20
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
	...

08000fb8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b092      	sub	sp, #72	; 0x48
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000fbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	222c      	movs	r2, #44	; 0x2c
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f015 fd25 	bl	8016a28 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fde:	4b46      	ldr	r3, [pc, #280]	; (80010f8 <MX_RTC_Init+0x140>)
 8000fe0:	4a46      	ldr	r2, [pc, #280]	; (80010fc <MX_RTC_Init+0x144>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fe4:	4b44      	ldr	r3, [pc, #272]	; (80010f8 <MX_RTC_Init+0x140>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fea:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <MX_RTC_Init+0x140>)
 8000fec:	227f      	movs	r2, #127	; 0x7f
 8000fee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ff0:	4b41      	ldr	r3, [pc, #260]	; (80010f8 <MX_RTC_Init+0x140>)
 8000ff2:	22ff      	movs	r2, #255	; 0xff
 8000ff4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ff6:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <MX_RTC_Init+0x140>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ffc:	4b3e      	ldr	r3, [pc, #248]	; (80010f8 <MX_RTC_Init+0x140>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <MX_RTC_Init+0x140>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001008:	4b3b      	ldr	r3, [pc, #236]	; (80010f8 <MX_RTC_Init+0x140>)
 800100a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001010:	4b39      	ldr	r3, [pc, #228]	; (80010f8 <MX_RTC_Init+0x140>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001016:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <MX_RTC_Init+0x140>)
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800101c:	4836      	ldr	r0, [pc, #216]	; (80010f8 <MX_RTC_Init+0x140>)
 800101e:	f002 fd75 	bl	8003b0c <HAL_RTC_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8001028:	f7ff ff98 	bl	8000f5c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8001032:	2300      	movs	r3, #0
 8001034:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8001038:	2300      	movs	r3, #0
 800103a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800103e:	2300      	movs	r3, #0
 8001040:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001046:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800104a:	2201      	movs	r2, #1
 800104c:	4619      	mov	r1, r3
 800104e:	482a      	ldr	r0, [pc, #168]	; (80010f8 <MX_RTC_Init+0x140>)
 8001050:	f002 fdd6 	bl	8003c00 <HAL_RTC_SetTime>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 800105a:	f7ff ff7f 	bl	8000f5c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800105e:	2301      	movs	r3, #1
 8001060:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001064:	2301      	movs	r3, #1
 8001066:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 800106a:	2301      	movs	r3, #1
 800106c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001070:	2300      	movs	r3, #0
 8001072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001076:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800107a:	2201      	movs	r2, #1
 800107c:	4619      	mov	r1, r3
 800107e:	481e      	ldr	r0, [pc, #120]	; (80010f8 <MX_RTC_Init+0x140>)
 8001080:	f002 fe5a 	bl	8003d38 <HAL_RTC_SetDate>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 800108a:	f7ff ff67 	bl	8000f5c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800108e:	2300      	movs	r3, #0
 8001090:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001092:	2300      	movs	r3, #0
 8001094:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001096:	2300      	movs	r3, #0
 8001098:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2201      	movs	r2, #1
 80010c2:	4619      	mov	r1, r3
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <MX_RTC_Init+0x140>)
 80010c6:	f002 febd 	bl	8003e44 <HAL_RTC_SetAlarm_IT>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 80010d0:	f7ff ff44 	bl	8000f5c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80010d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2201      	movs	r2, #1
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_RTC_Init+0x140>)
 80010e2:	f002 feaf 	bl	8003e44 <HAL_RTC_SetAlarm_IT>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80010ec:	f7ff ff36 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3748      	adds	r7, #72	; 0x48
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20001088 	.word	0x20001088
 80010fc:	40002800 	.word	0x40002800

08001100 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b090      	sub	sp, #64	; 0x40
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	2238      	movs	r2, #56	; 0x38
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f015 fc89 	bl	8016a28 <memset>
  if(rtcHandle->Instance==RTC)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_RTC_MspInit+0x64>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d11d      	bne.n	800115c <HAL_RTC_MspInit+0x5c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001124:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fbd1 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800113c:	f7ff ff0e 	bl	8000f5c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001140:	f7ff ff11 	bl	8000f66 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001144:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001148:	f7ff ff1d 	bl	8000f86 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	202a      	movs	r0, #42	; 0x2a
 8001152:	f000 fd92 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001156:	202a      	movs	r0, #42	; 0x2a
 8001158:	f000 fda9 	bl	8001cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800115c:	bf00      	nop
 800115e:	3740      	adds	r7, #64	; 0x40
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40002800 	.word	0x40002800

08001168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <NMI_Handler+0x4>

0800117a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <HardFault_Handler+0x4>

08001180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <MemManage_Handler+0x4>

08001186 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <UsageFault_Handler+0x4>

08001192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ba:	f000 fc57 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <DMA1_Channel1_IRQHandler+0x10>)
 80011ca:	f000 fef1 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200010cc 	.word	0x200010cc

080011d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <DMA1_Channel2_IRQHandler+0x10>)
 80011de:	f000 fee7 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000112c 	.word	0x2000112c

080011ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <USART2_IRQHandler+0x10>)
 80011f2:	f003 fd4d 	bl	8004c90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000118c 	.word	0x2000118c

08001200 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <RTC_Alarm_IRQHandler+0x10>)
 8001206:	f002 ff29 	bl	800405c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20001088 	.word	0x20001088

08001214 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <SUBGHZ_Radio_IRQHandler+0x10>)
 800121a:	f003 fb29 	bl	8004870 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200010c0 	.word	0x200010c0

08001228 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001234:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001236:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4313      	orrs	r3, r2
 800123e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001244:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4013      	ands	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800124c:	68fb      	ldr	r3, [r7, #12]
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_SUBGHZ_Init+0x20>)
 800125e:	2210      	movs	r2, #16
 8001260:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_SUBGHZ_Init+0x20>)
 8001264:	f003 f888 	bl	8004378 <HAL_SUBGHZ_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800126e:	f7ff fe75 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200010c0 	.word	0x200010c0

0800127c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001284:	2001      	movs	r0, #1
 8001286:	f7ff ffcf 	bl	8001228 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2032      	movs	r0, #50	; 0x32
 8001290:	f000 fcf3 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001294:	2032      	movs	r0, #50	; 0x32
 8001296:	f000 fd0a 	bl	8001cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80012a8:	4b02      	ldr	r3, [pc, #8]	; (80012b4 <LL_FLASH_GetUDN+0x10>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	1fff7580 	.word	0x1fff7580

080012b8 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <LL_FLASH_GetDeviceID+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	1fff7584 	.word	0x1fff7584

080012d0 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <LL_FLASH_GetSTCompanyID+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	0a1b      	lsrs	r3, r3, #8
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	1fff7584 	.word	0x1fff7584

080012e8 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80012fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	80fb      	strh	r3, [r7, #6]

  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001314:	88fb      	ldrh	r3, [r7, #6]
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800132c:	f7ff ffba 	bl	80012a4 <LL_FLASH_GetUDN>
 8001330:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d138      	bne.n	80013ac <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800133a:	f000 fba9 	bl	8001a90 <HAL_GetUIDw0>
 800133e:	4604      	mov	r4, r0
 8001340:	f000 fbba 	bl	8001ab8 <HAL_GetUIDw2>
 8001344:	4603      	mov	r3, r0
 8001346:	4423      	add	r3, r4
 8001348:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 800134a:	f000 fbab 	bl	8001aa4 <HAL_GetUIDw1>
 800134e:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	0e1a      	lsrs	r2, r3, #24
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3307      	adds	r3, #7
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	0c1a      	lsrs	r2, r3, #16
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3306      	adds	r3, #6
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	0a1a      	lsrs	r2, r3, #8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3305      	adds	r3, #5
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3304      	adds	r3, #4
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	0e1a      	lsrs	r2, r3, #24
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3303      	adds	r3, #3
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	0c1a      	lsrs	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3302      	adds	r3, #2
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	0a1a      	lsrs	r2, r3, #8
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3301      	adds	r3, #1
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80013aa:	e031      	b.n	8001410 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3307      	adds	r3, #7
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	0a1a      	lsrs	r2, r3, #8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3306      	adds	r3, #6
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	0c1a      	lsrs	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3305      	adds	r3, #5
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	0e1a      	lsrs	r2, r3, #24
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3304      	adds	r3, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80013da:	f7ff ff6d 	bl	80012b8 <LL_FLASH_GetDeviceID>
 80013de:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3303      	adds	r3, #3
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80013ea:	f7ff ff71 	bl	80012d0 <LL_FLASH_GetSTCompanyID>
 80013ee:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3302      	adds	r3, #2
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	0a1a      	lsrs	r2, r3, #8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3301      	adds	r3, #1
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	0c1b      	lsrs	r3, r3, #16
 800140a:	b2da      	uxtb	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	701a      	strb	r2, [r3, #0]
}
 8001410:	bf00      	nop
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}

08001418 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001422:	f7ff ff3f 	bl	80012a4 <LL_FLASH_GetUDN>
 8001426:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142e:	d10b      	bne.n	8001448 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001430:	f000 fb2e 	bl	8001a90 <HAL_GetUIDw0>
 8001434:	4604      	mov	r4, r0
 8001436:	f000 fb35 	bl	8001aa4 <HAL_GetUIDw1>
 800143a:	4603      	mov	r3, r0
 800143c:	405c      	eors	r4, r3
 800143e:	f000 fb3b 	bl	8001ab8 <HAL_GetUIDw2>
 8001442:	4603      	mov	r3, r0
 8001444:	4063      	eors	r3, r4
 8001446:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001448:	687b      	ldr	r3, [r7, #4]

}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}

08001452 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001456:	f000 f8f6 	bl	8001646 <TIMER_IF_GetTimerValue>
 800145a:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 800145c:	4618      	mov	r0, r3
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f919 	bl	80016a2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	e00a      	b.n	80014a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800148a:	f3af 8000 	nop.w
 800148e:	4601      	mov	r1, r0
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	60ba      	str	r2, [r7, #8]
 8001496:	b2ca      	uxtb	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbf0      	blt.n	800148a <_read+0x12>
	}

return len;
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e009      	b.n	80014d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	60ba      	str	r2, [r7, #8]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbf1      	blt.n	80014c4 <_write+0x12>
	}
	return len;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_close>:

int _close(int file)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
	return -1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001510:	605a      	str	r2, [r3, #4]
	return 0;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <_isatty>:

int _isatty(int file)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
	return 1;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001532:	b480      	push	{r7}
 8001534:	b085      	sub	sp, #20
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
	return 0;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
	...

0800154c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <_sbrk+0x5c>)
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <_sbrk+0x60>)
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <_sbrk+0x64>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <_sbrk+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800157c:	f015 fa2a 	bl	80169d4 <__errno>
 8001580:	4603      	mov	r3, r0
 8001582:	220c      	movs	r2, #12
 8001584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	e009      	b.n	80015a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <_sbrk+0x64>)
 800159c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20010000 	.word	0x20010000
 80015ac:	00000400 	.word	0x00000400
 80015b0:	20000174 	.word	0x20000174
 80015b4:	200012d0 	.word	0x200012d0

080015b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 80015fc:	79fb      	ldrb	r3, [r7, #7]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 800160c:	4b02      	ldr	r3, [pc, #8]	; (8001618 <TIMER_IF_SetTimerContext+0x10>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	20000178 	.word	0x20000178

0800161c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <TIMER_IF_GetTimerContext+0x10>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000178 	.word	0x20000178

08001630 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 800163a:	687b      	ldr	r3, [r7, #4]
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001650:	687b      	ldr	r3, [r7, #4]
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8001666:	687b      	ldr	r3, [r7, #4]
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr

08001672 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001672:	b480      	push	{r7}
 8001674:	b085      	sub	sp, #20
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  return seconds;
 80016c0:	68fb      	ldr	r3, [r7, #12]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  return ret;
 80016fa:	687b      	ldr	r3, [r7, #4]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  return ret;
 8001710:	687b      	ldr	r3, [r7, #4]
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <LL_AHB2_GRP1_EnableClock>:
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001728:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800172a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4313      	orrs	r3, r2
 8001732:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001740:	68fb      	ldr	r3, [r7, #12]
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <LL_APB1_GRP1_EnableClock>:
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001758:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800175a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4313      	orrs	r3, r2
 8001762:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001768:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4013      	ands	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001770:	68fb      	ldr	r3, [r7, #12]
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <MX_USART2_UART_Init+0x90>)
 8001782:	4a23      	ldr	r2, [pc, #140]	; (8001810 <MX_USART2_UART_Init+0x94>)
 8001784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001786:	4b21      	ldr	r3, [pc, #132]	; (800180c <MX_USART2_UART_Init+0x90>)
 8001788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800178c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <MX_USART2_UART_Init+0x90>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <MX_USART2_UART_Init+0x90>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <MX_USART2_UART_Init+0x90>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <MX_USART2_UART_Init+0x90>)
 80017a2:	220c      	movs	r2, #12
 80017a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <MX_USART2_UART_Init+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_USART2_UART_Init+0x90>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <MX_USART2_UART_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_USART2_UART_Init+0x90>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <MX_USART2_UART_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c4:	4811      	ldr	r0, [pc, #68]	; (800180c <MX_USART2_UART_Init+0x90>)
 80017c6:	f003 fa12 	bl	8004bee <HAL_UART_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80017d0:	f7ff fbc4 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d4:	2100      	movs	r1, #0
 80017d6:	480d      	ldr	r0, [pc, #52]	; (800180c <MX_USART2_UART_Init+0x90>)
 80017d8:	f004 fa8d 	bl	8005cf6 <HAL_UARTEx_SetTxFifoThreshold>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80017e2:	f7ff fbbb 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e6:	2100      	movs	r1, #0
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <MX_USART2_UART_Init+0x90>)
 80017ea:	f004 fac2 	bl	8005d72 <HAL_UARTEx_SetRxFifoThreshold>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80017f4:	f7ff fbb2 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_USART2_UART_Init+0x90>)
 80017fa:	f004 fa44 	bl	8005c86 <HAL_UARTEx_DisableFifoMode>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001804:	f7ff fbaa 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000118c 	.word	0x2000118c
 8001810:	40004400 	.word	0x40004400

08001814 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b096      	sub	sp, #88	; 0x58
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	2238      	movs	r2, #56	; 0x38
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f015 f8f7 	bl	8016a28 <memset>
  if(uartHandle->Instance==USART2)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a43      	ldr	r2, [pc, #268]	; (800194c <HAL_UART_MspInit+0x138>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d17f      	bne.n	8001944 <HAL_UART_MspInit+0x130>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001844:	2302      	movs	r3, #2
 8001846:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001848:	4b41      	ldr	r3, [pc, #260]	; (8001950 <HAL_UART_MspInit+0x13c>)
 800184a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4618      	mov	r0, r3
 8001852:	f002 f841 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800185c:	f7ff fb7e 	bl	8000f5c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001860:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001864:	f7ff ff72 	bl	800174c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	2001      	movs	r0, #1
 800186a:	f7ff ff57 	bl	800171c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800186e:	230c      	movs	r3, #12
 8001870:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800187e:	2307      	movs	r3, #7
 8001880:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001886:	4619      	mov	r1, r3
 8001888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188c:	f000 fcc2 	bl	8002214 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001890:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_UART_MspInit+0x140>)
 8001892:	4a31      	ldr	r2, [pc, #196]	; (8001958 <HAL_UART_MspInit+0x144>)
 8001894:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001896:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <HAL_UART_MspInit+0x140>)
 8001898:	2213      	movs	r2, #19
 800189a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_UART_MspInit+0x140>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a2:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <HAL_UART_MspInit+0x140>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <HAL_UART_MspInit+0x140>)
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ae:	4b29      	ldr	r3, [pc, #164]	; (8001954 <HAL_UART_MspInit+0x140>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <HAL_UART_MspInit+0x140>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_UART_MspInit+0x140>)
 80018bc:	2200      	movs	r2, #0
 80018be:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_UART_MspInit+0x140>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80018c6:	4823      	ldr	r0, [pc, #140]	; (8001954 <HAL_UART_MspInit+0x140>)
 80018c8:	f000 fa0c 	bl	8001ce4 <HAL_DMA_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80018d2:	f7ff fb43 	bl	8000f5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <HAL_UART_MspInit+0x140>)
 80018da:	67da      	str	r2, [r3, #124]	; 0x7c
 80018dc:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <HAL_UART_MspInit+0x140>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_UART_MspInit+0x148>)
 80018e4:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <HAL_UART_MspInit+0x14c>)
 80018e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80018e8:	4b1c      	ldr	r3, [pc, #112]	; (800195c <HAL_UART_MspInit+0x148>)
 80018ea:	2214      	movs	r2, #20
 80018ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_UART_MspInit+0x148>)
 80018f0:	2210      	movs	r2, #16
 80018f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_UART_MspInit+0x148>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_UART_MspInit+0x148>)
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_UART_MspInit+0x148>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_UART_MspInit+0x148>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <HAL_UART_MspInit+0x148>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_UART_MspInit+0x148>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001918:	4810      	ldr	r0, [pc, #64]	; (800195c <HAL_UART_MspInit+0x148>)
 800191a:	f000 f9e3 	bl	8001ce4 <HAL_DMA_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8001924:	f7ff fb1a 	bl	8000f5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a0c      	ldr	r2, [pc, #48]	; (800195c <HAL_UART_MspInit+0x148>)
 800192c:	679a      	str	r2, [r3, #120]	; 0x78
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_UART_MspInit+0x148>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2025      	movs	r0, #37	; 0x25
 800193a:	f000 f99e 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800193e:	2025      	movs	r0, #37	; 0x25
 8001940:	f000 f9b5 	bl	8001cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001944:	bf00      	nop
 8001946:	3758      	adds	r7, #88	; 0x58
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40004400 	.word	0x40004400
 8001950:	000c0004 	.word	0x000c0004
 8001954:	200010cc 	.word	0x200010cc
 8001958:	40020008 	.word	0x40020008
 800195c:	2000112c 	.word	0x2000112c
 8001960:	4002001c 	.word	0x4002001c

08001964 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001964:	480d      	ldr	r0, [pc, #52]	; (800199c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001966:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001968:	f7ff fe26 	bl	80015b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800196e:	490d      	ldr	r1, [pc, #52]	; (80019a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <LoopForever+0xe>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001984:	4c0a      	ldr	r4, [pc, #40]	; (80019b0 <LoopForever+0x16>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001992:	f015 f825 	bl	80169e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001996:	f7ff f9a9 	bl	8000cec <main>

0800199a <LoopForever>:

LoopForever:
    b LoopForever
 800199a:	e7fe      	b.n	800199a <LoopForever>
  ldr   r0, =_estack
 800199c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 80019a8:	080185c0 	.word	0x080185c0
  ldr r2, =_sbss
 80019ac:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 80019b0:	200012cc 	.word	0x200012cc

080019b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC_IRQHandler>
	...

080019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c2:	2003      	movs	r0, #3
 80019c4:	f000 f94e 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80019c8:	f001 fda4 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_Init+0x3c>)
 80019d0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d2:	200f      	movs	r0, #15
 80019d4:	f000 f810 	bl	80019f8 <HAL_InitTick>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	e001      	b.n	80019e8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019e4:	f7ff fbc0 	bl	8001168 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019e8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000014 	.word	0x20000014

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_InitTick+0x6c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d024      	beq.n	8001a56 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a0c:	f001 fd82 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_InitTick+0x6c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	4619      	mov	r1, r3
 8001a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f950 	bl	8001cca <HAL_SYSTICK_Config>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10f      	bne.n	8001a50 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b0f      	cmp	r3, #15
 8001a34:	d809      	bhi.n	8001a4a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a36:	2200      	movs	r2, #0
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3e:	f000 f91c 	bl	8001c7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_InitTick+0x70>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e007      	b.n	8001a5a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	e004      	b.n	8001a5a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e001      	b.n	8001a5a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000001c 	.word	0x2000001c
 8001a68:	20000018 	.word	0x20000018

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_IncTick+0x1c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_IncTick+0x20>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a03      	ldr	r2, [pc, #12]	; (8001a8c <HAL_IncTick+0x20>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	2000001c 	.word	0x2000001c
 8001a8c:	2000121c 	.word	0x2000121c

08001a90 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8001a94:	4b02      	ldr	r3, [pc, #8]	; (8001aa0 <HAL_GetUIDw0+0x10>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	1fff7590 	.word	0x1fff7590

08001aa4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001aa8:	4b02      	ldr	r3, [pc, #8]	; (8001ab4 <HAL_GetUIDw1+0x10>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	1fff7594 	.word	0x1fff7594

08001ab8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001abc:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <HAL_GetUIDw2+0x10>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	1fff7598 	.word	0x1fff7598

08001acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	60d3      	str	r3, [r2, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <__NVIC_GetPriorityGrouping+0x18>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	f003 0307 	and.w	r3, r3, #7
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	db0b      	blt.n	8001b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 021f 	and.w	r2, r3, #31
 8001b48:	4906      	ldr	r1, [pc, #24]	; (8001b64 <__NVIC_EnableIRQ+0x34>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	2001      	movs	r0, #1
 8001b52:	fa00 f202 	lsl.w	r2, r0, r2
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f7ff ff90 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff2d 	bl	8001acc <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c88:	f7ff ff44 	bl	8001b14 <__NVIC_GetPriorityGrouping>
 8001c8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	6978      	ldr	r0, [r7, #20]
 8001c94:	f7ff ff92 	bl	8001bbc <NVIC_EncodePriority>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff61 	bl	8001b68 <__NVIC_SetPriority>
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff37 	bl	8001b30 <__NVIC_EnableIRQ>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffa4 	bl	8001c20 <SysTick_Config>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e08e      	b.n	8001e14 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_DMA_Init+0x138>)
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d80f      	bhi.n	8001d22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <HAL_DMA_Init+0x13c>)
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a45      	ldr	r2, [pc, #276]	; (8001e24 <HAL_DMA_Init+0x140>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	009a      	lsls	r2, r3, #2
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a42      	ldr	r2, [pc, #264]	; (8001e28 <HAL_DMA_Init+0x144>)
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d20:	e00e      	b.n	8001d40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <HAL_DMA_Init+0x148>)
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a3d      	ldr	r2, [pc, #244]	; (8001e24 <HAL_DMA_Init+0x140>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	009a      	lsls	r2, r3, #2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a3c      	ldr	r2, [pc, #240]	; (8001e30 <HAL_DMA_Init+0x14c>)
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f9d2 	bl	800213c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001da0:	d102      	bne.n	8001da8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001db4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dbe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d010      	beq.n	8001dea <HAL_DMA_Init+0x106>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d80c      	bhi.n	8001dea <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f9fb 	bl	80021cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	e008      	b.n	8001dfc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40020407 	.word	0x40020407
 8001e20:	bffdfff8 	.word	0xbffdfff8
 8001e24:	cccccccd 	.word	0xcccccccd
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	bffdfbf8 	.word	0xbffdfbf8
 8001e30:	40020400 	.word	0x40020400

08001e34 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e04f      	b.n	8001ee6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d008      	beq.n	8001e64 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2204      	movs	r2, #4
 8001e56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e040      	b.n	8001ee6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 020e 	bic.w	r2, r2, #14
 8001e72:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	f003 021c 	and.w	r2, r3, #28
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001eb0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00c      	beq.n	8001ed4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ec8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ed2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d005      	beq.n	8001f14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e047      	b.n	8001fa4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 020e 	bic.w	r2, r2, #14
 8001f22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0201 	bic.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	f003 021c 	and.w	r2, r3, #28
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f202 	lsl.w	r2, r1, r2
 8001f56:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f60:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f78:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f82:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	4798      	blx	r3
    }
  }
  return status;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	f003 031c 	and.w	r3, r3, #28
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d027      	beq.n	800202c <HAL_DMA_IRQHandler+0x7c>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d022      	beq.n	800202c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d107      	bne.n	8002004 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0204 	bic.w	r2, r2, #4
 8002002:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	f003 021c 	and.w	r2, r3, #28
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	2104      	movs	r1, #4
 8002012:	fa01 f202 	lsl.w	r2, r1, r2
 8002016:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8081 	beq.w	8002124 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800202a:	e07b      	b.n	8002124 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	f003 031c 	and.w	r3, r3, #28
 8002034:	2202      	movs	r2, #2
 8002036:	409a      	lsls	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d03d      	beq.n	80020bc <HAL_DMA_IRQHandler+0x10c>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d038      	beq.n	80020bc <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 020a 	bic.w	r2, r2, #10
 8002066:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <HAL_DMA_IRQHandler+0x180>)
 8002078:	429a      	cmp	r2, r3
 800207a:	d909      	bls.n	8002090 <HAL_DMA_IRQHandler+0xe0>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	f003 031c 	and.w	r3, r3, #28
 8002084:	4a2b      	ldr	r2, [pc, #172]	; (8002134 <HAL_DMA_IRQHandler+0x184>)
 8002086:	2102      	movs	r1, #2
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	6053      	str	r3, [r2, #4]
 800208e:	e008      	b.n	80020a2 <HAL_DMA_IRQHandler+0xf2>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	f003 031c 	and.w	r3, r3, #28
 8002098:	4a27      	ldr	r2, [pc, #156]	; (8002138 <HAL_DMA_IRQHandler+0x188>)
 800209a:	2102      	movs	r1, #2
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d038      	beq.n	8002124 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80020ba:	e033      	b.n	8002124 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c0:	f003 031c 	and.w	r3, r3, #28
 80020c4:	2208      	movs	r2, #8
 80020c6:	409a      	lsls	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d02a      	beq.n	8002126 <HAL_DMA_IRQHandler+0x176>
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d025      	beq.n	8002126 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 020e 	bic.w	r2, r2, #14
 80020e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f003 021c 	and.w	r2, r3, #28
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2101      	movs	r1, #1
 80020f8:	fa01 f202 	lsl.w	r2, r1, r2
 80020fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002124:	bf00      	nop
 8002126:	bf00      	nop
}
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40020080 	.word	0x40020080
 8002134:	40020400 	.word	0x40020400
 8002138:	40020000 	.word	0x40020000

0800213c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800214c:	429a      	cmp	r2, r3
 800214e:	d813      	bhi.n	8002178 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800215c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	3b08      	subs	r3, #8
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	e011      	b.n	800219c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	089b      	lsrs	r3, r3, #2
 800217e:	009a      	lsls	r2, r3, #2
 8002180:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002182:	4413      	add	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	3b08      	subs	r3, #8
 8002190:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	3307      	adds	r3, #7
 800219a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80021a0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	2201      	movs	r2, #1
 80021aa:	409a      	lsls	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40020407 	.word	0x40020407
 80021c0:	cccccccd 	.word	0xcccccccd
 80021c4:	4002081c 	.word	0x4002081c
 80021c8:	40020880 	.word	0x40020880

080021cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021dc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	461a      	mov	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a08      	ldr	r2, [pc, #32]	; (8002210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2201      	movs	r2, #1
 80021fc:	409a      	lsls	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	1000823f 	.word	0x1000823f
 8002210:	40020940 	.word	0x40020940

08002214 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002222:	e140      	b.n	80024a6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8132 	beq.w	80024a0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d005      	beq.n	8002254 <HAL_GPIO_Init+0x40>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d130      	bne.n	80022b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800228a:	2201      	movs	r2, #1
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f003 0201 	and.w	r2, r3, #1
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d017      	beq.n	80022f2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d123      	bne.n	8002346 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3208      	adds	r2, #8
 8002340:	6939      	ldr	r1, [r7, #16]
 8002342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0203 	and.w	r2, r3, #3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 808c 	beq.w	80024a0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002388:	4a4e      	ldr	r2, [pc, #312]	; (80024c4 <HAL_GPIO_Init+0x2b0>)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3302      	adds	r3, #2
 8002390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	2207      	movs	r2, #7
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023b2:	d00d      	beq.n	80023d0 <HAL_GPIO_Init+0x1bc>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a44      	ldr	r2, [pc, #272]	; (80024c8 <HAL_GPIO_Init+0x2b4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d007      	beq.n	80023cc <HAL_GPIO_Init+0x1b8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a43      	ldr	r2, [pc, #268]	; (80024cc <HAL_GPIO_Init+0x2b8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d101      	bne.n	80023c8 <HAL_GPIO_Init+0x1b4>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e004      	b.n	80023d2 <HAL_GPIO_Init+0x1be>
 80023c8:	2307      	movs	r3, #7
 80023ca:	e002      	b.n	80023d2 <HAL_GPIO_Init+0x1be>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <HAL_GPIO_Init+0x1be>
 80023d0:	2300      	movs	r3, #0
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	f002 0203 	and.w	r2, r2, #3
 80023d8:	0092      	lsls	r2, r2, #2
 80023da:	4093      	lsls	r3, r2
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023e2:	4938      	ldr	r1, [pc, #224]	; (80024c4 <HAL_GPIO_Init+0x2b0>)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80023f0:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 80023f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023f6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002416:	4a2e      	ldr	r2, [pc, #184]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800241e:	4b2c      	ldr	r3, [pc, #176]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 8002420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002424:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002444:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800244c:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002470:	4a17      	ldr	r2, [pc, #92]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800249a:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3301      	adds	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f47f aeb7 	bne.w	8002224 <HAL_GPIO_Init+0x10>
  }
}
 80024b6:	bf00      	nop
 80024b8:	bf00      	nop
 80024ba:	371c      	adds	r7, #28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40010000 	.word	0x40010000
 80024c8:	48000400 	.word	0x48000400
 80024cc:	48000800 	.word	0x48000800
 80024d0:	58000800 	.word	0x58000800

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e4:	787b      	ldrb	r3, [r7, #1]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024f0:	e002      	b.n	80024f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
	...

08002504 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <HAL_PWR_EnableBkUpAccess+0x18>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a03      	ldr	r2, [pc, #12]	; (800251c <HAL_PWR_EnableBkUpAccess+0x18>)
 800250e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	58000400 	.word	0x58000400

08002520 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_PWREx_GetVoltageRange+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	58000400 	.word	0x58000400

08002538 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002548:	d101      	bne.n	800254e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	58000400 	.word	0x58000400

0800255c <LL_RCC_HSE_EnableTcxo>:
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800256a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <LL_RCC_HSE_DisableTcxo>:
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002586:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a6:	d101      	bne.n	80025ac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <LL_RCC_HSE_Enable>:
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80025ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
}
 80025ca:	bf00      	nop
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <LL_RCC_HSE_Disable>:
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80025d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <LL_RCC_HSE_IsReady>:
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80025f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002600:	d101      	bne.n	8002606 <LL_RCC_HSE_IsReady+0x18>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <LL_RCC_HSE_IsReady+0x1a>
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <LL_RCC_HSI_Enable>:
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800261e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <LL_RCC_HSI_Disable>:
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800263a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800263e:	6013      	str	r3, [r2, #0]
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <LL_RCC_HSI_IsReady>:
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800264c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265a:	d101      	bne.n	8002660 <LL_RCC_HSI_IsReady+0x18>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <LL_RCC_HSI_IsReady+0x1a>
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <LL_RCC_HSI_SetCalibTrimming>:
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	061b      	lsls	r3, r3, #24
 8002680:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <LL_RCC_LSE_IsReady>:
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d101      	bne.n	80026aa <LL_RCC_LSE_IsReady+0x18>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <LL_RCC_LSE_IsReady+0x1a>
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <LL_RCC_LSI_Enable>:
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80026b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <LL_RCC_LSI_Disable>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80026d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <LL_RCC_LSI_IsReady>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80026f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b02      	cmp	r3, #2
 8002706:	d101      	bne.n	800270c <LL_RCC_LSI_IsReady+0x18>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <LL_RCC_LSI_IsReady+0x1a>
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <LL_RCC_MSI_Enable>:
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800271a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6013      	str	r3, [r2, #0]
}
 800272a:	bf00      	nop
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr

08002732 <LL_RCC_MSI_Disable>:
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6013      	str	r3, [r2, #0]
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <LL_RCC_MSI_IsReady>:
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b02      	cmp	r3, #2
 800275e:	d101      	bne.n	8002764 <LL_RCC_MSI_IsReady+0x16>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <LL_RCC_MSI_IsReady+0x18>
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d101      	bne.n	8002784 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <LL_RCC_MSI_GetRange>:
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80027a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <LL_RCC_MSI_SetCalibTrimming>:
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80027c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <LL_RCC_SetSysClkSource>:
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80027ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <LL_RCC_GetSysClkSource>:
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800280e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 030c 	and.w	r3, r3, #12
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <LL_RCC_SetAHBPrescaler>:
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4313      	orrs	r3, r2
 800283a:	608b      	str	r3, [r1, #8]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <LL_RCC_SetAHB3Prescaler>:
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800284e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002852:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002856:	f023 020f 	bic.w	r2, r3, #15
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <LL_RCC_SetAPB1Prescaler>:
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800287a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002884:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <LL_RCC_SetAPB2Prescaler>:
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <LL_RCC_GetAHBPrescaler>:
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <LL_RCC_GetAHB3Prescaler>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80028d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <LL_RCC_GetAPB1Prescaler>:
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <LL_RCC_GetAPB2Prescaler>:
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002928:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292c:	6013      	str	r3, [r2, #0]
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800293a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002944:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002948:	6013      	str	r3, [r2, #0]
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002964:	d101      	bne.n	800296a <LL_RCC_PLL_IsReady+0x18>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LL_RCC_PLL_IsReady+0x1a>
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0303 	and.w	r3, r3, #3
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e0:	d101      	bne.n	80029e6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80029f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d101      	bne.n	8002a0a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a26:	d101      	bne.n	8002a2c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a48:	d101      	bne.n	8002a4e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e38a      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6a:	f7ff fece 	bl	800280a <LL_RCC_GetSysClkSource>
 8002a6e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a70:	f7ff ffa2 	bl	80029b8 <LL_RCC_PLL_GetMainSource>
 8002a74:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80c9 	beq.w	8002c16 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <HAL_RCC_OscConfig+0x3e>
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	d17b      	bne.n	8002b88 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d178      	bne.n	8002b88 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a96:	f7ff fe5a 	bl	800274e <LL_RCC_MSI_IsReady>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_OscConfig+0x54>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e369      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_RCC_OscConfig+0x72>
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac8:	e006      	b.n	8002ad8 <HAL_RCC_OscConfig+0x80>
 8002aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d222      	bcs.n	8002b22 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fd4f 	bl	8003584 <RCC_SetFlashLatencyFromMSIRange>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e347      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002afa:	f043 0308 	orr.w	r3, r3, #8
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fe4e 	bl	80027bc <LL_RCC_MSI_SetCalibTrimming>
 8002b20:	e021      	b.n	8002b66 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b2c:	f043 0308 	orr.w	r3, r3, #8
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fe35 	bl	80027bc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fd14 	bl	8003584 <RCC_SetFlashLatencyFromMSIRange>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e30c      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b66:	f000 fcd5 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4ab4      	ldr	r2, [pc, #720]	; (8002e40 <HAL_RCC_OscConfig+0x3e8>)
 8002b6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b70:	4bb4      	ldr	r3, [pc, #720]	; (8002e44 <HAL_RCC_OscConfig+0x3ec>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe ff3f 	bl	80019f8 <HAL_InitTick>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002b7e:	7cfb      	ldrb	r3, [r7, #19]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d047      	beq.n	8002c14 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	e2fb      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d02c      	beq.n	8002bea <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b90:	f7ff fdc1 	bl	8002716 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b94:	f7fe fc5d 	bl	8001452 <HAL_GetTick>
 8002b98:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b9c:	f7fe fc59 	bl	8001452 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e2e8      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002bae:	f7ff fdce 	bl	800274e <LL_RCC_MSI_IsReady>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f1      	beq.n	8002b9c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc2:	f043 0308 	orr.w	r3, r3, #8
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fdea 	bl	80027bc <LL_RCC_MSI_SetCalibTrimming>
 8002be8:	e015      	b.n	8002c16 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bea:	f7ff fda2 	bl	8002732 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bee:	f7fe fc30 	bl	8001452 <HAL_GetTick>
 8002bf2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bf6:	f7fe fc2c 	bl	8001452 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e2bb      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c08:	f7ff fda1 	bl	800274e <LL_RCC_MSI_IsReady>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f1      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x19e>
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c14:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d05f      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_OscConfig+0x1dc>
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d10d      	bne.n	8002c4a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d10a      	bne.n	8002c4a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	f7ff fcdb 	bl	80025ee <LL_RCC_HSE_IsReady>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d050      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x288>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d14c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e29a      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c68:	d102      	bne.n	8002c70 <HAL_RCC_OscConfig+0x218>
 8002c6a:	f7ff fca4 	bl	80025b6 <LL_RCC_HSE_Enable>
 8002c6e:	e00d      	b.n	8002c8c <HAL_RCC_OscConfig+0x234>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002c78:	d104      	bne.n	8002c84 <HAL_RCC_OscConfig+0x22c>
 8002c7a:	f7ff fc6f 	bl	800255c <LL_RCC_HSE_EnableTcxo>
 8002c7e:	f7ff fc9a 	bl	80025b6 <LL_RCC_HSE_Enable>
 8002c82:	e003      	b.n	8002c8c <HAL_RCC_OscConfig+0x234>
 8002c84:	f7ff fca5 	bl	80025d2 <LL_RCC_HSE_Disable>
 8002c88:	f7ff fc76 	bl	8002578 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d012      	beq.n	8002cba <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fe fbdd 	bl	8001452 <HAL_GetTick>
 8002c98:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7fe fbd9 	bl	8001452 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e268      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002cae:	f7ff fc9e 	bl	80025ee <LL_RCC_HSE_IsReady>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f1      	beq.n	8002c9c <HAL_RCC_OscConfig+0x244>
 8002cb8:	e013      	b.n	8002ce2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe fbca 	bl	8001452 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc2:	f7fe fbc6 	bl	8001452 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b64      	cmp	r3, #100	; 0x64
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e255      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002cd4:	f7ff fc8b 	bl	80025ee <LL_RCC_HSE_IsReady>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f1      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x26a>
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d04b      	beq.n	8002d86 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_OscConfig+0x2a8>
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b0c      	cmp	r3, #12
 8002cf8:	d113      	bne.n	8002d22 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d110      	bne.n	8002d22 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d00:	f7ff fca2 	bl	8002648 <LL_RCC_HSI_IsReady>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_RCC_OscConfig+0x2be>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e234      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fca5 	bl	800266a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d20:	e031      	b.n	8002d86 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d019      	beq.n	8002d5e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2a:	f7ff fc71 	bl	8002610 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2e:	f7fe fb90 	bl	8001452 <HAL_GetTick>
 8002d32:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d36:	f7fe fb8c 	bl	8001452 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e21b      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d48:	f7ff fc7e 	bl	8002648 <LL_RCC_HSI_IsReady>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f1      	beq.n	8002d36 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fc87 	bl	800266a <LL_RCC_HSI_SetCalibTrimming>
 8002d5c:	e013      	b.n	8002d86 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5e:	f7ff fc65 	bl	800262c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fe fb76 	bl	8001452 <HAL_GetTick>
 8002d66:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6a:	f7fe fb72 	bl	8001452 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e201      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d7c:	f7ff fc64 	bl	8002648 <LL_RCC_HSI_IsReady>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f1      	bne.n	8002d6a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d06e      	beq.n	8002e70 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d056      	beq.n	8002e48 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8002d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da2:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69da      	ldr	r2, [r3, #28]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d031      	beq.n	8002e16 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d006      	beq.n	8002dca <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e1da      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d013      	beq.n	8002dfc <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8002dd4:	f7ff fc7e 	bl	80026d4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dd8:	f7fe fb3b 	bl	8001452 <HAL_GetTick>
 8002ddc:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe fb37 	bl	8001452 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b11      	cmp	r3, #17
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e1c6      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002df2:	f7ff fc7f 	bl	80026f4 <LL_RCC_LSI_IsReady>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f1      	bne.n	8002de0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e04:	f023 0210 	bic.w	r2, r3, #16
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	f7ff fc4d 	bl	80026b4 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1a:	f7fe fb1a 	bl	8001452 <HAL_GetTick>
 8002e1e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e22:	f7fe fb16 	bl	8001452 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b11      	cmp	r3, #17
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1a5      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002e34:	f7ff fc5e 	bl	80026f4 <LL_RCC_LSI_IsReady>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f1      	beq.n	8002e22 <HAL_RCC_OscConfig+0x3ca>
 8002e3e:	e017      	b.n	8002e70 <HAL_RCC_OscConfig+0x418>
 8002e40:	20000014 	.word	0x20000014
 8002e44:	20000018 	.word	0x20000018
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e48:	f7ff fc44 	bl	80026d4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4c:	f7fe fb01 	bl	8001452 <HAL_GetTick>
 8002e50:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e54:	f7fe fafd 	bl	8001452 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b11      	cmp	r3, #17
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e18c      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002e66:	f7ff fc45 	bl	80026f4 <LL_RCC_LSI_IsReady>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f1      	bne.n	8002e54 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80d8 	beq.w	800302e <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e7e:	f7ff fb5b 	bl	8002538 <LL_PWR_IsEnabledBkUpAccess>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d113      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e88:	f7ff fb3c 	bl	8002504 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8c:	f7fe fae1 	bl	8001452 <HAL_GetTick>
 8002e90:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e94:	f7fe fadd 	bl	8001452 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e16c      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002ea6:	f7ff fb47 	bl	8002538 <LL_PWR_IsEnabledBkUpAccess>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f1      	beq.n	8002e94 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d07b      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b85      	cmp	r3, #133	; 0x85
 8002ebe:	d003      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d109      	bne.n	8002edc <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed4:	f043 0304 	orr.w	r3, r3, #4
 8002ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe fab9 	bl	8001452 <HAL_GetTick>
 8002ee0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7fe faab 	bl	8001452 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e138      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f0e:	f7ff fbc0 	bl	8002692 <LL_RCC_LSE_IsReady>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ef      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b81      	cmp	r3, #129	; 0x81
 8002f1e:	d003      	beq.n	8002f28 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b85      	cmp	r3, #133	; 0x85
 8002f26:	d121      	bne.n	8002f6c <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fa93 	bl	8001452 <HAL_GetTick>
 8002f2c:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7fe fa85 	bl	8001452 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e112      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0ec      	beq.n	8002f44 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002f6a:	e060      	b.n	800302e <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fa71 	bl	8001452 <HAL_GetTick>
 8002f70:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7fe fa63 	bl	8001452 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0f0      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1ec      	bne.n	8002f88 <HAL_RCC_OscConfig+0x530>
 8002fae:	e03e      	b.n	800302e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb0:	f7fe fa4f 	bl	8001452 <HAL_GetTick>
 8002fb4:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fcc:	f7fe fa41 	bl	8001452 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e0ce      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1ec      	bne.n	8002fcc <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fa2e 	bl	8001452 <HAL_GetTick>
 8002ff6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300e:	f7fe fa20 	bl	8001452 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e0ad      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003024:	f7ff fb35 	bl	8002692 <LL_RCC_LSE_IsReady>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ef      	bne.n	800300e <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80a3 	beq.w	800317e <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b0c      	cmp	r3, #12
 800303c:	d076      	beq.n	800312c <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	2b02      	cmp	r3, #2
 8003044:	d14b      	bne.n	80030de <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003046:	f7ff fc76 	bl	8002936 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304a:	f7fe fa02 	bl	8001452 <HAL_GetTick>
 800304e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003052:	f7fe f9fe 	bl	8001452 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b0a      	cmp	r3, #10
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e08d      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003064:	f7ff fc75 	bl	8002952 <LL_RCC_PLL_IsReady>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f1      	bne.n	8003052 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	4b44      	ldr	r3, [pc, #272]	; (8003188 <HAL_RCC_OscConfig+0x730>)
 8003076:	4013      	ands	r3, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003080:	4311      	orrs	r1, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003086:	0212      	lsls	r2, r2, #8
 8003088:	4311      	orrs	r1, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800308e:	4311      	orrs	r1, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003094:	4311      	orrs	r1, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800309a:	430a      	orrs	r2, r1
 800309c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a4:	f7ff fc39 	bl	800291a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe f9cb 	bl	8001452 <HAL_GetTick>
 80030bc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c0:	f7fe f9c7 	bl	8001452 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b0a      	cmp	r3, #10
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e056      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 80030d2:	f7ff fc3e 	bl	8002952 <LL_RCC_PLL_IsReady>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f1      	beq.n	80030c0 <HAL_RCC_OscConfig+0x668>
 80030dc:	e04f      	b.n	800317e <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	f7ff fc2a 	bl	8002936 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80030e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030ec:	f023 0303 	bic.w	r3, r3, #3
 80030f0:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030fc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003104:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7fe f9a4 	bl	8001452 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310e:	f7fe f9a0 	bl	8001452 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b0a      	cmp	r3, #10
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e02f      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003120:	f7ff fc17 	bl	8002952 <LL_RCC_PLL_IsReady>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f1      	bne.n	800310e <HAL_RCC_OscConfig+0x6b6>
 800312a:	e028      	b.n	800317e <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e023      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f003 0203 	and.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	429a      	cmp	r2, r3
 800314c:	d115      	bne.n	800317a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	429a      	cmp	r2, r3
 800315a:	d10e      	bne.n	800317a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	429a      	cmp	r2, r3
 800316a:	d106      	bne.n	800317a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	429a      	cmp	r2, r3
 8003178:	d001      	beq.n	800317e <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	11c1808c 	.word	0x11c1808c

0800318c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e10f      	b.n	80033c0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031a0:	4b89      	ldr	r3, [pc, #548]	; (80033c8 <HAL_RCC_ClockConfig+0x23c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d91b      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b86      	ldr	r3, [pc, #536]	; (80033c8 <HAL_RCC_ClockConfig+0x23c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 0207 	bic.w	r2, r3, #7
 80031b6:	4984      	ldr	r1, [pc, #528]	; (80033c8 <HAL_RCC_ClockConfig+0x23c>)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031be:	f7fe f948 	bl	8001452 <HAL_GetTick>
 80031c2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80031c6:	f7fe f944 	bl	8001452 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e0f3      	b.n	80033c0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d8:	4b7b      	ldr	r3, [pc, #492]	; (80033c8 <HAL_RCC_ClockConfig+0x23c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d1ef      	bne.n	80031c6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d016      	beq.n	8003220 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fb12 	bl	8002820 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031fc:	f7fe f929 	bl	8001452 <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003204:	f7fe f925 	bl	8001452 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e0d4      	b.n	80033c0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003216:	f7ff fbda 	bl	80029ce <LL_RCC_IsActiveFlag_HPRE>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f1      	beq.n	8003204 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d016      	beq.n	800325a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fb08 	bl	8002846 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003236:	f7fe f90c 	bl	8001452 <HAL_GetTick>
 800323a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800323e:	f7fe f908 	bl	8001452 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e0b7      	b.n	80033c0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003250:	f7ff fbce 	bl	80029f0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f1      	beq.n	800323e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	d016      	beq.n	8003294 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fb01 	bl	8002872 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003270:	f7fe f8ef 	bl	8001452 <HAL_GetTick>
 8003274:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003276:	e008      	b.n	800328a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003278:	f7fe f8eb 	bl	8001452 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e09a      	b.n	80033c0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800328a:	f7ff fbc3 	bl	8002a14 <LL_RCC_IsActiveFlag_PPRE1>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f1      	beq.n	8003278 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b00      	cmp	r3, #0
 800329e:	d017      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff faf6 	bl	8002898 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032ac:	f7fe f8d1 	bl	8001452 <HAL_GetTick>
 80032b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032b4:	f7fe f8cd 	bl	8001452 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e07c      	b.n	80033c0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80032c6:	f7ff fbb6 	bl	8002a36 <LL_RCC_IsActiveFlag_PPRE2>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f1      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d043      	beq.n	8003364 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80032e4:	f7ff f983 	bl	80025ee <LL_RCC_HSE_IsReady>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d11e      	bne.n	800332c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e066      	b.n	80033c0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d106      	bne.n	8003308 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80032fa:	f7ff fb2a 	bl	8002952 <LL_RCC_PLL_IsReady>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d113      	bne.n	800332c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e05b      	b.n	80033c0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d106      	bne.n	800331e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003310:	f7ff fa1d 	bl	800274e <LL_RCC_MSI_IsReady>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d108      	bne.n	800332c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e050      	b.n	80033c0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800331e:	f7ff f993 	bl	8002648 <LL_RCC_HSI_IsReady>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e049      	b.n	80033c0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fa57 	bl	80027e4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003336:	f7fe f88c 	bl	8001452 <HAL_GetTick>
 800333a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333c:	e00a      	b.n	8003354 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333e:	f7fe f888 	bl	8001452 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f241 3288 	movw	r2, #5000	; 0x1388
 800334c:	4293      	cmp	r3, r2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e035      	b.n	80033c0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003354:	f7ff fa59 	bl	800280a <LL_RCC_GetSysClkSource>
 8003358:	4602      	mov	r2, r0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d1ec      	bne.n	800333e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003364:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <HAL_RCC_ClockConfig+0x23c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d21b      	bcs.n	80033aa <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <HAL_RCC_ClockConfig+0x23c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 0207 	bic.w	r2, r3, #7
 800337a:	4913      	ldr	r1, [pc, #76]	; (80033c8 <HAL_RCC_ClockConfig+0x23c>)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003382:	f7fe f866 	bl	8001452 <HAL_GetTick>
 8003386:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003388:	e008      	b.n	800339c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800338a:	f7fe f862 	bl	8001452 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e011      	b.n	80033c0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <HAL_RCC_ClockConfig+0x23c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d1ef      	bne.n	800338a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80033aa:	f000 f8b3 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4a06      	ldr	r2, [pc, #24]	; (80033cc <HAL_RCC_ClockConfig+0x240>)
 80033b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_ClockConfig+0x244>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe fb1d 	bl	80019f8 <HAL_InitTick>
 80033be:	4603      	mov	r3, r0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	58004000 	.word	0x58004000
 80033cc:	20000014 	.word	0x20000014
 80033d0:	20000018 	.word	0x20000018

080033d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e2:	f7ff fa12 	bl	800280a <LL_RCC_GetSysClkSource>
 80033e6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e8:	f7ff fae6 	bl	80029b8 <LL_RCC_PLL_GetMainSource>
 80033ec:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x2c>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d139      	bne.n	800346e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d136      	bne.n	800346e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003400:	f7ff f9b5 	bl	800276e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d115      	bne.n	8003436 <HAL_RCC_GetSysClockFreq+0x62>
 800340a:	f7ff f9b0 	bl	800276e <LL_RCC_MSI_IsEnabledRangeSelect>
 800340e:	4603      	mov	r3, r0
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0x4e>
 8003414:	f7ff f9bb 	bl	800278e <LL_RCC_MSI_GetRange>
 8003418:	4603      	mov	r3, r0
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	e005      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x5a>
 8003422:	f7ff f9bf 	bl	80027a4 <LL_RCC_MSI_GetRangeAfterStandby>
 8003426:	4603      	mov	r3, r0
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	4a36      	ldr	r2, [pc, #216]	; (8003508 <HAL_RCC_GetSysClockFreq+0x134>)
 8003430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003434:	e014      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x8c>
 8003436:	f7ff f99a 	bl	800276e <LL_RCC_MSI_IsEnabledRangeSelect>
 800343a:	4603      	mov	r3, r0
 800343c:	2b01      	cmp	r3, #1
 800343e:	d106      	bne.n	800344e <HAL_RCC_GetSysClockFreq+0x7a>
 8003440:	f7ff f9a5 	bl	800278e <LL_RCC_MSI_GetRange>
 8003444:	4603      	mov	r3, r0
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	e005      	b.n	800345a <HAL_RCC_GetSysClockFreq+0x86>
 800344e:	f7ff f9a9 	bl	80027a4 <LL_RCC_MSI_GetRangeAfterStandby>
 8003452:	4603      	mov	r3, r0
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	4a2b      	ldr	r2, [pc, #172]	; (8003508 <HAL_RCC_GetSysClockFreq+0x134>)
 800345c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003460:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d115      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800346c:	e012      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d102      	bne.n	800347a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003474:	4b25      	ldr	r3, [pc, #148]	; (800350c <HAL_RCC_GetSysClockFreq+0x138>)
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	e00c      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b08      	cmp	r3, #8
 800347e:	d109      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003480:	f7ff f888 	bl	8002594 <LL_RCC_HSE_IsEnabledDiv2>
 8003484:	4603      	mov	r3, r0
 8003486:	2b01      	cmp	r3, #1
 8003488:	d102      	bne.n	8003490 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800348a:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_RCC_GetSysClockFreq+0x138>)
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	e001      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003490:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003492:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003494:	f7ff f9b9 	bl	800280a <LL_RCC_GetSysClkSource>
 8003498:	4603      	mov	r3, r0
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d12f      	bne.n	80034fe <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800349e:	f7ff fa8b 	bl	80029b8 <LL_RCC_PLL_GetMainSource>
 80034a2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_GetSysClockFreq+0xde>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d003      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0xe4>
 80034b0:	e00d      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80034b2:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_RCC_GetSysClockFreq+0x138>)
 80034b4:	60fb      	str	r3, [r7, #12]
        break;
 80034b6:	e00d      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80034b8:	f7ff f86c 	bl	8002594 <LL_RCC_HSE_IsEnabledDiv2>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d102      	bne.n	80034c8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_RCC_GetSysClockFreq+0x138>)
 80034c4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80034c6:	e005      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_RCC_GetSysClockFreq+0x13c>)
 80034ca:	60fb      	str	r3, [r7, #12]
        break;
 80034cc:	e002      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	60fb      	str	r3, [r7, #12]
        break;
 80034d2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80034d4:	f7ff fa4e 	bl	8002974 <LL_RCC_PLL_GetN>
 80034d8:	4602      	mov	r2, r0
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	fb03 f402 	mul.w	r4, r3, r2
 80034e0:	f7ff fa5f 	bl	80029a2 <LL_RCC_PLL_GetDivider>
 80034e4:	4603      	mov	r3, r0
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	3301      	adds	r3, #1
 80034ea:	fbb4 f4f3 	udiv	r4, r4, r3
 80034ee:	f7ff fa4d 	bl	800298c <LL_RCC_PLL_GetR>
 80034f2:	4603      	mov	r3, r0
 80034f4:	0f5b      	lsrs	r3, r3, #29
 80034f6:	3301      	adds	r3, #1
 80034f8:	fbb4 f3f3 	udiv	r3, r4, r3
 80034fc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80034fe:	697b      	ldr	r3, [r7, #20]
}
 8003500:	4618      	mov	r0, r3
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	bd90      	pop	{r4, r7, pc}
 8003508:	08017f6c 	.word	0x08017f6c
 800350c:	00f42400 	.word	0x00f42400
 8003510:	01e84800 	.word	0x01e84800

08003514 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003514:	b598      	push	{r3, r4, r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003518:	f7ff ff5c 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 800351c:	4604      	mov	r4, r0
 800351e:	f7ff f9ce 	bl	80028be <LL_RCC_GetAHBPrescaler>
 8003522:	4603      	mov	r3, r0
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	4a03      	ldr	r2, [pc, #12]	; (8003538 <HAL_RCC_GetHCLKFreq+0x24>)
 800352c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003530:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd98      	pop	{r3, r4, r7, pc}
 8003538:	08017f0c 	.word	0x08017f0c

0800353c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800353c:	b598      	push	{r3, r4, r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003540:	f7ff ffe8 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 8003544:	4604      	mov	r4, r0
 8003546:	f7ff f9d2 	bl	80028ee <LL_RCC_GetAPB1Prescaler>
 800354a:	4603      	mov	r3, r0
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	4a03      	ldr	r2, [pc, #12]	; (800355c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003554:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd98      	pop	{r3, r4, r7, pc}
 800355c:	08017f4c 	.word	0x08017f4c

08003560 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003560:	b598      	push	{r3, r4, r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003564:	f7ff ffd6 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 8003568:	4604      	mov	r4, r0
 800356a:	f7ff f9cb 	bl	8002904 <LL_RCC_GetAPB2Prescaler>
 800356e:	4603      	mov	r3, r0
 8003570:	0adb      	lsrs	r3, r3, #11
 8003572:	4a03      	ldr	r2, [pc, #12]	; (8003580 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003578:	fa24 f303 	lsr.w	r3, r4, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd98      	pop	{r3, r4, r7, pc}
 8003580:	08017f4c 	.word	0x08017f4c

08003584 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	4a10      	ldr	r2, [pc, #64]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800359c:	f7ff f99a 	bl	80028d4 <LL_RCC_GetAHB3Prescaler>
 80035a0:	4603      	mov	r3, r0
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80035aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	0c9c      	lsrs	r4, r3, #18
 80035c0:	f7fe ffae 	bl	8002520 <HAL_PWREx_GetVoltageRange>
 80035c4:	4603      	mov	r3, r0
 80035c6:	4619      	mov	r1, r3
 80035c8:	4620      	mov	r0, r4
 80035ca:	f000 f80b 	bl	80035e4 <RCC_SetFlashLatency>
 80035ce:	4603      	mov	r3, r0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd90      	pop	{r4, r7, pc}
 80035d8:	08017f6c 	.word	0x08017f6c
 80035dc:	08017f0c 	.word	0x08017f0c
 80035e0:	431bde83 	.word	0x431bde83

080035e4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08e      	sub	sp, #56	; 0x38
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80035ee:	4a3c      	ldr	r2, [pc, #240]	; (80036e0 <RCC_SetFlashLatency+0xfc>)
 80035f0:	f107 0320 	add.w	r3, r7, #32
 80035f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035f8:	6018      	str	r0, [r3, #0]
 80035fa:	3304      	adds	r3, #4
 80035fc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80035fe:	4a39      	ldr	r2, [pc, #228]	; (80036e4 <RCC_SetFlashLatency+0x100>)
 8003600:	f107 0318 	add.w	r3, r7, #24
 8003604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003608:	6018      	str	r0, [r3, #0]
 800360a:	3304      	adds	r3, #4
 800360c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800360e:	4a36      	ldr	r2, [pc, #216]	; (80036e8 <RCC_SetFlashLatency+0x104>)
 8003610:	f107 030c 	add.w	r3, r7, #12
 8003614:	ca07      	ldmia	r2, {r0, r1, r2}
 8003616:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800361a:	2300      	movs	r3, #0
 800361c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003624:	d11d      	bne.n	8003662 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003626:	2300      	movs	r3, #0
 8003628:	633b      	str	r3, [r7, #48]	; 0x30
 800362a:	e016      	b.n	800365a <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003634:	4413      	add	r3, r2
 8003636:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800363a:	461a      	mov	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4293      	cmp	r3, r2
 8003640:	d808      	bhi.n	8003654 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800364a:	4413      	add	r3, r2
 800364c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003650:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003652:	e023      	b.n	800369c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	3301      	adds	r3, #1
 8003658:	633b      	str	r3, [r7, #48]	; 0x30
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	2b02      	cmp	r3, #2
 800365e:	d9e5      	bls.n	800362c <RCC_SetFlashLatency+0x48>
 8003660:	e01c      	b.n	800369c <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003662:	2300      	movs	r3, #0
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003666:	e016      	b.n	8003696 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003670:	4413      	add	r3, r2
 8003672:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003676:	461a      	mov	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4293      	cmp	r3, r2
 800367c:	d808      	bhi.n	8003690 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003686:	4413      	add	r3, r2
 8003688:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800368e:	e005      	b.n	800369c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	3301      	adds	r3, #1
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	2b02      	cmp	r3, #2
 800369a:	d9e5      	bls.n	8003668 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800369c:	4b13      	ldr	r3, [pc, #76]	; (80036ec <RCC_SetFlashLatency+0x108>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f023 0207 	bic.w	r2, r3, #7
 80036a4:	4911      	ldr	r1, [pc, #68]	; (80036ec <RCC_SetFlashLatency+0x108>)
 80036a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036ac:	f7fd fed1 	bl	8001452 <HAL_GetTick>
 80036b0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80036b2:	e008      	b.n	80036c6 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036b4:	f7fd fecd 	bl	8001452 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e007      	b.n	80036d6 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <RCC_SetFlashLatency+0x108>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1ef      	bne.n	80036b4 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3738      	adds	r7, #56	; 0x38
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	08017b60 	.word	0x08017b60
 80036e4:	08017b68 	.word	0x08017b68
 80036e8:	08017b70 	.word	0x08017b70
 80036ec:	58004000 	.word	0x58004000

080036f0 <LL_RCC_LSE_IsReady>:
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80036f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b02      	cmp	r3, #2
 8003702:	d101      	bne.n	8003708 <LL_RCC_LSE_IsReady+0x18>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <LL_RCC_LSE_IsReady+0x1a>
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr

08003712 <LL_RCC_SetUSARTClockSource>:
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800371a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800371e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	43db      	mvns	r3, r3
 8003728:	401a      	ands	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	b29b      	uxth	r3, r3
 800372e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <LL_RCC_SetI2SClockSource>:
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800374a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <LL_RCC_SetLPUARTClockSource>:
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003780:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <LL_RCC_SetI2CClockSource>:
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800379e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80037ae:	43db      	mvns	r3, r3
 80037b0:	401a      	ands	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80037ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr

080037ce <LL_RCC_SetLPTIMClockSource>:
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80037d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	0c1b      	lsrs	r3, r3, #16
 80037e2:	041b      	lsls	r3, r3, #16
 80037e4:	43db      	mvns	r3, r3
 80037e6:	401a      	ands	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	041b      	lsls	r3, r3, #16
 80037ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <LL_RCC_SetRNGClockSource>:
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <LL_RCC_SetADCClockSource>:
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800383e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <LL_RCC_SetRTCClockSource>:
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003868:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <LL_RCC_GetRTCClockSource>:
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800388e:	4618      	mov	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <LL_RCC_ForceBackupDomainReset>:
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800389a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr
	...

080038d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80038e4:	2300      	movs	r3, #0
 80038e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80038e8:	2300      	movs	r3, #0
 80038ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d058      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80038f8:	f7fe fe04 	bl	8002504 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038fc:	f7fd fda9 	bl	8001452 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003902:	e009      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003904:	f7fd fda5 	bl	8001452 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d902      	bls.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	74fb      	strb	r3, [r7, #19]
        break;
 8003916:	e006      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003918:	4b7b      	ldr	r3, [pc, #492]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003924:	d1ee      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003926:	7cfb      	ldrb	r3, [r7, #19]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d13c      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800392c:	f7ff ffa7 	bl	800387e <LL_RCC_GetRTCClockSource>
 8003930:	4602      	mov	r2, r0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003936:	429a      	cmp	r2, r3
 8003938:	d00f      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003946:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003948:	f7ff ffa5 	bl	8003896 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800394c:	f7ff ffb3 	bl	80038b6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003950:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d014      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fd fd75 	bl	8001452 <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800396a:	e00b      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396c:	f7fd fd71 	bl	8001452 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d902      	bls.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	74fb      	strb	r3, [r7, #19]
            break;
 8003982:	e004      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003984:	f7ff feb4 	bl	80036f0 <LL_RCC_LSE_IsReady>
 8003988:	4603      	mov	r3, r0
 800398a:	2b01      	cmp	r3, #1
 800398c:	d1ee      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800398e:	7cfb      	ldrb	r3, [r7, #19]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d105      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ff5b 	bl	8003854 <LL_RCC_SetRTCClockSource>
 800399e:	e004      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039a0:	7cfb      	ldrb	r3, [r7, #19]
 80039a2:	74bb      	strb	r3, [r7, #18]
 80039a4:	e001      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d004      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fea9 	bl	8003712 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fe9e 	bl	8003712 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fec0 	bl	800376c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d004      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fee6 	bl	80037ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fedb 	bl	80037ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fed0 	bl	80037ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fea9 	bl	8003796 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fe9e 	bl	8003796 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fe93 	bl	8003796 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d011      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fe5e 	bl	8003742 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d010      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fea5 	bl	8003800 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d107      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003acc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d011      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fea3 	bl	800382a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aec:	d107      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003afe:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	58000400 	.word	0x58000400

08003b0c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d068      	beq.n	8003bf0 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd fae4 	bl	8001100 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b40:	4b2e      	ldr	r3, [pc, #184]	; (8003bfc <HAL_RTC_Init+0xf0>)
 8003b42:	22ca      	movs	r2, #202	; 0xca
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24
 8003b46:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <HAL_RTC_Init+0xf0>)
 8003b48:	2253      	movs	r2, #83	; 0x53
 8003b4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fadf 	bl	8004110 <RTC_EnterInitMode>
 8003b52:	4603      	mov	r3, r0
 8003b54:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d13f      	bne.n	8003bdc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003b5c:	4b27      	ldr	r3, [pc, #156]	; (8003bfc <HAL_RTC_Init+0xf0>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	4a26      	ldr	r2, [pc, #152]	; (8003bfc <HAL_RTC_Init+0xf0>)
 8003b62:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b6a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003b6c:	4b23      	ldr	r3, [pc, #140]	; (8003bfc <HAL_RTC_Init+0xf0>)
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	4319      	orrs	r1, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	491e      	ldr	r1, [pc, #120]	; (8003bfc <HAL_RTC_Init+0xf0>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	491a      	ldr	r1, [pc, #104]	; (8003bfc <HAL_RTC_Init+0xf0>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003b96:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <HAL_RTC_Init+0xf0>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	4914      	ldr	r1, [pc, #80]	; (8003bfc <HAL_RTC_Init+0xf0>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fae2 	bl	8004178 <RTC_ExitInitMode>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10e      	bne.n	8003bdc <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <HAL_RTC_Init+0xf0>)
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a19      	ldr	r1, [r3, #32]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	4319      	orrs	r1, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	4909      	ldr	r1, [pc, #36]	; (8003bfc <HAL_RTC_Init+0xf0>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <HAL_RTC_Init+0xf0>)
 8003bde:	22ff      	movs	r2, #255	; 0xff
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d103      	bne.n	8003bf0 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40002800 	.word	0x40002800

08003c00 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_RTC_SetTime+0x1a>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e088      	b.n	8003d2c <HAL_RTC_SetTime+0x12c>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2202      	movs	r2, #2
 8003c26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c2a:	4b42      	ldr	r3, [pc, #264]	; (8003d34 <HAL_RTC_SetTime+0x134>)
 8003c2c:	22ca      	movs	r2, #202	; 0xca
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24
 8003c30:	4b40      	ldr	r3, [pc, #256]	; (8003d34 <HAL_RTC_SetTime+0x134>)
 8003c32:	2253      	movs	r2, #83	; 0x53
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fa6a 	bl	8004110 <RTC_EnterInitMode>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d15e      	bne.n	8003d04 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003c46:	4b3b      	ldr	r3, [pc, #236]	; (8003d34 <HAL_RTC_SetTime+0x134>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c52:	d057      	beq.n	8003d04 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d125      	bne.n	8003ca6 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003c5a:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <HAL_RTC_SetTime+0x134>)
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d102      	bne.n	8003c6c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fabf 	bl	80041f4 <RTC_ByteToBcd2>
 8003c76:	4603      	mov	r3, r0
 8003c78:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	785b      	ldrb	r3, [r3, #1]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fab8 	bl	80041f4 <RTC_ByteToBcd2>
 8003c84:	4603      	mov	r3, r0
 8003c86:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c88:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	789b      	ldrb	r3, [r3, #2]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fab0 	bl	80041f4 <RTC_ByteToBcd2>
 8003c94:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c96:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	78db      	ldrb	r3, [r3, #3]
 8003c9e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e017      	b.n	8003cd6 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003ca6:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <HAL_RTC_SetTime+0x134>)
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	785b      	ldrb	r3, [r3, #1]
 8003cc2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003cc4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cca:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	78db      	ldrb	r3, [r3, #3]
 8003cd0:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003cd6:	4a17      	ldr	r2, [pc, #92]	; (8003d34 <HAL_RTC_SetTime+0x134>)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003cde:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003ce2:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8003ce4:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <HAL_RTC_SetTime+0x134>)
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <HAL_RTC_SetTime+0x134>)
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cee:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003cf0:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <HAL_RTC_SetTime+0x134>)
 8003cf2:	699a      	ldr	r2, [r3, #24]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	68d9      	ldr	r1, [r3, #12]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	490d      	ldr	r1, [pc, #52]	; (8003d34 <HAL_RTC_SetTime+0x134>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fa37 	bl	8004178 <RTC_ExitInitMode>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <HAL_RTC_SetTime+0x134>)
 8003d10:	22ff      	movs	r2, #255	; 0xff
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d103      	bne.n	8003d22 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003d2a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd90      	pop	{r4, r7, pc}
 8003d34:	40002800 	.word	0x40002800

08003d38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_RTC_SetDate+0x1a>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e071      	b.n	8003e36 <HAL_RTC_SetDate+0xfe>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10e      	bne.n	8003d86 <HAL_RTC_SetDate+0x4e>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	785b      	ldrb	r3, [r3, #1]
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	785b      	ldrb	r3, [r3, #1]
 8003d78:	f023 0310 	bic.w	r3, r3, #16
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	330a      	adds	r3, #10
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d11c      	bne.n	8003dc6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	78db      	ldrb	r3, [r3, #3]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fa2f 	bl	80041f4 <RTC_ByteToBcd2>
 8003d96:	4603      	mov	r3, r0
 8003d98:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	785b      	ldrb	r3, [r3, #1]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fa28 	bl	80041f4 <RTC_ByteToBcd2>
 8003da4:	4603      	mov	r3, r0
 8003da6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003da8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	789b      	ldrb	r3, [r3, #2]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fa20 	bl	80041f4 <RTC_ByteToBcd2>
 8003db4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003db6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	e00e      	b.n	8003de4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	78db      	ldrb	r3, [r3, #3]
 8003dca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	785b      	ldrb	r3, [r3, #1]
 8003dd0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003dd2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003dd8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003de4:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <HAL_RTC_SetDate+0x108>)
 8003de6:	22ca      	movs	r2, #202	; 0xca
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <HAL_RTC_SetDate+0x108>)
 8003dec:	2253      	movs	r2, #83	; 0x53
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f98d 	bl	8004110 <RTC_EnterInitMode>
 8003df6:	4603      	mov	r3, r0
 8003df8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003e00:	4a0f      	ldr	r2, [pc, #60]	; (8003e40 <HAL_RTC_SetDate+0x108>)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e0c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f9b2 	bl	8004178 <RTC_ExitInitMode>
 8003e14:	4603      	mov	r3, r0
 8003e16:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <HAL_RTC_SetDate+0x108>)
 8003e1a:	22ff      	movs	r2, #255	; 0xff
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003e1e:	7cfb      	ldrb	r3, [r7, #19]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d103      	bne.n	8003e2c <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003e34:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd90      	pop	{r4, r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40002800 	.word	0x40002800

08003e44 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003e44:	b590      	push	{r4, r7, lr}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_RTC_SetAlarm_IT+0x1e>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e0f3      	b.n	800404a <HAL_RTC_SetAlarm_IT+0x206>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003e72:	4b78      	ldr	r3, [pc, #480]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e82:	d06a      	beq.n	8003f5a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d13a      	bne.n	8003f00 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003e8a:	4b72      	ldr	r3, [pc, #456]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d102      	bne.n	8003e9c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 f9a3 	bl	80041f4 <RTC_ByteToBcd2>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	785b      	ldrb	r3, [r3, #1]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f99c 	bl	80041f4 <RTC_ByteToBcd2>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ec0:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	789b      	ldrb	r3, [r3, #2]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f994 	bl	80041f4 <RTC_ByteToBcd2>
 8003ecc:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ece:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	78db      	ldrb	r3, [r3, #3]
 8003ed6:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ed8:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f986 	bl	80041f4 <RTC_ByteToBcd2>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003eec:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003ef4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	e02c      	b.n	8003f5a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003f08:	d00d      	beq.n	8003f26 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f12:	d008      	beq.n	8003f26 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003f14:	4b4f      	ldr	r3, [pc, #316]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2200      	movs	r2, #0
 8003f24:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	785b      	ldrb	r3, [r3, #1]
 8003f30:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f32:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f38:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	78db      	ldrb	r3, [r3, #3]
 8003f3e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f40:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f48:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f4a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f50:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f5a:	4b3e      	ldr	r3, [pc, #248]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f5c:	22ca      	movs	r2, #202	; 0xca
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24
 8003f60:	4b3c      	ldr	r3, [pc, #240]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f62:	2253      	movs	r2, #83	; 0x53
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6e:	d12c      	bne.n	8003fca <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003f70:	4b38      	ldr	r3, [pc, #224]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	4a37      	ldr	r2, [pc, #220]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f7a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003f7c:	4b35      	ldr	r3, [pc, #212]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f88:	d107      	bne.n	8003f9a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4930      	ldr	r1, [pc, #192]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	644b      	str	r3, [r1, #68]	; 0x44
 8003f98:	e006      	b.n	8003fa8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003f9a:	4a2e      	ldr	r2, [pc, #184]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003fa0:	4a2c      	ldr	r2, [pc, #176]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003fa8:	4a2a      	ldr	r2, [pc, #168]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	f043 0201 	orr.w	r2, r3, #1
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003fbc:	4b25      	ldr	r3, [pc, #148]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	4a24      	ldr	r2, [pc, #144]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fc2:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8003fc6:	6193      	str	r3, [r2, #24]
 8003fc8:	e02b      	b.n	8004022 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003fca:	4b22      	ldr	r3, [pc, #136]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	4a21      	ldr	r2, [pc, #132]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fd0:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003fd4:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003fd6:	4b1f      	ldr	r3, [pc, #124]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fd8:	2202      	movs	r2, #2
 8003fda:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	699a      	ldr	r2, [r3, #24]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	4919      	ldr	r1, [pc, #100]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ff2:	e006      	b.n	8004002 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003ff4:	4a17      	ldr	r2, [pc, #92]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003ffa:	4a16      	ldr	r2, [pc, #88]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004002:	4a14      	ldr	r2, [pc, #80]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f043 0202 	orr.w	r2, r3, #2
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004016:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	4a0e      	ldr	r2, [pc, #56]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 800401c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8004020:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004022:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <HAL_RTC_SetAlarm_IT+0x214>)
 8004024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004028:	4a0b      	ldr	r2, [pc, #44]	; (8004058 <HAL_RTC_SetAlarm_IT+0x214>)
 800402a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <HAL_RTC_SetAlarm_IT+0x210>)
 8004034:	22ff      	movs	r2, #255	; 0xff
 8004036:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	bd90      	pop	{r4, r7, pc}
 8004052:	bf00      	nop
 8004054:	40002800 	.word	0x40002800
 8004058:	58000800 	.word	0x58000800

0800405c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <HAL_RTC_AlarmIRQHandler+0x50>)
 8004066:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	4013      	ands	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <HAL_RTC_AlarmIRQHandler+0x50>)
 800407c:	2201      	movs	r2, #1
 800407e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f815 	bl	80040b0 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_RTC_AlarmIRQHandler+0x50>)
 8004092:	2202      	movs	r2, #2
 8004094:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f8cb 	bl	8004232 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80040a4:	bf00      	nop
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40002800 	.word	0x40002800

080040b0 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr
	...

080040c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <HAL_RTC_WaitForSynchro+0x48>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a0e      	ldr	r2, [pc, #56]	; (800410c <HAL_RTC_WaitForSynchro+0x48>)
 80040d2:	f023 0320 	bic.w	r3, r3, #32
 80040d6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80040d8:	f7fd f9bb 	bl	8001452 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80040de:	e009      	b.n	80040f4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040e0:	f7fd f9b7 	bl	8001452 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ee:	d901      	bls.n	80040f4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e006      	b.n	8004102 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <HAL_RTC_WaitForSynchro+0x48>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ef      	beq.n	80040e0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40002800 	.word	0x40002800

08004110 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <RTC_EnterInitMode+0x64>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004124:	2b00      	cmp	r3, #0
 8004126:	d120      	bne.n	800416a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004128:	4b12      	ldr	r3, [pc, #72]	; (8004174 <RTC_EnterInitMode+0x64>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a11      	ldr	r2, [pc, #68]	; (8004174 <RTC_EnterInitMode+0x64>)
 800412e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004132:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004134:	f7fd f98d 	bl	8001452 <HAL_GetTick>
 8004138:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800413a:	e00d      	b.n	8004158 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800413c:	f7fd f989 	bl	8001452 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800414a:	d905      	bls.n	8004158 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2203      	movs	r2, #3
 8004154:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <RTC_EnterInitMode+0x64>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <RTC_EnterInitMode+0x5a>
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2b03      	cmp	r3, #3
 8004168:	d1e8      	bne.n	800413c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800416a:	7bfb      	ldrb	r3, [r7, #15]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40002800 	.word	0x40002800

08004178 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004184:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <RTC_ExitInitMode+0x78>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4a19      	ldr	r2, [pc, #100]	; (80041f0 <RTC_ExitInitMode+0x78>)
 800418a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004190:	4b17      	ldr	r3, [pc, #92]	; (80041f0 <RTC_ExitInitMode+0x78>)
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10c      	bne.n	80041b6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ff91 	bl	80040c4 <HAL_RTC_WaitForSynchro>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01e      	beq.n	80041e6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2203      	movs	r2, #3
 80041ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	73fb      	strb	r3, [r7, #15]
 80041b4:	e017      	b.n	80041e6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80041b6:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <RTC_ExitInitMode+0x78>)
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	4a0d      	ldr	r2, [pc, #52]	; (80041f0 <RTC_ExitInitMode+0x78>)
 80041bc:	f023 0320 	bic.w	r3, r3, #32
 80041c0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ff7e 	bl	80040c4 <HAL_RTC_WaitForSynchro>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2203      	movs	r2, #3
 80041d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80041da:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <RTC_ExitInitMode+0x78>)
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <RTC_ExitInitMode+0x78>)
 80041e0:	f043 0320 	orr.w	r3, r3, #32
 80041e4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40002800 	.word	0x40002800

080041f4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004206:	e005      	b.n	8004214 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3301      	adds	r3, #1
 800420c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800420e:	7afb      	ldrb	r3, [r7, #11]
 8004210:	3b0a      	subs	r3, #10
 8004212:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004214:	7afb      	ldrb	r3, [r7, #11]
 8004216:	2b09      	cmp	r3, #9
 8004218:	d8f6      	bhi.n	8004208 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	b2da      	uxtb	r2, r3
 8004222:	7afb      	ldrb	r3, [r7, #11]
 8004224:	4313      	orrs	r3, r2
 8004226:	b2db      	uxtb	r3, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004254:	4904      	ldr	r1, [pc, #16]	; (8004268 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4313      	orrs	r3, r2
 800425a:	608b      	str	r3, [r1, #8]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	58000400 	.word	0x58000400

0800426c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004270:	4b05      	ldr	r3, [pc, #20]	; (8004288 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	4a04      	ldr	r2, [pc, #16]	; (8004288 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	58000400 	.word	0x58000400

0800428c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	4a04      	ldr	r2, [pc, #16]	; (80042a8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004298:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800429c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042a0:	bf00      	nop
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr
 80042a8:	58000400 	.word	0x58000400

080042ac <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80042b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042b6:	619a      	str	r2, [r3, #24]
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr
 80042c0:	58000400 	.word	0x58000400

080042c4 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d101      	bne.n	80042d8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	58000400 	.word	0x58000400

080042e8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d101      	bne.n	80042fc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	58000400 	.word	0x58000400

0800430c <LL_RCC_RF_DisableReset>:
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800431c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004320:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004324:	bf00      	nop
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <LL_RCC_IsRFUnderReset>:
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800433c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004340:	d101      	bne.n	8004346 <LL_RCC_IsRFUnderReset+0x1a>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <LL_RCC_IsRFUnderReset+0x1c>
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004358:	4b06      	ldr	r3, [pc, #24]	; (8004374 <LL_EXTI_EnableIT_32_63+0x24>)
 800435a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800435e:	4905      	ldr	r1, [pc, #20]	; (8004374 <LL_EXTI_EnableIT_32_63+0x24>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	58000800 	.word	0x58000800

08004378 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d103      	bne.n	800438e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
    return status;
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	e04b      	b.n	8004426 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	799b      	ldrb	r3, [r3, #6]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d105      	bne.n	80043a8 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fc ff6a 	bl	800127c <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80043ae:	f7ff ffad 	bl	800430c <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80043b2:	4b1f      	ldr	r3, [pc, #124]	; (8004430 <HAL_SUBGHZ_Init+0xb8>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	4613      	mov	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	0cdb      	lsrs	r3, r3, #19
 80043c0:	2264      	movs	r2, #100	; 0x64
 80043c2:	fb02 f303 	mul.w	r3, r2, r3
 80043c6:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d105      	bne.n	80043da <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	609a      	str	r2, [r3, #8]
      break;
 80043d8:	e007      	b.n	80043ea <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	3b01      	subs	r3, #1
 80043de:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80043e0:	f7ff ffa4 	bl	800432c <LL_RCC_IsRFUnderReset>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1ee      	bne.n	80043c8 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80043ea:	f7ff ff3f 	bl	800426c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80043ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80043f2:	f7ff ffad 	bl	8004350 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80043f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80043fa:	f7ff ff23 	bl	8004244 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80043fe:	f7ff ff55 	bl	80042ac <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f000 faad 	bl	800496c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	719a      	strb	r2, [r3, #6]

  return status;
 8004424:	7bfb      	ldrb	r3, [r7, #15]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000014 	.word	0x20000014

08004434 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	607a      	str	r2, [r7, #4]
 800443e:	461a      	mov	r2, r3
 8004440:	460b      	mov	r3, r1
 8004442:	817b      	strh	r3, [r7, #10]
 8004444:	4613      	mov	r3, r2
 8004446:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	799b      	ldrb	r3, [r3, #6]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d14a      	bne.n	80044e8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	795b      	ldrb	r3, [r3, #5]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800445a:	2302      	movs	r3, #2
 800445c:	e045      	b.n	80044ea <HAL_SUBGHZ_WriteRegisters+0xb6>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2202      	movs	r2, #2
 8004468:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fb4c 	bl	8004b08 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004470:	f7ff ff0c 	bl	800428c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004474:	210d      	movs	r1, #13
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fa98 	bl	80049ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800447c:	897b      	ldrh	r3, [r7, #10]
 800447e:	0a1b      	lsrs	r3, r3, #8
 8004480:	b29b      	uxth	r3, r3
 8004482:	b2db      	uxtb	r3, r3
 8004484:	4619      	mov	r1, r3
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fa90 	bl	80049ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800448c:	897b      	ldrh	r3, [r7, #10]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	4619      	mov	r1, r3
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fa8a 	bl	80049ac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004498:	2300      	movs	r3, #0
 800449a:	82bb      	strh	r3, [r7, #20]
 800449c:	e00a      	b.n	80044b4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800449e:	8abb      	ldrh	r3, [r7, #20]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	4413      	add	r3, r2
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	4619      	mov	r1, r3
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fa7f 	bl	80049ac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80044ae:	8abb      	ldrh	r3, [r7, #20]
 80044b0:	3301      	adds	r3, #1
 80044b2:	82bb      	strh	r3, [r7, #20]
 80044b4:	8aba      	ldrh	r2, [r7, #20]
 80044b6:	893b      	ldrh	r3, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d3f0      	bcc.n	800449e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80044bc:	f7ff fed6 	bl	800426c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fb45 	bl	8004b50 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
 80044d2:	e001      	b.n	80044d8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	715a      	strb	r2, [r3, #5]

    return status;
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
 80044e6:	e000      	b.n	80044ea <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
  }
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b088      	sub	sp, #32
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	461a      	mov	r2, r3
 80044fe:	460b      	mov	r3, r1
 8004500:	817b      	strh	r3, [r7, #10]
 8004502:	4613      	mov	r3, r2
 8004504:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	799b      	ldrb	r3, [r3, #6]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d14a      	bne.n	80045aa <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	795b      	ldrb	r3, [r3, #5]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800451c:	2302      	movs	r3, #2
 800451e:	e045      	b.n	80045ac <HAL_SUBGHZ_ReadRegisters+0xba>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 faee 	bl	8004b08 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800452c:	f7ff feae 	bl	800428c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004530:	211d      	movs	r1, #29
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 fa3a 	bl	80049ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004538:	897b      	ldrh	r3, [r7, #10]
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	b29b      	uxth	r3, r3
 800453e:	b2db      	uxtb	r3, r3
 8004540:	4619      	mov	r1, r3
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fa32 	bl	80049ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004548:	897b      	ldrh	r3, [r7, #10]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	4619      	mov	r1, r3
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fa2c 	bl	80049ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004554:	2100      	movs	r1, #0
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fa28 	bl	80049ac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800455c:	2300      	movs	r3, #0
 800455e:	82fb      	strh	r3, [r7, #22]
 8004560:	e009      	b.n	8004576 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004562:	69b9      	ldr	r1, [r7, #24]
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fa77 	bl	8004a58 <SUBGHZSPI_Receive>
      pData++;
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	3301      	adds	r3, #1
 800456e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004570:	8afb      	ldrh	r3, [r7, #22]
 8004572:	3301      	adds	r3, #1
 8004574:	82fb      	strh	r3, [r7, #22]
 8004576:	8afa      	ldrh	r2, [r7, #22]
 8004578:	893b      	ldrh	r3, [r7, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	d3f1      	bcc.n	8004562 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800457e:	f7ff fe75 	bl	800426c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 fae4 	bl	8004b50 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e001      	b.n	800459a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	715a      	strb	r2, [r3, #5]

    return status;
 80045a6:	7ffb      	ldrb	r3, [r7, #31]
 80045a8:	e000      	b.n	80045ac <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80045aa:	2302      	movs	r3, #2
  }
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3720      	adds	r7, #32
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	461a      	mov	r2, r3
 80045c0:	460b      	mov	r3, r1
 80045c2:	72fb      	strb	r3, [r7, #11]
 80045c4:	4613      	mov	r3, r2
 80045c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	799b      	ldrb	r3, [r3, #6]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d14a      	bne.n	8004668 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	795b      	ldrb	r3, [r3, #5]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80045da:	2302      	movs	r3, #2
 80045dc:	e045      	b.n	800466a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fa8f 	bl	8004b08 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80045ea:	7afb      	ldrb	r3, [r7, #11]
 80045ec:	2b84      	cmp	r3, #132	; 0x84
 80045ee:	d002      	beq.n	80045f6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80045f0:	7afb      	ldrb	r3, [r7, #11]
 80045f2:	2b94      	cmp	r3, #148	; 0x94
 80045f4:	d103      	bne.n	80045fe <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	711a      	strb	r2, [r3, #4]
 80045fc:	e002      	b.n	8004604 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004604:	f7ff fe42 	bl	800428c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004608:	7afb      	ldrb	r3, [r7, #11]
 800460a:	4619      	mov	r1, r3
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f9cd 	bl	80049ac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004612:	2300      	movs	r3, #0
 8004614:	82bb      	strh	r3, [r7, #20]
 8004616:	e00a      	b.n	800462e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004618:	8abb      	ldrh	r3, [r7, #20]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4413      	add	r3, r2
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	4619      	mov	r1, r3
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f9c2 	bl	80049ac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004628:	8abb      	ldrh	r3, [r7, #20]
 800462a:	3301      	adds	r3, #1
 800462c:	82bb      	strh	r3, [r7, #20]
 800462e:	8aba      	ldrh	r2, [r7, #20]
 8004630:	893b      	ldrh	r3, [r7, #8]
 8004632:	429a      	cmp	r2, r3
 8004634:	d3f0      	bcc.n	8004618 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004636:	f7ff fe19 	bl	800426c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800463a:	7afb      	ldrb	r3, [r7, #11]
 800463c:	2b84      	cmp	r3, #132	; 0x84
 800463e:	d002      	beq.n	8004646 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fa85 	bl	8004b50 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	75fb      	strb	r3, [r7, #23]
 8004652:	e001      	b.n	8004658 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	715a      	strb	r2, [r3, #5]

    return status;
 8004664:	7dfb      	ldrb	r3, [r7, #23]
 8004666:	e000      	b.n	800466a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004668:	2302      	movs	r3, #2
  }
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b088      	sub	sp, #32
 8004676:	af00      	add	r7, sp, #0
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	461a      	mov	r2, r3
 800467e:	460b      	mov	r3, r1
 8004680:	72fb      	strb	r3, [r7, #11]
 8004682:	4613      	mov	r3, r2
 8004684:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	799b      	ldrb	r3, [r3, #6]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d13d      	bne.n	8004710 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	795b      	ldrb	r3, [r3, #5]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800469c:	2302      	movs	r3, #2
 800469e:	e038      	b.n	8004712 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fa2e 	bl	8004b08 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80046ac:	f7ff fdee 	bl	800428c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80046b0:	7afb      	ldrb	r3, [r7, #11]
 80046b2:	4619      	mov	r1, r3
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f979 	bl	80049ac <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80046ba:	2100      	movs	r1, #0
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f975 	bl	80049ac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	82fb      	strh	r3, [r7, #22]
 80046c6:	e009      	b.n	80046dc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80046c8:	69b9      	ldr	r1, [r7, #24]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f9c4 	bl	8004a58 <SUBGHZSPI_Receive>
      pData++;
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	3301      	adds	r3, #1
 80046d4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80046d6:	8afb      	ldrh	r3, [r7, #22]
 80046d8:	3301      	adds	r3, #1
 80046da:	82fb      	strh	r3, [r7, #22]
 80046dc:	8afa      	ldrh	r2, [r7, #22]
 80046de:	893b      	ldrh	r3, [r7, #8]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d3f1      	bcc.n	80046c8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80046e4:	f7ff fdc2 	bl	800426c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fa31 	bl	8004b50 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	77fb      	strb	r3, [r7, #31]
 80046fa:	e001      	b.n	8004700 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	715a      	strb	r2, [r3, #5]

    return status;
 800470c:	7ffb      	ldrb	r3, [r7, #31]
 800470e:	e000      	b.n	8004712 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004710:	2302      	movs	r3, #2
  }
}
 8004712:	4618      	mov	r0, r3
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b086      	sub	sp, #24
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	461a      	mov	r2, r3
 8004726:	460b      	mov	r3, r1
 8004728:	72fb      	strb	r3, [r7, #11]
 800472a:	4613      	mov	r3, r2
 800472c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	799b      	ldrb	r3, [r3, #6]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	d13e      	bne.n	80047b6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	795b      	ldrb	r3, [r3, #5]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004740:	2302      	movs	r3, #2
 8004742:	e039      	b.n	80047b8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f9dc 	bl	8004b08 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004750:	f7ff fd9c 	bl	800428c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004754:	210e      	movs	r1, #14
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f928 	bl	80049ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800475c:	7afb      	ldrb	r3, [r7, #11]
 800475e:	4619      	mov	r1, r3
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f923 	bl	80049ac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004766:	2300      	movs	r3, #0
 8004768:	82bb      	strh	r3, [r7, #20]
 800476a:	e00a      	b.n	8004782 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800476c:	8abb      	ldrh	r3, [r7, #20]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	4413      	add	r3, r2
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	4619      	mov	r1, r3
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f918 	bl	80049ac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800477c:	8abb      	ldrh	r3, [r7, #20]
 800477e:	3301      	adds	r3, #1
 8004780:	82bb      	strh	r3, [r7, #20]
 8004782:	8aba      	ldrh	r2, [r7, #20]
 8004784:	893b      	ldrh	r3, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	d3f0      	bcc.n	800476c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800478a:	f7ff fd6f 	bl	800426c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f9de 	bl	8004b50 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	75fb      	strb	r3, [r7, #23]
 80047a0:	e001      	b.n	80047a6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	715a      	strb	r2, [r3, #5]

    return status;
 80047b2:	7dfb      	ldrb	r3, [r7, #23]
 80047b4:	e000      	b.n	80047b8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80047b6:	2302      	movs	r3, #2
  }
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	461a      	mov	r2, r3
 80047cc:	460b      	mov	r3, r1
 80047ce:	72fb      	strb	r3, [r7, #11]
 80047d0:	4613      	mov	r3, r2
 80047d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	799b      	ldrb	r3, [r3, #6]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d141      	bne.n	8004866 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	795b      	ldrb	r3, [r3, #5]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_SUBGHZ_ReadBuffer+0x2e>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e03c      	b.n	8004868 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f987 	bl	8004b08 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80047fa:	f7ff fd47 	bl	800428c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80047fe:	211e      	movs	r1, #30
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f8d3 	bl	80049ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004806:	7afb      	ldrb	r3, [r7, #11]
 8004808:	4619      	mov	r1, r3
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f8ce 	bl	80049ac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004810:	2100      	movs	r1, #0
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f8ca 	bl	80049ac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004818:	2300      	movs	r3, #0
 800481a:	82fb      	strh	r3, [r7, #22]
 800481c:	e009      	b.n	8004832 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800481e:	69b9      	ldr	r1, [r7, #24]
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f919 	bl	8004a58 <SUBGHZSPI_Receive>
      pData++;
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	3301      	adds	r3, #1
 800482a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800482c:	8afb      	ldrh	r3, [r7, #22]
 800482e:	3301      	adds	r3, #1
 8004830:	82fb      	strh	r3, [r7, #22]
 8004832:	8afa      	ldrh	r2, [r7, #22]
 8004834:	893b      	ldrh	r3, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	d3f1      	bcc.n	800481e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800483a:	f7ff fd17 	bl	800426c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f986 	bl	8004b50 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	77fb      	strb	r3, [r7, #31]
 8004850:	e001      	b.n	8004856 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	715a      	strb	r2, [r3, #5]

    return status;
 8004862:	7ffb      	ldrb	r3, [r7, #31]
 8004864:	e000      	b.n	8004868 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
  }
}
 8004868:	4618      	mov	r0, r3
 800486a:	3720      	adds	r7, #32
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8004878:	2300      	movs	r3, #0
 800487a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 800487c:	f107 020c 	add.w	r2, r7, #12
 8004880:	2302      	movs	r3, #2
 8004882:	2112      	movs	r1, #18
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff fef4 	bl	8004672 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 800488a:	7b3b      	ldrb	r3, [r7, #12]
 800488c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 800488e:	89fb      	ldrh	r3, [r7, #14]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	b21a      	sxth	r2, r3
 8004894:	7b7b      	ldrb	r3, [r7, #13]
 8004896:	b21b      	sxth	r3, r3
 8004898:	4313      	orrs	r3, r2
 800489a:	b21b      	sxth	r3, r3
 800489c:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800489e:	89fb      	ldrh	r3, [r7, #14]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f011 fb2f 	bl	8015f0c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80048ae:	89fb      	ldrh	r3, [r7, #14]
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f011 fb34 	bl	8015f28 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80048c0:	89fb      	ldrh	r3, [r7, #14]
 80048c2:	089b      	lsrs	r3, r3, #2
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f011 fb83 	bl	8015fd8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80048d2:	89fb      	ldrh	r3, [r7, #14]
 80048d4:	08db      	lsrs	r3, r3, #3
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f011 fb88 	bl	8015ff4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80048e4:	89fb      	ldrh	r3, [r7, #14]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f011 fb8d 	bl	8016010 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80048f6:	89fb      	ldrh	r3, [r7, #14]
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f011 fb5a 	bl	8015fbc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004908:	89fb      	ldrh	r3, [r7, #14]
 800490a:	099b      	lsrs	r3, r3, #6
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f011 fb15 	bl	8015f44 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800491a:	89fb      	ldrh	r3, [r7, #14]
 800491c:	09db      	lsrs	r3, r3, #7
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00e      	beq.n	8004944 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004926:	89fb      	ldrh	r3, [r7, #14]
 8004928:	0a1b      	lsrs	r3, r3, #8
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d004      	beq.n	800493c <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004932:	2101      	movs	r1, #1
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f011 fb13 	bl	8015f60 <HAL_SUBGHZ_CADStatusCallback>
 800493a:	e003      	b.n	8004944 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800493c:	2100      	movs	r1, #0
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f011 fb0e 	bl	8015f60 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004944:	89fb      	ldrh	r3, [r7, #14]
 8004946:	0a5b      	lsrs	r3, r3, #9
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f011 fb23 	bl	8015f9c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8004956:	f107 020c 	add.w	r2, r7, #12
 800495a:	2302      	movs	r3, #2
 800495c:	2102      	movs	r1, #2
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff fe28 	bl	80045b4 <HAL_SUBGHZ_ExecSetCmd>
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <SUBGHZSPI_Init+0x3c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a0b      	ldr	r2, [pc, #44]	; (80049a8 <SUBGHZSPI_Init+0x3c>)
 800497a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004980:	4a09      	ldr	r2, [pc, #36]	; (80049a8 <SUBGHZSPI_Init+0x3c>)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004988:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <SUBGHZSPI_Init+0x3c>)
 800498c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004990:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <SUBGHZSPI_Init+0x3c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <SUBGHZSPI_Init+0x3c>)
 8004998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800499c:	6013      	str	r3, [r2, #0]
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr
 80049a8:	58010000 	.word	0x58010000

080049ac <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80049bc:	4b23      	ldr	r3, [pc, #140]	; (8004a4c <SUBGHZSPI_Transmit+0xa0>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4613      	mov	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	0cdb      	lsrs	r3, r3, #19
 80049ca:	2264      	movs	r2, #100	; 0x64
 80049cc:	fb02 f303 	mul.w	r3, r2, r3
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	609a      	str	r2, [r3, #8]
      break;
 80049e2:	e008      	b.n	80049f6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80049ea:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <SUBGHZSPI_Transmit+0xa4>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d1ed      	bne.n	80049d2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80049f6:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <SUBGHZSPI_Transmit+0xa8>)
 80049f8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	78fa      	ldrb	r2, [r7, #3]
 80049fe:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a00:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <SUBGHZSPI_Transmit+0xa0>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	4613      	mov	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	0cdb      	lsrs	r3, r3, #19
 8004a0e:	2264      	movs	r2, #100	; 0x64
 8004a10:	fb02 f303 	mul.w	r3, r2, r3
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d105      	bne.n	8004a28 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	609a      	str	r2, [r3, #8]
      break;
 8004a26:	e008      	b.n	8004a3a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <SUBGHZSPI_Transmit+0xa4>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d1ed      	bne.n	8004a16 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <SUBGHZSPI_Transmit+0xa4>)
 8004a3c:	68db      	ldr	r3, [r3, #12]

  return status;
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000014 	.word	0x20000014
 8004a50:	58010000 	.word	0x58010000
 8004a54:	5801000c 	.word	0x5801000c

08004a58 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a66:	4b25      	ldr	r3, [pc, #148]	; (8004afc <SUBGHZSPI_Receive+0xa4>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	1a9b      	subs	r3, r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	0cdb      	lsrs	r3, r3, #19
 8004a74:	2264      	movs	r2, #100	; 0x64
 8004a76:	fb02 f303 	mul.w	r3, r2, r3
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d105      	bne.n	8004a8e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	609a      	str	r2, [r3, #8]
      break;
 8004a8c:	e008      	b.n	8004aa0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004a94:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <SUBGHZSPI_Receive+0xa8>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d1ed      	bne.n	8004a7c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004aa0:	4b18      	ldr	r3, [pc, #96]	; (8004b04 <SUBGHZSPI_Receive+0xac>)
 8004aa2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	22ff      	movs	r2, #255	; 0xff
 8004aa8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004aaa:	4b14      	ldr	r3, [pc, #80]	; (8004afc <SUBGHZSPI_Receive+0xa4>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	0cdb      	lsrs	r3, r3, #19
 8004ab8:	2264      	movs	r2, #100	; 0x64
 8004aba:	fb02 f303 	mul.w	r3, r2, r3
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d105      	bne.n	8004ad2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	609a      	str	r2, [r3, #8]
      break;
 8004ad0:	e008      	b.n	8004ae4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <SUBGHZSPI_Receive+0xa8>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d1ed      	bne.n	8004ac0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <SUBGHZSPI_Receive+0xa8>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	701a      	strb	r2, [r3, #0]

  return status;
 8004aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20000014 	.word	0x20000014
 8004b00:	58010000 	.word	0x58010000
 8004b04:	5801000c 	.word	0x5801000c

08004b08 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	791b      	ldrb	r3, [r3, #4]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d111      	bne.n	8004b3c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <SUBGHZ_CheckDeviceReady+0x44>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	0c1b      	lsrs	r3, r3, #16
 8004b26:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004b28:	f7ff fbb0 	bl	800428c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f9      	bne.n	8004b2c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004b38:	f7ff fb98 	bl	800426c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f807 	bl	8004b50 <SUBGHZ_WaitOnBusy>
 8004b42:	4603      	mov	r3, r0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20000014 	.word	0x20000014

08004b50 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004b5c:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <SUBGHZ_WaitOnBusy+0x58>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	4613      	mov	r3, r2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	0d1b      	lsrs	r3, r3, #20
 8004b6a:	2264      	movs	r2, #100	; 0x64
 8004b6c:	fb02 f303 	mul.w	r3, r2, r3
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004b72:	f7ff fbb9 	bl	80042e8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004b76:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d105      	bne.n	8004b8a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	609a      	str	r2, [r3, #8]
      break;
 8004b88:	e009      	b.n	8004b9e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004b90:	f7ff fb98 	bl	80042c4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d0e9      	beq.n	8004b72 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20000014 	.word	0x20000014

08004bac <LL_RCC_GetUSARTClockSource>:
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	401a      	ands	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	041b      	lsls	r3, r3, #16
 8004bc4:	4313      	orrs	r3, r2
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr

08004bd0 <LL_RCC_GetLPUARTClockSource>:
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4013      	ands	r3, r2
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr

08004bee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e042      	b.n	8004c86 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc fdfe 	bl	8001814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2224      	movs	r2, #36	; 0x24
 8004c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fb63 	bl	80052fc <UART_SetConfig>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e022      	b.n	8004c86 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fda7 	bl	800579c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0201 	orr.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fe2d 	bl	80058de <UART_CheckIdleState>
 8004c84:	4603      	mov	r3, r0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b0ba      	sub	sp, #232	; 0xe8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004cba:	f640 030f 	movw	r3, #2063	; 0x80f
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004cc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d11b      	bne.n	8004d04 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd0:	f003 0320 	and.w	r3, r3, #32
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d015      	beq.n	8004d04 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 82d6 	beq.w	80052a6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	4798      	blx	r3
      }
      return;
 8004d02:	e2d0      	b.n	80052a6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 811f 	beq.w	8004f4c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004d0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004d12:	4b8b      	ldr	r3, [pc, #556]	; (8004f40 <HAL_UART_IRQHandler+0x2b0>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d1e:	4b89      	ldr	r3, [pc, #548]	; (8004f44 <HAL_UART_IRQHandler+0x2b4>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8112 	beq.w	8004f4c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d011      	beq.n	8004d58 <HAL_UART_IRQHandler+0xc8>
 8004d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00b      	beq.n	8004d58 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2201      	movs	r2, #1
 8004d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d4e:	f043 0201 	orr.w	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d011      	beq.n	8004d88 <HAL_UART_IRQHandler+0xf8>
 8004d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00b      	beq.n	8004d88 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2202      	movs	r2, #2
 8004d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d7e:	f043 0204 	orr.w	r2, r3, #4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d011      	beq.n	8004db8 <HAL_UART_IRQHandler+0x128>
 8004d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00b      	beq.n	8004db8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2204      	movs	r2, #4
 8004da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dae:	f043 0202 	orr.w	r2, r3, #2
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d017      	beq.n	8004df4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc8:	f003 0320 	and.w	r3, r3, #32
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d105      	bne.n	8004ddc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004dd0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004dd4:	4b5a      	ldr	r3, [pc, #360]	; (8004f40 <HAL_UART_IRQHandler+0x2b0>)
 8004dd6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00b      	beq.n	8004df4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2208      	movs	r2, #8
 8004de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dea:	f043 0208 	orr.w	r2, r3, #8
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d012      	beq.n	8004e26 <HAL_UART_IRQHandler+0x196>
 8004e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00c      	beq.n	8004e26 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e1c:	f043 0220 	orr.w	r2, r3, #32
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 823c 	beq.w	80052aa <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d013      	beq.n	8004e66 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d105      	bne.n	8004e56 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d005      	beq.n	8004e8a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d04f      	beq.n	8004f2a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fe3a 	bl	8005b04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b40      	cmp	r3, #64	; 0x40
 8004e9c:	d141      	bne.n	8004f22 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004eca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ece:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ed6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1d9      	bne.n	8004e9e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d013      	beq.n	8004f1a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef6:	4a14      	ldr	r2, [pc, #80]	; (8004f48 <HAL_UART_IRQHandler+0x2b8>)
 8004ef8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fc fff6 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d017      	beq.n	8004f3a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004f14:	4610      	mov	r0, r2
 8004f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f18:	e00f      	b.n	8004f3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f9d9 	bl	80052d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f20:	e00b      	b.n	8004f3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f9d5 	bl	80052d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f28:	e007      	b.n	8004f3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f9d1 	bl	80052d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004f38:	e1b7      	b.n	80052aa <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3a:	bf00      	nop
    return;
 8004f3c:	e1b5      	b.n	80052aa <HAL_UART_IRQHandler+0x61a>
 8004f3e:	bf00      	nop
 8004f40:	10000001 	.word	0x10000001
 8004f44:	04000120 	.word	0x04000120
 8004f48:	08005bcf 	.word	0x08005bcf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	f040 814a 	bne.w	80051ea <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8143 	beq.w	80051ea <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f68:	f003 0310 	and.w	r3, r3, #16
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 813c 	beq.w	80051ea <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2210      	movs	r2, #16
 8004f78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f84:	2b40      	cmp	r3, #64	; 0x40
 8004f86:	f040 80b5 	bne.w	80050f4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8004f96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 8187 	beq.w	80052ae <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004faa:	429a      	cmp	r2, r3
 8004fac:	f080 817f 	bcs.w	80052ae <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f040 8086 	bne.w	80050d8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ffa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005002:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800500e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1da      	bne.n	8004fcc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3308      	adds	r3, #8
 800501c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3308      	adds	r3, #8
 8005036:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800503a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800503e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005042:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800504c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e1      	bne.n	8005016 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3308      	adds	r3, #8
 8005058:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3308      	adds	r3, #8
 8005072:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005076:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005078:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800507c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e3      	bne.n	8005052 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a8:	f023 0310 	bic.w	r3, r3, #16
 80050ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80050bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e4      	bne.n	8005098 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fc feae 	bl	8001e34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f8f9 	bl	80052e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80050f2:	e0dc      	b.n	80052ae <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005100:	b29b      	uxth	r3, r3
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80ce 	beq.w	80052b2 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8005116:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80c9 	beq.w	80052b2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005142:	647b      	str	r3, [r7, #68]	; 0x44
 8005144:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e4      	bne.n	8005120 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3308      	adds	r3, #8
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	623b      	str	r3, [r7, #32]
   return(result);
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800516c:	f023 0301 	bic.w	r3, r3, #1
 8005170:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3308      	adds	r3, #8
 800517a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800517e:	633a      	str	r2, [r7, #48]	; 0x30
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e1      	bne.n	8005156 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0310 	bic.w	r3, r3, #16
 80051ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051c8:	61fb      	str	r3, [r7, #28]
 80051ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	69b9      	ldr	r1, [r7, #24]
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	617b      	str	r3, [r7, #20]
   return(result);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e4      	bne.n	80051a6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f87e 	bl	80052e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80051e8:	e063      	b.n	80052b2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00e      	beq.n	8005214 <HAL_UART_IRQHandler+0x584>
 80051f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d008      	beq.n	8005214 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800520a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fd1f 	bl	8005c50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005212:	e051      	b.n	80052b8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521c:	2b00      	cmp	r3, #0
 800521e:	d014      	beq.n	800524a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005228:	2b00      	cmp	r3, #0
 800522a:	d105      	bne.n	8005238 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800522c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523c:	2b00      	cmp	r3, #0
 800523e:	d03a      	beq.n	80052b6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	4798      	blx	r3
    }
    return;
 8005248:	e035      	b.n	80052b6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <HAL_UART_IRQHandler+0x5da>
 8005256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fcc9 	bl	8005bfa <UART_EndTransmit_IT>
    return;
 8005268:	e026      	b.n	80052b8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800526a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <HAL_UART_IRQHandler+0x5fa>
 8005276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800527a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fcf6 	bl	8005c74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005288:	e016      	b.n	80052b8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800528a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d010      	beq.n	80052b8 <HAL_UART_IRQHandler+0x628>
 8005296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529a:	2b00      	cmp	r3, #0
 800529c:	da0c      	bge.n	80052b8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fcdf 	bl	8005c62 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052a4:	e008      	b.n	80052b8 <HAL_UART_IRQHandler+0x628>
      return;
 80052a6:	bf00      	nop
 80052a8:	e006      	b.n	80052b8 <HAL_UART_IRQHandler+0x628>
    return;
 80052aa:	bf00      	nop
 80052ac:	e004      	b.n	80052b8 <HAL_UART_IRQHandler+0x628>
      return;
 80052ae:	bf00      	nop
 80052b0:	e002      	b.n	80052b8 <HAL_UART_IRQHandler+0x628>
      return;
 80052b2:	bf00      	nop
 80052b4:	e000      	b.n	80052b8 <HAL_UART_IRQHandler+0x628>
    return;
 80052b6:	bf00      	nop
  }
}
 80052b8:	37e8      	adds	r7, #232	; 0xe8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop

080052c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr
	...

080052fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052fc:	b5b0      	push	{r4, r5, r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	4313      	orrs	r3, r2
 800531e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4bab      	ldr	r3, [pc, #684]	; (80055d4 <UART_SetConfig+0x2d8>)
 8005328:	4013      	ands	r3, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	69f9      	ldr	r1, [r7, #28]
 8005330:	430b      	orrs	r3, r1
 8005332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4aa0      	ldr	r2, [pc, #640]	; (80055d8 <UART_SetConfig+0x2dc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	4313      	orrs	r3, r2
 8005362:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800536e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	69f9      	ldr	r1, [r7, #28]
 8005378:	430b      	orrs	r3, r1
 800537a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	f023 010f 	bic.w	r1, r3, #15
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a91      	ldr	r2, [pc, #580]	; (80055dc <UART_SetConfig+0x2e0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d122      	bne.n	80053e2 <UART_SetConfig+0xe6>
 800539c:	2003      	movs	r0, #3
 800539e:	f7ff fc05 	bl	8004bac <LL_RCC_GetUSARTClockSource>
 80053a2:	4603      	mov	r3, r0
 80053a4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d817      	bhi.n	80053dc <UART_SetConfig+0xe0>
 80053ac:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <UART_SetConfig+0xb8>)
 80053ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b2:	bf00      	nop
 80053b4:	080053c5 	.word	0x080053c5
 80053b8:	080053d1 	.word	0x080053d1
 80053bc:	080053cb 	.word	0x080053cb
 80053c0:	080053d7 	.word	0x080053d7
 80053c4:	2301      	movs	r3, #1
 80053c6:	76fb      	strb	r3, [r7, #27]
 80053c8:	e072      	b.n	80054b0 <UART_SetConfig+0x1b4>
 80053ca:	2302      	movs	r3, #2
 80053cc:	76fb      	strb	r3, [r7, #27]
 80053ce:	e06f      	b.n	80054b0 <UART_SetConfig+0x1b4>
 80053d0:	2304      	movs	r3, #4
 80053d2:	76fb      	strb	r3, [r7, #27]
 80053d4:	e06c      	b.n	80054b0 <UART_SetConfig+0x1b4>
 80053d6:	2308      	movs	r3, #8
 80053d8:	76fb      	strb	r3, [r7, #27]
 80053da:	e069      	b.n	80054b0 <UART_SetConfig+0x1b4>
 80053dc:	2310      	movs	r3, #16
 80053de:	76fb      	strb	r3, [r7, #27]
 80053e0:	e066      	b.n	80054b0 <UART_SetConfig+0x1b4>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a7e      	ldr	r2, [pc, #504]	; (80055e0 <UART_SetConfig+0x2e4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d134      	bne.n	8005456 <UART_SetConfig+0x15a>
 80053ec:	200c      	movs	r0, #12
 80053ee:	f7ff fbdd 	bl	8004bac <LL_RCC_GetUSARTClockSource>
 80053f2:	4603      	mov	r3, r0
 80053f4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80053f8:	2b0c      	cmp	r3, #12
 80053fa:	d829      	bhi.n	8005450 <UART_SetConfig+0x154>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <UART_SetConfig+0x108>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	08005439 	.word	0x08005439
 8005408:	08005451 	.word	0x08005451
 800540c:	08005451 	.word	0x08005451
 8005410:	08005451 	.word	0x08005451
 8005414:	08005445 	.word	0x08005445
 8005418:	08005451 	.word	0x08005451
 800541c:	08005451 	.word	0x08005451
 8005420:	08005451 	.word	0x08005451
 8005424:	0800543f 	.word	0x0800543f
 8005428:	08005451 	.word	0x08005451
 800542c:	08005451 	.word	0x08005451
 8005430:	08005451 	.word	0x08005451
 8005434:	0800544b 	.word	0x0800544b
 8005438:	2300      	movs	r3, #0
 800543a:	76fb      	strb	r3, [r7, #27]
 800543c:	e038      	b.n	80054b0 <UART_SetConfig+0x1b4>
 800543e:	2302      	movs	r3, #2
 8005440:	76fb      	strb	r3, [r7, #27]
 8005442:	e035      	b.n	80054b0 <UART_SetConfig+0x1b4>
 8005444:	2304      	movs	r3, #4
 8005446:	76fb      	strb	r3, [r7, #27]
 8005448:	e032      	b.n	80054b0 <UART_SetConfig+0x1b4>
 800544a:	2308      	movs	r3, #8
 800544c:	76fb      	strb	r3, [r7, #27]
 800544e:	e02f      	b.n	80054b0 <UART_SetConfig+0x1b4>
 8005450:	2310      	movs	r3, #16
 8005452:	76fb      	strb	r3, [r7, #27]
 8005454:	e02c      	b.n	80054b0 <UART_SetConfig+0x1b4>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a5f      	ldr	r2, [pc, #380]	; (80055d8 <UART_SetConfig+0x2dc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d125      	bne.n	80054ac <UART_SetConfig+0x1b0>
 8005460:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005464:	f7ff fbb4 	bl	8004bd0 <LL_RCC_GetLPUARTClockSource>
 8005468:	4603      	mov	r3, r0
 800546a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800546e:	d017      	beq.n	80054a0 <UART_SetConfig+0x1a4>
 8005470:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005474:	d817      	bhi.n	80054a6 <UART_SetConfig+0x1aa>
 8005476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800547a:	d00b      	beq.n	8005494 <UART_SetConfig+0x198>
 800547c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005480:	d811      	bhi.n	80054a6 <UART_SetConfig+0x1aa>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <UART_SetConfig+0x192>
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d006      	beq.n	800549a <UART_SetConfig+0x19e>
 800548c:	e00b      	b.n	80054a6 <UART_SetConfig+0x1aa>
 800548e:	2300      	movs	r3, #0
 8005490:	76fb      	strb	r3, [r7, #27]
 8005492:	e00d      	b.n	80054b0 <UART_SetConfig+0x1b4>
 8005494:	2302      	movs	r3, #2
 8005496:	76fb      	strb	r3, [r7, #27]
 8005498:	e00a      	b.n	80054b0 <UART_SetConfig+0x1b4>
 800549a:	2304      	movs	r3, #4
 800549c:	76fb      	strb	r3, [r7, #27]
 800549e:	e007      	b.n	80054b0 <UART_SetConfig+0x1b4>
 80054a0:	2308      	movs	r3, #8
 80054a2:	76fb      	strb	r3, [r7, #27]
 80054a4:	e004      	b.n	80054b0 <UART_SetConfig+0x1b4>
 80054a6:	2310      	movs	r3, #16
 80054a8:	76fb      	strb	r3, [r7, #27]
 80054aa:	e001      	b.n	80054b0 <UART_SetConfig+0x1b4>
 80054ac:	2310      	movs	r3, #16
 80054ae:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a48      	ldr	r2, [pc, #288]	; (80055d8 <UART_SetConfig+0x2dc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	f040 8098 	bne.w	80055ec <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054bc:	7efb      	ldrb	r3, [r7, #27]
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d823      	bhi.n	800550a <UART_SetConfig+0x20e>
 80054c2:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <UART_SetConfig+0x1cc>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	080054ed 	.word	0x080054ed
 80054cc:	0800550b 	.word	0x0800550b
 80054d0:	080054f5 	.word	0x080054f5
 80054d4:	0800550b 	.word	0x0800550b
 80054d8:	080054fb 	.word	0x080054fb
 80054dc:	0800550b 	.word	0x0800550b
 80054e0:	0800550b 	.word	0x0800550b
 80054e4:	0800550b 	.word	0x0800550b
 80054e8:	08005503 	.word	0x08005503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ec:	f7fe f826 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 80054f0:	6178      	str	r0, [r7, #20]
        break;
 80054f2:	e00f      	b.n	8005514 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f4:	4b3b      	ldr	r3, [pc, #236]	; (80055e4 <UART_SetConfig+0x2e8>)
 80054f6:	617b      	str	r3, [r7, #20]
        break;
 80054f8:	e00c      	b.n	8005514 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054fa:	f7fd ff6b 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 80054fe:	6178      	str	r0, [r7, #20]
        break;
 8005500:	e008      	b.n	8005514 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005506:	617b      	str	r3, [r7, #20]
        break;
 8005508:	e004      	b.n	8005514 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	76bb      	strb	r3, [r7, #26]
        break;
 8005512:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8128 	beq.w	800576c <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	4a31      	ldr	r2, [pc, #196]	; (80055e8 <UART_SetConfig+0x2ec>)
 8005522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005526:	461a      	mov	r2, r3
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	fbb3 f3f2 	udiv	r3, r3, r2
 800552e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	4413      	add	r3, r2
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	429a      	cmp	r2, r3
 800553e:	d305      	bcc.n	800554c <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	429a      	cmp	r2, r3
 800554a:	d902      	bls.n	8005552 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	76bb      	strb	r3, [r7, #26]
 8005550:	e10c      	b.n	800576c <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	4618      	mov	r0, r3
 8005556:	f04f 0100 	mov.w	r1, #0
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	4a22      	ldr	r2, [pc, #136]	; (80055e8 <UART_SetConfig+0x2ec>)
 8005560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005564:	b29a      	uxth	r2, r3
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	f7fb f9d3 	bl	8000914 <__aeabi_uldivmod>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4610      	mov	r0, r2
 8005574:	4619      	mov	r1, r3
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	020b      	lsls	r3, r1, #8
 8005580:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005584:	0202      	lsls	r2, r0, #8
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	6849      	ldr	r1, [r1, #4]
 800558a:	0849      	lsrs	r1, r1, #1
 800558c:	4608      	mov	r0, r1
 800558e:	f04f 0100 	mov.w	r1, #0
 8005592:	1814      	adds	r4, r2, r0
 8005594:	eb43 0501 	adc.w	r5, r3, r1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	461a      	mov	r2, r3
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	4620      	mov	r0, r4
 80055a4:	4629      	mov	r1, r5
 80055a6:	f7fb f9b5 	bl	8000914 <__aeabi_uldivmod>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4613      	mov	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055b8:	d308      	bcc.n	80055cc <UART_SetConfig+0x2d0>
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c0:	d204      	bcs.n	80055cc <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	60da      	str	r2, [r3, #12]
 80055ca:	e0cf      	b.n	800576c <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	76bb      	strb	r3, [r7, #26]
 80055d0:	e0cc      	b.n	800576c <UART_SetConfig+0x470>
 80055d2:	bf00      	nop
 80055d4:	cfff69f3 	.word	0xcfff69f3
 80055d8:	40008000 	.word	0x40008000
 80055dc:	40013800 	.word	0x40013800
 80055e0:	40004400 	.word	0x40004400
 80055e4:	00f42400 	.word	0x00f42400
 80055e8:	08017fec 	.word	0x08017fec
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f4:	d165      	bne.n	80056c2 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 80055f6:	7efb      	ldrb	r3, [r7, #27]
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d828      	bhi.n	800564e <UART_SetConfig+0x352>
 80055fc:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <UART_SetConfig+0x308>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	08005629 	.word	0x08005629
 8005608:	08005631 	.word	0x08005631
 800560c:	08005639 	.word	0x08005639
 8005610:	0800564f 	.word	0x0800564f
 8005614:	0800563f 	.word	0x0800563f
 8005618:	0800564f 	.word	0x0800564f
 800561c:	0800564f 	.word	0x0800564f
 8005620:	0800564f 	.word	0x0800564f
 8005624:	08005647 	.word	0x08005647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005628:	f7fd ff88 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 800562c:	6178      	str	r0, [r7, #20]
        break;
 800562e:	e013      	b.n	8005658 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005630:	f7fd ff96 	bl	8003560 <HAL_RCC_GetPCLK2Freq>
 8005634:	6178      	str	r0, [r7, #20]
        break;
 8005636:	e00f      	b.n	8005658 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005638:	4b56      	ldr	r3, [pc, #344]	; (8005794 <UART_SetConfig+0x498>)
 800563a:	617b      	str	r3, [r7, #20]
        break;
 800563c:	e00c      	b.n	8005658 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800563e:	f7fd fec9 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8005642:	6178      	str	r0, [r7, #20]
        break;
 8005644:	e008      	b.n	8005658 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564a:	617b      	str	r3, [r7, #20]
        break;
 800564c:	e004      	b.n	8005658 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	76bb      	strb	r3, [r7, #26]
        break;
 8005656:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 8086 	beq.w	800576c <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	4a4c      	ldr	r2, [pc, #304]	; (8005798 <UART_SetConfig+0x49c>)
 8005666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800566a:	461a      	mov	r2, r3
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005672:	005a      	lsls	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	085b      	lsrs	r3, r3, #1
 800567a:	441a      	add	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	b29b      	uxth	r3, r3
 8005686:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	2b0f      	cmp	r3, #15
 800568c:	d916      	bls.n	80056bc <UART_SetConfig+0x3c0>
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005694:	d212      	bcs.n	80056bc <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	b29b      	uxth	r3, r3
 800569a:	f023 030f 	bic.w	r3, r3, #15
 800569e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	085b      	lsrs	r3, r3, #1
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	89fb      	ldrh	r3, [r7, #14]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	89fa      	ldrh	r2, [r7, #14]
 80056b8:	60da      	str	r2, [r3, #12]
 80056ba:	e057      	b.n	800576c <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	76bb      	strb	r3, [r7, #26]
 80056c0:	e054      	b.n	800576c <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056c2:	7efb      	ldrb	r3, [r7, #27]
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d828      	bhi.n	800571a <UART_SetConfig+0x41e>
 80056c8:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <UART_SetConfig+0x3d4>)
 80056ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ce:	bf00      	nop
 80056d0:	080056f5 	.word	0x080056f5
 80056d4:	080056fd 	.word	0x080056fd
 80056d8:	08005705 	.word	0x08005705
 80056dc:	0800571b 	.word	0x0800571b
 80056e0:	0800570b 	.word	0x0800570b
 80056e4:	0800571b 	.word	0x0800571b
 80056e8:	0800571b 	.word	0x0800571b
 80056ec:	0800571b 	.word	0x0800571b
 80056f0:	08005713 	.word	0x08005713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f4:	f7fd ff22 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 80056f8:	6178      	str	r0, [r7, #20]
        break;
 80056fa:	e013      	b.n	8005724 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056fc:	f7fd ff30 	bl	8003560 <HAL_RCC_GetPCLK2Freq>
 8005700:	6178      	str	r0, [r7, #20]
        break;
 8005702:	e00f      	b.n	8005724 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005704:	4b23      	ldr	r3, [pc, #140]	; (8005794 <UART_SetConfig+0x498>)
 8005706:	617b      	str	r3, [r7, #20]
        break;
 8005708:	e00c      	b.n	8005724 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570a:	f7fd fe63 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 800570e:	6178      	str	r0, [r7, #20]
        break;
 8005710:	e008      	b.n	8005724 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005716:	617b      	str	r3, [r7, #20]
        break;
 8005718:	e004      	b.n	8005724 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	76bb      	strb	r3, [r7, #26]
        break;
 8005722:	bf00      	nop
    }

    if (pclk != 0U)
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d020      	beq.n	800576c <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	4a1a      	ldr	r2, [pc, #104]	; (8005798 <UART_SetConfig+0x49c>)
 8005730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005734:	461a      	mov	r2, r3
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	fbb3 f2f2 	udiv	r2, r3, r2
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	441a      	add	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	fbb2 f3f3 	udiv	r3, r2, r3
 800574c:	b29b      	uxth	r3, r3
 800574e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b0f      	cmp	r3, #15
 8005754:	d908      	bls.n	8005768 <UART_SetConfig+0x46c>
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575c:	d204      	bcs.n	8005768 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	60da      	str	r2, [r3, #12]
 8005766:	e001      	b.n	800576c <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005788:	7ebb      	ldrb	r3, [r7, #26]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3720      	adds	r7, #32
 800578e:	46bd      	mov	sp, r7
 8005790:	bdb0      	pop	{r4, r5, r7, pc}
 8005792:	bf00      	nop
 8005794:	00f42400 	.word	0x00f42400
 8005798:	08017fec 	.word	0x08017fec

0800579c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01a      	beq.n	80058b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800589a:	d10a      	bne.n	80058b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr

080058de <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b086      	sub	sp, #24
 80058e2:	af02      	add	r7, sp, #8
 80058e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058ee:	f7fb fdb0 	bl	8001452 <HAL_GetTick>
 80058f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d10e      	bne.n	8005920 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005902:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f82f 	bl	8005974 <UART_WaitOnFlagUntilTimeout>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e025      	b.n	800596c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b04      	cmp	r3, #4
 800592c:	d10e      	bne.n	800594c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800592e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f819 	bl	8005974 <UART_WaitOnFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e00f      	b.n	800596c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b09c      	sub	sp, #112	; 0x70
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	603b      	str	r3, [r7, #0]
 8005980:	4613      	mov	r3, r2
 8005982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005984:	e0a9      	b.n	8005ada <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598c:	f000 80a5 	beq.w	8005ada <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005990:	f7fb fd5f 	bl	8001452 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800599c:	429a      	cmp	r2, r3
 800599e:	d302      	bcc.n	80059a6 <UART_WaitOnFlagUntilTimeout+0x32>
 80059a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d140      	bne.n	8005a28 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059ba:	667b      	str	r3, [r7, #100]	; 0x64
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059c6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e6      	bne.n	80059a6 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3308      	adds	r3, #8
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	663b      	str	r3, [r7, #96]	; 0x60
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3308      	adds	r3, #8
 80059f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80059fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e5      	bne.n	80059d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e069      	b.n	8005afc <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d051      	beq.n	8005ada <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a44:	d149      	bne.n	8005ada <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a4e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a70:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e6      	bne.n	8005a50 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	613b      	str	r3, [r7, #16]
   return(result);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f023 0301 	bic.w	r3, r3, #1
 8005a98:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	3308      	adds	r3, #8
 8005aa0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005aa2:	623a      	str	r2, [r7, #32]
 8005aa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	69f9      	ldr	r1, [r7, #28]
 8005aa8:	6a3a      	ldr	r2, [r7, #32]
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1e5      	bne.n	8005a82 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e010      	b.n	8005afc <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	bf0c      	ite	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	2300      	movne	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	f43f af46 	beq.w	8005986 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3770      	adds	r7, #112	; 0x70
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b095      	sub	sp, #84	; 0x54
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e6      	bne.n	8005b0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3308      	adds	r3, #8
 8005b44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3308      	adds	r3, #8
 8005b60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e3      	bne.n	8005b3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d118      	bne.n	8005bb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f023 0310 	bic.w	r3, r3, #16
 8005b92:	647b      	str	r3, [r7, #68]	; 0x44
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba0:	6979      	ldr	r1, [r7, #20]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	e841 2300 	strex	r3, r2, [r1]
 8005ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e6      	bne.n	8005b7e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005bc4:	bf00      	nop
 8005bc6:	3754      	adds	r7, #84	; 0x54
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr

08005bce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f7ff fb70 	bl	80052d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b088      	sub	sp, #32
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c16:	61fb      	str	r3, [r7, #28]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	6979      	ldr	r1, [r7, #20]
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	e841 2300 	strex	r3, r2, [r1]
 8005c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e6      	bne.n	8005c02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff fb3c 	bl	80052c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c48:	bf00      	nop
 8005c4a:	3720      	adds	r7, #32
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr

08005c62 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bc80      	pop	{r7}
 8005c84:	4770      	bx	lr

08005c86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b085      	sub	sp, #20
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_UARTEx_DisableFifoMode+0x16>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e027      	b.n	8005cec <HAL_UARTEx_DisableFifoMode+0x66>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2224      	movs	r2, #36	; 0x24
 8005ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bc80      	pop	{r7}
 8005cf4:	4770      	bx	lr

08005cf6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e02d      	b.n	8005d6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2224      	movs	r2, #36	; 0x24
 8005d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0201 	bic.w	r2, r2, #1
 8005d34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f850 	bl	8005df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e02d      	b.n	8005de6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2224      	movs	r2, #36	; 0x24
 8005d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0201 	bic.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f812 	bl	8005df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d108      	bne.n	8005e12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e10:	e031      	b.n	8005e76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e12:	2308      	movs	r3, #8
 8005e14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e16:	2308      	movs	r3, #8
 8005e18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	0e5b      	lsrs	r3, r3, #25
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	0f5b      	lsrs	r3, r3, #29
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	7b3a      	ldrb	r2, [r7, #12]
 8005e3e:	4910      	ldr	r1, [pc, #64]	; (8005e80 <UARTEx_SetNbDataToProcess+0x90>)
 8005e40:	5c8a      	ldrb	r2, [r1, r2]
 8005e42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e46:	7b3a      	ldrb	r2, [r7, #12]
 8005e48:	490e      	ldr	r1, [pc, #56]	; (8005e84 <UARTEx_SetNbDataToProcess+0x94>)
 8005e4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	7b7a      	ldrb	r2, [r7, #13]
 8005e5c:	4908      	ldr	r1, [pc, #32]	; (8005e80 <UARTEx_SetNbDataToProcess+0x90>)
 8005e5e:	5c8a      	ldrb	r2, [r1, r2]
 8005e60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e64:	7b7a      	ldrb	r2, [r7, #13]
 8005e66:	4907      	ldr	r1, [pc, #28]	; (8005e84 <UARTEx_SetNbDataToProcess+0x94>)
 8005e68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e76:	bf00      	nop
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr
 8005e80:	08018004 	.word	0x08018004
 8005e84:	0801800c 	.word	0x0801800c

08005e88 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8005e8c:	f7fb fa2c 	bl	80012e8 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8005e90:	f000 f808 	bl	8005ea4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8005e94:	bf00      	nop
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
}
 8005e9c:	bf00      	nop
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr

08005ea4 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoRaWAN_Init_1 */
   printf("APP_VERSION:        V%X.%X.%X\r\n",
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2201      	movs	r2, #1
 8005eac:	2101      	movs	r1, #1
 8005eae:	480b      	ldr	r0, [pc, #44]	; (8005edc <LoRaWAN_Init+0x38>)
 8005eb0:	f010 fdc2 	bl	8016a38 <iprintf>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  printf("MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	2102      	movs	r1, #2
 8005eba:	4809      	ldr	r0, [pc, #36]	; (8005ee0 <LoRaWAN_Init+0x3c>)
 8005ebc:	f010 fdbc 	bl	8016a38 <iprintf>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  printf("MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	4807      	ldr	r0, [pc, #28]	; (8005ee4 <LoRaWAN_Init+0x40>)
 8005ec8:	f010 fdb6 	bl	8016a38 <iprintf>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  LoraInfo_Init();
 8005ecc:	f000 f982 	bl	80061d4 <LoraInfo_Init>
  /* USER CODE END LoRaWAN_Init_1 */

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8005ed0:	4805      	ldr	r0, [pc, #20]	; (8005ee8 <LoRaWAN_Init+0x44>)
 8005ed2:	f001 fccf 	bl	8007874 <LmHandlerInit>

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8005ed6:	bf00      	nop
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	08017b7c 	.word	0x08017b7c
 8005ee0:	08017b9c 	.word	0x08017b9c
 8005ee4:	08017bbc 	.word	0x08017bbc
 8005ee8:	20000020 	.word	0x20000020

08005eec <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8005eec:	b5b0      	push	{r4, r5, r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af04      	add	r7, sp, #16
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
    if ((appData != NULL) && (params != NULL))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d055      	beq.n	8005fa8 <OnRxData+0xbc>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d052      	beq.n	8005fa8 <OnRxData+0xbc>
  {
    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    printf("\r\n###### ========== MCPS-Indication ==========\r\n");
 8005f02:	482b      	ldr	r0, [pc, #172]	; (8005fb0 <OnRxData+0xc4>)
 8005f04:	f010 fe1e 	bl	8016b44 <puts>
    printf("###### D/L FRAME:%04lu | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n", params->DownlinkCounter,
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6899      	ldr	r1, [r3, #8]
                slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8005f12:	461a      	mov	r2, r3
    printf("###### D/L FRAME:%04lu | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n", params->DownlinkCounter,
 8005f14:	4b27      	ldr	r3, [pc, #156]	; (8005fb4 <OnRxData+0xc8>)
 8005f16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
    printf("###### D/L FRAME:%04lu | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n", params->DownlinkCounter,
 8005f1e:	461d      	mov	r5, r3
                slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	f993 3002 	ldrsb.w	r3, [r3, #2]
    printf("###### D/L FRAME:%04lu | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n", params->DownlinkCounter,
 8005f26:	4618      	mov	r0, r3
                slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	f993 3003 	ldrsb.w	r3, [r3, #3]
    printf("###### D/L FRAME:%04lu | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n", params->DownlinkCounter,
 8005f2e:	461c      	mov	r4, r3
                slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	f993 3004 	ldrsb.w	r3, [r3, #4]
    printf("###### D/L FRAME:%04lu | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n", params->DownlinkCounter,
 8005f36:	9302      	str	r3, [sp, #8]
 8005f38:	9401      	str	r4, [sp, #4]
 8005f3a:	9000      	str	r0, [sp, #0]
 8005f3c:	462b      	mov	r3, r5
 8005f3e:	481e      	ldr	r0, [pc, #120]	; (8005fb8 <OnRxData+0xcc>)
 8005f40:	f010 fd7a 	bl	8016a38 <iprintf>
    printf("###### DATA:  ");
 8005f44:	481d      	ldr	r0, [pc, #116]	; (8005fbc <OnRxData+0xd0>)
 8005f46:	f010 fd77 	bl	8016a38 <iprintf>
    for (uint8_t i = 0; i < appData->BufferSize; i++){
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]
 8005f4e:	e00b      	b.n	8005f68 <OnRxData+0x7c>
          printf("%02x", appData->Buffer[i]);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	4413      	add	r3, r2
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4818      	ldr	r0, [pc, #96]	; (8005fc0 <OnRxData+0xd4>)
 8005f5e:	f010 fd6b 	bl	8016a38 <iprintf>
    for (uint8_t i = 0; i < appData->BufferSize; i++){
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	3301      	adds	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	785b      	ldrb	r3, [r3, #1]
 8005f6c:	7bfa      	ldrb	r2, [r7, #15]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d3ee      	bcc.n	8005f50 <OnRxData+0x64>
    }
    printf("\r\n\r\n");
 8005f72:	4814      	ldr	r0, [pc, #80]	; (8005fc4 <OnRxData+0xd8>)
 8005f74:	f010 fde6 	bl	8016b44 <puts>
    if(appData->Buffer[0] == 0xa1 && appData->Buffer[1] == 0xb2)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2ba1      	cmp	r3, #161	; 0xa1
 8005f80:	d112      	bne.n	8005fa8 <OnRxData+0xbc>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	3301      	adds	r3, #1
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2bb2      	cmp	r3, #178	; 0xb2
 8005f8c:	d10c      	bne.n	8005fa8 <OnRxData+0xbc>
    {
      if(LmHandlerSetTxDatarate(4) == LORAMAC_HANDLER_SUCCESS){
 8005f8e:	2004      	movs	r0, #4
 8005f90:	f002 fa3c 	bl	800840c <LmHandlerSetTxDatarate>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d103      	bne.n	8005fa2 <OnRxData+0xb6>
        printf("Set TxDr Success\r\n");
 8005f9a:	480b      	ldr	r0, [pc, #44]	; (8005fc8 <OnRxData+0xdc>)
 8005f9c:	f010 fdd2 	bl	8016b44 <puts>
        printf("Set TxDr Failed\r\n");
      }
    }
  }
  /* USER CODE END OnRxData_1 */
}
 8005fa0:	e002      	b.n	8005fa8 <OnRxData+0xbc>
        printf("Set TxDr Failed\r\n");
 8005fa2:	480a      	ldr	r0, [pc, #40]	; (8005fcc <OnRxData+0xe0>)
 8005fa4:	f010 fdce 	bl	8016b44 <puts>
}
 8005fa8:	bf00      	nop
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bdb0      	pop	{r4, r5, r7, pc}
 8005fb0:	08017bdc 	.word	0x08017bdc
 8005fb4:	20000054 	.word	0x20000054
 8005fb8:	08017c0c 	.word	0x08017c0c
 8005fbc:	08017c54 	.word	0x08017c54
 8005fc0:	08017c64 	.word	0x08017c64
 8005fc4:	08017c6c 	.word	0x08017c6c
 8005fc8:	08017c70 	.word	0x08017c70
 8005fcc:	08017c84 	.word	0x08017c84

08005fd0 <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 8005fd0:	b590      	push	{r4, r7, lr}
 8005fd2:	b08f      	sub	sp, #60	; 0x3c
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
      if ((params != NULL) && (params->IsMcpsConfirm != 0))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d07f      	beq.n	80060de <OnTxData+0x10e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d07b      	beq.n	80060de <OnTxData+0x10e>
  {
    MibRequestConfirm_t mibReq = {0};
 8005fe6:	f107 0308 	add.w	r3, r7, #8
 8005fea:	2224      	movs	r2, #36	; 0x24
 8005fec:	2100      	movs	r1, #0
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f010 fd1a 	bl	8016a28 <memset>

    printf("\r\n###### ========== MCPS-Confirm =============\r\n");
 8005ff4:	483c      	ldr	r0, [pc, #240]	; (80060e8 <OnTxData+0x118>)
 8005ff6:	f010 fda5 	bl	8016b44 <puts>
    printf("###### U/L FRAME:%04lu | PORT:%d | DR:%d | PWR:%d | CHANNEL:%d", params->UplinkCounter,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6899      	ldr	r1, [r3, #8]
                params->AppData.Port, params->Datarate, params->TxPower, params->Channel);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	7b1b      	ldrb	r3, [r3, #12]
    printf("###### U/L FRAME:%04lu | PORT:%d | DR:%d | PWR:%d | CHANNEL:%d", params->UplinkCounter,
 8006002:	4618      	mov	r0, r3
                params->AppData.Port, params->Datarate, params->TxPower, params->Channel);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f993 3004 	ldrsb.w	r3, [r3, #4]
    printf("###### U/L FRAME:%04lu | PORT:%d | DR:%d | PWR:%d | CHANNEL:%d", params->UplinkCounter,
 800600a:	461c      	mov	r4, r3
                params->AppData.Port, params->Datarate, params->TxPower, params->Channel);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f993 3014 	ldrsb.w	r3, [r3, #20]
    printf("###### U/L FRAME:%04lu | PORT:%d | DR:%d | PWR:%d | CHANNEL:%d", params->UplinkCounter,
 8006012:	461a      	mov	r2, r3
                params->AppData.Port, params->Datarate, params->TxPower, params->Channel);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	7d5b      	ldrb	r3, [r3, #21]
    printf("###### U/L FRAME:%04lu | PORT:%d | DR:%d | PWR:%d | CHANNEL:%d", params->UplinkCounter,
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	9200      	str	r2, [sp, #0]
 800601c:	4623      	mov	r3, r4
 800601e:	4602      	mov	r2, r0
 8006020:	4832      	ldr	r0, [pc, #200]	; (80060ec <OnTxData+0x11c>)
 8006022:	f010 fd09 	bl	8016a38 <iprintf>

    printf(" | MSG TYPE:");
 8006026:	4832      	ldr	r0, [pc, #200]	; (80060f0 <OnTxData+0x120>)
 8006028:	f010 fd06 	bl	8016a38 <iprintf>
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	789b      	ldrb	r3, [r3, #2]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d10b      	bne.n	800604c <OnTxData+0x7c>
      printf("CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	78db      	ldrb	r3, [r3, #3]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <OnTxData+0x70>
 800603c:	4b2d      	ldr	r3, [pc, #180]	; (80060f4 <OnTxData+0x124>)
 800603e:	e000      	b.n	8006042 <OnTxData+0x72>
 8006040:	4b2d      	ldr	r3, [pc, #180]	; (80060f8 <OnTxData+0x128>)
 8006042:	4619      	mov	r1, r3
 8006044:	482d      	ldr	r0, [pc, #180]	; (80060fc <OnTxData+0x12c>)
 8006046:	f010 fcf7 	bl	8016a38 <iprintf>
 800604a:	e002      	b.n	8006052 <OnTxData+0x82>
    else
      printf("UNCONFIRMED\r\n");
 800604c:	482c      	ldr	r0, [pc, #176]	; (8006100 <OnTxData+0x130>)
 800604e:	f010 fd79 	bl	8016b44 <puts>

    mibReq.Type = MIB_CHANNELS_DEFAULT_MASK;
 8006052:	2317      	movs	r3, #23
 8006054:	723b      	strb	r3, [r7, #8]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8006056:	f107 0308 	add.w	r3, r7, #8
 800605a:	4618      	mov	r0, r3
 800605c:	f006 fa52 	bl	800c504 <LoRaMacMibGetRequestConfirm>
    printf("###### CHANNEL MASK: %04x", mibReq.Param.ChannelsMask[0]);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	4619      	mov	r1, r3
 8006066:	4827      	ldr	r0, [pc, #156]	; (8006104 <OnTxData+0x134>)
 8006068:	f010 fce6 	bl	8016a38 <iprintf>
    for (uint8_t i = 6; i > 0; i--)
 800606c:	2306      	movs	r3, #6
 800606e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006072:	e00e      	b.n	8006092 <OnTxData+0xc2>
    printf(" %04x", mibReq.Param.ChannelsMask[i]);
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	4413      	add	r3, r2
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	4619      	mov	r1, r3
 8006082:	4821      	ldr	r0, [pc, #132]	; (8006108 <OnTxData+0x138>)
 8006084:	f010 fcd8 	bl	8016a38 <iprintf>
    for (uint8_t i = 6; i > 0; i--)
 8006088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800608c:	3b01      	subs	r3, #1
 800608e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1ec      	bne.n	8006074 <OnTxData+0xa4>
    printf("\r\n");
 800609a:	481c      	ldr	r0, [pc, #112]	; (800610c <OnTxData+0x13c>)
 800609c:	f010 fd52 	bl	8016b44 <puts>

    printf("###### DATA:  ");
 80060a0:	481b      	ldr	r0, [pc, #108]	; (8006110 <OnTxData+0x140>)
 80060a2:	f010 fcc9 	bl	8016a38 <iprintf>
    for (uint8_t i = 0; i < params->AppData.BufferSize; i++)
 80060a6:	2300      	movs	r3, #0
 80060a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80060ac:	e00e      	b.n	80060cc <OnTxData+0xfc>
        printf("%02x", params->AppData.Buffer[i]);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691a      	ldr	r2, [r3, #16]
 80060b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80060b6:	4413      	add	r3, r2
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	4619      	mov	r1, r3
 80060bc:	4815      	ldr	r0, [pc, #84]	; (8006114 <OnTxData+0x144>)
 80060be:	f010 fcbb 	bl	8016a38 <iprintf>
    for (uint8_t i = 0; i < params->AppData.BufferSize; i++)
 80060c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80060c6:	3301      	adds	r3, #1
 80060c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	7b5b      	ldrb	r3, [r3, #13]
 80060d0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d3ea      	bcc.n	80060ae <OnTxData+0xde>
    printf("\r\n\r\n");
 80060d8:	480f      	ldr	r0, [pc, #60]	; (8006118 <OnTxData+0x148>)
 80060da:	f010 fd33 	bl	8016b44 <puts>

  }
  /* USER CODE END OnTxData_1 */
}
 80060de:	bf00      	nop
 80060e0:	3734      	adds	r7, #52	; 0x34
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd90      	pop	{r4, r7, pc}
 80060e6:	bf00      	nop
 80060e8:	08017c98 	.word	0x08017c98
 80060ec:	08017cc8 	.word	0x08017cc8
 80060f0:	08017d08 	.word	0x08017d08
 80060f4:	08017d18 	.word	0x08017d18
 80060f8:	08017d1c 	.word	0x08017d1c
 80060fc:	08017d24 	.word	0x08017d24
 8006100:	08017d38 	.word	0x08017d38
 8006104:	08017d48 	.word	0x08017d48
 8006108:	08017d64 	.word	0x08017d64
 800610c:	08017d6c 	.word	0x08017d6c
 8006110:	08017c54 	.word	0x08017c54
 8006114:	08017c64 	.word	0x08017c64
 8006118:	08017c6c 	.word	0x08017c6c

0800611c <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08c      	sub	sp, #48	; 0x30
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
      if (joinParams != NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d03c      	beq.n	80061a4 <OnJoinRequest+0x88>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d131      	bne.n	8006198 <OnJoinRequest+0x7c>
    {
        MibRequestConfirm_t mibGet = {0};
 8006134:	f107 030c 	add.w	r3, r7, #12
 8006138:	2224      	movs	r2, #36	; 0x24
 800613a:	2100      	movs	r1, #0
 800613c:	4618      	mov	r0, r3
 800613e:	f010 fc73 	bl	8016a28 <memset>
        printf("\r\n###### ===== JOINED ==== ######\r\n");
 8006142:	481a      	ldr	r0, [pc, #104]	; (80061ac <OnJoinRequest+0x90>)
 8006144:	f010 fcfe 	bl	8016b44 <puts>
        if (joinParams->Mode == ACTIVATION_TYPE_OTAA)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	789b      	ldrb	r3, [r3, #2]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d103      	bne.n	8006158 <OnJoinRequest+0x3c>
            printf("###### OTAA\r\n");
 8006150:	4817      	ldr	r0, [pc, #92]	; (80061b0 <OnJoinRequest+0x94>)
 8006152:	f010 fcf7 	bl	8016b44 <puts>
 8006156:	e002      	b.n	800615e <OnJoinRequest+0x42>
        else
            printf("###### ABP\r\n");
 8006158:	4816      	ldr	r0, [pc, #88]	; (80061b4 <OnJoinRequest+0x98>)
 800615a:	f010 fcf3 	bl	8016b44 <puts>
        mibGet.Type = MIB_DEV_ADDR;
 800615e:	2306      	movs	r3, #6
 8006160:	733b      	strb	r3, [r7, #12]
        LoRaMacMibGetRequestConfirm(&mibGet);
 8006162:	f107 030c 	add.w	r3, r7, #12
 8006166:	4618      	mov	r0, r3
 8006168:	f006 f9cc 	bl	800c504 <LoRaMacMibGetRequestConfirm>
        printf("###### DevAddr: %08lX", mibGet.Param.DevAddr);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4619      	mov	r1, r3
 8006170:	4811      	ldr	r0, [pc, #68]	; (80061b8 <OnJoinRequest+0x9c>)
 8006172:	f010 fc61 	bl	8016a38 <iprintf>
        mibGet.Type = MIB_CHANNELS_DATARATE;
 8006176:	231f      	movs	r3, #31
 8006178:	733b      	strb	r3, [r7, #12]
        LoRaMacMibGetRequestConfirm(&mibGet);
 800617a:	f107 030c 	add.w	r3, r7, #12
 800617e:	4618      	mov	r0, r3
 8006180:	f006 f9c0 	bl	800c504 <LoRaMacMibGetRequestConfirm>
        printf(" | DATA RATE: DR_%d\r\n", mibGet.Param.ChannelsDatarate);
 8006184:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8006188:	4619      	mov	r1, r3
 800618a:	480c      	ldr	r0, [pc, #48]	; (80061bc <OnJoinRequest+0xa0>)
 800618c:	f010 fc54 	bl	8016a38 <iprintf>
        printf("###### ===== JOIN END ==== ######\r\n\r\n");
 8006190:	480b      	ldr	r0, [pc, #44]	; (80061c0 <OnJoinRequest+0xa4>)
 8006192:	f010 fcd7 	bl	8016b44 <puts>
        report_poweron_enqueue(0);
    }
#endif
  }
  /* USER CODE END OnJoinRequest_1 */
}
 8006196:	e005      	b.n	80061a4 <OnJoinRequest+0x88>
        printf("\r\n###### ===== JOIN FAILED ==== ######\r\n");
 8006198:	480a      	ldr	r0, [pc, #40]	; (80061c4 <OnJoinRequest+0xa8>)
 800619a:	f010 fcd3 	bl	8016b44 <puts>
        printf("###### ===== JOIN END ==== ######\r\n\r\n");
 800619e:	4808      	ldr	r0, [pc, #32]	; (80061c0 <OnJoinRequest+0xa4>)
 80061a0:	f010 fcd0 	bl	8016b44 <puts>
}
 80061a4:	bf00      	nop
 80061a6:	3730      	adds	r7, #48	; 0x30
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	08017d70 	.word	0x08017d70
 80061b0:	08017d94 	.word	0x08017d94
 80061b4:	08017da4 	.word	0x08017da4
 80061b8:	08017db0 	.word	0x08017db0
 80061bc:	08017dc8 	.word	0x08017dc8
 80061c0:	08017de0 	.word	0x08017de0
 80061c4:	08017e08 	.word	0x08017e08

080061c8 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
}
 80061cc:	bf00      	nop
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr

080061d4 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 80061d8:	4b13      	ldr	r3, [pc, #76]	; (8006228 <LoraInfo_Init+0x54>)
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80061de:	4b12      	ldr	r3, [pc, #72]	; (8006228 <LoraInfo_Init+0x54>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80061e4:	4b10      	ldr	r3, [pc, #64]	; (8006228 <LoraInfo_Init+0x54>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80061ea:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <LoraInfo_Init+0x54>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 80061f0:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <LoraInfo_Init+0x54>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f043 0320 	orr.w	r3, r3, #32
 80061f8:	4a0b      	ldr	r2, [pc, #44]	; (8006228 <LoraInfo_Init+0x54>)
 80061fa:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
 80061fc:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <LoraInfo_Init+0x54>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006204:	4a08      	ldr	r2, [pc, #32]	; (8006228 <LoraInfo_Init+0x54>)
 8006206:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8006208:	4b07      	ldr	r3, [pc, #28]	; (8006228 <LoraInfo_Init+0x54>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d100      	bne.n	8006212 <LoraInfo_Init+0x3e>
  {
  /* USER CODE BEGIN LoraInfo_Init_NO_REGION */

  /* USER CODE END LoraInfo_Init_NO_REGION */
    while (1) {} /* At least one region shall be defined */
 8006210:	e7fe      	b.n	8006210 <LoraInfo_Init+0x3c>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8006212:	4b05      	ldr	r3, [pc, #20]	; (8006228 <LoraInfo_Init+0x54>)
 8006214:	2200      	movs	r2, #0
 8006216:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 8006218:	4b03      	ldr	r3, [pc, #12]	; (8006228 <LoraInfo_Init+0x54>)
 800621a:	2203      	movs	r2, #3
 800621c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800621e:	bf00      	nop
 8006220:	46bd      	mov	sp, r7
 8006222:	bc80      	pop	{r7}
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	2000017c 	.word	0x2000017c

0800622c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8006230:	4b02      	ldr	r3, [pc, #8]	; (800623c <LoraInfo_GetPtr+0x10>)
}
 8006232:	4618      	mov	r0, r3
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	2000017c 	.word	0x2000017c

08006240 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800624a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr

08006256 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	4603      	mov	r3, r0
 800625e:	71fb      	strb	r3, [r7, #7]
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8006264:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	bc80      	pop	{r7}
 800626e:	4770      	bx	lr

08006270 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8006276:	2300      	movs	r3, #0
 8006278:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800627a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr

08006286 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800628c:	2300      	movs	r3, #0
 800628e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 8006290:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8006292:	4618      	mov	r0, r3
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	bc80      	pop	{r7}
 800629a:	4770      	bx	lr

0800629c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 80062a2:	2301      	movs	r3, #1
 80062a4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 80062a6:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bc80      	pop	{r7}
 80062b0:	4770      	bx	lr

080062b2 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	33f1      	adds	r3, #241	; 0xf1
 80062be:	2210      	movs	r2, #16
 80062c0:	2100      	movs	r1, #0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f00c ff4a 	bl	801315c <memset1>
    ctx->M_n = 0;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	22f0      	movs	r2, #240	; 0xf0
 80062d4:	2100      	movs	r1, #0
 80062d6:	4618      	mov	r0, r3
 80062d8:	f00c ff40 	bl	801315c <memset1>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	461a      	mov	r2, r3
 80062f2:	2110      	movs	r1, #16
 80062f4:	6838      	ldr	r0, [r7, #0]
 80062f6:	f000 fe61 	bl	8006fbc <lorawan_aes_set_key>
}
 80062fa:	bf00      	nop
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b08c      	sub	sp, #48	; 0x30
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80a1 	beq.w	800645c <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006320:	f1c3 0310 	rsb	r3, r3, #16
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	4293      	cmp	r3, r2
 8006328:	bf28      	it	cs
 800632a:	4613      	movcs	r3, r2
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f203 1201 	addw	r2, r3, #257	; 0x101
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800633a:	4413      	add	r3, r2
 800633c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633e:	b292      	uxth	r2, r2
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	4618      	mov	r0, r3
 8006344:	f00c fecf 	bl	80130e6 <memcpy1>
        ctx->M_n += mlen;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	441a      	add	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800635e:	2b0f      	cmp	r3, #15
 8006360:	f240 808d 	bls.w	800647e <AES_CMAC_Update+0x17c>
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	429a      	cmp	r2, r3
 800636a:	f000 8088 	beq.w	800647e <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800636e:	2300      	movs	r3, #0
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006372:	e015      	b.n	80063a0 <AES_CMAC_Update+0x9e>
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	4413      	add	r3, r2
 800637a:	33f1      	adds	r3, #241	; 0xf1
 800637c:	781a      	ldrb	r2, [r3, #0]
 800637e:	68f9      	ldr	r1, [r7, #12]
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	440b      	add	r3, r1
 8006384:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	4053      	eors	r3, r2
 800638c:	b2d9      	uxtb	r1, r3
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	4413      	add	r3, r2
 8006394:	33f1      	adds	r3, #241	; 0xf1
 8006396:	460a      	mov	r2, r1
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	3301      	adds	r3, #1
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	2b0f      	cmp	r3, #15
 80063a4:	dde6      	ble.n	8006374 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 80063ac:	f107 0314 	add.w	r3, r7, #20
 80063b0:	2210      	movs	r2, #16
 80063b2:	4618      	mov	r0, r3
 80063b4:	f00c fe97 	bl	80130e6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	f107 0114 	add.w	r1, r7, #20
 80063be:	f107 0314 	add.w	r3, r7, #20
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fed8 	bl	8007178 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	33f1      	adds	r3, #241	; 0xf1
 80063cc:	f107 0114 	add.w	r1, r7, #20
 80063d0:	2210      	movs	r2, #16
 80063d2:	4618      	mov	r0, r3
 80063d4:	f00c fe87 	bl	80130e6 <memcpy1>

        data += mlen;
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	4413      	add	r3, r2
 80063de:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 80063e8:	e038      	b.n	800645c <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 80063ea:	2300      	movs	r3, #0
 80063ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ee:	e013      	b.n	8006418 <AES_CMAC_Update+0x116>
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	4413      	add	r3, r2
 80063f6:	33f1      	adds	r3, #241	; 0xf1
 80063f8:	781a      	ldrb	r2, [r3, #0]
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	440b      	add	r3, r1
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	4053      	eors	r3, r2
 8006404:	b2d9      	uxtb	r1, r3
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	4413      	add	r3, r2
 800640c:	33f1      	adds	r3, #241	; 0xf1
 800640e:	460a      	mov	r2, r1
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	3301      	adds	r3, #1
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	2b0f      	cmp	r3, #15
 800641c:	dde8      	ble.n	80063f0 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8006424:	f107 0314 	add.w	r3, r7, #20
 8006428:	2210      	movs	r2, #16
 800642a:	4618      	mov	r0, r3
 800642c:	f00c fe5b 	bl	80130e6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	f107 0114 	add.w	r1, r7, #20
 8006436:	f107 0314 	add.w	r3, r7, #20
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fe9c 	bl	8007178 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	33f1      	adds	r3, #241	; 0xf1
 8006444:	f107 0114 	add.w	r1, r7, #20
 8006448:	2210      	movs	r2, #16
 800644a:	4618      	mov	r0, r3
 800644c:	f00c fe4b 	bl	80130e6 <memcpy1>

        data += 16;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	3310      	adds	r3, #16
 8006454:	60bb      	str	r3, [r7, #8]
        len -= 16;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3b10      	subs	r3, #16
 800645a:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b10      	cmp	r3, #16
 8006460:	d8c3      	bhi.n	80063ea <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	b292      	uxth	r2, r2
 800646c:	68b9      	ldr	r1, [r7, #8]
 800646e:	4618      	mov	r0, r3
 8006470:	f00c fe39 	bl	80130e6 <memcpy1>
    ctx->M_n = len;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800647c:	e000      	b.n	8006480 <AES_CMAC_Update+0x17e>
            return;
 800647e:	bf00      	nop
}
 8006480:	3730      	adds	r7, #48	; 0x30
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b092      	sub	sp, #72	; 0x48
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8006490:	f107 031c 	add.w	r3, r7, #28
 8006494:	2210      	movs	r2, #16
 8006496:	2100      	movs	r1, #0
 8006498:	4618      	mov	r0, r3
 800649a:	f00c fe5f 	bl	801315c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	f107 011c 	add.w	r1, r7, #28
 80064a4:	f107 031c 	add.w	r3, r7, #28
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fe65 	bl	8007178 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80064ae:	7f3b      	ldrb	r3, [r7, #28]
 80064b0:	b25b      	sxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	da31      	bge.n	800651a <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 80064b6:	2300      	movs	r3, #0
 80064b8:	647b      	str	r3, [r7, #68]	; 0x44
 80064ba:	e01c      	b.n	80064f6 <AES_CMAC_Final+0x70>
 80064bc:	f107 021c 	add.w	r2, r7, #28
 80064c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064c2:	4413      	add	r3, r2
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	b25a      	sxtb	r2, r3
 80064ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064cc:	3301      	adds	r3, #1
 80064ce:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80064d2:	440b      	add	r3, r1
 80064d4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80064d8:	09db      	lsrs	r3, r3, #7
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	b25b      	sxtb	r3, r3
 80064de:	4313      	orrs	r3, r2
 80064e0:	b25b      	sxtb	r3, r3
 80064e2:	b2d9      	uxtb	r1, r3
 80064e4:	f107 021c 	add.w	r2, r7, #28
 80064e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ea:	4413      	add	r3, r2
 80064ec:	460a      	mov	r2, r1
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064f2:	3301      	adds	r3, #1
 80064f4:	647b      	str	r3, [r7, #68]	; 0x44
 80064f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064f8:	2b0e      	cmp	r3, #14
 80064fa:	dddf      	ble.n	80064bc <AES_CMAC_Final+0x36>
 80064fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 8006508:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800650c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8006510:	43db      	mvns	r3, r3
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006518:	e028      	b.n	800656c <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800651a:	2300      	movs	r3, #0
 800651c:	643b      	str	r3, [r7, #64]	; 0x40
 800651e:	e01c      	b.n	800655a <AES_CMAC_Final+0xd4>
 8006520:	f107 021c 	add.w	r2, r7, #28
 8006524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006526:	4413      	add	r3, r2
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	b25a      	sxtb	r2, r3
 800652e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006530:	3301      	adds	r3, #1
 8006532:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006536:	440b      	add	r3, r1
 8006538:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800653c:	09db      	lsrs	r3, r3, #7
 800653e:	b2db      	uxtb	r3, r3
 8006540:	b25b      	sxtb	r3, r3
 8006542:	4313      	orrs	r3, r2
 8006544:	b25b      	sxtb	r3, r3
 8006546:	b2d9      	uxtb	r1, r3
 8006548:	f107 021c 	add.w	r2, r7, #28
 800654c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800654e:	4413      	add	r3, r2
 8006550:	460a      	mov	r2, r1
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006556:	3301      	adds	r3, #1
 8006558:	643b      	str	r3, [r7, #64]	; 0x40
 800655a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800655c:	2b0e      	cmp	r3, #14
 800655e:	dddf      	ble.n	8006520 <AES_CMAC_Final+0x9a>
 8006560:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006572:	2b10      	cmp	r3, #16
 8006574:	d11d      	bne.n	80065b2 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8006576:	2300      	movs	r3, #0
 8006578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800657a:	e016      	b.n	80065aa <AES_CMAC_Final+0x124>
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006580:	4413      	add	r3, r2
 8006582:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	f107 011c 	add.w	r1, r7, #28
 800658c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658e:	440b      	add	r3, r1
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	4053      	eors	r3, r2
 8006594:	b2d9      	uxtb	r1, r3
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659a:	4413      	add	r3, r2
 800659c:	f203 1301 	addw	r3, r3, #257	; 0x101
 80065a0:	460a      	mov	r2, r1
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a6:	3301      	adds	r3, #1
 80065a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ac:	2b0f      	cmp	r3, #15
 80065ae:	dde5      	ble.n	800657c <AES_CMAC_Final+0xf6>
 80065b0:	e098      	b.n	80066e4 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 80065b2:	7f3b      	ldrb	r3, [r7, #28]
 80065b4:	b25b      	sxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	da31      	bge.n	800661e <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 80065ba:	2300      	movs	r3, #0
 80065bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80065be:	e01c      	b.n	80065fa <AES_CMAC_Final+0x174>
 80065c0:	f107 021c 	add.w	r2, r7, #28
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	4413      	add	r3, r2
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	b25a      	sxtb	r2, r3
 80065ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d0:	3301      	adds	r3, #1
 80065d2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80065d6:	440b      	add	r3, r1
 80065d8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80065dc:	09db      	lsrs	r3, r3, #7
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	b25b      	sxtb	r3, r3
 80065e2:	4313      	orrs	r3, r2
 80065e4:	b25b      	sxtb	r3, r3
 80065e6:	b2d9      	uxtb	r1, r3
 80065e8:	f107 021c 	add.w	r2, r7, #28
 80065ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ee:	4413      	add	r3, r2
 80065f0:	460a      	mov	r2, r1
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	3301      	adds	r3, #1
 80065f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80065fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fc:	2b0e      	cmp	r3, #14
 80065fe:	dddf      	ble.n	80065c0 <AES_CMAC_Final+0x13a>
 8006600:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800660c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006610:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8006614:	43db      	mvns	r3, r3
 8006616:	b2db      	uxtb	r3, r3
 8006618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661c:	e028      	b.n	8006670 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800661e:	2300      	movs	r3, #0
 8006620:	637b      	str	r3, [r7, #52]	; 0x34
 8006622:	e01c      	b.n	800665e <AES_CMAC_Final+0x1d8>
 8006624:	f107 021c 	add.w	r2, r7, #28
 8006628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662a:	4413      	add	r3, r2
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	b25a      	sxtb	r2, r3
 8006632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006634:	3301      	adds	r3, #1
 8006636:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800663a:	440b      	add	r3, r1
 800663c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8006640:	09db      	lsrs	r3, r3, #7
 8006642:	b2db      	uxtb	r3, r3
 8006644:	b25b      	sxtb	r3, r3
 8006646:	4313      	orrs	r3, r2
 8006648:	b25b      	sxtb	r3, r3
 800664a:	b2d9      	uxtb	r1, r3
 800664c:	f107 021c 	add.w	r2, r7, #28
 8006650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006652:	4413      	add	r3, r2
 8006654:	460a      	mov	r2, r1
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665a:	3301      	adds	r3, #1
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
 800665e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006660:	2b0e      	cmp	r3, #14
 8006662:	dddf      	ble.n	8006624 <AES_CMAC_Final+0x19e>
 8006664:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	4413      	add	r3, r2
 800667a:	2280      	movs	r2, #128	; 0x80
 800667c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8006680:	e007      	b.n	8006692 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	4413      	add	r3, r2
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80066a6:	2b0f      	cmp	r3, #15
 80066a8:	d9eb      	bls.n	8006682 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 80066aa:	2300      	movs	r3, #0
 80066ac:	633b      	str	r3, [r7, #48]	; 0x30
 80066ae:	e016      	b.n	80066de <AES_CMAC_Final+0x258>
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	4413      	add	r3, r2
 80066b6:	f203 1301 	addw	r3, r3, #257	; 0x101
 80066ba:	781a      	ldrb	r2, [r3, #0]
 80066bc:	f107 011c 	add.w	r1, r7, #28
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	440b      	add	r3, r1
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	4053      	eors	r3, r2
 80066c8:	b2d9      	uxtb	r1, r3
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	4413      	add	r3, r2
 80066d0:	f203 1301 	addw	r3, r3, #257	; 0x101
 80066d4:	460a      	mov	r2, r1
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066da:	3301      	adds	r3, #1
 80066dc:	633b      	str	r3, [r7, #48]	; 0x30
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	2b0f      	cmp	r3, #15
 80066e2:	dde5      	ble.n	80066b0 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 80066e4:	2300      	movs	r3, #0
 80066e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066e8:	e015      	b.n	8006716 <AES_CMAC_Final+0x290>
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	4413      	add	r3, r2
 80066f0:	33f1      	adds	r3, #241	; 0xf1
 80066f2:	781a      	ldrb	r2, [r3, #0]
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	440b      	add	r3, r1
 80066fa:	f203 1301 	addw	r3, r3, #257	; 0x101
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	4053      	eors	r3, r2
 8006702:	b2d9      	uxtb	r1, r3
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	4413      	add	r3, r2
 800670a:	33f1      	adds	r3, #241	; 0xf1
 800670c:	460a      	mov	r2, r1
 800670e:	701a      	strb	r2, [r3, #0]
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	3301      	adds	r3, #1
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	2b0f      	cmp	r3, #15
 800671a:	dde6      	ble.n	80066ea <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8006722:	f107 030c 	add.w	r3, r7, #12
 8006726:	2210      	movs	r2, #16
 8006728:	4618      	mov	r0, r3
 800672a:	f00c fcdc 	bl	80130e6 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	f107 030c 	add.w	r3, r7, #12
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fd1e 	bl	8007178 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800673c:	f107 031c 	add.w	r3, r7, #28
 8006740:	2210      	movs	r2, #16
 8006742:	2100      	movs	r1, #0
 8006744:	4618      	mov	r0, r3
 8006746:	f00c fd09 	bl	801315c <memset1>
}
 800674a:	bf00      	nop
 800674c:	3748      	adds	r7, #72	; 0x48
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781a      	ldrb	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3301      	adds	r3, #1
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	7852      	ldrb	r2, [r2, #1]
 800676c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3302      	adds	r3, #2
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	7892      	ldrb	r2, [r2, #2]
 8006776:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3303      	adds	r3, #3
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	78d2      	ldrb	r2, [r2, #3]
 8006780:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3304      	adds	r3, #4
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	7912      	ldrb	r2, [r2, #4]
 800678a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3305      	adds	r3, #5
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	7952      	ldrb	r2, [r2, #5]
 8006794:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3306      	adds	r3, #6
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	7992      	ldrb	r2, [r2, #6]
 800679e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3307      	adds	r3, #7
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	79d2      	ldrb	r2, [r2, #7]
 80067a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3308      	adds	r3, #8
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	7a12      	ldrb	r2, [r2, #8]
 80067b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3309      	adds	r3, #9
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	7a52      	ldrb	r2, [r2, #9]
 80067bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	330a      	adds	r3, #10
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	7a92      	ldrb	r2, [r2, #10]
 80067c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	330b      	adds	r3, #11
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	7ad2      	ldrb	r2, [r2, #11]
 80067d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	330c      	adds	r3, #12
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	7b12      	ldrb	r2, [r2, #12]
 80067da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	330d      	adds	r3, #13
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	7b52      	ldrb	r2, [r2, #13]
 80067e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	330e      	adds	r3, #14
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	7b92      	ldrb	r2, [r2, #14]
 80067ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	330f      	adds	r3, #15
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	7bd2      	ldrb	r2, [r2, #15]
 80067f8:	701a      	strb	r2, [r3, #0]
#endif
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr

08006804 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	4613      	mov	r3, r2
 8006810:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 8006812:	e007      	b.n	8006824 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	1c53      	adds	r3, r2, #1
 8006818:	60bb      	str	r3, [r7, #8]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	1c59      	adds	r1, r3, #1
 800681e:	60f9      	str	r1, [r7, #12]
 8006820:	7812      	ldrb	r2, [r2, #0]
 8006822:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	1e5a      	subs	r2, r3, #1
 8006828:	71fa      	strb	r2, [r7, #7]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1f2      	bne.n	8006814 <copy_block_nn+0x10>
}
 800682e:	bf00      	nop
 8006830:	bf00      	nop
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr

0800683a <xor_block>:

static void xor_block( void *d, const void *s )
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	781a      	ldrb	r2, [r3, #0]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	4053      	eors	r3, r2
 800684e:	b2da      	uxtb	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3301      	adds	r3, #1
 8006858:	7819      	ldrb	r1, [r3, #0]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	3301      	adds	r3, #1
 800685e:	781a      	ldrb	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3301      	adds	r3, #1
 8006864:	404a      	eors	r2, r1
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3302      	adds	r3, #2
 800686e:	7819      	ldrb	r1, [r3, #0]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	3302      	adds	r3, #2
 8006874:	781a      	ldrb	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3302      	adds	r3, #2
 800687a:	404a      	eors	r2, r1
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3303      	adds	r3, #3
 8006884:	7819      	ldrb	r1, [r3, #0]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	3303      	adds	r3, #3
 800688a:	781a      	ldrb	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3303      	adds	r3, #3
 8006890:	404a      	eors	r2, r1
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3304      	adds	r3, #4
 800689a:	7819      	ldrb	r1, [r3, #0]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	3304      	adds	r3, #4
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3304      	adds	r3, #4
 80068a6:	404a      	eors	r2, r1
 80068a8:	b2d2      	uxtb	r2, r2
 80068aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3305      	adds	r3, #5
 80068b0:	7819      	ldrb	r1, [r3, #0]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	3305      	adds	r3, #5
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3305      	adds	r3, #5
 80068bc:	404a      	eors	r2, r1
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3306      	adds	r3, #6
 80068c6:	7819      	ldrb	r1, [r3, #0]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	3306      	adds	r3, #6
 80068cc:	781a      	ldrb	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3306      	adds	r3, #6
 80068d2:	404a      	eors	r2, r1
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3307      	adds	r3, #7
 80068dc:	7819      	ldrb	r1, [r3, #0]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	3307      	adds	r3, #7
 80068e2:	781a      	ldrb	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3307      	adds	r3, #7
 80068e8:	404a      	eors	r2, r1
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3308      	adds	r3, #8
 80068f2:	7819      	ldrb	r1, [r3, #0]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	3308      	adds	r3, #8
 80068f8:	781a      	ldrb	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3308      	adds	r3, #8
 80068fe:	404a      	eors	r2, r1
 8006900:	b2d2      	uxtb	r2, r2
 8006902:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3309      	adds	r3, #9
 8006908:	7819      	ldrb	r1, [r3, #0]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	3309      	adds	r3, #9
 800690e:	781a      	ldrb	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3309      	adds	r3, #9
 8006914:	404a      	eors	r2, r1
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	330a      	adds	r3, #10
 800691e:	7819      	ldrb	r1, [r3, #0]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	330a      	adds	r3, #10
 8006924:	781a      	ldrb	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	330a      	adds	r3, #10
 800692a:	404a      	eors	r2, r1
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	330b      	adds	r3, #11
 8006934:	7819      	ldrb	r1, [r3, #0]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	330b      	adds	r3, #11
 800693a:	781a      	ldrb	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	330b      	adds	r3, #11
 8006940:	404a      	eors	r2, r1
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	330c      	adds	r3, #12
 800694a:	7819      	ldrb	r1, [r3, #0]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	330c      	adds	r3, #12
 8006950:	781a      	ldrb	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	330c      	adds	r3, #12
 8006956:	404a      	eors	r2, r1
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	330d      	adds	r3, #13
 8006960:	7819      	ldrb	r1, [r3, #0]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	330d      	adds	r3, #13
 8006966:	781a      	ldrb	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	330d      	adds	r3, #13
 800696c:	404a      	eors	r2, r1
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	330e      	adds	r3, #14
 8006976:	7819      	ldrb	r1, [r3, #0]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	330e      	adds	r3, #14
 800697c:	781a      	ldrb	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	330e      	adds	r3, #14
 8006982:	404a      	eors	r2, r1
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	330f      	adds	r3, #15
 800698c:	7819      	ldrb	r1, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	330f      	adds	r3, #15
 8006992:	781a      	ldrb	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	330f      	adds	r3, #15
 8006998:	404a      	eors	r2, r1
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]
#endif
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr

080069a8 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	781a      	ldrb	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	4053      	eors	r3, r2
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	3301      	adds	r3, #1
 80069c8:	7819      	ldrb	r1, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3301      	adds	r3, #1
 80069ce:	781a      	ldrb	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3301      	adds	r3, #1
 80069d4:	404a      	eors	r2, r1
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	3302      	adds	r3, #2
 80069de:	7819      	ldrb	r1, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3302      	adds	r3, #2
 80069e4:	781a      	ldrb	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3302      	adds	r3, #2
 80069ea:	404a      	eors	r2, r1
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	3303      	adds	r3, #3
 80069f4:	7819      	ldrb	r1, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3303      	adds	r3, #3
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3303      	adds	r3, #3
 8006a00:	404a      	eors	r2, r1
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	7819      	ldrb	r1, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3304      	adds	r3, #4
 8006a10:	781a      	ldrb	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3304      	adds	r3, #4
 8006a16:	404a      	eors	r2, r1
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	3305      	adds	r3, #5
 8006a20:	7819      	ldrb	r1, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	3305      	adds	r3, #5
 8006a26:	781a      	ldrb	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3305      	adds	r3, #5
 8006a2c:	404a      	eors	r2, r1
 8006a2e:	b2d2      	uxtb	r2, r2
 8006a30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	3306      	adds	r3, #6
 8006a36:	7819      	ldrb	r1, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3306      	adds	r3, #6
 8006a3c:	781a      	ldrb	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3306      	adds	r3, #6
 8006a42:	404a      	eors	r2, r1
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	3307      	adds	r3, #7
 8006a4c:	7819      	ldrb	r1, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3307      	adds	r3, #7
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3307      	adds	r3, #7
 8006a58:	404a      	eors	r2, r1
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	3308      	adds	r3, #8
 8006a62:	7819      	ldrb	r1, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3308      	adds	r3, #8
 8006a68:	781a      	ldrb	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	404a      	eors	r2, r1
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	3309      	adds	r3, #9
 8006a78:	7819      	ldrb	r1, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	3309      	adds	r3, #9
 8006a7e:	781a      	ldrb	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3309      	adds	r3, #9
 8006a84:	404a      	eors	r2, r1
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	330a      	adds	r3, #10
 8006a8e:	7819      	ldrb	r1, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	330a      	adds	r3, #10
 8006a94:	781a      	ldrb	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	330a      	adds	r3, #10
 8006a9a:	404a      	eors	r2, r1
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	330b      	adds	r3, #11
 8006aa4:	7819      	ldrb	r1, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	330b      	adds	r3, #11
 8006aaa:	781a      	ldrb	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	330b      	adds	r3, #11
 8006ab0:	404a      	eors	r2, r1
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	7819      	ldrb	r1, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	330c      	adds	r3, #12
 8006ac0:	781a      	ldrb	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	404a      	eors	r2, r1
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	330d      	adds	r3, #13
 8006ad0:	7819      	ldrb	r1, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	330d      	adds	r3, #13
 8006ad6:	781a      	ldrb	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	330d      	adds	r3, #13
 8006adc:	404a      	eors	r2, r1
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	330e      	adds	r3, #14
 8006ae6:	7819      	ldrb	r1, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	330e      	adds	r3, #14
 8006aec:	781a      	ldrb	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	330e      	adds	r3, #14
 8006af2:	404a      	eors	r2, r1
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	330f      	adds	r3, #15
 8006afc:	7819      	ldrb	r1, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	330f      	adds	r3, #15
 8006b02:	781a      	ldrb	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	330f      	adds	r3, #15
 8006b08:	404a      	eors	r2, r1
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8006b0e:	bf00      	nop
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr

08006b18 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff fe88 	bl	800683a <xor_block>
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	4b48      	ldr	r3, [pc, #288]	; (8006c64 <shift_sub_rows+0x130>)
 8006b44:	5c9a      	ldrb	r2, [r3, r2]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	4619      	mov	r1, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3304      	adds	r3, #4
 8006b56:	4a43      	ldr	r2, [pc, #268]	; (8006c64 <shift_sub_rows+0x130>)
 8006b58:	5c52      	ldrb	r2, [r2, r1]
 8006b5a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	4619      	mov	r1, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	3308      	adds	r3, #8
 8006b68:	4a3e      	ldr	r2, [pc, #248]	; (8006c64 <shift_sub_rows+0x130>)
 8006b6a:	5c52      	ldrb	r2, [r2, r1]
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	330c      	adds	r3, #12
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	4619      	mov	r1, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	4a3a      	ldr	r2, [pc, #232]	; (8006c64 <shift_sub_rows+0x130>)
 8006b7c:	5c52      	ldrb	r2, [r2, r1]
 8006b7e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	785b      	ldrb	r3, [r3, #1]
 8006b84:	73fb      	strb	r3, [r7, #15]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3305      	adds	r3, #5
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3301      	adds	r3, #1
 8006b92:	4a34      	ldr	r2, [pc, #208]	; (8006c64 <shift_sub_rows+0x130>)
 8006b94:	5c52      	ldrb	r2, [r2, r1]
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3309      	adds	r3, #9
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3305      	adds	r3, #5
 8006ba4:	4a2f      	ldr	r2, [pc, #188]	; (8006c64 <shift_sub_rows+0x130>)
 8006ba6:	5c52      	ldrb	r2, [r2, r1]
 8006ba8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	330d      	adds	r3, #13
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3309      	adds	r3, #9
 8006bb6:	4a2b      	ldr	r2, [pc, #172]	; (8006c64 <shift_sub_rows+0x130>)
 8006bb8:	5c52      	ldrb	r2, [r2, r1]
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	7bfa      	ldrb	r2, [r7, #15]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	330d      	adds	r3, #13
 8006bc2:	4928      	ldr	r1, [pc, #160]	; (8006c64 <shift_sub_rows+0x130>)
 8006bc4:	5c8a      	ldrb	r2, [r1, r2]
 8006bc6:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	789b      	ldrb	r3, [r3, #2]
 8006bcc:	73fb      	strb	r3, [r7, #15]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	330a      	adds	r3, #10
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3302      	adds	r3, #2
 8006bda:	4a22      	ldr	r2, [pc, #136]	; (8006c64 <shift_sub_rows+0x130>)
 8006bdc:	5c52      	ldrb	r2, [r2, r1]
 8006bde:	701a      	strb	r2, [r3, #0]
 8006be0:	7bfa      	ldrb	r2, [r7, #15]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	330a      	adds	r3, #10
 8006be6:	491f      	ldr	r1, [pc, #124]	; (8006c64 <shift_sub_rows+0x130>)
 8006be8:	5c8a      	ldrb	r2, [r1, r2]
 8006bea:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	799b      	ldrb	r3, [r3, #6]
 8006bf0:	73fb      	strb	r3, [r7, #15]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	330e      	adds	r3, #14
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3306      	adds	r3, #6
 8006bfe:	4a19      	ldr	r2, [pc, #100]	; (8006c64 <shift_sub_rows+0x130>)
 8006c00:	5c52      	ldrb	r2, [r2, r1]
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	7bfa      	ldrb	r2, [r7, #15]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	330e      	adds	r3, #14
 8006c0a:	4916      	ldr	r1, [pc, #88]	; (8006c64 <shift_sub_rows+0x130>)
 8006c0c:	5c8a      	ldrb	r2, [r1, r2]
 8006c0e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	7bdb      	ldrb	r3, [r3, #15]
 8006c14:	73fb      	strb	r3, [r7, #15]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	330b      	adds	r3, #11
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	330f      	adds	r3, #15
 8006c22:	4a10      	ldr	r2, [pc, #64]	; (8006c64 <shift_sub_rows+0x130>)
 8006c24:	5c52      	ldrb	r2, [r2, r1]
 8006c26:	701a      	strb	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3307      	adds	r3, #7
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	330b      	adds	r3, #11
 8006c34:	4a0b      	ldr	r2, [pc, #44]	; (8006c64 <shift_sub_rows+0x130>)
 8006c36:	5c52      	ldrb	r2, [r2, r1]
 8006c38:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3303      	adds	r3, #3
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	4619      	mov	r1, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3307      	adds	r3, #7
 8006c46:	4a07      	ldr	r2, [pc, #28]	; (8006c64 <shift_sub_rows+0x130>)
 8006c48:	5c52      	ldrb	r2, [r2, r1]
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	7bfa      	ldrb	r2, [r7, #15]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3303      	adds	r3, #3
 8006c52:	4904      	ldr	r1, [pc, #16]	; (8006c64 <shift_sub_rows+0x130>)
 8006c54:	5c8a      	ldrb	r2, [r1, r2]
 8006c56:	701a      	strb	r2, [r3, #0]
}
 8006c58:	bf00      	nop
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	08018014 	.word	0x08018014

08006c68 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8006c70:	f107 0308 	add.w	r3, r7, #8
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff fd6b 	bl	8006752 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8006c7c:	7a3b      	ldrb	r3, [r7, #8]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	4b9a      	ldr	r3, [pc, #616]	; (8006eec <mix_sub_columns+0x284>)
 8006c82:	5c9a      	ldrb	r2, [r3, r2]
 8006c84:	7b7b      	ldrb	r3, [r7, #13]
 8006c86:	4619      	mov	r1, r3
 8006c88:	4b99      	ldr	r3, [pc, #612]	; (8006ef0 <mix_sub_columns+0x288>)
 8006c8a:	5c5b      	ldrb	r3, [r3, r1]
 8006c8c:	4053      	eors	r3, r2
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	7cbb      	ldrb	r3, [r7, #18]
 8006c92:	4619      	mov	r1, r3
 8006c94:	4b97      	ldr	r3, [pc, #604]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006c96:	5c5b      	ldrb	r3, [r3, r1]
 8006c98:	4053      	eors	r3, r2
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	7dfb      	ldrb	r3, [r7, #23]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	4b94      	ldr	r3, [pc, #592]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006ca2:	5c5b      	ldrb	r3, [r3, r1]
 8006ca4:	4053      	eors	r3, r2
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8006cac:	7a3b      	ldrb	r3, [r7, #8]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	4b90      	ldr	r3, [pc, #576]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006cb2:	5c9a      	ldrb	r2, [r3, r2]
 8006cb4:	7b7b      	ldrb	r3, [r7, #13]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4b8c      	ldr	r3, [pc, #560]	; (8006eec <mix_sub_columns+0x284>)
 8006cba:	5c5b      	ldrb	r3, [r3, r1]
 8006cbc:	4053      	eors	r3, r2
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	7cbb      	ldrb	r3, [r7, #18]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4b8a      	ldr	r3, [pc, #552]	; (8006ef0 <mix_sub_columns+0x288>)
 8006cc6:	5c5b      	ldrb	r3, [r3, r1]
 8006cc8:	4053      	eors	r3, r2
 8006cca:	b2d9      	uxtb	r1, r3
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	4b88      	ldr	r3, [pc, #544]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006cd2:	5c9a      	ldrb	r2, [r3, r2]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	404a      	eors	r2, r1
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8006cde:	7a3b      	ldrb	r3, [r7, #8]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4b84      	ldr	r3, [pc, #528]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006ce4:	5c9a      	ldrb	r2, [r3, r2]
 8006ce6:	7b7b      	ldrb	r3, [r7, #13]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4b82      	ldr	r3, [pc, #520]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006cec:	5c5b      	ldrb	r3, [r3, r1]
 8006cee:	4053      	eors	r3, r2
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	7cbb      	ldrb	r3, [r7, #18]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4b7d      	ldr	r3, [pc, #500]	; (8006eec <mix_sub_columns+0x284>)
 8006cf8:	5c5b      	ldrb	r3, [r3, r1]
 8006cfa:	4053      	eors	r3, r2
 8006cfc:	b2d9      	uxtb	r1, r3
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
 8006d00:	461a      	mov	r2, r3
 8006d02:	4b7b      	ldr	r3, [pc, #492]	; (8006ef0 <mix_sub_columns+0x288>)
 8006d04:	5c9a      	ldrb	r2, [r3, r2]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3302      	adds	r3, #2
 8006d0a:	404a      	eors	r2, r1
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8006d10:	7a3b      	ldrb	r3, [r7, #8]
 8006d12:	461a      	mov	r2, r3
 8006d14:	4b76      	ldr	r3, [pc, #472]	; (8006ef0 <mix_sub_columns+0x288>)
 8006d16:	5c9a      	ldrb	r2, [r3, r2]
 8006d18:	7b7b      	ldrb	r3, [r7, #13]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4b75      	ldr	r3, [pc, #468]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006d1e:	5c5b      	ldrb	r3, [r3, r1]
 8006d20:	4053      	eors	r3, r2
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	7cbb      	ldrb	r3, [r7, #18]
 8006d26:	4619      	mov	r1, r3
 8006d28:	4b72      	ldr	r3, [pc, #456]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006d2a:	5c5b      	ldrb	r3, [r3, r1]
 8006d2c:	4053      	eors	r3, r2
 8006d2e:	b2d9      	uxtb	r1, r3
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
 8006d32:	461a      	mov	r2, r3
 8006d34:	4b6d      	ldr	r3, [pc, #436]	; (8006eec <mix_sub_columns+0x284>)
 8006d36:	5c9a      	ldrb	r2, [r3, r2]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3303      	adds	r3, #3
 8006d3c:	404a      	eors	r2, r1
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8006d42:	7b3b      	ldrb	r3, [r7, #12]
 8006d44:	461a      	mov	r2, r3
 8006d46:	4b69      	ldr	r3, [pc, #420]	; (8006eec <mix_sub_columns+0x284>)
 8006d48:	5c9a      	ldrb	r2, [r3, r2]
 8006d4a:	7c7b      	ldrb	r3, [r7, #17]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4b68      	ldr	r3, [pc, #416]	; (8006ef0 <mix_sub_columns+0x288>)
 8006d50:	5c5b      	ldrb	r3, [r3, r1]
 8006d52:	4053      	eors	r3, r2
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	7dbb      	ldrb	r3, [r7, #22]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4b66      	ldr	r3, [pc, #408]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006d5c:	5c5b      	ldrb	r3, [r3, r1]
 8006d5e:	4053      	eors	r3, r2
 8006d60:	b2d9      	uxtb	r1, r3
 8006d62:	7afb      	ldrb	r3, [r7, #11]
 8006d64:	461a      	mov	r2, r3
 8006d66:	4b63      	ldr	r3, [pc, #396]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006d68:	5c9a      	ldrb	r2, [r3, r2]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	404a      	eors	r2, r1
 8006d70:	b2d2      	uxtb	r2, r2
 8006d72:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8006d74:	7b3b      	ldrb	r3, [r7, #12]
 8006d76:	461a      	mov	r2, r3
 8006d78:	4b5e      	ldr	r3, [pc, #376]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006d7a:	5c9a      	ldrb	r2, [r3, r2]
 8006d7c:	7c7b      	ldrb	r3, [r7, #17]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4b5a      	ldr	r3, [pc, #360]	; (8006eec <mix_sub_columns+0x284>)
 8006d82:	5c5b      	ldrb	r3, [r3, r1]
 8006d84:	4053      	eors	r3, r2
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	7dbb      	ldrb	r3, [r7, #22]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4b58      	ldr	r3, [pc, #352]	; (8006ef0 <mix_sub_columns+0x288>)
 8006d8e:	5c5b      	ldrb	r3, [r3, r1]
 8006d90:	4053      	eors	r3, r2
 8006d92:	b2d9      	uxtb	r1, r3
 8006d94:	7afb      	ldrb	r3, [r7, #11]
 8006d96:	461a      	mov	r2, r3
 8006d98:	4b56      	ldr	r3, [pc, #344]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006d9a:	5c9a      	ldrb	r2, [r3, r2]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3305      	adds	r3, #5
 8006da0:	404a      	eors	r2, r1
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8006da6:	7b3b      	ldrb	r3, [r7, #12]
 8006da8:	461a      	mov	r2, r3
 8006daa:	4b52      	ldr	r3, [pc, #328]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006dac:	5c9a      	ldrb	r2, [r3, r2]
 8006dae:	7c7b      	ldrb	r3, [r7, #17]
 8006db0:	4619      	mov	r1, r3
 8006db2:	4b50      	ldr	r3, [pc, #320]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006db4:	5c5b      	ldrb	r3, [r3, r1]
 8006db6:	4053      	eors	r3, r2
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	7dbb      	ldrb	r3, [r7, #22]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4b4b      	ldr	r3, [pc, #300]	; (8006eec <mix_sub_columns+0x284>)
 8006dc0:	5c5b      	ldrb	r3, [r3, r1]
 8006dc2:	4053      	eors	r3, r2
 8006dc4:	b2d9      	uxtb	r1, r3
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4b49      	ldr	r3, [pc, #292]	; (8006ef0 <mix_sub_columns+0x288>)
 8006dcc:	5c9a      	ldrb	r2, [r3, r2]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3306      	adds	r3, #6
 8006dd2:	404a      	eors	r2, r1
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8006dd8:	7b3b      	ldrb	r3, [r7, #12]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	4b44      	ldr	r3, [pc, #272]	; (8006ef0 <mix_sub_columns+0x288>)
 8006dde:	5c9a      	ldrb	r2, [r3, r2]
 8006de0:	7c7b      	ldrb	r3, [r7, #17]
 8006de2:	4619      	mov	r1, r3
 8006de4:	4b43      	ldr	r3, [pc, #268]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006de6:	5c5b      	ldrb	r3, [r3, r1]
 8006de8:	4053      	eors	r3, r2
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	7dbb      	ldrb	r3, [r7, #22]
 8006dee:	4619      	mov	r1, r3
 8006df0:	4b40      	ldr	r3, [pc, #256]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006df2:	5c5b      	ldrb	r3, [r3, r1]
 8006df4:	4053      	eors	r3, r2
 8006df6:	b2d9      	uxtb	r1, r3
 8006df8:	7afb      	ldrb	r3, [r7, #11]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	4b3b      	ldr	r3, [pc, #236]	; (8006eec <mix_sub_columns+0x284>)
 8006dfe:	5c9a      	ldrb	r2, [r3, r2]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3307      	adds	r3, #7
 8006e04:	404a      	eors	r2, r1
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8006e0a:	7c3b      	ldrb	r3, [r7, #16]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	4b37      	ldr	r3, [pc, #220]	; (8006eec <mix_sub_columns+0x284>)
 8006e10:	5c9a      	ldrb	r2, [r3, r2]
 8006e12:	7d7b      	ldrb	r3, [r7, #21]
 8006e14:	4619      	mov	r1, r3
 8006e16:	4b36      	ldr	r3, [pc, #216]	; (8006ef0 <mix_sub_columns+0x288>)
 8006e18:	5c5b      	ldrb	r3, [r3, r1]
 8006e1a:	4053      	eors	r3, r2
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	7abb      	ldrb	r3, [r7, #10]
 8006e20:	4619      	mov	r1, r3
 8006e22:	4b34      	ldr	r3, [pc, #208]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006e24:	5c5b      	ldrb	r3, [r3, r1]
 8006e26:	4053      	eors	r3, r2
 8006e28:	b2d9      	uxtb	r1, r3
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	4b31      	ldr	r3, [pc, #196]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006e30:	5c9a      	ldrb	r2, [r3, r2]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	3308      	adds	r3, #8
 8006e36:	404a      	eors	r2, r1
 8006e38:	b2d2      	uxtb	r2, r2
 8006e3a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8006e3c:	7c3b      	ldrb	r3, [r7, #16]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4b2c      	ldr	r3, [pc, #176]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006e42:	5c9a      	ldrb	r2, [r3, r2]
 8006e44:	7d7b      	ldrb	r3, [r7, #21]
 8006e46:	4619      	mov	r1, r3
 8006e48:	4b28      	ldr	r3, [pc, #160]	; (8006eec <mix_sub_columns+0x284>)
 8006e4a:	5c5b      	ldrb	r3, [r3, r1]
 8006e4c:	4053      	eors	r3, r2
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	7abb      	ldrb	r3, [r7, #10]
 8006e52:	4619      	mov	r1, r3
 8006e54:	4b26      	ldr	r3, [pc, #152]	; (8006ef0 <mix_sub_columns+0x288>)
 8006e56:	5c5b      	ldrb	r3, [r3, r1]
 8006e58:	4053      	eors	r3, r2
 8006e5a:	b2d9      	uxtb	r1, r3
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	4b24      	ldr	r3, [pc, #144]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006e62:	5c9a      	ldrb	r2, [r3, r2]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3309      	adds	r3, #9
 8006e68:	404a      	eors	r2, r1
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8006e6e:	7c3b      	ldrb	r3, [r7, #16]
 8006e70:	461a      	mov	r2, r3
 8006e72:	4b20      	ldr	r3, [pc, #128]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006e74:	5c9a      	ldrb	r2, [r3, r2]
 8006e76:	7d7b      	ldrb	r3, [r7, #21]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4b1e      	ldr	r3, [pc, #120]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006e7c:	5c5b      	ldrb	r3, [r3, r1]
 8006e7e:	4053      	eors	r3, r2
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	7abb      	ldrb	r3, [r7, #10]
 8006e84:	4619      	mov	r1, r3
 8006e86:	4b19      	ldr	r3, [pc, #100]	; (8006eec <mix_sub_columns+0x284>)
 8006e88:	5c5b      	ldrb	r3, [r3, r1]
 8006e8a:	4053      	eors	r3, r2
 8006e8c:	b2d9      	uxtb	r1, r3
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
 8006e90:	461a      	mov	r2, r3
 8006e92:	4b17      	ldr	r3, [pc, #92]	; (8006ef0 <mix_sub_columns+0x288>)
 8006e94:	5c9a      	ldrb	r2, [r3, r2]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	330a      	adds	r3, #10
 8006e9a:	404a      	eors	r2, r1
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8006ea0:	7c3b      	ldrb	r3, [r7, #16]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	4b12      	ldr	r3, [pc, #72]	; (8006ef0 <mix_sub_columns+0x288>)
 8006ea6:	5c9a      	ldrb	r2, [r3, r2]
 8006ea8:	7d7b      	ldrb	r3, [r7, #21]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4b11      	ldr	r3, [pc, #68]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006eae:	5c5b      	ldrb	r3, [r3, r1]
 8006eb0:	4053      	eors	r3, r2
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	7abb      	ldrb	r3, [r7, #10]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ef4 <mix_sub_columns+0x28c>)
 8006eba:	5c5b      	ldrb	r3, [r3, r1]
 8006ebc:	4053      	eors	r3, r2
 8006ebe:	b2d9      	uxtb	r1, r3
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	4b09      	ldr	r3, [pc, #36]	; (8006eec <mix_sub_columns+0x284>)
 8006ec6:	5c9a      	ldrb	r2, [r3, r2]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	330b      	adds	r3, #11
 8006ecc:	404a      	eors	r2, r1
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8006ed2:	7d3b      	ldrb	r3, [r7, #20]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4b05      	ldr	r3, [pc, #20]	; (8006eec <mix_sub_columns+0x284>)
 8006ed8:	5c9a      	ldrb	r2, [r3, r2]
 8006eda:	7a7b      	ldrb	r3, [r7, #9]
 8006edc:	4619      	mov	r1, r3
 8006ede:	4b04      	ldr	r3, [pc, #16]	; (8006ef0 <mix_sub_columns+0x288>)
 8006ee0:	5c5b      	ldrb	r3, [r3, r1]
 8006ee2:	4053      	eors	r3, r2
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	e005      	b.n	8006ef8 <mix_sub_columns+0x290>
 8006eec:	08018114 	.word	0x08018114
 8006ef0:	08018214 	.word	0x08018214
 8006ef4:	08018014 	.word	0x08018014
 8006ef8:	4b2d      	ldr	r3, [pc, #180]	; (8006fb0 <mix_sub_columns+0x348>)
 8006efa:	5c5b      	ldrb	r3, [r3, r1]
 8006efc:	4053      	eors	r3, r2
 8006efe:	b2d9      	uxtb	r1, r3
 8006f00:	7cfb      	ldrb	r3, [r7, #19]
 8006f02:	461a      	mov	r2, r3
 8006f04:	4b2a      	ldr	r3, [pc, #168]	; (8006fb0 <mix_sub_columns+0x348>)
 8006f06:	5c9a      	ldrb	r2, [r3, r2]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	330c      	adds	r3, #12
 8006f0c:	404a      	eors	r2, r1
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8006f12:	7d3b      	ldrb	r3, [r7, #20]
 8006f14:	461a      	mov	r2, r3
 8006f16:	4b26      	ldr	r3, [pc, #152]	; (8006fb0 <mix_sub_columns+0x348>)
 8006f18:	5c9a      	ldrb	r2, [r3, r2]
 8006f1a:	7a7b      	ldrb	r3, [r7, #9]
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4b25      	ldr	r3, [pc, #148]	; (8006fb4 <mix_sub_columns+0x34c>)
 8006f20:	5c5b      	ldrb	r3, [r3, r1]
 8006f22:	4053      	eors	r3, r2
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4b23      	ldr	r3, [pc, #140]	; (8006fb8 <mix_sub_columns+0x350>)
 8006f2c:	5c5b      	ldrb	r3, [r3, r1]
 8006f2e:	4053      	eors	r3, r2
 8006f30:	b2d9      	uxtb	r1, r3
 8006f32:	7cfb      	ldrb	r3, [r7, #19]
 8006f34:	461a      	mov	r2, r3
 8006f36:	4b1e      	ldr	r3, [pc, #120]	; (8006fb0 <mix_sub_columns+0x348>)
 8006f38:	5c9a      	ldrb	r2, [r3, r2]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	330d      	adds	r3, #13
 8006f3e:	404a      	eors	r2, r1
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8006f44:	7d3b      	ldrb	r3, [r7, #20]
 8006f46:	461a      	mov	r2, r3
 8006f48:	4b19      	ldr	r3, [pc, #100]	; (8006fb0 <mix_sub_columns+0x348>)
 8006f4a:	5c9a      	ldrb	r2, [r3, r2]
 8006f4c:	7a7b      	ldrb	r3, [r7, #9]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <mix_sub_columns+0x348>)
 8006f52:	5c5b      	ldrb	r3, [r3, r1]
 8006f54:	4053      	eors	r3, r2
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	4b15      	ldr	r3, [pc, #84]	; (8006fb4 <mix_sub_columns+0x34c>)
 8006f5e:	5c5b      	ldrb	r3, [r3, r1]
 8006f60:	4053      	eors	r3, r2
 8006f62:	b2d9      	uxtb	r1, r3
 8006f64:	7cfb      	ldrb	r3, [r7, #19]
 8006f66:	461a      	mov	r2, r3
 8006f68:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <mix_sub_columns+0x350>)
 8006f6a:	5c9a      	ldrb	r2, [r3, r2]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	330e      	adds	r3, #14
 8006f70:	404a      	eors	r2, r1
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006f76:	7d3b      	ldrb	r3, [r7, #20]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <mix_sub_columns+0x350>)
 8006f7c:	5c9a      	ldrb	r2, [r3, r2]
 8006f7e:	7a7b      	ldrb	r3, [r7, #9]
 8006f80:	4619      	mov	r1, r3
 8006f82:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <mix_sub_columns+0x348>)
 8006f84:	5c5b      	ldrb	r3, [r3, r1]
 8006f86:	4053      	eors	r3, r2
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4b08      	ldr	r3, [pc, #32]	; (8006fb0 <mix_sub_columns+0x348>)
 8006f90:	5c5b      	ldrb	r3, [r3, r1]
 8006f92:	4053      	eors	r3, r2
 8006f94:	b2d9      	uxtb	r1, r3
 8006f96:	7cfb      	ldrb	r3, [r7, #19]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <mix_sub_columns+0x34c>)
 8006f9c:	5c9a      	ldrb	r2, [r3, r2]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	330f      	adds	r3, #15
 8006fa2:	404a      	eors	r2, r1
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	701a      	strb	r2, [r3, #0]
  }
 8006fa8:	bf00      	nop
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	08018014 	.word	0x08018014
 8006fb4:	08018114 	.word	0x08018114
 8006fb8:	08018214 	.word	0x08018214

08006fbc <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	607a      	str	r2, [r7, #4]
 8006fc8:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 8006fca:	7afb      	ldrb	r3, [r7, #11]
 8006fcc:	3b10      	subs	r3, #16
 8006fce:	2b10      	cmp	r3, #16
 8006fd0:	bf8c      	ite	hi
 8006fd2:	2201      	movhi	r2, #1
 8006fd4:	2200      	movls	r2, #0
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	2a00      	cmp	r2, #0
 8006fda:	d10d      	bne.n	8006ff8 <lorawan_aes_set_key+0x3c>
 8006fdc:	2201      	movs	r2, #1
 8006fde:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	bf14      	ite	ne
 8006fee:	2301      	movne	r3, #1
 8006ff0:	2300      	moveq	r3, #0
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d105      	bne.n	8007004 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 8007000:	23ff      	movs	r3, #255	; 0xff
 8007002:	e0b2      	b.n	800716a <lorawan_aes_set_key+0x1ae>
        break;
 8007004:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	7afa      	ldrb	r2, [r7, #11]
 800700a:	68f9      	ldr	r1, [r7, #12]
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff fbf9 	bl	8006804 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	331c      	adds	r3, #28
 8007016:	b2db      	uxtb	r3, r3
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800701c:	7c7b      	ldrb	r3, [r7, #17]
 800701e:	091b      	lsrs	r3, r3, #4
 8007020:	b2db      	uxtb	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	b2da      	uxtb	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800702c:	7afb      	ldrb	r3, [r7, #11]
 800702e:	75fb      	strb	r3, [r7, #23]
 8007030:	2301      	movs	r3, #1
 8007032:	75bb      	strb	r3, [r7, #22]
 8007034:	e093      	b.n	800715e <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 8007036:	7dfb      	ldrb	r3, [r7, #23]
 8007038:	3b04      	subs	r3, #4
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	5cd3      	ldrb	r3, [r2, r3]
 800703e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	3b03      	subs	r3, #3
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	5cd3      	ldrb	r3, [r2, r3]
 8007048:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	3b02      	subs	r3, #2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	5cd3      	ldrb	r3, [r2, r3]
 8007052:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 8007054:	7dfb      	ldrb	r3, [r7, #23]
 8007056:	3b01      	subs	r3, #1
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	5cd3      	ldrb	r3, [r2, r3]
 800705c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800705e:	7dfb      	ldrb	r3, [r7, #23]
 8007060:	7afa      	ldrb	r2, [r7, #11]
 8007062:	fbb3 f1f2 	udiv	r1, r3, r2
 8007066:	fb02 f201 	mul.w	r2, r2, r1
 800706a:	1a9b      	subs	r3, r3, r2
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d127      	bne.n	80070c2 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 8007072:	7d7b      	ldrb	r3, [r7, #21]
 8007074:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 8007076:	7d3b      	ldrb	r3, [r7, #20]
 8007078:	4a3e      	ldr	r2, [pc, #248]	; (8007174 <lorawan_aes_set_key+0x1b8>)
 800707a:	5cd2      	ldrb	r2, [r2, r3]
 800707c:	7dbb      	ldrb	r3, [r7, #22]
 800707e:	4053      	eors	r3, r2
 8007080:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 8007082:	7cfb      	ldrb	r3, [r7, #19]
 8007084:	4a3b      	ldr	r2, [pc, #236]	; (8007174 <lorawan_aes_set_key+0x1b8>)
 8007086:	5cd3      	ldrb	r3, [r2, r3]
 8007088:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800708a:	7cbb      	ldrb	r3, [r7, #18]
 800708c:	4a39      	ldr	r2, [pc, #228]	; (8007174 <lorawan_aes_set_key+0x1b8>)
 800708e:	5cd3      	ldrb	r3, [r2, r3]
 8007090:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 8007092:	7c3b      	ldrb	r3, [r7, #16]
 8007094:	4a37      	ldr	r2, [pc, #220]	; (8007174 <lorawan_aes_set_key+0x1b8>)
 8007096:	5cd3      	ldrb	r3, [r2, r3]
 8007098:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800709a:	7dbb      	ldrb	r3, [r7, #22]
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	b25a      	sxtb	r2, r3
 80070a0:	7dbb      	ldrb	r3, [r7, #22]
 80070a2:	09db      	lsrs	r3, r3, #7
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	4619      	mov	r1, r3
 80070a8:	0049      	lsls	r1, r1, #1
 80070aa:	440b      	add	r3, r1
 80070ac:	4619      	mov	r1, r3
 80070ae:	00c8      	lsls	r0, r1, #3
 80070b0:	4619      	mov	r1, r3
 80070b2:	4603      	mov	r3, r0
 80070b4:	440b      	add	r3, r1
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	b25b      	sxtb	r3, r3
 80070ba:	4053      	eors	r3, r2
 80070bc:	b25b      	sxtb	r3, r3
 80070be:	75bb      	strb	r3, [r7, #22]
 80070c0:	e01c      	b.n	80070fc <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 80070c2:	7afb      	ldrb	r3, [r7, #11]
 80070c4:	2b18      	cmp	r3, #24
 80070c6:	d919      	bls.n	80070fc <lorawan_aes_set_key+0x140>
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	7afa      	ldrb	r2, [r7, #11]
 80070cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80070d0:	fb02 f201 	mul.w	r2, r2, r1
 80070d4:	1a9b      	subs	r3, r3, r2
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b10      	cmp	r3, #16
 80070da:	d10f      	bne.n	80070fc <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 80070dc:	7d7b      	ldrb	r3, [r7, #21]
 80070de:	4a25      	ldr	r2, [pc, #148]	; (8007174 <lorawan_aes_set_key+0x1b8>)
 80070e0:	5cd3      	ldrb	r3, [r2, r3]
 80070e2:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 80070e4:	7d3b      	ldrb	r3, [r7, #20]
 80070e6:	4a23      	ldr	r2, [pc, #140]	; (8007174 <lorawan_aes_set_key+0x1b8>)
 80070e8:	5cd3      	ldrb	r3, [r2, r3]
 80070ea:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 80070ec:	7cfb      	ldrb	r3, [r7, #19]
 80070ee:	4a21      	ldr	r2, [pc, #132]	; (8007174 <lorawan_aes_set_key+0x1b8>)
 80070f0:	5cd3      	ldrb	r3, [r2, r3]
 80070f2:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 80070f4:	7cbb      	ldrb	r3, [r7, #18]
 80070f6:	4a1f      	ldr	r2, [pc, #124]	; (8007174 <lorawan_aes_set_key+0x1b8>)
 80070f8:	5cd3      	ldrb	r3, [r2, r3]
 80070fa:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 80070fc:	7dfa      	ldrb	r2, [r7, #23]
 80070fe:	7afb      	ldrb	r3, [r7, #11]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8007104:	7c3b      	ldrb	r3, [r7, #16]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	5cd1      	ldrb	r1, [r2, r3]
 800710a:	7dfb      	ldrb	r3, [r7, #23]
 800710c:	7d7a      	ldrb	r2, [r7, #21]
 800710e:	404a      	eors	r2, r1
 8007110:	b2d1      	uxtb	r1, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8007116:	7c3b      	ldrb	r3, [r7, #16]
 8007118:	3301      	adds	r3, #1
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	5cd1      	ldrb	r1, [r2, r3]
 800711e:	7dfb      	ldrb	r3, [r7, #23]
 8007120:	3301      	adds	r3, #1
 8007122:	7d3a      	ldrb	r2, [r7, #20]
 8007124:	404a      	eors	r2, r1
 8007126:	b2d1      	uxtb	r1, r2
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800712c:	7c3b      	ldrb	r3, [r7, #16]
 800712e:	3302      	adds	r3, #2
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	5cd1      	ldrb	r1, [r2, r3]
 8007134:	7dfb      	ldrb	r3, [r7, #23]
 8007136:	3302      	adds	r3, #2
 8007138:	7cfa      	ldrb	r2, [r7, #19]
 800713a:	404a      	eors	r2, r1
 800713c:	b2d1      	uxtb	r1, r2
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007142:	7c3b      	ldrb	r3, [r7, #16]
 8007144:	3303      	adds	r3, #3
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	5cd1      	ldrb	r1, [r2, r3]
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	3303      	adds	r3, #3
 800714e:	7cba      	ldrb	r2, [r7, #18]
 8007150:	404a      	eors	r2, r1
 8007152:	b2d1      	uxtb	r1, r2
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	3304      	adds	r3, #4
 800715c:	75fb      	strb	r3, [r7, #23]
 800715e:	7dfa      	ldrb	r2, [r7, #23]
 8007160:	7c7b      	ldrb	r3, [r7, #17]
 8007162:	429a      	cmp	r2, r3
 8007164:	f4ff af67 	bcc.w	8007036 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	08018014 	.word	0x08018014

08007178 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b08a      	sub	sp, #40	; 0x28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d038      	beq.n	8007200 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	f107 0314 	add.w	r3, r7, #20
 8007194:	68f9      	ldr	r1, [r7, #12]
 8007196:	4618      	mov	r0, r3
 8007198:	f7ff fc06 	bl	80069a8 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800719c:	2301      	movs	r3, #1
 800719e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071a2:	e014      	b.n	80071ce <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 80071a4:	f107 0314 	add.w	r3, r7, #20
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff fd5d 	bl	8006c68 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80071b4:	0112      	lsls	r2, r2, #4
 80071b6:	441a      	add	r2, r3
 80071b8:	f107 0314 	add.w	r3, r7, #20
 80071bc:	4611      	mov	r1, r2
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff fcaa 	bl	8006b18 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80071c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c8:	3301      	adds	r3, #1
 80071ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80071d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80071d8:	429a      	cmp	r2, r3
 80071da:	d3e3      	bcc.n	80071a4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 80071dc:	f107 0314 	add.w	r3, r7, #20
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7ff fca7 	bl	8006b34 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80071ec:	0112      	lsls	r2, r2, #4
 80071ee:	441a      	add	r2, r3
 80071f0:	f107 0314 	add.w	r3, r7, #20
 80071f4:	4619      	mov	r1, r3
 80071f6:	68b8      	ldr	r0, [r7, #8]
 80071f8:	f7ff fbd6 	bl	80069a8 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	e000      	b.n	8007202 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 8007200:	23ff      	movs	r3, #255	; 0xff
}
 8007202:	4618      	mov	r0, r3
 8007204:	3728      	adds	r7, #40	; 0x28
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	6039      	str	r1, [r7, #0]
 8007216:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007218:	2300      	movs	r3, #0
 800721a:	73fb      	strb	r3, [r7, #15]
 800721c:	e01a      	b.n	8007254 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800721e:	4b12      	ldr	r3, [pc, #72]	; (8007268 <GetKeyByID+0x5c>)
 8007220:	6819      	ldr	r1, [r3, #0]
 8007222:	7bfa      	ldrb	r2, [r7, #15]
 8007224:	4613      	mov	r3, r2
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	4413      	add	r3, r2
 800722a:	440b      	add	r3, r1
 800722c:	3310      	adds	r3, #16
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	79fa      	ldrb	r2, [r7, #7]
 8007232:	429a      	cmp	r2, r3
 8007234:	d10b      	bne.n	800724e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 8007236:	4b0c      	ldr	r3, [pc, #48]	; (8007268 <GetKeyByID+0x5c>)
 8007238:	6819      	ldr	r1, [r3, #0]
 800723a:	7bfa      	ldrb	r2, [r7, #15]
 800723c:	4613      	mov	r3, r2
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	4413      	add	r3, r2
 8007242:	3310      	adds	r3, #16
 8007244:	18ca      	adds	r2, r1, r3
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800724a:	2300      	movs	r3, #0
 800724c:	e006      	b.n	800725c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	3301      	adds	r3, #1
 8007252:	73fb      	strb	r3, [r7, #15]
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	2b09      	cmp	r3, #9
 8007258:	d9e1      	bls.n	800721e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800725a:	2303      	movs	r3, #3
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	bc80      	pop	{r7}
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	2000018c 	.word	0x2000018c

0800726c <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800726c:	b590      	push	{r4, r7, lr}
 800726e:	b0d1      	sub	sp, #324	; 0x144
 8007270:	af00      	add	r7, sp, #0
 8007272:	f107 040c 	add.w	r4, r7, #12
 8007276:	6020      	str	r0, [r4, #0]
 8007278:	f107 0008 	add.w	r0, r7, #8
 800727c:	6001      	str	r1, [r0, #0]
 800727e:	4619      	mov	r1, r3
 8007280:	1dbb      	adds	r3, r7, #6
 8007282:	801a      	strh	r2, [r3, #0]
 8007284:	1d7b      	adds	r3, r7, #5
 8007286:	460a      	mov	r2, r1
 8007288:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800728a:	f107 0308 	add.w	r3, r7, #8
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <ComputeCmac+0x30>
 8007294:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800729c:	2302      	movs	r3, #2
 800729e:	e04e      	b.n	800733e <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 80072a0:	f107 0314 	add.w	r3, r7, #20
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff f804 	bl	80062b2 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 80072aa:	f107 0210 	add.w	r2, r7, #16
 80072ae:	1d7b      	adds	r3, r7, #5
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	4611      	mov	r1, r2
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff ffa9 	bl	800720c <GetKeyByID>
 80072ba:	4603      	mov	r3, r0
 80072bc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80072c0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d138      	bne.n	800733a <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 80072c8:	f107 0310 	add.w	r3, r7, #16
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	f107 0314 	add.w	r3, r7, #20
 80072d4:	4611      	mov	r1, r2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff f804 	bl	80062e4 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 80072dc:	f107 030c 	add.w	r3, r7, #12
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d007      	beq.n	80072f6 <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 80072e6:	f107 030c 	add.w	r3, r7, #12
 80072ea:	f107 0014 	add.w	r0, r7, #20
 80072ee:	2210      	movs	r2, #16
 80072f0:	6819      	ldr	r1, [r3, #0]
 80072f2:	f7ff f806 	bl	8006302 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 80072f6:	1dbb      	adds	r3, r7, #6
 80072f8:	881a      	ldrh	r2, [r3, #0]
 80072fa:	f107 0308 	add.w	r3, r7, #8
 80072fe:	f107 0014 	add.w	r0, r7, #20
 8007302:	6819      	ldr	r1, [r3, #0]
 8007304:	f7fe fffd 	bl	8006302 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 8007308:	f107 0214 	add.w	r2, r7, #20
 800730c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8007310:	4611      	mov	r1, r2
 8007312:	4618      	mov	r0, r3
 8007314:	f7ff f8b7 	bl	8006486 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8007318:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800731c:	061a      	lsls	r2, r3, #24
 800731e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007322:	041b      	lsls	r3, r3, #16
 8007324:	431a      	orrs	r2, r3
 8007326:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800732a:	021b      	lsls	r3, r3, #8
 800732c:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800732e:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8007332:	431a      	orrs	r2, r3
 8007334:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007338:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800733a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800733e:	4618      	mov	r0, r3
 8007340:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007344:	46bd      	mov	sp, r7
 8007346:	bd90      	pop	{r4, r7, pc}

08007348 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 8007348:	b5b0      	push	{r4, r5, r7, lr}
 800734a:	b0b2      	sub	sp, #200	; 0xc8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 8007352:	f107 0308 	add.w	r3, r7, #8
 8007356:	22c0      	movs	r2, #192	; 0xc0
 8007358:	2100      	movs	r1, #0
 800735a:	4618      	mov	r0, r3
 800735c:	f00f fb64 	bl	8016a28 <memset>
 8007360:	4a2f      	ldr	r2, [pc, #188]	; (8007420 <SecureElementInit+0xd8>)
 8007362:	f107 0308 	add.w	r3, r7, #8
 8007366:	e892 0003 	ldmia.w	r2, {r0, r1}
 800736a:	e883 0003 	stmia.w	r3, {r0, r1}
 800736e:	4a2d      	ldr	r2, [pc, #180]	; (8007424 <SecureElementInit+0xdc>)
 8007370:	f107 0310 	add.w	r3, r7, #16
 8007374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007378:	e883 0003 	stmia.w	r3, {r0, r1}
 800737c:	4b2a      	ldr	r3, [pc, #168]	; (8007428 <SecureElementInit+0xe0>)
 800737e:	f107 0419 	add.w	r4, r7, #25
 8007382:	461d      	mov	r5, r3
 8007384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007386:	6020      	str	r0, [r4, #0]
 8007388:	6061      	str	r1, [r4, #4]
 800738a:	60a2      	str	r2, [r4, #8]
 800738c:	60e3      	str	r3, [r4, #12]
 800738e:	2301      	movs	r3, #1
 8007390:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8007394:	4b24      	ldr	r3, [pc, #144]	; (8007428 <SecureElementInit+0xe0>)
 8007396:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800739a:	461d      	mov	r5, r3
 800739c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800739e:	6020      	str	r0, [r4, #0]
 80073a0:	6061      	str	r1, [r4, #4]
 80073a2:	60a2      	str	r2, [r4, #8]
 80073a4:	60e3      	str	r3, [r4, #12]
 80073a6:	2302      	movs	r3, #2
 80073a8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80073ac:	4b1e      	ldr	r3, [pc, #120]	; (8007428 <SecureElementInit+0xe0>)
 80073ae:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 80073b2:	461d      	mov	r5, r3
 80073b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073b6:	6020      	str	r0, [r4, #0]
 80073b8:	6061      	str	r1, [r4, #4]
 80073ba:	60a2      	str	r2, [r4, #8]
 80073bc:	60e3      	str	r3, [r4, #12]
 80073be:	2303      	movs	r3, #3
 80073c0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80073c4:	4b18      	ldr	r3, [pc, #96]	; (8007428 <SecureElementInit+0xe0>)
 80073c6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80073ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80073d0:	2304      	movs	r3, #4
 80073d2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80073d6:	237f      	movs	r3, #127	; 0x7f
 80073d8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 80073dc:	2380      	movs	r3, #128	; 0x80
 80073de:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80073e2:	2381      	movs	r3, #129	; 0x81
 80073e4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80073e8:	2382      	movs	r3, #130	; 0x82
 80073ea:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 80073ee:	2383      	movs	r3, #131	; 0x83
 80073f0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80073fa:	2302      	movs	r3, #2
 80073fc:	e00b      	b.n	8007416 <SecureElementInit+0xce>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 80073fe:	4a0b      	ldr	r2, [pc, #44]	; (800742c <SecureElementInit+0xe4>)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8007404:	4b09      	ldr	r3, [pc, #36]	; (800742c <SecureElementInit+0xe4>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f107 0108 	add.w	r1, r7, #8
 800740c:	22c0      	movs	r2, #192	; 0xc0
 800740e:	4618      	mov	r0, r3
 8007410:	f00b fe69 	bl	80130e6 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	37c8      	adds	r7, #200	; 0xc8
 800741a:	46bd      	mov	sp, r7
 800741c:	bdb0      	pop	{r4, r5, r7, pc}
 800741e:	bf00      	nop
 8007420:	08017e6c 	.word	0x08017e6c
 8007424:	08017e74 	.word	0x08017e74
 8007428:	08017e7c 	.word	0x08017e7c
 800742c:	2000018c 	.word	0x2000018c

08007430 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b088      	sub	sp, #32
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	6039      	str	r1, [r7, #0]
 800743a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007442:	2302      	movs	r3, #2
 8007444:	e04c      	b.n	80074e0 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007446:	2300      	movs	r3, #0
 8007448:	77fb      	strb	r3, [r7, #31]
 800744a:	e045      	b.n	80074d8 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800744c:	4b26      	ldr	r3, [pc, #152]	; (80074e8 <SecureElementSetKey+0xb8>)
 800744e:	6819      	ldr	r1, [r3, #0]
 8007450:	7ffa      	ldrb	r2, [r7, #31]
 8007452:	4613      	mov	r3, r2
 8007454:	011b      	lsls	r3, r3, #4
 8007456:	4413      	add	r3, r2
 8007458:	440b      	add	r3, r1
 800745a:	3310      	adds	r3, #16
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	79fa      	ldrb	r2, [r7, #7]
 8007460:	429a      	cmp	r2, r3
 8007462:	d136      	bne.n	80074d2 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	2b80      	cmp	r3, #128	; 0x80
 8007468:	d123      	bne.n	80074b2 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800746a:	2306      	movs	r3, #6
 800746c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	f107 0310 	add.w	r3, r7, #16
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
 800747a:	605a      	str	r2, [r3, #4]
 800747c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800747e:	f107 030c 	add.w	r3, r7, #12
 8007482:	227f      	movs	r2, #127	; 0x7f
 8007484:	2110      	movs	r1, #16
 8007486:	6838      	ldr	r0, [r7, #0]
 8007488:	f000 f87d 	bl	8007586 <SecureElementAesEncrypt>
 800748c:	4603      	mov	r3, r0
 800748e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8007490:	4b15      	ldr	r3, [pc, #84]	; (80074e8 <SecureElementSetKey+0xb8>)
 8007492:	6819      	ldr	r1, [r3, #0]
 8007494:	7ffa      	ldrb	r2, [r7, #31]
 8007496:	4613      	mov	r3, r2
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	4413      	add	r3, r2
 800749c:	3310      	adds	r3, #16
 800749e:	440b      	add	r3, r1
 80074a0:	3301      	adds	r3, #1
 80074a2:	f107 010c 	add.w	r1, r7, #12
 80074a6:	2210      	movs	r2, #16
 80074a8:	4618      	mov	r0, r3
 80074aa:	f00b fe1c 	bl	80130e6 <memcpy1>
                return retval;
 80074ae:	7fbb      	ldrb	r3, [r7, #30]
 80074b0:	e016      	b.n	80074e0 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 80074b2:	4b0d      	ldr	r3, [pc, #52]	; (80074e8 <SecureElementSetKey+0xb8>)
 80074b4:	6819      	ldr	r1, [r3, #0]
 80074b6:	7ffa      	ldrb	r2, [r7, #31]
 80074b8:	4613      	mov	r3, r2
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	4413      	add	r3, r2
 80074be:	3310      	adds	r3, #16
 80074c0:	440b      	add	r3, r1
 80074c2:	3301      	adds	r3, #1
 80074c4:	2210      	movs	r2, #16
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f00b fe0c 	bl	80130e6 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 80074ce:	2300      	movs	r3, #0
 80074d0:	e006      	b.n	80074e0 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80074d2:	7ffb      	ldrb	r3, [r7, #31]
 80074d4:	3301      	adds	r3, #1
 80074d6:	77fb      	strb	r3, [r7, #31]
 80074d8:	7ffb      	ldrb	r3, [r7, #31]
 80074da:	2b09      	cmp	r3, #9
 80074dc:	d9b6      	bls.n	800744c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80074de:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3720      	adds	r7, #32
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	2000018c 	.word	0x2000018c

080074ec <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af02      	add	r7, sp, #8
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4611      	mov	r1, r2
 80074f8:	461a      	mov	r2, r3
 80074fa:	460b      	mov	r3, r1
 80074fc:	80fb      	strh	r3, [r7, #6]
 80074fe:	4613      	mov	r3, r2
 8007500:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8007502:	797b      	ldrb	r3, [r7, #5]
 8007504:	2b7e      	cmp	r3, #126	; 0x7e
 8007506:	d901      	bls.n	800750c <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007508:	2303      	movs	r3, #3
 800750a:	e009      	b.n	8007520 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800750c:	7979      	ldrb	r1, [r7, #5]
 800750e:	88fa      	ldrh	r2, [r7, #6]
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	460b      	mov	r3, r1
 8007516:	68b9      	ldr	r1, [r7, #8]
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f7ff fea7 	bl	800726c <ComputeCmac>
 800751e:	4603      	mov	r3, r0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af02      	add	r7, sp, #8
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	607a      	str	r2, [r7, #4]
 8007532:	461a      	mov	r2, r3
 8007534:	460b      	mov	r3, r1
 8007536:	817b      	strh	r3, [r7, #10]
 8007538:	4613      	mov	r3, r2
 800753a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007542:	2302      	movs	r3, #2
 8007544:	e01b      	b.n	800757e <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 8007546:	2306      	movs	r3, #6
 8007548:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800754e:	7a79      	ldrb	r1, [r7, #9]
 8007550:	897a      	ldrh	r2, [r7, #10]
 8007552:	f107 0310 	add.w	r3, r7, #16
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	460b      	mov	r3, r1
 800755a:	68f9      	ldr	r1, [r7, #12]
 800755c:	2000      	movs	r0, #0
 800755e:	f7ff fe85 	bl	800726c <ComputeCmac>
 8007562:	4603      	mov	r3, r0
 8007564:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800756c:	7dfb      	ldrb	r3, [r7, #23]
 800756e:	e006      	b.n	800757e <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	429a      	cmp	r2, r3
 8007576:	d001      	beq.n	800757c <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8007578:	2301      	movs	r3, #1
 800757a:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b0c2      	sub	sp, #264	; 0x108
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	4608      	mov	r0, r1
 8007590:	4611      	mov	r1, r2
 8007592:	1d3a      	adds	r2, r7, #4
 8007594:	6013      	str	r3, [r2, #0]
 8007596:	4603      	mov	r3, r0
 8007598:	817b      	strh	r3, [r7, #10]
 800759a:	460b      	mov	r3, r1
 800759c:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <SecureElementAesEncrypt+0x26>
 80075a4:	1d3b      	adds	r3, r7, #4
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80075ac:	2302      	movs	r3, #2
 80075ae:	e043      	b.n	8007638 <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 80075b0:	897b      	ldrh	r3, [r7, #10]
 80075b2:	f003 030f 	and.w	r3, r3, #15
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80075bc:	2305      	movs	r3, #5
 80075be:	e03b      	b.n	8007638 <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80075c0:	f107 0314 	add.w	r3, r7, #20
 80075c4:	22f0      	movs	r2, #240	; 0xf0
 80075c6:	2100      	movs	r1, #0
 80075c8:	4618      	mov	r0, r3
 80075ca:	f00b fdc7 	bl	801315c <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 80075ce:	f107 0210 	add.w	r2, r7, #16
 80075d2:	7a7b      	ldrb	r3, [r7, #9]
 80075d4:	4611      	mov	r1, r2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff fe18 	bl	800720c <GetKeyByID>
 80075dc:	4603      	mov	r3, r0
 80075de:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 80075e2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d124      	bne.n	8007634 <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	3301      	adds	r3, #1
 80075ee:	f107 0214 	add.w	r2, r7, #20
 80075f2:	2110      	movs	r1, #16
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff fce1 	bl	8006fbc <lorawan_aes_set_key>

        uint8_t block = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 8007600:	e015      	b.n	800762e <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8007602:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	18d0      	adds	r0, r2, r3
 800760a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800760e:	1d3a      	adds	r2, r7, #4
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	4413      	add	r3, r2
 8007614:	f107 0214 	add.w	r2, r7, #20
 8007618:	4619      	mov	r1, r3
 800761a:	f7ff fdad 	bl	8007178 <lorawan_aes_encrypt>
            block = block + 16;
 800761e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8007622:	3310      	adds	r3, #16
 8007624:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 8007628:	897b      	ldrh	r3, [r7, #10]
 800762a:	3b10      	subs	r3, #16
 800762c:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800762e:	897b      	ldrh	r3, [r7, #10]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e6      	bne.n	8007602 <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 8007634:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 8007638:	4618      	mov	r0, r3
 800763a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b088      	sub	sp, #32
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	70fb      	strb	r3, [r7, #3]
 800764e:	4613      	mov	r3, r2
 8007650:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007658:	2302      	movs	r3, #2
 800765a:	e02e      	b.n	80076ba <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800765c:	2306      	movs	r3, #6
 800765e:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8007660:	78bb      	ldrb	r3, [r7, #2]
 8007662:	2b7f      	cmp	r3, #127	; 0x7f
 8007664:	d104      	bne.n	8007670 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	2b04      	cmp	r3, #4
 800766a:	d001      	beq.n	8007670 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800766c:	2303      	movs	r3, #3
 800766e:	e024      	b.n	80076ba <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	f107 0310 	add.w	r3, r7, #16
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	605a      	str	r2, [r3, #4]
 800767e:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8007680:	f107 030c 	add.w	r3, r7, #12
 8007684:	78fa      	ldrb	r2, [r7, #3]
 8007686:	2110      	movs	r1, #16
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7ff ff7c 	bl	8007586 <SecureElementAesEncrypt>
 800768e:	4603      	mov	r3, r0
 8007690:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8007692:	7ffb      	ldrb	r3, [r7, #31]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 8007698:	7ffb      	ldrb	r3, [r7, #31]
 800769a:	e00e      	b.n	80076ba <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800769c:	f107 020c 	add.w	r2, r7, #12
 80076a0:	78bb      	ldrb	r3, [r7, #2]
 80076a2:	4611      	mov	r1, r2
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7ff fec3 	bl	8007430 <SecureElementSetKey>
 80076aa:	4603      	mov	r3, r0
 80076ac:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80076ae:	7ffb      	ldrb	r3, [r7, #31]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 80076b4:	7ffb      	ldrb	r3, [r7, #31]
 80076b6:	e000      	b.n	80076ba <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 80076b8:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3720      	adds	r7, #32
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b086      	sub	sp, #24
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607b      	str	r3, [r7, #4]
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]
 80076d0:	4613      	mov	r3, r2
 80076d2:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <SecureElementProcessJoinAccept+0x24>
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <SecureElementProcessJoinAccept+0x24>
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80076e6:	2302      	movs	r3, #2
 80076e8:	e064      	b.n	80077b4 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80076ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076ee:	2b21      	cmp	r3, #33	; 0x21
 80076f0:	d901      	bls.n	80076f6 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80076f2:	2305      	movs	r3, #5
 80076f4:	e05e      	b.n	80077b4 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 80076f6:	2301      	movs	r3, #1
 80076f8:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80076fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	6879      	ldr	r1, [r7, #4]
 8007704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007706:	f00b fcee 	bl	80130e6 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	1c58      	adds	r0, r3, #1
 800770e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b01      	subs	r3, #1
 8007716:	b299      	uxth	r1, r3
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	3301      	adds	r3, #1
 800771c:	7dfa      	ldrb	r2, [r7, #23]
 800771e:	f7ff ff32 	bl	8007586 <SecureElementAesEncrypt>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8007728:	2307      	movs	r3, #7
 800772a:	e043      	b.n	80077b4 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	330b      	adds	r3, #11
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	09db      	lsrs	r3, r3, #7
 8007734:	b2da      	uxtb	r2, r3
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800773e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007742:	3b04      	subs	r3, #4
 8007744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007746:	4413      	add	r3, r2
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800774c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007750:	3b03      	subs	r3, #3
 8007752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007754:	4413      	add	r3, r2
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	021b      	lsls	r3, r3, #8
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	4313      	orrs	r3, r2
 800775e:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8007760:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007764:	3b02      	subs	r3, #2
 8007766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007768:	4413      	add	r3, r2
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	041b      	lsls	r3, r3, #16
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	4313      	orrs	r3, r2
 8007772:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8007774:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007778:	3b01      	subs	r3, #1
 800777a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777c:	4413      	add	r3, r2
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	061b      	lsls	r3, r3, #24
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	4313      	orrs	r3, r2
 8007786:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10e      	bne.n	80077ae <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8007790:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b04      	subs	r3, #4
 8007798:	b299      	uxth	r1, r3
 800779a:	2301      	movs	r3, #1
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077a0:	f7ff fec2 	bl	8007528 <SecureElementVerifyAesCmac>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e002      	b.n	80077b4 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 80077ae:	2304      	movs	r3, #4
 80077b0:	e000      	b.n	80077b4 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80077ca:	2302      	movs	r3, #2
 80077cc:	e006      	b.n	80077dc <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 80077ce:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <SecureElementRandomNumber+0x28>)
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	4798      	blx	r3
 80077d4:	4602      	mov	r2, r0
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	080183e0 	.word	0x080183e0

080077e8 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80077f6:	2302      	movs	r3, #2
 80077f8:	e007      	b.n	800780a <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 80077fa:	4b06      	ldr	r3, [pc, #24]	; (8007814 <SecureElementSetDevEui+0x2c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2208      	movs	r2, #8
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	4618      	mov	r0, r3
 8007804:	f00b fc6f 	bl	80130e6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	2000018c 	.word	0x2000018c

08007818 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 8007818:	b480      	push	{r7}
 800781a:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800781c:	4b02      	ldr	r3, [pc, #8]	; (8007828 <SecureElementGetDevEui+0x10>)
 800781e:	681b      	ldr	r3, [r3, #0]
}
 8007820:	4618      	mov	r0, r3
 8007822:	46bd      	mov	sp, r7
 8007824:	bc80      	pop	{r7}
 8007826:	4770      	bx	lr
 8007828:	2000018c 	.word	0x2000018c

0800782c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800783a:	2302      	movs	r3, #2
 800783c:	e008      	b.n	8007850 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800783e:	4b06      	ldr	r3, [pc, #24]	; (8007858 <SecureElementSetJoinEui+0x2c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3308      	adds	r3, #8
 8007844:	2208      	movs	r2, #8
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	4618      	mov	r0, r3
 800784a:	f00b fc4c 	bl	80130e6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	2000018c 	.word	0x2000018c

0800785c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 8007860:	4b03      	ldr	r3, [pc, #12]	; (8007870 <SecureElementGetJoinEui+0x14>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3308      	adds	r3, #8
}
 8007866:	4618      	mov	r0, r3
 8007868:	46bd      	mov	sp, r7
 800786a:	bc80      	pop	{r7}
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	2000018c 	.word	0x2000018c

08007874 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800787c:	4a1a      	ldr	r2, [pc, #104]	; (80078e8 <LmHandlerInit+0x74>)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007882:	4b1a      	ldr	r3, [pc, #104]	; (80078ec <LmHandlerInit+0x78>)
 8007884:	4a1a      	ldr	r2, [pc, #104]	; (80078f0 <LmHandlerInit+0x7c>)
 8007886:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007888:	4b18      	ldr	r3, [pc, #96]	; (80078ec <LmHandlerInit+0x78>)
 800788a:	4a1a      	ldr	r2, [pc, #104]	; (80078f4 <LmHandlerInit+0x80>)
 800788c:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800788e:	4b17      	ldr	r3, [pc, #92]	; (80078ec <LmHandlerInit+0x78>)
 8007890:	4a19      	ldr	r2, [pc, #100]	; (80078f8 <LmHandlerInit+0x84>)
 8007892:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007894:	4b15      	ldr	r3, [pc, #84]	; (80078ec <LmHandlerInit+0x78>)
 8007896:	4a19      	ldr	r2, [pc, #100]	; (80078fc <LmHandlerInit+0x88>)
 8007898:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800789a:	4b13      	ldr	r3, [pc, #76]	; (80078e8 <LmHandlerInit+0x74>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a17      	ldr	r2, [pc, #92]	; (8007900 <LmHandlerInit+0x8c>)
 80078a2:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 80078a4:	4b10      	ldr	r3, [pc, #64]	; (80078e8 <LmHandlerInit+0x74>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	4a15      	ldr	r2, [pc, #84]	; (8007900 <LmHandlerInit+0x8c>)
 80078ac:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 80078ae:	4b0e      	ldr	r3, [pc, #56]	; (80078e8 <LmHandlerInit+0x74>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	4a12      	ldr	r2, [pc, #72]	; (8007900 <LmHandlerInit+0x8c>)
 80078b6:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 80078b8:	4b11      	ldr	r3, [pc, #68]	; (8007900 <LmHandlerInit+0x8c>)
 80078ba:	4a12      	ldr	r2, [pc, #72]	; (8007904 <LmHandlerInit+0x90>)
 80078bc:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80078be:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <LmHandlerInit+0x74>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	4a0e      	ldr	r2, [pc, #56]	; (8007900 <LmHandlerInit+0x8c>)
 80078c6:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80078c8:	490f      	ldr	r1, [pc, #60]	; (8007908 <LmHandlerInit+0x94>)
 80078ca:	2000      	movs	r0, #0
 80078cc:	f000 fc7e 	bl	80081cc <LmHandlerPackageRegister>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 80078d6:	f04f 33ff 	mov.w	r3, #4294967295
 80078da:	e000      	b.n	80078de <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	200001b4 	.word	0x200001b4
 80078ec:	200001b8 	.word	0x200001b8
 80078f0:	08007f21 	.word	0x08007f21
 80078f4:	08007f89 	.word	0x08007f89
 80078f8:	08008069 	.word	0x08008069
 80078fc:	0800812d 	.word	0x0800812d
 8007900:	200001c8 	.word	0x200001c8
 8007904:	0800846d 	.word	0x0800846d
 8007908:	20000084 	.word	0x20000084

0800790c <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b090      	sub	sp, #64	; 0x40
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007918:	2210      	movs	r2, #16
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	484b      	ldr	r0, [pc, #300]	; (8007a4c <LmHandlerConfigure+0x140>)
 800791e:	f00e fcc2 	bl	80162a6 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 8007922:	f7fe fc83 	bl	800622c <LoraInfo_GetPtr>
 8007926:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8007928:	4b48      	ldr	r3, [pc, #288]	; (8007a4c <LmHandlerConfigure+0x140>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	2301      	movs	r3, #1
 8007930:	4093      	lsls	r3, r2
 8007932:	461a      	mov	r2, r3
 8007934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	4013      	ands	r3, r2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00c      	beq.n	8007958 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800793e:	4b43      	ldr	r3, [pc, #268]	; (8007a4c <LmHandlerConfigure+0x140>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	4942      	ldr	r1, [pc, #264]	; (8007a50 <LmHandlerConfigure+0x144>)
 8007946:	4843      	ldr	r0, [pc, #268]	; (8007a54 <LmHandlerConfigure+0x148>)
 8007948:	f004 fa92 	bl	800be70 <LoRaMacInitialization>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <LmHandlerConfigure+0x4e>
        {
            return LORAMAC_HANDLER_ERROR;
 8007952:	f04f 33ff 	mov.w	r3, #4294967295
 8007956:	e074      	b.n	8007a42 <LmHandlerConfigure+0x136>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
        while (1) {}  /* error: Region is not defined in the MW */
 8007958:	e7fe      	b.n	8007958 <LmHandlerConfigure+0x4c>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800795a:	f000 fd98 	bl	800848e <NvmDataMgmtRestore>
 800795e:	4603      	mov	r3, r0
 8007960:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 8007962:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <LmHandlerConfigure+0x64>
    {
        CtxRestoreDone = true;
 8007968:	4b3b      	ldr	r3, [pc, #236]	; (8007a58 <LmHandlerConfigure+0x14c>)
 800796a:	2201      	movs	r2, #1
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	e002      	b.n	8007976 <LmHandlerConfigure+0x6a>
    }
    else
    {
        CtxRestoreDone = false;
 8007970:	4b39      	ldr	r3, [pc, #228]	; (8007a58 <LmHandlerConfigure+0x14c>)
 8007972:	2200      	movs	r2, #0
 8007974:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 8007976:	2302      	movs	r3, #2
 8007978:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800797a:	f107 0314 	add.w	r3, r7, #20
 800797e:	4618      	mov	r0, r3
 8007980:	f004 fdc0 	bl	800c504 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	2208      	movs	r2, #8
 8007988:	4619      	mov	r1, r3
 800798a:	4834      	ldr	r0, [pc, #208]	; (8007a5c <LmHandlerConfigure+0x150>)
 800798c:	f00b fbab 	bl	80130e6 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 8007990:	2303      	movs	r3, #3
 8007992:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007994:	f107 0314 	add.w	r3, r7, #20
 8007998:	4618      	mov	r0, r3
 800799a:	f004 fdb3 	bl	800c504 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2208      	movs	r2, #8
 80079a2:	4619      	mov	r1, r3
 80079a4:	482e      	ldr	r0, [pc, #184]	; (8007a60 <LmHandlerConfigure+0x154>)
 80079a6:	f00b fb9e 	bl	80130e6 <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 80079aa:	2306      	movs	r3, #6
 80079ac:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 80079ae:	4b2b      	ldr	r3, [pc, #172]	; (8007a5c <LmHandlerConfigure+0x150>)
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80079b4:	f107 0314 	add.w	r3, r7, #20
 80079b8:	4618      	mov	r0, r3
 80079ba:	f004 ff01 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 80079be:	230f      	movs	r3, #15
 80079c0:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 80079c2:	2301      	movs	r3, #1
 80079c4:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80079c6:	f107 0314 	add.w	r3, r7, #20
 80079ca:	4618      	mov	r0, r3
 80079cc:	f004 fef8 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 80079d0:	2305      	movs	r3, #5
 80079d2:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80079d4:	2300      	movs	r3, #0
 80079d6:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80079d8:	f107 0314 	add.w	r3, r7, #20
 80079dc:	4618      	mov	r0, r3
 80079de:	f004 feef 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 80079e2:	2310      	movs	r3, #16
 80079e4:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 80079e6:	2300      	movs	r3, #0
 80079e8:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80079ea:	f107 0314 	add.w	r3, r7, #20
 80079ee:	4618      	mov	r0, r3
 80079f0:	f004 fee6 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 80079f4:	2304      	movs	r3, #4
 80079f6:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80079f8:	4b14      	ldr	r3, [pc, #80]	; (8007a4c <LmHandlerConfigure+0x140>)
 80079fa:	789b      	ldrb	r3, [r3, #2]
 80079fc:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80079fe:	f107 0314 	add.w	r3, r7, #20
 8007a02:	4618      	mov	r0, r3
 8007a04:	f004 fedc 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007a08:	230f      	movs	r3, #15
 8007a0a:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8007a0c:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <LmHandlerConfigure+0x140>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	f107 020c 	add.w	r2, r7, #12
 8007a14:	4611      	mov	r1, r2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f007 fcb1 	bl	800f37e <RegionGetPhyParam>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	bf14      	ite	ne
 8007a26:	2301      	movne	r3, #1
 8007a28:	2300      	moveq	r3, #0
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	4b07      	ldr	r3, [pc, #28]	; (8007a4c <LmHandlerConfigure+0x140>)
 8007a2e:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 8007a30:	2014      	movs	r0, #20
 8007a32:	f000 fa5d 	bl	8007ef0 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8007a36:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <LmHandlerConfigure+0x140>)
 8007a38:	795b      	ldrb	r3, [r3, #5]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f005 fc34 	bl	800d2a8 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3740      	adds	r7, #64	; 0x40
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	200001a4 	.word	0x200001a4
 8007a50:	200001c8 	.word	0x200001c8
 8007a54:	200001b8 	.word	0x200001b8
 8007a58:	200002e6 	.word	0x200002e6
 8007a5c:	2000006c 	.word	0x2000006c
 8007a60:	20000074 	.word	0x20000074

08007a64 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 8007a68:	f002 f9b0 	bl	8009dcc <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 8007a6c:	f000 fc9a 	bl	80083a4 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 8007a70:	f000 fd06 	bl	8008480 <NvmDataMgmtStore>
}
 8007a74:	bf00      	nop
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b090      	sub	sp, #64	; 0x40
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d111      	bne.n	8007aac <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8007a88:	4b23      	ldr	r3, [pc, #140]	; (8007b18 <LmHandlerJoin+0xa0>)
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 8007a8e:	f004 fca3 	bl	800c3d8 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 8007a92:	2301      	movs	r3, #1
 8007a94:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007a96:	4b21      	ldr	r3, [pc, #132]	; (8007b1c <LmHandlerJoin+0xa4>)
 8007a98:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 8007aa0:	f107 0308 	add.w	r3, r7, #8
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f005 f9c9 	bl	800ce3c <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 8007aaa:	e030      	b.n	8007b0e <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8007aac:	4b1a      	ldr	r3, [pc, #104]	; (8007b18 <LmHandlerJoin+0xa0>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8007ab2:	4b1a      	ldr	r3, [pc, #104]	; (8007b1c <LmHandlerJoin+0xa4>)
 8007ab4:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8007ab8:	4b17      	ldr	r3, [pc, #92]	; (8007b18 <LmHandlerJoin+0xa0>)
 8007aba:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007abc:	4b16      	ldr	r3, [pc, #88]	; (8007b18 <LmHandlerJoin+0xa0>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 8007ac2:	4b17      	ldr	r3, [pc, #92]	; (8007b20 <LmHandlerJoin+0xa8>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	f083 0301 	eor.w	r3, r3, #1
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d008      	beq.n	8007ae2 <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8007ad0:	2327      	movs	r3, #39	; 0x27
 8007ad2:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8007ad4:	4b13      	ldr	r3, [pc, #76]	; (8007b24 <LmHandlerJoin+0xac>)
 8007ad6:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 8007ad8:	f107 031c 	add.w	r3, r7, #28
 8007adc:	4618      	mov	r0, r3
 8007ade:	f004 fe6f 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 8007ae2:	f004 fc79 	bl	800c3d8 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007aea:	2301      	movs	r3, #1
 8007aec:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007af0:	f107 031c 	add.w	r3, r7, #28
 8007af4:	4618      	mov	r0, r3
 8007af6:	f004 fe63 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007afa:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <LmHandlerJoin+0xb0>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69db      	ldr	r3, [r3, #28]
 8007b00:	4805      	ldr	r0, [pc, #20]	; (8007b18 <LmHandlerJoin+0xa0>)
 8007b02:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8007b04:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <LmHandlerJoin+0xa4>)
 8007b06:	785b      	ldrb	r3, [r3, #1]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 f917 	bl	8007d3c <LmHandlerRequestClass>
}
 8007b0e:	bf00      	nop
 8007b10:	3740      	adds	r7, #64	; 0x40
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000090 	.word	0x20000090
 8007b1c:	200001a4 	.word	0x200001a4
 8007b20:	200002e6 	.word	0x200002e6
 8007b24:	01000300 	.word	0x01000300
 8007b28:	200001b4 	.word	0x200001b4

08007b2c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08a      	sub	sp, #40	; 0x28
 8007b30:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007b32:	2301      	movs	r3, #1
 8007b34:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8007b36:	463b      	mov	r3, r7
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f004 fce3 	bl	800c504 <LoRaMacMibGetRequestConfirm>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 8007b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d106      	bne.n	8007b5a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007b4c:	793b      	ldrb	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 8007b52:	2300      	movs	r3, #0
 8007b54:	e002      	b.n	8007b5c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 8007b5a:	2300      	movs	r3, #0
    }
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3728      	adds	r7, #40	; 0x28
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08c      	sub	sp, #48	; 0x30
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	607a      	str	r2, [r7, #4]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	460b      	mov	r3, r1
 8007b72:	72fb      	strb	r3, [r7, #11]
 8007b74:	4613      	mov	r3, r2
 8007b76:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8007b78:	23ff      	movs	r3, #255	; 0xff
 8007b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 8007b7e:	f001 fe8f 	bl	80098a0 <LoRaMacIsBusy>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007b88:	f06f 0301 	mvn.w	r3, #1
 8007b8c:	e0b4      	b.n	8007cf8 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8007b8e:	f7ff ffcd 	bl	8007b2c <LmHandlerJoinStatus>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d007      	beq.n	8007ba8 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 8007b98:	4b59      	ldr	r3, [pc, #356]	; (8007d00 <LmHandlerSend+0x19c>)
 8007b9a:	789b      	ldrb	r3, [r3, #2]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7ff ff6b 	bl	8007a78 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007ba2:	f06f 0302 	mvn.w	r3, #2
 8007ba6:	e0a7      	b.n	8007cf8 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8007ba8:	4b56      	ldr	r3, [pc, #344]	; (8007d04 <LmHandlerSend+0x1a0>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	4798      	blx	r3
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00d      	beq.n	8007bd2 <LmHandlerSend+0x6e>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	781a      	ldrb	r2, [r3, #0]
 8007bba:	4b52      	ldr	r3, [pc, #328]	; (8007d04 <LmHandlerSend+0x1a0>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d006      	beq.n	8007bd2 <LmHandlerSend+0x6e>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8007bcc:	f06f 0303 	mvn.w	r3, #3
 8007bd0:	e092      	b.n	8007cf8 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8007bd2:	4b4d      	ldr	r3, [pc, #308]	; (8007d08 <LmHandlerSend+0x1a4>)
 8007bd4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8007bd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	f107 0214 	add.w	r2, r7, #20
 8007be4:	4611      	mov	r1, r2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f004 fc04 	bl	800c3f4 <LoRaMacQueryTxPossible>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8007bf2:	4b46      	ldr	r3, [pc, #280]	; (8007d0c <LmHandlerSend+0x1a8>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007c04:	e017      	b.n	8007c36 <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 8007c06:	4a41      	ldr	r2, [pc, #260]	; (8007d0c <LmHandlerSend+0x1a8>)
 8007c08:	7afb      	ldrb	r3, [r7, #11]
 8007c0a:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	785b      	ldrb	r3, [r3, #1]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 8007c20:	7afb      	ldrb	r3, [r7, #11]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d102      	bne.n	8007c2c <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 8007c26:	2300      	movs	r3, #0
 8007c28:	763b      	strb	r3, [r7, #24]
 8007c2a:	e004      	b.n	8007c36 <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 8007c30:	2308      	movs	r3, #8
 8007c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 8007c36:	4b35      	ldr	r3, [pc, #212]	; (8007d0c <LmHandlerSend+0x1a8>)
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	330c      	adds	r3, #12
 8007c3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c40:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8007c44:	4b30      	ldr	r3, [pc, #192]	; (8007d08 <LmHandlerSend+0x1a4>)
 8007c46:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8007c4a:	4b30      	ldr	r3, [pc, #192]	; (8007d0c <LmHandlerSend+0x1a8>)
 8007c4c:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8007c4e:	7aba      	ldrb	r2, [r7, #10]
 8007c50:	f107 0318 	add.w	r3, r7, #24
 8007c54:	4611      	mov	r1, r2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f005 fa30 	bl	800d0bc <LoRaMacMcpsRequest>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8007c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 8007c6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c72:	2b11      	cmp	r3, #17
 8007c74:	d83a      	bhi.n	8007cec <LmHandlerSend+0x188>
 8007c76:	a201      	add	r2, pc, #4	; (adr r2, 8007c7c <LmHandlerSend+0x118>)
 8007c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7c:	08007cc5 	.word	0x08007cc5
 8007c80:	08007ccd 	.word	0x08007ccd
 8007c84:	08007ced 	.word	0x08007ced
 8007c88:	08007ced 	.word	0x08007ced
 8007c8c:	08007ced 	.word	0x08007ced
 8007c90:	08007ced 	.word	0x08007ced
 8007c94:	08007ced 	.word	0x08007ced
 8007c98:	08007cd5 	.word	0x08007cd5
 8007c9c:	08007ced 	.word	0x08007ced
 8007ca0:	08007ced 	.word	0x08007ced
 8007ca4:	08007ced 	.word	0x08007ced
 8007ca8:	08007ce5 	.word	0x08007ce5
 8007cac:	08007ced 	.word	0x08007ced
 8007cb0:	08007ced 	.word	0x08007ced
 8007cb4:	08007ccd 	.word	0x08007ccd
 8007cb8:	08007ccd 	.word	0x08007ccd
 8007cbc:	08007ccd 	.word	0x08007ccd
 8007cc0:	08007cdd 	.word	0x08007cdd
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8007cca:	e013      	b.n	8007cf4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 8007ccc:	23fe      	movs	r3, #254	; 0xfe
 8007cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8007cd2:	e00f      	b.n	8007cf4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007cd4:	23fd      	movs	r3, #253	; 0xfd
 8007cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8007cda:	e00b      	b.n	8007cf4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8007cdc:	23fb      	movs	r3, #251	; 0xfb
 8007cde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8007ce2:	e007      	b.n	8007cf4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8007ce4:	23fa      	movs	r3, #250	; 0xfa
 8007ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8007cea:	e003      	b.n	8007cf4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007cec:	23ff      	movs	r3, #255	; 0xff
 8007cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8007cf2:	bf00      	nop
    }

    return lmhStatus;
 8007cf4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3730      	adds	r7, #48	; 0x30
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	20000090 	.word	0x20000090
 8007d04:	20000190 	.word	0x20000190
 8007d08:	200001a4 	.word	0x200001a4
 8007d0c:	200001dc 	.word	0x200001dc

08007d10 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8007d16:	230a      	movs	r3, #10
 8007d18:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f005 f88d 	bl	800ce3c <LoRaMacMlmeRequest>
 8007d22:	4603      	mov	r3, r0
 8007d24:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	e001      	b.n	8007d34 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8007d30:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08c      	sub	sp, #48	; 0x30
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	4603      	mov	r3, r0
 8007d44:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007d46:	2300      	movs	r3, #0
 8007d48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 8007d4c:	f001 fda8 	bl	80098a0 <LoRaMacIsBusy>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007d56:	f06f 0301 	mvn.w	r3, #1
 8007d5a:	e07b      	b.n	8007e54 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8007d5c:	f7ff fee6 	bl	8007b2c <LmHandlerJoinStatus>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d002      	beq.n	8007d6c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007d66:	f06f 0302 	mvn.w	r3, #2
 8007d6a:	e073      	b.n	8007e54 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007d70:	f107 0308 	add.w	r3, r7, #8
 8007d74:	4618      	mov	r0, r3
 8007d76:	f004 fbc5 	bl	800c504 <LoRaMacMibGetRequestConfirm>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 8007d80:	f04f 33ff 	mov.w	r3, #4294967295
 8007d84:	e066      	b.n	8007e54 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 8007d86:	7b3b      	ldrb	r3, [r7, #12]
 8007d88:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 8007d8c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007d90:	79fb      	ldrb	r3, [r7, #7]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d055      	beq.n	8007e42 <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d02c      	beq.n	8007df6 <LmHandlerRequestClass+0xba>
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	dc52      	bgt.n	8007e46 <LmHandlerRequestClass+0x10a>
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <LmHandlerRequestClass+0x6e>
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d022      	beq.n	8007dee <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 8007da8:	e04d      	b.n	8007e46 <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 8007daa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d04b      	beq.n	8007e4a <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 8007db2:	79fb      	ldrb	r3, [r7, #7]
 8007db4:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007db6:	f107 0308 	add.w	r3, r7, #8
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f004 fd00 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10f      	bne.n	8007de6 <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 fb45 	bl	8008458 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8007dce:	4b23      	ldr	r3, [pc, #140]	; (8007e5c <LmHandlerRequestClass+0x120>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d038      	beq.n	8007e4a <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8007dd8:	4b20      	ldr	r3, [pc, #128]	; (8007e5c <LmHandlerRequestClass+0x120>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	79fa      	ldrb	r2, [r7, #7]
 8007de0:	4610      	mov	r0, r2
 8007de2:	4798      	blx	r3
            break;
 8007de4:	e031      	b.n	8007e4a <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8007de6:	23ff      	movs	r3, #255	; 0xff
 8007de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8007dec:	e02d      	b.n	8007e4a <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 8007dee:	23ff      	movs	r3, #255	; 0xff
 8007df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8007df4:	e02c      	b.n	8007e50 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 8007df6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8007dfe:	23ff      	movs	r3, #255	; 0xff
 8007e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8007e04:	e023      	b.n	8007e4e <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 8007e06:	79fb      	ldrb	r3, [r7, #7]
 8007e08:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8007e0a:	f107 0308 	add.w	r3, r7, #8
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f004 fcd6 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10f      	bne.n	8007e3a <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 fb1b 	bl	8008458 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8007e22:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <LmHandlerRequestClass+0x120>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d010      	beq.n	8007e4e <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8007e2c:	4b0b      	ldr	r3, [pc, #44]	; (8007e5c <LmHandlerRequestClass+0x120>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e32:	79fa      	ldrb	r2, [r7, #7]
 8007e34:	4610      	mov	r0, r2
 8007e36:	4798      	blx	r3
            break;
 8007e38:	e009      	b.n	8007e4e <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8007e3a:	23ff      	movs	r3, #255	; 0xff
 8007e3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8007e40:	e005      	b.n	8007e4e <LmHandlerRequestClass+0x112>
        }
    }
 8007e42:	bf00      	nop
 8007e44:	e004      	b.n	8007e50 <LmHandlerRequestClass+0x114>
            break;
 8007e46:	bf00      	nop
 8007e48:	e002      	b.n	8007e50 <LmHandlerRequestClass+0x114>
            break;
 8007e4a:	bf00      	nop
 8007e4c:	e000      	b.n	8007e50 <LmHandlerRequestClass+0x114>
            break;
 8007e4e:	bf00      	nop
    return errorStatus;
 8007e50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3730      	adds	r7, #48	; 0x30
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	200001b4 	.word	0x200001b4

08007e60 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08c      	sub	sp, #48	; 0x30
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8007e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e72:	e010      	b.n	8007e96 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8007e74:	2300      	movs	r3, #0
 8007e76:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8007e78:	f107 030c 	add.w	r3, r7, #12
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f004 fb41 	bl	800c504 <LoRaMacMibGetRequestConfirm>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8007e88:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8c:	e003      	b.n	8007e96 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 8007e8e:	7c3a      	ldrb	r2, [r7, #16]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3730      	adds	r7, #48	; 0x30
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08c      	sub	sp, #48	; 0x30
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d102      	bne.n	8007eb4 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8007eae:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb2:	e016      	b.n	8007ee2 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 8007eb4:	231f      	movs	r3, #31
 8007eb6:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8007eb8:	f107 030c 	add.w	r3, r7, #12
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f004 fb21 	bl	800c504 <LoRaMacMibGetRequestConfirm>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8007ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ecc:	e009      	b.n	8007ee2 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 8007ece:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f993 2000 	ldrsb.w	r2, [r3]
 8007edc:	4b03      	ldr	r3, [pc, #12]	; (8007eec <LmHandlerGetTxDatarate+0x4c>)
 8007ede:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3730      	adds	r7, #48	; 0x30
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	200001a4 	.word	0x200001a4

08007ef0 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08c      	sub	sp, #48	; 0x30
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007ef8:	2322      	movs	r3, #34	; 0x22
 8007efa:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007f00:	f107 030c 	add.w	r3, r7, #12
 8007f04:	4618      	mov	r0, r3
 8007f06:	f004 fc5b 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 8007f10:	f04f 33ff 	mov.w	r3, #4294967295
 8007f14:	e000      	b.n	8007f18 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3730      	adds	r7, #48	; 0x30
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 8007f28:	4b15      	ldr	r3, [pc, #84]	; (8007f80 <McpsConfirm+0x60>)
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	785a      	ldrb	r2, [r3, #1]
 8007f32:	4b13      	ldr	r3, [pc, #76]	; (8007f80 <McpsConfirm+0x60>)
 8007f34:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	789b      	ldrb	r3, [r3, #2]
 8007f3a:	b25a      	sxtb	r2, r3
 8007f3c:	4b10      	ldr	r3, [pc, #64]	; (8007f80 <McpsConfirm+0x60>)
 8007f3e:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	4a0e      	ldr	r2, [pc, #56]	; (8007f80 <McpsConfirm+0x60>)
 8007f46:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8007f4e:	4b0c      	ldr	r3, [pc, #48]	; (8007f80 <McpsConfirm+0x60>)
 8007f50:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	4b09      	ldr	r3, [pc, #36]	; (8007f80 <McpsConfirm+0x60>)
 8007f5a:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	791b      	ldrb	r3, [r3, #4]
 8007f60:	461a      	mov	r2, r3
 8007f62:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <McpsConfirm+0x60>)
 8007f64:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 8007f66:	4b07      	ldr	r3, [pc, #28]	; (8007f84 <McpsConfirm+0x64>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	4804      	ldr	r0, [pc, #16]	; (8007f80 <McpsConfirm+0x60>)
 8007f6e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	2000      	movs	r0, #0
 8007f74:	f000 f99a 	bl	80082ac <LmHandlerPackagesNotify>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	200001dc 	.word	0x200001dc
 8007f84:	200001b4 	.word	0x200001b4

08007f88 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 8007f92:	2300      	movs	r3, #0
 8007f94:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 8007f96:	4b32      	ldr	r3, [pc, #200]	; (8008060 <McpsIndication+0xd8>)
 8007f98:	2201      	movs	r2, #1
 8007f9a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	785a      	ldrb	r2, [r3, #1]
 8007fa0:	4b2f      	ldr	r3, [pc, #188]	; (8008060 <McpsIndication+0xd8>)
 8007fa2:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8007fa4:	4b2e      	ldr	r3, [pc, #184]	; (8008060 <McpsIndication+0xd8>)
 8007fa6:	785b      	ldrb	r3, [r3, #1]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d154      	bne.n	8008056 <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	791b      	ldrb	r3, [r3, #4]
 8007fb0:	b25a      	sxtb	r2, r3
 8007fb2:	4b2b      	ldr	r3, [pc, #172]	; (8008060 <McpsIndication+0xd8>)
 8007fb4:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fbc:	b25a      	sxtb	r2, r3
 8007fbe:	4b28      	ldr	r3, [pc, #160]	; (8008060 <McpsIndication+0xd8>)
 8007fc0:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8007fc8:	4b25      	ldr	r3, [pc, #148]	; (8008060 <McpsIndication+0xd8>)
 8007fca:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	78db      	ldrb	r3, [r3, #3]
 8007fd0:	b25a      	sxtb	r2, r3
 8007fd2:	4b23      	ldr	r3, [pc, #140]	; (8008060 <McpsIndication+0xd8>)
 8007fd4:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	4a21      	ldr	r2, [pc, #132]	; (8008060 <McpsIndication+0xd8>)
 8007fdc:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	78db      	ldrb	r3, [r3, #3]
 8007fe2:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	7b1b      	ldrb	r3, [r3, #12]
 8007fe8:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8007ff0:	4b1c      	ldr	r3, [pc, #112]	; (8008064 <McpsIndication+0xdc>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	f107 0218 	add.w	r2, r7, #24
 8007ffa:	4919      	ldr	r1, [pc, #100]	; (8008060 <McpsIndication+0xd8>)
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8008000:	4b18      	ldr	r3, [pc, #96]	; (8008064 <McpsIndication+0xdc>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008006:	2b00      	cmp	r3, #0
 8008008:	d007      	beq.n	800801a <McpsIndication+0x92>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	7e1b      	ldrb	r3, [r3, #24]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8008012:	4b14      	ldr	r3, [pc, #80]	; (8008064 <McpsIndication+0xdc>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008018:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	2001      	movs	r0, #1
 800801e:	f000 f945 	bl	80082ac <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 8008022:	f107 0317 	add.w	r3, r7, #23
 8008026:	4618      	mov	r0, r3
 8008028:	f7ff ff1a 	bl	8007e60 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	795b      	ldrb	r3, [r3, #5]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d111      	bne.n	8008058 <McpsIndication+0xd0>
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10e      	bne.n	8008058 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800803a:	2300      	movs	r3, #0
 800803c:	733b      	strb	r3, [r7, #12]
 800803e:	2300      	movs	r3, #0
 8008040:	737b      	strb	r3, [r7, #13]
 8008042:	2300      	movs	r3, #0
 8008044:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8008046:	f107 000c 	add.w	r0, r7, #12
 800804a:	2301      	movs	r3, #1
 800804c:	2200      	movs	r2, #0
 800804e:	2100      	movs	r1, #0
 8008050:	f7ff fd88 	bl	8007b64 <LmHandlerSend>
 8008054:	e000      	b.n	8008058 <McpsIndication+0xd0>
        return;
 8008056:	bf00      	nop
    }
}
 8008058:	3720      	adds	r7, #32
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000094 	.word	0x20000094
 8008064:	200001b4 	.word	0x200001b4

08008068 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08c      	sub	sp, #48	; 0x30
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8008070:	4b28      	ldr	r3, [pc, #160]	; (8008114 <MlmeConfirm+0xac>)
 8008072:	2200      	movs	r2, #0
 8008074:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	785a      	ldrb	r2, [r3, #1]
 800807a:	4b26      	ldr	r3, [pc, #152]	; (8008114 <MlmeConfirm+0xac>)
 800807c:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800807e:	4b26      	ldr	r3, [pc, #152]	; (8008118 <MlmeConfirm+0xb0>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	4823      	ldr	r0, [pc, #140]	; (8008114 <MlmeConfirm+0xac>)
 8008086:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8008088:	6879      	ldr	r1, [r7, #4]
 800808a:	2002      	movs	r0, #2
 800808c:	f000 f90e 	bl	80082ac <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	2b0a      	cmp	r3, #10
 8008096:	d035      	beq.n	8008104 <MlmeConfirm+0x9c>
 8008098:	2b0a      	cmp	r3, #10
 800809a:	dc35      	bgt.n	8008108 <MlmeConfirm+0xa0>
 800809c:	2b01      	cmp	r3, #1
 800809e:	d002      	beq.n	80080a6 <MlmeConfirm+0x3e>
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d023      	beq.n	80080ec <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 80080a4:	e030      	b.n	8008108 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 80080a6:	2306      	movs	r3, #6
 80080a8:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80080aa:	f107 030c 	add.w	r3, r7, #12
 80080ae:	4618      	mov	r0, r3
 80080b0:	f004 fa28 	bl	800c504 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	4a19      	ldr	r2, [pc, #100]	; (800811c <MlmeConfirm+0xb4>)
 80080b8:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80080ba:	4819      	ldr	r0, [pc, #100]	; (8008120 <MlmeConfirm+0xb8>)
 80080bc:	f7ff fef0 	bl	8007ea0 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d108      	bne.n	80080da <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80080c8:	4b15      	ldr	r3, [pc, #84]	; (8008120 <MlmeConfirm+0xb8>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80080ce:	4b15      	ldr	r3, [pc, #84]	; (8008124 <MlmeConfirm+0xbc>)
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff fe32 	bl	8007d3c <LmHandlerRequestClass>
 80080d8:	e002      	b.n	80080e0 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80080da:	4b11      	ldr	r3, [pc, #68]	; (8008120 <MlmeConfirm+0xb8>)
 80080dc:	22ff      	movs	r2, #255	; 0xff
 80080de:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80080e0:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <MlmeConfirm+0xb0>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	480e      	ldr	r0, [pc, #56]	; (8008120 <MlmeConfirm+0xb8>)
 80080e8:	4798      	blx	r3
        break;
 80080ea:	e00e      	b.n	800810a <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 80080ec:	4b0e      	ldr	r3, [pc, #56]	; (8008128 <MlmeConfirm+0xc0>)
 80080ee:	2201      	movs	r2, #1
 80080f0:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	7a1a      	ldrb	r2, [r3, #8]
 80080f6:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <MlmeConfirm+0xc0>)
 80080f8:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	7a5a      	ldrb	r2, [r3, #9]
 80080fe:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <MlmeConfirm+0xc0>)
 8008100:	73da      	strb	r2, [r3, #15]
        break;
 8008102:	e002      	b.n	800810a <MlmeConfirm+0xa2>
        break;
 8008104:	bf00      	nop
 8008106:	e000      	b.n	800810a <MlmeConfirm+0xa2>
        break;
 8008108:	bf00      	nop
    }
}
 800810a:	bf00      	nop
 800810c:	3730      	adds	r7, #48	; 0x30
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	200001dc 	.word	0x200001dc
 8008118:	200001b4 	.word	0x200001b4
 800811c:	2000006c 	.word	0x2000006c
 8008120:	20000090 	.word	0x20000090
 8008124:	200001a4 	.word	0x200001a4
 8008128:	20000094 	.word	0x20000094

0800812c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 8008136:	4b22      	ldr	r3, [pc, #136]	; (80081c0 <MlmeIndication+0x94>)
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	785a      	ldrb	r2, [r3, #1]
 8008140:	4b1f      	ldr	r3, [pc, #124]	; (80081c0 <MlmeIndication+0x94>)
 8008142:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800814a:	b25a      	sxtb	r2, r3
 800814c:	4b1c      	ldr	r3, [pc, #112]	; (80081c0 <MlmeIndication+0x94>)
 800814e:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8008156:	4b1a      	ldr	r3, [pc, #104]	; (80081c0 <MlmeIndication+0x94>)
 8008158:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	78db      	ldrb	r3, [r3, #3]
 800815e:	b25a      	sxtb	r2, r3
 8008160:	4b17      	ldr	r3, [pc, #92]	; (80081c0 <MlmeIndication+0x94>)
 8008162:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 8008164:	4b16      	ldr	r3, [pc, #88]	; (80081c0 <MlmeIndication+0x94>)
 8008166:	785b      	ldrb	r3, [r3, #1]
 8008168:	2b0e      	cmp	r3, #14
 800816a:	d005      	beq.n	8008178 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800816c:	4b15      	ldr	r3, [pc, #84]	; (80081c4 <MlmeIndication+0x98>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	4913      	ldr	r1, [pc, #76]	; (80081c0 <MlmeIndication+0x94>)
 8008174:	2000      	movs	r0, #0
 8008176:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b07      	cmp	r3, #7
 800817e:	d117      	bne.n	80081b0 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 8008180:	2300      	movs	r3, #0
 8008182:	723b      	strb	r3, [r7, #8]
 8008184:	2300      	movs	r3, #0
 8008186:	727b      	strb	r3, [r7, #9]
 8008188:	2300      	movs	r3, #0
 800818a:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800818c:	4b0e      	ldr	r3, [pc, #56]	; (80081c8 <MlmeIndication+0x9c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	4798      	blx	r3
 8008194:	4603      	mov	r3, r0
 8008196:	f083 0301 	eor.w	r3, r3, #1
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d009      	beq.n	80081b4 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 80081a0:	f107 0008 	add.w	r0, r7, #8
 80081a4:	2301      	movs	r3, #1
 80081a6:	2200      	movs	r2, #0
 80081a8:	2100      	movs	r1, #0
 80081aa:	f7ff fcdb 	bl	8007b64 <LmHandlerSend>
            }
        }
        break;
 80081ae:	e001      	b.n	80081b4 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 80081b0:	bf00      	nop
 80081b2:	e000      	b.n	80081b6 <MlmeIndication+0x8a>
        break;
 80081b4:	bf00      	nop
    }
}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000094 	.word	0x20000094
 80081c4:	200001b4 	.word	0x200001b4
 80081c8:	20000190 	.word	0x20000190

080081cc <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	4603      	mov	r3, r0
 80081d4:	6039      	str	r1, [r7, #0]
 80081d6:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 80081d8:	2300      	movs	r3, #0
 80081da:	60fb      	str	r3, [r7, #12]
    switch( id )
 80081dc:	79fb      	ldrb	r3, [r7, #7]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d103      	bne.n	80081ea <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 80081e2:	f000 f95b 	bl	800849c <LmhpCompliancePackageFactory>
 80081e6:	60f8      	str	r0, [r7, #12]
            break;
 80081e8:	e000      	b.n	80081ec <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 80081ea:	bf00      	nop
        }
    }
    if( package != NULL )
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d02b      	beq.n	800824a <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 80081f2:	79fb      	ldrb	r3, [r7, #7]
 80081f4:	4918      	ldr	r1, [pc, #96]	; (8008258 <LmHandlerPackageRegister+0x8c>)
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	4a16      	ldr	r2, [pc, #88]	; (8008258 <LmHandlerPackageRegister+0x8c>)
 8008200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008204:	4a15      	ldr	r2, [pc, #84]	; (800825c <LmHandlerPackageRegister+0x90>)
 8008206:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	4a13      	ldr	r2, [pc, #76]	; (8008258 <LmHandlerPackageRegister+0x8c>)
 800820c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008210:	4a13      	ldr	r2, [pc, #76]	; (8008260 <LmHandlerPackageRegister+0x94>)
 8008212:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8008214:	79fb      	ldrb	r3, [r7, #7]
 8008216:	4a10      	ldr	r2, [pc, #64]	; (8008258 <LmHandlerPackageRegister+0x8c>)
 8008218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800821c:	4a11      	ldr	r2, [pc, #68]	; (8008264 <LmHandlerPackageRegister+0x98>)
 800821e:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8008220:	4b11      	ldr	r3, [pc, #68]	; (8008268 <LmHandlerPackageRegister+0x9c>)
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	490c      	ldr	r1, [pc, #48]	; (8008258 <LmHandlerPackageRegister+0x8c>)
 8008228:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800822c:	6912      	ldr	r2, [r2, #16]
 800822e:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8008230:	79fb      	ldrb	r3, [r7, #7]
 8008232:	4a09      	ldr	r2, [pc, #36]	; (8008258 <LmHandlerPackageRegister+0x8c>)
 8008234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	4a0c      	ldr	r2, [pc, #48]	; (800826c <LmHandlerPackageRegister+0xa0>)
 800823c:	6851      	ldr	r1, [r2, #4]
 800823e:	4a0b      	ldr	r2, [pc, #44]	; (800826c <LmHandlerPackageRegister+0xa0>)
 8008240:	7852      	ldrb	r2, [r2, #1]
 8008242:	6838      	ldr	r0, [r7, #0]
 8008244:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 8008246:	2300      	movs	r3, #0
 8008248:	e001      	b.n	800824e <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800824a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000190 	.word	0x20000190
 800825c:	08007a79 	.word	0x08007a79
 8008260:	08007b65 	.word	0x08007b65
 8008264:	08007d11 	.word	0x08007d11
 8008268:	200001b4 	.word	0x200001b4
 800826c:	200000a4 	.word	0x200000a4

08008270 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	2b04      	cmp	r3, #4
 800827e:	d80e      	bhi.n	800829e <LmHandlerPackageIsInitialized+0x2e>
 8008280:	79fb      	ldrb	r3, [r7, #7]
 8008282:	4a09      	ldr	r2, [pc, #36]	; (80082a8 <LmHandlerPackageIsInitialized+0x38>)
 8008284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d007      	beq.n	800829e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800828e:	79fb      	ldrb	r3, [r7, #7]
 8008290:	4a05      	ldr	r2, [pc, #20]	; (80082a8 <LmHandlerPackageIsInitialized+0x38>)
 8008292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	4798      	blx	r3
 800829a:	4603      	mov	r3, r0
 800829c:	e000      	b.n	80082a0 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800829e:	2300      	movs	r3, #0
    }
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20000190 	.word	0x20000190

080082ac <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	6039      	str	r1, [r7, #0]
 80082b6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]
 80082bc:	e067      	b.n	800838e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 80082be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082c2:	4a37      	ldr	r2, [pc, #220]	; (80083a0 <LmHandlerPackagesNotify+0xf4>)
 80082c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d051      	beq.n	8008370 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 80082cc:	79fb      	ldrb	r3, [r7, #7]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d03d      	beq.n	800834e <LmHandlerPackagesNotify+0xa2>
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	dc4e      	bgt.n	8008374 <LmHandlerPackagesNotify+0xc8>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <LmHandlerPackagesNotify+0x34>
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d011      	beq.n	8008302 <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 80082de:	e049      	b.n	8008374 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 80082e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082e4:	4a2e      	ldr	r2, [pc, #184]	; (80083a0 <LmHandlerPackagesNotify+0xf4>)
 80082e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d043      	beq.n	8008378 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 80082f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082f4:	4a2a      	ldr	r2, [pc, #168]	; (80083a0 <LmHandlerPackagesNotify+0xf4>)
 80082f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	6838      	ldr	r0, [r7, #0]
 80082fe:	4798      	blx	r3
                    break;
 8008300:	e03a      	b.n	8008378 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8008302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008306:	4a26      	ldr	r2, [pc, #152]	; (80083a0 <LmHandlerPackagesNotify+0xf4>)
 8008308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d034      	beq.n	800837c <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8008312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008316:	4a22      	ldr	r2, [pc, #136]	; (80083a0 <LmHandlerPackagesNotify+0xf4>)
 8008318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800831c:	781a      	ldrb	r2, [r3, #0]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8008322:	429a      	cmp	r2, r3
 8008324:	d00a      	beq.n	800833c <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8008326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d126      	bne.n	800837c <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800832e:	4b1c      	ldr	r3, [pc, #112]	; (80083a0 <LmHandlerPackagesNotify+0xf4>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	4798      	blx	r3
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01f      	beq.n	800837c <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800833c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008340:	4a17      	ldr	r2, [pc, #92]	; (80083a0 <LmHandlerPackagesNotify+0xf4>)
 8008342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	6838      	ldr	r0, [r7, #0]
 800834a:	4798      	blx	r3
                    break;
 800834c:	e016      	b.n	800837c <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800834e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008352:	4a13      	ldr	r2, [pc, #76]	; (80083a0 <LmHandlerPackagesNotify+0xf4>)
 8008354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d010      	beq.n	8008380 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800835e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008362:	4a0f      	ldr	r2, [pc, #60]	; (80083a0 <LmHandlerPackagesNotify+0xf4>)
 8008364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	6838      	ldr	r0, [r7, #0]
 800836c:	4798      	blx	r3
                    break;
 800836e:	e007      	b.n	8008380 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 8008370:	bf00      	nop
 8008372:	e006      	b.n	8008382 <LmHandlerPackagesNotify+0xd6>
                    break;
 8008374:	bf00      	nop
 8008376:	e004      	b.n	8008382 <LmHandlerPackagesNotify+0xd6>
                    break;
 8008378:	bf00      	nop
 800837a:	e002      	b.n	8008382 <LmHandlerPackagesNotify+0xd6>
                    break;
 800837c:	bf00      	nop
 800837e:	e000      	b.n	8008382 <LmHandlerPackagesNotify+0xd6>
                    break;
 8008380:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008386:	b2db      	uxtb	r3, r3
 8008388:	3301      	adds	r3, #1
 800838a:	b2db      	uxtb	r3, r3
 800838c:	73fb      	strb	r3, [r7, #15]
 800838e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008392:	2b04      	cmp	r3, #4
 8008394:	dd93      	ble.n	80082be <LmHandlerPackagesNotify+0x12>
    }
}
 8008396:	bf00      	nop
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	20000190 	.word	0x20000190

080083a4 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80083aa:	2300      	movs	r3, #0
 80083ac:	71fb      	strb	r3, [r7, #7]
 80083ae:	e022      	b.n	80083f6 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 80083b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083b4:	4a14      	ldr	r2, [pc, #80]	; (8008408 <LmHandlerPackagesProcess+0x64>)
 80083b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d015      	beq.n	80083ea <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80083be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083c2:	4a11      	ldr	r2, [pc, #68]	; (8008408 <LmHandlerPackagesProcess+0x64>)
 80083c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083c8:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00d      	beq.n	80083ea <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff ff4d 	bl	8008270 <LmHandlerPackageIsInitialized>
 80083d6:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d006      	beq.n	80083ea <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 80083dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083e0:	4a09      	ldr	r2, [pc, #36]	; (8008408 <LmHandlerPackagesProcess+0x64>)
 80083e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80083ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	3301      	adds	r3, #1
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	71fb      	strb	r3, [r7, #7]
 80083f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	ddd8      	ble.n	80083b0 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 80083fe:	bf00      	nop
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20000190 	.word	0x20000190

0800840c <LmHandlerSetTxDatarate>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetTxDatarate(int8_t txDatarate)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08c      	sub	sp, #48	; 0x30
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	71fb      	strb	r3, [r7, #7]
    if (LmHandlerParams.AdrEnable == true)
 8008416:	4b0f      	ldr	r3, [pc, #60]	; (8008454 <LmHandlerSetTxDatarate+0x48>)
 8008418:	789b      	ldrb	r3, [r3, #2]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <LmHandlerSetTxDatarate+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800841e:	f04f 33ff 	mov.w	r3, #4294967295
 8008422:	e012      	b.n	800844a <LmHandlerSetTxDatarate+0x3e>
    }

    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_CHANNELS_DATARATE;
 8008424:	231f      	movs	r3, #31
 8008426:	733b      	strb	r3, [r7, #12]
    mibReq.Param.ChannelsDatarate = txDatarate;
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	743b      	strb	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800842c:	f107 030c 	add.w	r3, r7, #12
 8008430:	4618      	mov	r0, r3
 8008432:	f004 f9c5 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <LmHandlerSetTxDatarate+0x36>
    {
        return LORAMAC_HANDLER_ERROR;
 800843c:	f04f 33ff 	mov.w	r3, #4294967295
 8008440:	e003      	b.n	800844a <LmHandlerSetTxDatarate+0x3e>
    }

    LmHandlerParams.TxDatarate = txDatarate;
 8008442:	4a04      	ldr	r2, [pc, #16]	; (8008454 <LmHandlerSetTxDatarate+0x48>)
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	70d3      	strb	r3, [r2, #3]

    return LORAMAC_HANDLER_SUCCESS;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3730      	adds	r7, #48	; 0x30
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	200001a4 	.word	0x200001a4

08008458 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	4603      	mov	r3, r0
 8008460:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	bc80      	pop	{r7}
 800846a:	4770      	bx	lr

0800846c <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	bc80      	pop	{r7}
 800847e:	4770      	bx	lr

08008480 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 8008480:	b480      	push	{r7}
 8008482:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 8008484:	2300      	movs	r3, #0
#endif
}
 8008486:	4618      	mov	r0, r3
 8008488:	46bd      	mov	sp, r7
 800848a:	bc80      	pop	{r7}
 800848c:	4770      	bx	lr

0800848e <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800848e:	b480      	push	{r7}
 8008490:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	46bd      	mov	sp, r7
 8008498:	bc80      	pop	{r7}
 800849a:	4770      	bx	lr

0800849c <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 80084a0:	4b02      	ldr	r3, [pc, #8]	; (80084ac <LmhpCompliancePackageFactory+0x10>)
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bc80      	pop	{r7}
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	200000ac 	.word	0x200000ac

080084b0 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	4613      	mov	r3, r2
 80084bc:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00f      	beq.n	80084e4 <LmhpComplianceInit+0x34>
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00c      	beq.n	80084e4 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 80084ca:	4a0c      	ldr	r2, [pc, #48]	; (80084fc <LmhpComplianceInit+0x4c>)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80084d0:	4a0b      	ldr	r2, [pc, #44]	; (8008500 <LmhpComplianceInit+0x50>)
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80084d6:	4a0a      	ldr	r2, [pc, #40]	; (8008500 <LmhpComplianceInit+0x50>)
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 80084dc:	4b08      	ldr	r3, [pc, #32]	; (8008500 <LmhpComplianceInit+0x50>)
 80084de:	2201      	movs	r2, #1
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	e006      	b.n	80084f2 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 80084e4:	4b05      	ldr	r3, [pc, #20]	; (80084fc <LmhpComplianceInit+0x4c>)
 80084e6:	2200      	movs	r2, #0
 80084e8:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 80084ea:	4b05      	ldr	r3, [pc, #20]	; (8008500 <LmhpComplianceInit+0x50>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	701a      	strb	r2, [r3, #0]
    }
}
 80084f0:	bf00      	nop
 80084f2:	bf00      	nop
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bc80      	pop	{r7}
 80084fa:	4770      	bx	lr
 80084fc:	20000314 	.word	0x20000314
 8008500:	20000300 	.word	0x20000300

08008504 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8008504:	b480      	push	{r7}
 8008506:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8008508:	4b02      	ldr	r3, [pc, #8]	; (8008514 <LmhpComplianceIsInitialized+0x10>)
 800850a:	781b      	ldrb	r3, [r3, #0]
}
 800850c:	4618      	mov	r0, r3
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr
 8008514:	20000300 	.word	0x20000300

08008518 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 8008518:	b480      	push	{r7}
 800851a:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800851c:	4b07      	ldr	r3, [pc, #28]	; (800853c <LmhpComplianceIsRunning+0x24>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	f083 0301 	eor.w	r3, r3, #1
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800852a:	2300      	movs	r3, #0
 800852c:	e001      	b.n	8008532 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800852e:	4b03      	ldr	r3, [pc, #12]	; (800853c <LmhpComplianceIsRunning+0x24>)
 8008530:	785b      	ldrb	r3, [r3, #1]
}
 8008532:	4618      	mov	r0, r3
 8008534:	46bd      	mov	sp, r7
 8008536:	bc80      	pop	{r7}
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	20000300 	.word	0x20000300

08008540 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 8008548:	4b0f      	ldr	r3, [pc, #60]	; (8008588 <LmhpComplianceOnMcpsConfirm+0x48>)
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	f083 0301 	eor.w	r3, r3, #1
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	d112      	bne.n	800857c <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8008556:	4b0c      	ldr	r3, [pc, #48]	; (8008588 <LmhpComplianceOnMcpsConfirm+0x48>)
 8008558:	785b      	ldrb	r3, [r3, #1]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00f      	beq.n	800857e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 8008562:	2b01      	cmp	r3, #1
 8008564:	d10b      	bne.n	800857e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800856a:	2b00      	cmp	r3, #0
 800856c:	d007      	beq.n	800857e <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800856e:	4b06      	ldr	r3, [pc, #24]	; (8008588 <LmhpComplianceOnMcpsConfirm+0x48>)
 8008570:	899b      	ldrh	r3, [r3, #12]
 8008572:	3301      	adds	r3, #1
 8008574:	b29a      	uxth	r2, r3
 8008576:	4b04      	ldr	r3, [pc, #16]	; (8008588 <LmhpComplianceOnMcpsConfirm+0x48>)
 8008578:	819a      	strh	r2, [r3, #12]
 800857a:	e000      	b.n	800857e <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800857c:	bf00      	nop
    }
}
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	bc80      	pop	{r7}
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	20000300 	.word	0x20000300

0800858c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8008594:	4b12      	ldr	r3, [pc, #72]	; (80085e0 <LmhpComplianceOnMlmeConfirm+0x54>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	f083 0301 	eor.w	r3, r3, #1
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d116      	bne.n	80085d0 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80085a2:	4b0f      	ldr	r3, [pc, #60]	; (80085e0 <LmhpComplianceOnMlmeConfirm+0x54>)
 80085a4:	785b      	ldrb	r3, [r3, #1]
 80085a6:	f083 0301 	eor.w	r3, r3, #1
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d111      	bne.n	80085d4 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b04      	cmp	r3, #4
 80085b6:	d10e      	bne.n	80085d6 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 80085b8:	4b09      	ldr	r3, [pc, #36]	; (80085e0 <LmhpComplianceOnMlmeConfirm+0x54>)
 80085ba:	2201      	movs	r2, #1
 80085bc:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	7a1a      	ldrb	r2, [r3, #8]
 80085c2:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <LmhpComplianceOnMlmeConfirm+0x54>)
 80085c4:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	7a5a      	ldrb	r2, [r3, #9]
 80085ca:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <LmhpComplianceOnMlmeConfirm+0x54>)
 80085cc:	741a      	strb	r2, [r3, #16]
 80085ce:	e002      	b.n	80085d6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80085d0:	bf00      	nop
 80085d2:	e000      	b.n	80085d6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80085d4:	bf00      	nop
    }
}
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	bc80      	pop	{r7}
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	20000300 	.word	0x20000300

080085e4 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 80085e4:	b590      	push	{r4, r7, lr}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 80085ea:	4b33      	ldr	r3, [pc, #204]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	f083 0301 	eor.w	r3, r3, #1
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 80085f8:	f04f 33ff 	mov.w	r3, #4294967295
 80085fc:	e058      	b.n	80086b0 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 80085fe:	4b2e      	ldr	r3, [pc, #184]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 8008600:	785b      	ldrb	r3, [r3, #1]
 8008602:	f083 0301 	eor.w	r3, r3, #1
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800860c:	2300      	movs	r3, #0
 800860e:	e04f      	b.n	80086b0 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 8008610:	4b29      	ldr	r3, [pc, #164]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 8008612:	7b9b      	ldrb	r3, [r3, #14]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d019      	beq.n	800864c <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 8008618:	4b27      	ldr	r3, [pc, #156]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 800861a:	2200      	movs	r2, #0
 800861c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800861e:	4b26      	ldr	r3, [pc, #152]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 8008620:	2203      	movs	r2, #3
 8008622:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8008624:	4b24      	ldr	r3, [pc, #144]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	2205      	movs	r2, #5
 800862a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800862c:	4b22      	ldr	r3, [pc, #136]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	3301      	adds	r3, #1
 8008632:	4a21      	ldr	r2, [pc, #132]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 8008634:	7bd2      	ldrb	r2, [r2, #15]
 8008636:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8008638:	4b1f      	ldr	r3, [pc, #124]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	3302      	adds	r3, #2
 800863e:	4a1e      	ldr	r2, [pc, #120]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 8008640:	7c12      	ldrb	r2, [r2, #16]
 8008642:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 8008644:	4b1c      	ldr	r3, [pc, #112]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 8008646:	2201      	movs	r2, #1
 8008648:	709a      	strb	r2, [r3, #2]
 800864a:	e01c      	b.n	8008686 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800864c:	4b1a      	ldr	r3, [pc, #104]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 800864e:	789b      	ldrb	r3, [r3, #2]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d005      	beq.n	8008660 <LmhpComplianceTxProcess+0x7c>
 8008654:	2b04      	cmp	r3, #4
 8008656:	d116      	bne.n	8008686 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 8008658:	4b17      	ldr	r3, [pc, #92]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 800865a:	2201      	movs	r2, #1
 800865c:	709a      	strb	r2, [r3, #2]
            break;
 800865e:	e012      	b.n	8008686 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 8008660:	4b15      	ldr	r3, [pc, #84]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 8008662:	2202      	movs	r2, #2
 8008664:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8008666:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 8008668:	899b      	ldrh	r3, [r3, #12]
 800866a:	0a1b      	lsrs	r3, r3, #8
 800866c:	b29a      	uxth	r2, r3
 800866e:	4b12      	ldr	r3, [pc, #72]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	b2d2      	uxtb	r2, r2
 8008674:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8008676:	4b10      	ldr	r3, [pc, #64]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 8008678:	899a      	ldrh	r2, [r3, #12]
 800867a:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	3301      	adds	r3, #1
 8008680:	b2d2      	uxtb	r2, r2
 8008682:	701a      	strb	r2, [r3, #0]
            break;
 8008684:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 8008686:	23e0      	movs	r3, #224	; 0xe0
 8008688:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800868a:	4b0b      	ldr	r3, [pc, #44]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 800868c:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800868e:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8008690:	4b09      	ldr	r3, [pc, #36]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 8008692:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 8008694:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 8008696:	4809      	ldr	r0, [pc, #36]	; (80086bc <LmhpComplianceTxProcess+0xd8>)
 8008698:	f00d ffd2 	bl	8016640 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800869c:	4b08      	ldr	r3, [pc, #32]	; (80086c0 <LmhpComplianceTxProcess+0xdc>)
 800869e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80086a0:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <LmhpComplianceTxProcess+0xd4>)
 80086a2:	78db      	ldrb	r3, [r3, #3]
 80086a4:	4619      	mov	r1, r3
 80086a6:	4638      	mov	r0, r7
 80086a8:	2301      	movs	r3, #1
 80086aa:	2200      	movs	r2, #0
 80086ac:	47a0      	blx	r4
 80086ae:	4603      	mov	r3, r0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd90      	pop	{r4, r7, pc}
 80086b8:	20000300 	.word	0x20000300
 80086bc:	200002e8 	.word	0x200002e8
 80086c0:	200000ac 	.word	0x200000ac

080086c4 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b0a2      	sub	sp, #136	; 0x88
 80086c8:	af02      	add	r7, sp, #8
 80086ca:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80086cc:	4bae      	ldr	r3, [pc, #696]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	f083 0301 	eor.w	r3, r3, #1
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f040 81c0 	bne.w	8008a5c <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	7b5b      	ldrb	r3, [r3, #13]
 80086e0:	f083 0301 	eor.w	r3, r3, #1
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f040 81ba 	bne.w	8008a60 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 80086ec:	4ba6      	ldr	r3, [pc, #664]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 80086ee:	785b      	ldrb	r3, [r3, #1]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00c      	beq.n	800870e <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	7b9b      	ldrb	r3, [r3, #14]
 80086f8:	f083 0301 	eor.w	r3, r3, #1
 80086fc:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d005      	beq.n	800870e <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8008702:	4ba1      	ldr	r3, [pc, #644]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 8008704:	899b      	ldrh	r3, [r3, #12]
 8008706:	3301      	adds	r3, #1
 8008708:	b29a      	uxth	r2, r3
 800870a:	4b9f      	ldr	r3, [pc, #636]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800870c:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	78db      	ldrb	r3, [r3, #3]
 8008712:	2be0      	cmp	r3, #224	; 0xe0
 8008714:	f040 81a6 	bne.w	8008a64 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8008718:	4b9b      	ldr	r3, [pc, #620]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	f083 0301 	eor.w	r3, r3, #1
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d060      	beq.n	80087e8 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	7b1b      	ldrb	r3, [r3, #12]
 800872a:	2b04      	cmp	r3, #4
 800872c:	f040 819f 	bne.w	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8008736:	2b01      	cmp	r3, #1
 8008738:	f040 8199 	bne.w	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	3301      	adds	r3, #1
 8008742:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8008744:	2b01      	cmp	r3, #1
 8008746:	f040 8192 	bne.w	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	3302      	adds	r3, #2
 8008750:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8008752:	2b01      	cmp	r3, #1
 8008754:	f040 818b 	bne.w	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	3303      	adds	r3, #3
 800875e:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8008760:	2b01      	cmp	r3, #1
 8008762:	f040 8184 	bne.w	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 8008766:	4b88      	ldr	r3, [pc, #544]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 8008768:	2200      	movs	r2, #0
 800876a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800876c:	4b86      	ldr	r3, [pc, #536]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800876e:	22e0      	movs	r2, #224	; 0xe0
 8008770:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8008772:	4b85      	ldr	r3, [pc, #532]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 8008774:	2202      	movs	r2, #2
 8008776:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8008778:	4b83      	ldr	r3, [pc, #524]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800877a:	2200      	movs	r2, #0
 800877c:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800877e:	4b82      	ldr	r3, [pc, #520]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 8008780:	2200      	movs	r2, #0
 8008782:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8008784:	4b80      	ldr	r3, [pc, #512]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 8008786:	2200      	movs	r2, #0
 8008788:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800878a:	4b7f      	ldr	r3, [pc, #508]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800878c:	2200      	movs	r2, #0
 800878e:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8008790:	4b7d      	ldr	r3, [pc, #500]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 8008792:	2201      	movs	r2, #1
 8008794:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8008796:	4b7c      	ldr	r3, [pc, #496]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 8008798:	2201      	movs	r2, #1
 800879a:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800879c:	2304      	movs	r3, #4
 800879e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 80087a0:	2301      	movs	r3, #1
 80087a2:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80087a4:	f107 0308 	add.w	r3, r7, #8
 80087a8:	4618      	mov	r0, r3
 80087aa:	f004 f809 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 80087ae:	2000      	movs	r0, #0
 80087b0:	f004 fd7a 	bl	800d2a8 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 80087b4:	4b75      	ldr	r3, [pc, #468]	; (800898c <LmhpComplianceOnMcpsIndication+0x2c8>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 80087be:	4b73      	ldr	r3, [pc, #460]	; (800898c <LmhpComplianceOnMcpsIndication+0x2c8>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 80087c6:	2300      	movs	r3, #0
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	4b71      	ldr	r3, [pc, #452]	; (8008990 <LmhpComplianceOnMcpsIndication+0x2cc>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	f04f 31ff 	mov.w	r1, #4294967295
 80087d2:	4870      	ldr	r0, [pc, #448]	; (8008994 <LmhpComplianceOnMcpsIndication+0x2d0>)
 80087d4:	f00d fefe 	bl	80165d4 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 80087d8:	f241 3188 	movw	r1, #5000	; 0x1388
 80087dc:	486d      	ldr	r0, [pc, #436]	; (8008994 <LmhpComplianceOnMcpsIndication+0x2d0>)
 80087de:	f00e f80d 	bl	80167fc <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 80087e2:	f7ff feff 	bl	80085e4 <LmhpComplianceTxProcess>
 80087e6:	e142      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	781a      	ldrb	r2, [r3, #0]
 80087ee:	4b66      	ldr	r3, [pc, #408]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 80087f0:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 80087f2:	4b65      	ldr	r3, [pc, #404]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 80087f4:	789b      	ldrb	r3, [r3, #2]
 80087f6:	2b0a      	cmp	r3, #10
 80087f8:	f200 8136 	bhi.w	8008a68 <LmhpComplianceOnMcpsIndication+0x3a4>
 80087fc:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <LmhpComplianceOnMcpsIndication+0x140>)
 80087fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008802:	bf00      	nop
 8008804:	08008831 	.word	0x08008831
 8008808:	0800887b 	.word	0x0800887b
 800880c:	08008883 	.word	0x08008883
 8008810:	08008891 	.word	0x08008891
 8008814:	0800889f 	.word	0x0800889f
 8008818:	080088f7 	.word	0x080088f7
 800881c:	08008909 	.word	0x08008909
 8008820:	08008959 	.word	0x08008959
 8008824:	08008a15 	.word	0x08008a15
 8008828:	08008a27 	.word	0x08008a27
 800882c:	08008a41 	.word	0x08008a41
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 8008830:	4858      	ldr	r0, [pc, #352]	; (8008994 <LmhpComplianceOnMcpsIndication+0x2d0>)
 8008832:	f00d ff73 	bl	801671c <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 8008836:	4b54      	ldr	r3, [pc, #336]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 8008838:	2200      	movs	r2, #0
 800883a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800883c:	4b52      	ldr	r3, [pc, #328]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800883e:	2200      	movs	r2, #0
 8008840:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 8008842:	2304      	movs	r3, #4
 8008844:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008846:	4b51      	ldr	r3, [pc, #324]	; (800898c <LmhpComplianceOnMcpsIndication+0x2c8>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800884e:	f107 0308 	add.w	r3, r7, #8
 8008852:	4618      	mov	r0, r3
 8008854:	f003 ffb4 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8008858:	4b4c      	ldr	r3, [pc, #304]	; (800898c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	4618      	mov	r0, r3
 8008860:	f004 fd22 	bl	800d2a8 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8008864:	4b49      	ldr	r3, [pc, #292]	; (800898c <LmhpComplianceOnMcpsIndication+0x2c8>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 80fe 	beq.w	8008a6c <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 8008870:	4b46      	ldr	r3, [pc, #280]	; (800898c <LmhpComplianceOnMcpsIndication+0x2c8>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	4798      	blx	r3
                }
            }
            break;
 8008878:	e0f8      	b.n	8008a6c <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800887a:	4b43      	ldr	r3, [pc, #268]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800887c:	2202      	movs	r2, #2
 800887e:	719a      	strb	r2, [r3, #6]
            break;
 8008880:	e0f5      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 8008882:	4b41      	ldr	r3, [pc, #260]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 8008884:	2201      	movs	r2, #1
 8008886:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8008888:	4b3f      	ldr	r3, [pc, #252]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800888a:	2201      	movs	r2, #1
 800888c:	709a      	strb	r2, [r3, #2]
            break;
 800888e:	e0ee      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 8008890:	4b3d      	ldr	r3, [pc, #244]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 8008892:	2200      	movs	r2, #0
 8008894:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8008896:	4b3c      	ldr	r3, [pc, #240]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 8008898:	2201      	movs	r2, #1
 800889a:	709a      	strb	r2, [r3, #2]
            break;
 800889c:	e0e7      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	7b1a      	ldrb	r2, [r3, #12]
 80088a2:	4b39      	ldr	r3, [pc, #228]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 80088a4:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 80088a6:	4b38      	ldr	r3, [pc, #224]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	2204      	movs	r2, #4
 80088ac:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80088ae:	2301      	movs	r3, #1
 80088b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80088b4:	e012      	b.n	80088dc <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689a      	ldr	r2, [r3, #8]
 80088ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80088be:	4413      	add	r3, r2
 80088c0:	781a      	ldrb	r2, [r3, #0]
 80088c2:	4b31      	ldr	r3, [pc, #196]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 80088c4:	6899      	ldr	r1, [r3, #8]
 80088c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80088ca:	440b      	add	r3, r1
 80088cc:	3201      	adds	r2, #1
 80088ce:	b2d2      	uxtb	r2, r2
 80088d0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80088d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80088d6:	3301      	adds	r3, #1
 80088d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80088dc:	4b2a      	ldr	r3, [pc, #168]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 80088de:	795a      	ldrb	r2, [r3, #5]
 80088e0:	4b29      	ldr	r3, [pc, #164]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 80088e2:	799b      	ldrb	r3, [r3, #6]
 80088e4:	4293      	cmp	r3, r2
 80088e6:	bf28      	it	cs
 80088e8:	4613      	movcs	r3, r2
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d3e0      	bcc.n	80088b6 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 80088f4:	e0bb      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 80088f6:	2304      	movs	r3, #4
 80088f8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 80088fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008900:	4618      	mov	r0, r3
 8008902:	f004 fa9b 	bl	800ce3c <LoRaMacMlmeRequest>
            }
            break;
 8008906:	e0b2      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 8008908:	4822      	ldr	r0, [pc, #136]	; (8008994 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800890a:	f00d ff07 	bl	801671c <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800890e:	4b1e      	ldr	r3, [pc, #120]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 8008910:	2200      	movs	r2, #0
 8008912:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8008914:	4b1c      	ldr	r3, [pc, #112]	; (8008988 <LmhpComplianceOnMcpsIndication+0x2c4>)
 8008916:	2200      	movs	r2, #0
 8008918:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800891a:	2304      	movs	r3, #4
 800891c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800891e:	4b1b      	ldr	r3, [pc, #108]	; (800898c <LmhpComplianceOnMcpsIndication+0x2c8>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008926:	f107 0308 	add.w	r3, r7, #8
 800892a:	4618      	mov	r0, r3
 800892c:	f003 ff48 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8008930:	4b16      	ldr	r3, [pc, #88]	; (800898c <LmhpComplianceOnMcpsIndication+0x2c8>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	785b      	ldrb	r3, [r3, #1]
 8008936:	4618      	mov	r0, r3
 8008938:	f004 fcb6 	bl	800d2a8 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800893c:	4b13      	ldr	r3, [pc, #76]	; (800898c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 8008946:	4b11      	ldr	r3, [pc, #68]	; (800898c <LmhpComplianceOnMcpsIndication+0x2c8>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800894e:	4b12      	ldr	r3, [pc, #72]	; (8008998 <LmhpComplianceOnMcpsIndication+0x2d4>)
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	2002      	movs	r0, #2
 8008954:	4798      	blx	r3
            }
            break;
 8008956:	e08a      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	7b1b      	ldrb	r3, [r3, #12]
 800895c:	2b03      	cmp	r3, #3
 800895e:	d11d      	bne.n	800899c <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 8008960:	2305      	movs	r3, #5
 8008962:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	3301      	adds	r3, #1
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	021b      	lsls	r3, r3, #8
 8008970:	b21a      	sxth	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	3302      	adds	r3, #2
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	b21b      	sxth	r3, r3
 800897c:	4313      	orrs	r3, r2
 800897e:	b21b      	sxth	r3, r3
 8008980:	b29b      	uxth	r3, r3
 8008982:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8008986:	e03c      	b.n	8008a02 <LmhpComplianceOnMcpsIndication+0x33e>
 8008988:	20000300 	.word	0x20000300
 800898c:	20000314 	.word	0x20000314
 8008990:	08008a85 	.word	0x08008a85
 8008994:	200002e8 	.word	0x200002e8
 8008998:	200000ac 	.word	0x200000ac
                }
                else if( mcpsIndication->BufferSize == 7 )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	7b1b      	ldrb	r3, [r3, #12]
 80089a0:	2b07      	cmp	r3, #7
 80089a2:	d12e      	bne.n	8008a02 <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 80089a4:	2306      	movs	r3, #6
 80089a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	3301      	adds	r3, #1
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	021b      	lsls	r3, r3, #8
 80089b4:	b21a      	sxth	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	3302      	adds	r3, #2
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	b21b      	sxth	r3, r3
 80089c0:	4313      	orrs	r3, r2
 80089c2:	b21b      	sxth	r3, r3
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	3303      	adds	r3, #3
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	041a      	lsls	r2, r3, #16
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	3304      	adds	r3, #4
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	021b      	lsls	r3, r3, #8
 80089de:	4313      	orrs	r3, r2
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	6892      	ldr	r2, [r2, #8]
 80089e4:	3205      	adds	r2, #5
 80089e6:	7812      	ldrb	r2, [r2, #0]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	461a      	mov	r2, r3
 80089ec:	2364      	movs	r3, #100	; 0x64
 80089ee:	fb03 f302 	mul.w	r3, r3, r2
 80089f2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	3306      	adds	r3, #6
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	b25b      	sxtb	r3, r3
 80089fe:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 8008a02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008a06:	4618      	mov	r0, r3
 8008a08:	f004 fa18 	bl	800ce3c <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8008a0c:	4b19      	ldr	r3, [pc, #100]	; (8008a74 <LmhpComplianceOnMcpsIndication+0x3b0>)
 8008a0e:	2201      	movs	r2, #1
 8008a10:	709a      	strb	r2, [r3, #2]
            }
            break;
 8008a12:	e02c      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 8008a14:	230a      	movs	r3, #10
 8008a16:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 8008a1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f004 fa0c 	bl	800ce3c <LoRaMacMlmeRequest>
            }
            break;
 8008a24:	e023      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 8008a26:	2300      	movs	r3, #0
 8008a28:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008a34:	f107 0308 	add.w	r3, r7, #8
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f003 fec1 	bl	800c7c0 <LoRaMacMibSetRequestConfirm>
            }
            break;
 8008a3e:	e016      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8008a40:	230d      	movs	r3, #13
 8008a42:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	785b      	ldrb	r3, [r3, #1]
 8008a4c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 8008a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a54:	4618      	mov	r0, r3
 8008a56:	f004 f9f1 	bl	800ce3c <LoRaMacMlmeRequest>
            }
            break;
 8008a5a:	e008      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 8008a5c:	bf00      	nop
 8008a5e:	e006      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 8008a60:	bf00      	nop
 8008a62:	e004      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 8008a64:	bf00      	nop
 8008a66:	e002      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 8008a68:	bf00      	nop
 8008a6a:	e000      	b.n	8008a6e <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 8008a6c:	bf00      	nop
        }
    }
}
 8008a6e:	3780      	adds	r7, #128	; 0x80
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	20000300 	.word	0x20000300

08008a78 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8008a7c:	bf00      	nop
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bc80      	pop	{r7}
 8008a82:	4770      	bx	lr

08008a84 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8008a8c:	f7ff fdaa 	bl	80085e4 <LmhpComplianceTxProcess>
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 8008a98:	b590      	push	{r4, r7, lr}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8008a9e:	f00d fed7 	bl	8016850 <UTIL_TIMER_GetCurrentTime>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	4a13      	ldr	r2, [pc, #76]	; (8008af4 <OnRadioTxDone+0x5c>)
 8008aa6:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8008aa8:	4c13      	ldr	r4, [pc, #76]	; (8008af8 <OnRadioTxDone+0x60>)
 8008aaa:	463b      	mov	r3, r7
 8008aac:	4618      	mov	r0, r3
 8008aae:	f00d fcd3 	bl	8016458 <SysTimeGet>
 8008ab2:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8008ab6:	463a      	mov	r2, r7
 8008ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008abc:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8008ac0:	4a0e      	ldr	r2, [pc, #56]	; (8008afc <OnRadioTxDone+0x64>)
 8008ac2:	7813      	ldrb	r3, [r2, #0]
 8008ac4:	f043 0310 	orr.w	r3, r3, #16
 8008ac8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008aca:	4b0b      	ldr	r3, [pc, #44]	; (8008af8 <OnRadioTxDone+0x60>)
 8008acc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00a      	beq.n	8008aea <OnRadioTxDone+0x52>
 8008ad4:	4b08      	ldr	r3, [pc, #32]	; (8008af8 <OnRadioTxDone+0x60>)
 8008ad6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d004      	beq.n	8008aea <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008ae0:	4b05      	ldr	r3, [pc, #20]	; (8008af8 <OnRadioTxDone+0x60>)
 8008ae2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd90      	pop	{r4, r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20001220 	.word	0x20001220
 8008af8:	20000318 	.word	0x20000318
 8008afc:	20000e30 	.word	0x20000e30

08008b00 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	4608      	mov	r0, r1
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	4603      	mov	r3, r0
 8008b10:	817b      	strh	r3, [r7, #10]
 8008b12:	460b      	mov	r3, r1
 8008b14:	813b      	strh	r3, [r7, #8]
 8008b16:	4613      	mov	r3, r2
 8008b18:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8008b1a:	f00d fe99 	bl	8016850 <UTIL_TIMER_GetCurrentTime>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	4a13      	ldr	r2, [pc, #76]	; (8008b70 <OnRadioRxDone+0x70>)
 8008b22:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8008b24:	4a12      	ldr	r2, [pc, #72]	; (8008b70 <OnRadioRxDone+0x70>)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8008b2a:	4a11      	ldr	r2, [pc, #68]	; (8008b70 <OnRadioRxDone+0x70>)
 8008b2c:	897b      	ldrh	r3, [r7, #10]
 8008b2e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8008b30:	4a0f      	ldr	r2, [pc, #60]	; (8008b70 <OnRadioRxDone+0x70>)
 8008b32:	893b      	ldrh	r3, [r7, #8]
 8008b34:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8008b36:	4a0e      	ldr	r2, [pc, #56]	; (8008b70 <OnRadioRxDone+0x70>)
 8008b38:	79fb      	ldrb	r3, [r7, #7]
 8008b3a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8008b3c:	4a0d      	ldr	r2, [pc, #52]	; (8008b74 <OnRadioRxDone+0x74>)
 8008b3e:	7813      	ldrb	r3, [r2, #0]
 8008b40:	f043 0308 	orr.w	r3, r3, #8
 8008b44:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008b46:	4b0c      	ldr	r3, [pc, #48]	; (8008b78 <OnRadioRxDone+0x78>)
 8008b48:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00a      	beq.n	8008b66 <OnRadioRxDone+0x66>
 8008b50:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <OnRadioRxDone+0x78>)
 8008b52:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d004      	beq.n	8008b66 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008b5c:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <OnRadioRxDone+0x78>)
 8008b5e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
}
 8008b66:	bf00      	nop
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	20001224 	.word	0x20001224
 8008b74:	20000e30 	.word	0x20000e30
 8008b78:	20000318 	.word	0x20000318

08008b7c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8008b80:	4a0b      	ldr	r2, [pc, #44]	; (8008bb0 <OnRadioTxTimeout+0x34>)
 8008b82:	7813      	ldrb	r3, [r2, #0]
 8008b84:	f043 0304 	orr.w	r3, r3, #4
 8008b88:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008b8a:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <OnRadioTxTimeout+0x38>)
 8008b8c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00a      	beq.n	8008baa <OnRadioTxTimeout+0x2e>
 8008b94:	4b07      	ldr	r3, [pc, #28]	; (8008bb4 <OnRadioTxTimeout+0x38>)
 8008b96:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d004      	beq.n	8008baa <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008ba0:	4b04      	ldr	r3, [pc, #16]	; (8008bb4 <OnRadioTxTimeout+0x38>)
 8008ba2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}
 8008baa:	bf00      	nop
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000e30 	.word	0x20000e30
 8008bb4:	20000318 	.word	0x20000318

08008bb8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8008bbc:	4a0b      	ldr	r2, [pc, #44]	; (8008bec <OnRadioRxError+0x34>)
 8008bbe:	7813      	ldrb	r3, [r2, #0]
 8008bc0:	f043 0302 	orr.w	r3, r3, #2
 8008bc4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008bc6:	4b0a      	ldr	r3, [pc, #40]	; (8008bf0 <OnRadioRxError+0x38>)
 8008bc8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00a      	beq.n	8008be6 <OnRadioRxError+0x2e>
 8008bd0:	4b07      	ldr	r3, [pc, #28]	; (8008bf0 <OnRadioRxError+0x38>)
 8008bd2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d004      	beq.n	8008be6 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008bdc:	4b04      	ldr	r3, [pc, #16]	; (8008bf0 <OnRadioRxError+0x38>)
 8008bde:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	4798      	blx	r3
    }
}
 8008be6:	bf00      	nop
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	20000e30 	.word	0x20000e30
 8008bf0:	20000318 	.word	0x20000318

08008bf4 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8008bf8:	4a0b      	ldr	r2, [pc, #44]	; (8008c28 <OnRadioRxTimeout+0x34>)
 8008bfa:	7813      	ldrb	r3, [r2, #0]
 8008bfc:	f043 0301 	orr.w	r3, r3, #1
 8008c00:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008c02:	4b0a      	ldr	r3, [pc, #40]	; (8008c2c <OnRadioRxTimeout+0x38>)
 8008c04:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00a      	beq.n	8008c22 <OnRadioRxTimeout+0x2e>
 8008c0c:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <OnRadioRxTimeout+0x38>)
 8008c0e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d004      	beq.n	8008c22 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008c18:	4b04      	ldr	r3, [pc, #16]	; (8008c2c <OnRadioRxTimeout+0x38>)
 8008c1a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}
 8008c22:	bf00      	nop
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20000e30 	.word	0x20000e30
 8008c2c:	20000318 	.word	0x20000318

08008c30 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8008c30:	b480      	push	{r7}
 8008c32:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008c34:	4b08      	ldr	r3, [pc, #32]	; (8008c58 <UpdateRxSlotIdleState+0x28>)
 8008c36:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d004      	beq.n	8008c48 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8008c3e:	4b07      	ldr	r3, [pc, #28]	; (8008c5c <UpdateRxSlotIdleState+0x2c>)
 8008c40:	2206      	movs	r2, #6
 8008c42:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8008c46:	e003      	b.n	8008c50 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008c48:	4b04      	ldr	r3, [pc, #16]	; (8008c5c <UpdateRxSlotIdleState+0x2c>)
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 8008c50:	bf00      	nop
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bc80      	pop	{r7}
 8008c56:	4770      	bx	lr
 8008c58:	20000820 	.word	0x20000820
 8008c5c:	20000318 	.word	0x20000318

08008c60 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b08e      	sub	sp, #56	; 0x38
 8008c64:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008c66:	4b44      	ldr	r3, [pc, #272]	; (8008d78 <ProcessRadioTxDone+0x118>)
 8008c68:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d002      	beq.n	8008c76 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8008c70:	4b42      	ldr	r3, [pc, #264]	; (8008d7c <ProcessRadioTxDone+0x11c>)
 8008c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c74:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8008c76:	4b42      	ldr	r3, [pc, #264]	; (8008d80 <ProcessRadioTxDone+0x120>)
 8008c78:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4841      	ldr	r0, [pc, #260]	; (8008d84 <ProcessRadioTxDone+0x124>)
 8008c80:	f00d fdbc 	bl	80167fc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8008c84:	483f      	ldr	r0, [pc, #252]	; (8008d84 <ProcessRadioTxDone+0x124>)
 8008c86:	f00d fcdb 	bl	8016640 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8008c8a:	4b3d      	ldr	r3, [pc, #244]	; (8008d80 <ProcessRadioTxDone+0x120>)
 8008c8c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8008c90:	4619      	mov	r1, r3
 8008c92:	483d      	ldr	r0, [pc, #244]	; (8008d88 <ProcessRadioTxDone+0x128>)
 8008c94:	f00d fdb2 	bl	80167fc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8008c98:	483b      	ldr	r0, [pc, #236]	; (8008d88 <ProcessRadioTxDone+0x128>)
 8008c9a:	f00d fcd1 	bl	8016640 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8008c9e:	4b36      	ldr	r3, [pc, #216]	; (8008d78 <ProcessRadioTxDone+0x118>)
 8008ca0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d004      	beq.n	8008cb2 <ProcessRadioTxDone+0x52>
 8008ca8:	4b35      	ldr	r3, [pc, #212]	; (8008d80 <ProcessRadioTxDone+0x120>)
 8008caa:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d019      	beq.n	8008ce6 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8008cb2:	2316      	movs	r3, #22
 8008cb4:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008cb8:	4b2f      	ldr	r3, [pc, #188]	; (8008d78 <ProcessRadioTxDone+0x118>)
 8008cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cbe:	f107 0220 	add.w	r2, r7, #32
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f006 fb5a 	bl	800f37e <RegionGetPhyParam>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008cce:	4b2c      	ldr	r3, [pc, #176]	; (8008d80 <ProcessRadioTxDone+0x120>)
 8008cd0:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	4619      	mov	r1, r3
 8008cda:	482c      	ldr	r0, [pc, #176]	; (8008d8c <ProcessRadioTxDone+0x12c>)
 8008cdc:	f00d fd8e 	bl	80167fc <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8008ce0:	482a      	ldr	r0, [pc, #168]	; (8008d8c <ProcessRadioTxDone+0x12c>)
 8008ce2:	f00d fcad 	bl	8016640 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8008ce6:	4b2a      	ldr	r3, [pc, #168]	; (8008d90 <ProcessRadioTxDone+0x130>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a23      	ldr	r2, [pc, #140]	; (8008d78 <ProcessRadioTxDone+0x118>)
 8008cec:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8008cee:	4b24      	ldr	r3, [pc, #144]	; (8008d80 <ProcessRadioTxDone+0x120>)
 8008cf0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8008cf4:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008cf6:	4b26      	ldr	r3, [pc, #152]	; (8008d90 <ProcessRadioTxDone+0x130>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008cfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d00:	4618      	mov	r0, r3
 8008d02:	f00d fbe1 	bl	80164c8 <SysTimeGetMcuTime>
 8008d06:	4638      	mov	r0, r7
 8008d08:	4b1b      	ldr	r3, [pc, #108]	; (8008d78 <ProcessRadioTxDone+0x118>)
 8008d0a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8008d0e:	9200      	str	r2, [sp, #0]
 8008d10:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008d14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008d18:	ca06      	ldmia	r2, {r1, r2}
 8008d1a:	f00d fb37 	bl	801638c <SysTimeSub>
 8008d1e:	f107 0314 	add.w	r3, r7, #20
 8008d22:	463a      	mov	r2, r7
 8008d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d28:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8008d2c:	4b14      	ldr	r3, [pc, #80]	; (8008d80 <ProcessRadioTxDone+0x120>)
 8008d2e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8008d32:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8008d34:	2301      	movs	r3, #1
 8008d36:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008d38:	4b0f      	ldr	r3, [pc, #60]	; (8008d78 <ProcessRadioTxDone+0x118>)
 8008d3a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 8008d42:	2300      	movs	r3, #0
 8008d44:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8008d46:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <ProcessRadioTxDone+0x118>)
 8008d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d4c:	f107 0208 	add.w	r2, r7, #8
 8008d50:	4611      	mov	r1, r2
 8008d52:	4618      	mov	r0, r3
 8008d54:	f006 fb35 	bl	800f3c2 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 8008d58:	4b09      	ldr	r3, [pc, #36]	; (8008d80 <ProcessRadioTxDone+0x120>)
 8008d5a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008d5e:	f083 0301 	eor.w	r3, r3, #1
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d003      	beq.n	8008d70 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <ProcessRadioTxDone+0x120>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 8008d70:	bf00      	nop
 8008d72:	3730      	adds	r7, #48	; 0x30
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20000820 	.word	0x20000820
 8008d7c:	080183e0 	.word	0x080183e0
 8008d80:	20000318 	.word	0x20000318
 8008d84:	20000698 	.word	0x20000698
 8008d88:	200006b0 	.word	0x200006b0
 8008d8c:	20000710 	.word	0x20000710
 8008d90:	20001220 	.word	0x20001220

08008d94 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8008d98:	4b10      	ldr	r3, [pc, #64]	; (8008ddc <PrepareRxDoneAbort+0x48>)
 8008d9a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da2:	4a0e      	ldr	r2, [pc, #56]	; (8008ddc <PrepareRxDoneAbort+0x48>)
 8008da4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8008da8:	4b0c      	ldr	r3, [pc, #48]	; (8008ddc <PrepareRxDoneAbort+0x48>)
 8008daa:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 8008db2:	2000      	movs	r0, #0
 8008db4:	f001 f8f8 	bl	8009fa8 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8008db8:	4a08      	ldr	r2, [pc, #32]	; (8008ddc <PrepareRxDoneAbort+0x48>)
 8008dba:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008dbe:	f043 0302 	orr.w	r3, r3, #2
 8008dc2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008dc6:	4a05      	ldr	r2, [pc, #20]	; (8008ddc <PrepareRxDoneAbort+0x48>)
 8008dc8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008dcc:	f043 0320 	orr.w	r3, r3, #32
 8008dd0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 8008dd4:	f7ff ff2c 	bl	8008c30 <UpdateRxSlotIdleState>
}
 8008dd8:	bf00      	nop
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	20000318 	.word	0x20000318

08008de0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8008de0:	b5b0      	push	{r4, r5, r7, lr}
 8008de2:	b0a6      	sub	sp, #152	; 0x98
 8008de4:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8008de6:	2313      	movs	r3, #19
 8008de8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8008dec:	4bb9      	ldr	r3, [pc, #740]	; (80090d4 <ProcessRadioRxDone+0x2f4>)
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 8008df2:	4bb8      	ldr	r3, [pc, #736]	; (80090d4 <ProcessRadioRxDone+0x2f4>)
 8008df4:	891b      	ldrh	r3, [r3, #8]
 8008df6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 8008dfa:	4bb6      	ldr	r3, [pc, #728]	; (80090d4 <ProcessRadioRxDone+0x2f4>)
 8008dfc:	895b      	ldrh	r3, [r3, #10]
 8008dfe:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 8008e02:	4bb4      	ldr	r3, [pc, #720]	; (80090d4 <ProcessRadioRxDone+0x2f4>)
 8008e04:	7b1b      	ldrb	r3, [r3, #12]
 8008e06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008e14:	4bb0      	ldr	r3, [pc, #704]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8008e16:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8008e1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 8008e2a:	4bac      	ldr	r3, [pc, #688]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 8008e32:	4aaa      	ldr	r2, [pc, #680]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e34:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8008e38:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 8008e3c:	4aa7      	ldr	r2, [pc, #668]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e3e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008e42:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8008e46:	4ba5      	ldr	r3, [pc, #660]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e48:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 8008e4c:	4ba3      	ldr	r3, [pc, #652]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e4e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8008e52:	4ba2      	ldr	r3, [pc, #648]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 8008e5a:	4ba0      	ldr	r3, [pc, #640]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8008e62:	4b9e      	ldr	r3, [pc, #632]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 8008e6a:	4b9c      	ldr	r3, [pc, #624]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 8008e72:	4b9a      	ldr	r3, [pc, #616]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 8008e7a:	4b98      	ldr	r3, [pc, #608]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 8008e82:	4b96      	ldr	r3, [pc, #600]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008e8a:	4b94      	ldr	r3, [pc, #592]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008e92:	4b92      	ldr	r3, [pc, #584]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 8008e9a:	4b90      	ldr	r3, [pc, #576]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008ea2:	4b8e      	ldr	r3, [pc, #568]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 8008eaa:	4b8d      	ldr	r3, [pc, #564]	; (80090e0 <ProcessRadioRxDone+0x300>)
 8008eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eae:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8008eb0:	488c      	ldr	r0, [pc, #560]	; (80090e4 <ProcessRadioRxDone+0x304>)
 8008eb2:	f00d fc33 	bl	801671c <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008eb6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008ebe:	f004 fb28 	bl	800d512 <LoRaMacClassBRxBeacon>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00a      	beq.n	8008ede <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008ec8:	4a84      	ldr	r2, [pc, #528]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008eca:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8008ece:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008ed2:	4a82      	ldr	r2, [pc, #520]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008ed4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008ed8:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 8008edc:	e3bf      	b.n	800965e <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008ede:	4b7e      	ldr	r3, [pc, #504]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8008ee0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d11e      	bne.n	8008f26 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008ee8:	f004 fb26 	bl	800d538 <LoRaMacClassBIsPingExpected>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00a      	beq.n	8008f08 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	f004 fad7 	bl	800d4a6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008ef8:	2000      	movs	r0, #0
 8008efa:	f004 faf8 	bl	800d4ee <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008efe:	4b77      	ldr	r3, [pc, #476]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008f00:	2204      	movs	r2, #4
 8008f02:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8008f06:	e00e      	b.n	8008f26 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008f08:	f004 fb1d 	bl	800d546 <LoRaMacClassBIsMulticastExpected>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d009      	beq.n	8008f26 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008f12:	2000      	movs	r0, #0
 8008f14:	f004 fad1 	bl	800d4ba <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008f18:	2000      	movs	r0, #0
 8008f1a:	f004 faf1 	bl	800d500 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008f1e:	4b6f      	ldr	r3, [pc, #444]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008f20:	2205      	movs	r2, #5
 8008f22:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 8008f26:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 8008f30:	461a      	mov	r2, r3
 8008f32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f34:	4413      	add	r3, r2
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 8008f3c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8008f40:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	3b01      	subs	r3, #1
 8008f48:	2b06      	cmp	r3, #6
 8008f4a:	f200 8362 	bhi.w	8009612 <ProcessRadioRxDone+0x832>
 8008f4e:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <ProcessRadioRxDone+0x174>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08008f71 	.word	0x08008f71
 8008f58:	08009613 	.word	0x08009613
 8008f5c:	080090f1 	.word	0x080090f1
 8008f60:	08009613 	.word	0x08009613
 8008f64:	080090e9 	.word	0x080090e9
 8008f68:	08009613 	.word	0x08009613
 8008f6c:	080095b9 	.word	0x080095b9
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8008f70:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008f74:	2b10      	cmp	r3, #16
 8008f76:	d806      	bhi.n	8008f86 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008f78:	4b58      	ldr	r3, [pc, #352]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8008f80:	f7ff ff08 	bl	8008d94 <PrepareRxDoneAbort>
                return;
 8008f84:	e36b      	b.n	800965e <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 8008f86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f88:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 8008f8a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008f92:	4b51      	ldr	r3, [pc, #324]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8008f94:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d006      	beq.n	8008faa <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008f9c:	4b4f      	ldr	r3, [pc, #316]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8008fa4:	f7ff fef6 	bl	8008d94 <PrepareRxDoneAbort>
                return;
 8008fa8:	e359      	b.n	800965e <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8008faa:	f7fe fc57 	bl	800785c <SecureElementGetJoinEui>
 8008fae:	4601      	mov	r1, r0
 8008fb0:	f107 0308 	add.w	r3, r7, #8
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	20ff      	movs	r0, #255	; 0xff
 8008fb8:	f005 fc60 	bl	800e87c <LoRaMacCryptoHandleJoinAccept>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8008fc2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d172      	bne.n	80090b0 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008fca:	7c7b      	ldrb	r3, [r7, #17]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	4b42      	ldr	r3, [pc, #264]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8008fd0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008fd4:	4b40      	ldr	r3, [pc, #256]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8008fd6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008fda:	7cbb      	ldrb	r3, [r7, #18]
 8008fdc:	021b      	lsls	r3, r3, #8
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	4a3d      	ldr	r2, [pc, #244]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8008fe2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008fe6:	4b3c      	ldr	r3, [pc, #240]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8008fe8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008fec:	7cfb      	ldrb	r3, [r7, #19]
 8008fee:	041b      	lsls	r3, r3, #16
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	4a39      	ldr	r2, [pc, #228]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8008ff4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	4a37      	ldr	r2, [pc, #220]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8008ffc:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8009000:	7e3b      	ldrb	r3, [r7, #24]
 8009002:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009006:	b2db      	uxtb	r3, r3
 8009008:	461a      	mov	r2, r3
 800900a:	4b33      	ldr	r3, [pc, #204]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 800900c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009010:	7e3b      	ldrb	r3, [r7, #24]
 8009012:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009016:	b2db      	uxtb	r3, r3
 8009018:	461a      	mov	r2, r3
 800901a:	4b2f      	ldr	r3, [pc, #188]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 800901c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009020:	7e3b      	ldrb	r3, [r7, #24]
 8009022:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009026:	b2db      	uxtb	r3, r3
 8009028:	461a      	mov	r2, r3
 800902a:	4b2b      	ldr	r3, [pc, #172]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 800902c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8009030:	7e7b      	ldrb	r3, [r7, #25]
 8009032:	461a      	mov	r2, r3
 8009034:	4b28      	ldr	r3, [pc, #160]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8009036:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8009038:	4b27      	ldr	r3, [pc, #156]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 800903a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903c:	2b00      	cmp	r3, #0
 800903e:	d102      	bne.n	8009046 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8009040:	4b25      	ldr	r3, [pc, #148]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8009042:	2201      	movs	r2, #1
 8009044:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8009046:	4b24      	ldr	r3, [pc, #144]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8009048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800904a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800904e:	fb02 f303 	mul.w	r3, r2, r3
 8009052:	4a21      	ldr	r2, [pc, #132]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8009054:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8009056:	4b20      	ldr	r3, [pc, #128]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8009058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800905a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800905e:	4a1e      	ldr	r2, [pc, #120]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8009060:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8009062:	4b1d      	ldr	r3, [pc, #116]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8009064:	2200      	movs	r2, #0
 8009066:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800906a:	f107 0308 	add.w	r3, r7, #8
 800906e:	3312      	adds	r3, #18
 8009070:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8009072:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009076:	b2db      	uxtb	r3, r3
 8009078:	3b11      	subs	r3, #17
 800907a:	b2db      	uxtb	r3, r3
 800907c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8009080:	4b15      	ldr	r3, [pc, #84]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8009082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009086:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800908a:	4611      	mov	r1, r2
 800908c:	4618      	mov	r0, r3
 800908e:	f006 f9e8 	bl	800f462 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009092:	4b11      	ldr	r3, [pc, #68]	; (80090d8 <ProcessRadioRxDone+0x2f8>)
 8009094:	2202      	movs	r2, #2
 8009096:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800909a:	2001      	movs	r0, #1
 800909c:	f004 ff18 	bl	800ded0 <LoRaMacConfirmQueueIsCmdActive>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00e      	beq.n	80090c4 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 80090a6:	2101      	movs	r1, #1
 80090a8:	2000      	movs	r0, #0
 80090aa:	f004 fe85 	bl	800ddb8 <LoRaMacConfirmQueueSetStatus>
 80090ae:	e009      	b.n	80090c4 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80090b0:	2001      	movs	r0, #1
 80090b2:	f004 ff0d 	bl	800ded0 <LoRaMacConfirmQueueIsCmdActive>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80090bc:	2101      	movs	r1, #1
 80090be:	2007      	movs	r0, #7
 80090c0:	f004 fe7a 	bl	800ddb8 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 80090c4:	4a05      	ldr	r2, [pc, #20]	; (80090dc <ProcessRadioRxDone+0x2fc>)
 80090c6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80090ca:	f043 0308 	orr.w	r3, r3, #8
 80090ce:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 80090d2:	e2a5      	b.n	8009620 <ProcessRadioRxDone+0x840>
 80090d4:	20001224 	.word	0x20001224
 80090d8:	20000820 	.word	0x20000820
 80090dc:	20000318 	.word	0x20000318
 80090e0:	080183e0 	.word	0x080183e0
 80090e4:	200006b0 	.word	0x200006b0
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80090e8:	4bae      	ldr	r3, [pc, #696]	; (80093a4 <ProcessRadioRxDone+0x5c4>)
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80090f0:	4bad      	ldr	r3, [pc, #692]	; (80093a8 <ProcessRadioRxDone+0x5c8>)
 80090f2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80090f6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80090fa:	4baa      	ldr	r3, [pc, #680]	; (80093a4 <ProcessRadioRxDone+0x5c4>)
 80090fc:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8009100:	b25b      	sxtb	r3, r3
 8009102:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009106:	230d      	movs	r3, #13
 8009108:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800910c:	4ba6      	ldr	r3, [pc, #664]	; (80093a8 <ProcessRadioRxDone+0x5c8>)
 800910e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009116:	230e      	movs	r3, #14
 8009118:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800911c:	4ba2      	ldr	r3, [pc, #648]	; (80093a8 <ProcessRadioRxDone+0x5c8>)
 800911e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009122:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8009126:	4611      	mov	r1, r2
 8009128:	4618      	mov	r0, r3
 800912a:	f006 f928 	bl	800f37e <RegionGetPhyParam>
 800912e:	4603      	mov	r3, r0
 8009130:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8009132:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009136:	3b0d      	subs	r3, #13
 8009138:	b29b      	uxth	r3, r3
 800913a:	b21b      	sxth	r3, r3
 800913c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009140:	b21a      	sxth	r2, r3
 8009142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009144:	b21b      	sxth	r3, r3
 8009146:	429a      	cmp	r2, r3
 8009148:	dc03      	bgt.n	8009152 <ProcessRadioRxDone+0x372>
 800914a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800914e:	2b0b      	cmp	r3, #11
 8009150:	d806      	bhi.n	8009160 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009152:	4b94      	ldr	r3, [pc, #592]	; (80093a4 <ProcessRadioRxDone+0x5c4>)
 8009154:	2201      	movs	r2, #1
 8009156:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800915a:	f7ff fe1b 	bl	8008d94 <PrepareRxDoneAbort>
                return;
 800915e:	e27e      	b.n	800965e <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 8009160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009162:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 8009164:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009168:	b2db      	uxtb	r3, r3
 800916a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800916e:	4b8f      	ldr	r3, [pc, #572]	; (80093ac <ProcessRadioRxDone+0x5cc>)
 8009170:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009172:	23ff      	movs	r3, #255	; 0xff
 8009174:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009178:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800917c:	4618      	mov	r0, r3
 800917e:	f005 fe7c 	bl	800ee7a <LoRaMacParserData>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d006      	beq.n	8009196 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009188:	4b86      	ldr	r3, [pc, #536]	; (80093a4 <ProcessRadioRxDone+0x5c4>)
 800918a:	2201      	movs	r2, #1
 800918c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8009190:	f7ff fe00 	bl	8008d94 <PrepareRxDoneAbort>
                return;
 8009194:	e263      	b.n	800965e <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	4a82      	ldr	r2, [pc, #520]	; (80093a4 <ProcessRadioRxDone+0x5c4>)
 800919a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800919e:	1cba      	adds	r2, r7, #2
 80091a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80091a4:	4611      	mov	r1, r2
 80091a6:	4618      	mov	r0, r3
 80091a8:	f002 fcde 	bl	800bb68 <DetermineFrameType>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d006      	beq.n	80091c0 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80091b2:	4b7c      	ldr	r3, [pc, #496]	; (80093a4 <ProcessRadioRxDone+0x5c4>)
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80091ba:	f7ff fdeb 	bl	8008d94 <PrepareRxDoneAbort>
                return;
 80091be:	e24e      	b.n	800965e <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80091ca:	2300      	movs	r3, #0
 80091cc:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 80091d0:	e049      	b.n	8009266 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80091d2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80091d6:	4a74      	ldr	r2, [pc, #464]	; (80093a8 <ProcessRadioRxDone+0x5c8>)
 80091d8:	212c      	movs	r1, #44	; 0x2c
 80091da:	fb01 f303 	mul.w	r3, r1, r3
 80091de:	4413      	add	r3, r2
 80091e0:	33d4      	adds	r3, #212	; 0xd4
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d138      	bne.n	800925c <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 80091ea:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80091ee:	4a6e      	ldr	r2, [pc, #440]	; (80093a8 <ProcessRadioRxDone+0x5c8>)
 80091f0:	212c      	movs	r1, #44	; 0x2c
 80091f2:	fb01 f303 	mul.w	r3, r1, r3
 80091f6:	4413      	add	r3, r2
 80091f8:	33d2      	adds	r3, #210	; 0xd2
 80091fa:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d02d      	beq.n	800925c <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 8009200:	2301      	movs	r3, #1
 8009202:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8009206:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800920a:	4a67      	ldr	r2, [pc, #412]	; (80093a8 <ProcessRadioRxDone+0x5c8>)
 800920c:	212c      	movs	r1, #44	; 0x2c
 800920e:	fb01 f303 	mul.w	r3, r1, r3
 8009212:	4413      	add	r3, r2
 8009214:	33d3      	adds	r3, #211	; 0xd3
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800921c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8009220:	4a61      	ldr	r2, [pc, #388]	; (80093a8 <ProcessRadioRxDone+0x5c8>)
 8009222:	212c      	movs	r1, #44	; 0x2c
 8009224:	fb01 f303 	mul.w	r3, r1, r3
 8009228:	4413      	add	r3, r2
 800922a:	33f0      	adds	r3, #240	; 0xf0
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8009232:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8009236:	4a5c      	ldr	r2, [pc, #368]	; (80093a8 <ProcessRadioRxDone+0x5c8>)
 8009238:	212c      	movs	r1, #44	; 0x2c
 800923a:	fb01 f303 	mul.w	r3, r1, r3
 800923e:	4413      	add	r3, r2
 8009240:	33d4      	adds	r3, #212	; 0xd4
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009248:	4b57      	ldr	r3, [pc, #348]	; (80093a8 <ProcessRadioRxDone+0x5c8>)
 800924a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800924e:	2b02      	cmp	r3, #2
 8009250:	d10e      	bne.n	8009270 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009252:	4b54      	ldr	r3, [pc, #336]	; (80093a4 <ProcessRadioRxDone+0x5c4>)
 8009254:	2203      	movs	r2, #3
 8009256:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800925a:	e009      	b.n	8009270 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800925c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8009260:	3301      	adds	r3, #1
 8009262:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8009266:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0b1      	beq.n	80091d2 <ProcessRadioRxDone+0x3f2>
 800926e:	e000      	b.n	8009272 <ProcessRadioRxDone+0x492>
                    break;
 8009270:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8009272:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009276:	2b01      	cmp	r3, #1
 8009278:	d117      	bne.n	80092aa <ProcessRadioRxDone+0x4ca>
 800927a:	78bb      	ldrb	r3, [r7, #2]
 800927c:	2b03      	cmp	r3, #3
 800927e:	d10d      	bne.n	800929c <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8009280:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009284:	f003 0320 	and.w	r3, r3, #32
 8009288:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800928a:	2b00      	cmp	r3, #0
 800928c:	d106      	bne.n	800929c <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800928e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009296:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8009298:	2b00      	cmp	r3, #0
 800929a:	d006      	beq.n	80092aa <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800929c:	4b41      	ldr	r3, [pc, #260]	; (80093a4 <ProcessRadioRxDone+0x5c4>)
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80092a4:	f7ff fd76 	bl	8008d94 <PrepareRxDoneAbort>
                return;
 80092a8:	e1d9      	b.n	800965e <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80092aa:	2315      	movs	r3, #21
 80092ac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80092b0:	4b3d      	ldr	r3, [pc, #244]	; (80093a8 <ProcessRadioRxDone+0x5c8>)
 80092b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092b6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f006 f85e 	bl	800f37e <RegionGetPhyParam>
 80092c2:	4603      	mov	r3, r0
 80092c4:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 80092c6:	78b9      	ldrb	r1, [r7, #2]
 80092c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	4d36      	ldr	r5, [pc, #216]	; (80093a8 <ProcessRadioRxDone+0x5c8>)
 80092ce:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80092d2:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 80092d6:	1d3a      	adds	r2, r7, #4
 80092d8:	9202      	str	r2, [sp, #8]
 80092da:	1cfa      	adds	r2, r7, #3
 80092dc:	9201      	str	r2, [sp, #4]
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 80092e4:	4622      	mov	r2, r4
 80092e6:	f000 fe95 	bl	800a014 <GetFCntDown>
 80092ea:	4603      	mov	r3, r0
 80092ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80092f0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d031      	beq.n	800935c <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80092f8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80092fc:	2b07      	cmp	r3, #7
 80092fe:	d119      	bne.n	8009334 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8009300:	4b28      	ldr	r3, [pc, #160]	; (80093a4 <ProcessRadioRxDone+0x5c4>)
 8009302:	2208      	movs	r2, #8
 8009304:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8009308:	4b27      	ldr	r3, [pc, #156]	; (80093a8 <ProcessRadioRxDone+0x5c8>)
 800930a:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800930e:	2b00      	cmp	r3, #0
 8009310:	d11d      	bne.n	800934e <ProcessRadioRxDone+0x56e>
 8009312:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8009316:	f023 031f 	bic.w	r3, r3, #31
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2ba0      	cmp	r3, #160	; 0xa0
 800931e:	d116      	bne.n	800934e <ProcessRadioRxDone+0x56e>
 8009320:	4b21      	ldr	r3, [pc, #132]	; (80093a8 <ProcessRadioRxDone+0x5c8>)
 8009322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009326:	429a      	cmp	r2, r3
 8009328:	d111      	bne.n	800934e <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800932a:	4b1f      	ldr	r3, [pc, #124]	; (80093a8 <ProcessRadioRxDone+0x5c8>)
 800932c:	2201      	movs	r2, #1
 800932e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009332:	e00c      	b.n	800934e <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8009334:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8009338:	2b08      	cmp	r3, #8
 800933a:	d104      	bne.n	8009346 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800933c:	4b19      	ldr	r3, [pc, #100]	; (80093a4 <ProcessRadioRxDone+0x5c4>)
 800933e:	220a      	movs	r2, #10
 8009340:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8009344:	e003      	b.n	800934e <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009346:	4b17      	ldr	r3, [pc, #92]	; (80093a4 <ProcessRadioRxDone+0x5c4>)
 8009348:	2201      	movs	r2, #1
 800934a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a14      	ldr	r2, [pc, #80]	; (80093a4 <ProcessRadioRxDone+0x5c4>)
 8009352:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 8009356:	f7ff fd1d 	bl	8008d94 <PrepareRxDoneAbort>
                return;
 800935a:	e180      	b.n	800965e <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800935c:	78fa      	ldrb	r2, [r7, #3]
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 8009364:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	460b      	mov	r3, r1
 800936c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009370:	f005 fbd0 	bl	800eb14 <LoRaMacCryptoUnsecureMessage>
 8009374:	4603      	mov	r3, r0
 8009376:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800937a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800937e:	2b00      	cmp	r3, #0
 8009380:	d016      	beq.n	80093b0 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8009382:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8009386:	2b02      	cmp	r3, #2
 8009388:	d104      	bne.n	8009394 <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800938a:	4b06      	ldr	r3, [pc, #24]	; (80093a4 <ProcessRadioRxDone+0x5c4>)
 800938c:	220b      	movs	r2, #11
 800938e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8009392:	e003      	b.n	800939c <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8009394:	4b03      	ldr	r3, [pc, #12]	; (80093a4 <ProcessRadioRxDone+0x5c4>)
 8009396:	220c      	movs	r2, #12
 8009398:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800939c:	f7ff fcfa 	bl	8008d94 <PrepareRxDoneAbort>
                return;
 80093a0:	e15d      	b.n	800965e <ProcessRadioRxDone+0x87e>
 80093a2:	bf00      	nop
 80093a4:	20000318 	.word	0x20000318
 80093a8:	20000820 	.word	0x20000820
 80093ac:	20000550 	.word	0x20000550
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80093b0:	4bac      	ldr	r3, [pc, #688]	; (8009664 <ProcessRadioRxDone+0x884>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 80093b8:	4aaa      	ldr	r2, [pc, #680]	; (8009664 <ProcessRadioRxDone+0x884>)
 80093ba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80093be:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80093c2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80093c6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	461a      	mov	r2, r3
 80093ce:	4ba5      	ldr	r3, [pc, #660]	; (8009664 <ProcessRadioRxDone+0x884>)
 80093d0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 80093d4:	4ba3      	ldr	r3, [pc, #652]	; (8009664 <ProcessRadioRxDone+0x884>)
 80093d6:	2200      	movs	r2, #0
 80093d8:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 80093dc:	4ba1      	ldr	r3, [pc, #644]	; (8009664 <ProcessRadioRxDone+0x884>)
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a9f      	ldr	r2, [pc, #636]	; (8009664 <ProcessRadioRxDone+0x884>)
 80093e8:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80093ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80093f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	bf14      	ite	ne
 80093fa:	2301      	movne	r3, #1
 80093fc:	2300      	moveq	r3, #0
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	4b98      	ldr	r3, [pc, #608]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009402:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009406:	4b97      	ldr	r3, [pc, #604]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800940e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009412:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b00      	cmp	r3, #0
 800941a:	bf14      	ite	ne
 800941c:	2301      	movne	r3, #1
 800941e:	2300      	moveq	r3, #0
 8009420:	b2da      	uxtb	r2, r3
 8009422:	4b90      	ldr	r3, [pc, #576]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009424:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009428:	4b8e      	ldr	r3, [pc, #568]	; (8009664 <ProcessRadioRxDone+0x884>)
 800942a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800942e:	2b00      	cmp	r3, #0
 8009430:	d004      	beq.n	800943c <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8009432:	4b8c      	ldr	r3, [pc, #560]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009434:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009438:	2b01      	cmp	r3, #1
 800943a:	d102      	bne.n	8009442 <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800943c:	4b8a      	ldr	r3, [pc, #552]	; (8009668 <ProcessRadioRxDone+0x888>)
 800943e:	2200      	movs	r2, #0
 8009440:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8009442:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009446:	2b01      	cmp	r3, #1
 8009448:	d104      	bne.n	8009454 <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800944a:	4b86      	ldr	r3, [pc, #536]	; (8009664 <ProcessRadioRxDone+0x884>)
 800944c:	2202      	movs	r2, #2
 800944e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8009452:	e01f      	b.n	8009494 <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8009454:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8009458:	f023 031f 	bic.w	r3, r3, #31
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2ba0      	cmp	r3, #160	; 0xa0
 8009460:	d110      	bne.n	8009484 <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8009462:	4b81      	ldr	r3, [pc, #516]	; (8009668 <ProcessRadioRxDone+0x888>)
 8009464:	2201      	movs	r2, #1
 8009466:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800946a:	4b7f      	ldr	r3, [pc, #508]	; (8009668 <ProcessRadioRxDone+0x888>)
 800946c:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8009474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009476:	4a7c      	ldr	r2, [pc, #496]	; (8009668 <ProcessRadioRxDone+0x888>)
 8009478:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800947a:	4b7a      	ldr	r3, [pc, #488]	; (8009664 <ProcessRadioRxDone+0x884>)
 800947c:	2201      	movs	r2, #1
 800947e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8009482:	e007      	b.n	8009494 <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8009484:	4b78      	ldr	r3, [pc, #480]	; (8009668 <ProcessRadioRxDone+0x888>)
 8009486:	2200      	movs	r2, #0
 8009488:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800948c:	4b75      	ldr	r3, [pc, #468]	; (8009664 <ProcessRadioRxDone+0x884>)
 800948e:	2200      	movs	r2, #0
 8009490:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8009494:	4b73      	ldr	r3, [pc, #460]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009496:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800949a:	4a72      	ldr	r2, [pc, #456]	; (8009664 <ProcessRadioRxDone+0x884>)
 800949c:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 80094a0:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 80094a4:	4618      	mov	r0, r3
 80094a6:	f001 ff0d 	bl	800b2c4 <RemoveMacCommands>

            switch( fType )
 80094aa:	78bb      	ldrb	r3, [r7, #2]
 80094ac:	2b03      	cmp	r3, #3
 80094ae:	d874      	bhi.n	800959a <ProcessRadioRxDone+0x7ba>
 80094b0:	a201      	add	r2, pc, #4	; (adr r2, 80094b8 <ProcessRadioRxDone+0x6d8>)
 80094b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b6:	bf00      	nop
 80094b8:	080094c9 	.word	0x080094c9
 80094bc:	08009519 	.word	0x08009519
 80094c0:	0800954f 	.word	0x0800954f
 80094c4:	08009575 	.word	0x08009575
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80094c8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80094cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	461c      	mov	r4, r3
 80094d4:	4b63      	ldr	r3, [pc, #396]	; (8009664 <ProcessRadioRxDone+0x884>)
 80094d6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80094da:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 80094de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80094e2:	f102 0010 	add.w	r0, r2, #16
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	460b      	mov	r3, r1
 80094ea:	4622      	mov	r2, r4
 80094ec:	2100      	movs	r1, #0
 80094ee:	f000 ff03 	bl	800a2f8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80094f2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80094f6:	4b5b      	ldr	r3, [pc, #364]	; (8009664 <ProcessRadioRxDone+0x884>)
 80094f8:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80094fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094fe:	4a59      	ldr	r2, [pc, #356]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009500:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009504:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8009508:	4b56      	ldr	r3, [pc, #344]	; (8009664 <ProcessRadioRxDone+0x884>)
 800950a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800950e:	4b55      	ldr	r3, [pc, #340]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009510:	2201      	movs	r2, #1
 8009512:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8009516:	e047      	b.n	80095a8 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009518:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800951c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009520:	b2db      	uxtb	r3, r3
 8009522:	461c      	mov	r4, r3
 8009524:	4b4f      	ldr	r3, [pc, #316]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009526:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800952a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800952e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009532:	f102 0010 	add.w	r0, r2, #16
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	460b      	mov	r3, r1
 800953a:	4622      	mov	r2, r4
 800953c:	2100      	movs	r1, #0
 800953e:	f000 fedb 	bl	800a2f8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009542:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8009546:	4b47      	ldr	r3, [pc, #284]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009548:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800954c:	e02c      	b.n	80095a8 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800954e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009550:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8009554:	4b43      	ldr	r3, [pc, #268]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009556:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800955a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	460b      	mov	r3, r1
 8009562:	2100      	movs	r1, #0
 8009564:	f000 fec8 	bl	800a2f8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009568:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800956c:	4b3d      	ldr	r3, [pc, #244]	; (8009664 <ProcessRadioRxDone+0x884>)
 800956e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 8009572:	e019      	b.n	80095a8 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009574:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8009578:	4b3a      	ldr	r3, [pc, #232]	; (8009664 <ProcessRadioRxDone+0x884>)
 800957a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800957e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009580:	4a38      	ldr	r2, [pc, #224]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009582:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009586:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800958a:	4b36      	ldr	r3, [pc, #216]	; (8009664 <ProcessRadioRxDone+0x884>)
 800958c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8009590:	4b34      	ldr	r3, [pc, #208]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8009598:	e006      	b.n	80095a8 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800959a:	4b32      	ldr	r3, [pc, #200]	; (8009664 <ProcessRadioRxDone+0x884>)
 800959c:	2201      	movs	r2, #1
 800959e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 80095a2:	f7ff fbf7 	bl	8008d94 <PrepareRxDoneAbort>
                    break;
 80095a6:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80095a8:	4a2e      	ldr	r2, [pc, #184]	; (8009664 <ProcessRadioRxDone+0x884>)
 80095aa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80095ae:	f043 0302 	orr.w	r3, r3, #2
 80095b2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 80095b6:	e033      	b.n	8009620 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80095b8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80095bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80095be:	18d1      	adds	r1, r2, r3
 80095c0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	461a      	mov	r2, r3
 80095d0:	4826      	ldr	r0, [pc, #152]	; (800966c <ProcessRadioRxDone+0x88c>)
 80095d2:	f009 fd88 	bl	80130e6 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80095d6:	4b23      	ldr	r3, [pc, #140]	; (8009664 <ProcessRadioRxDone+0x884>)
 80095d8:	2203      	movs	r2, #3
 80095da:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80095de:	4b21      	ldr	r3, [pc, #132]	; (8009664 <ProcessRadioRxDone+0x884>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80095e6:	4b1f      	ldr	r3, [pc, #124]	; (8009664 <ProcessRadioRxDone+0x884>)
 80095e8:	4a20      	ldr	r2, [pc, #128]	; (800966c <ProcessRadioRxDone+0x88c>)
 80095ea:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80095ee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	4b19      	ldr	r3, [pc, #100]	; (8009664 <ProcessRadioRxDone+0x884>)
 80095fe:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009602:	4a18      	ldr	r2, [pc, #96]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009604:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009608:	f043 0302 	orr.w	r3, r3, #2
 800960c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8009610:	e006      	b.n	8009620 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009612:	4b14      	ldr	r3, [pc, #80]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009614:	2201      	movs	r2, #1
 8009616:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800961a:	f7ff fbbb 	bl	8008d94 <PrepareRxDoneAbort>
            break;
 800961e:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 8009620:	4b10      	ldr	r3, [pc, #64]	; (8009664 <ProcessRadioRxDone+0x884>)
 8009622:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8009626:	2b00      	cmp	r3, #0
 8009628:	d008      	beq.n	800963c <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800962a:	4b0e      	ldr	r3, [pc, #56]	; (8009664 <ProcessRadioRxDone+0x884>)
 800962c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00b      	beq.n	800964c <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 8009634:	2000      	movs	r0, #0
 8009636:	f000 fcb7 	bl	8009fa8 <OnAckTimeoutTimerEvent>
 800963a:	e007      	b.n	800964c <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800963c:	4b0a      	ldr	r3, [pc, #40]	; (8009668 <ProcessRadioRxDone+0x888>)
 800963e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009642:	2b02      	cmp	r3, #2
 8009644:	d102      	bne.n	800964c <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 8009646:	2000      	movs	r0, #0
 8009648:	f000 fcae 	bl	8009fa8 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800964c:	4a05      	ldr	r2, [pc, #20]	; (8009664 <ProcessRadioRxDone+0x884>)
 800964e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009652:	f043 0320 	orr.w	r3, r3, #32
 8009656:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800965a:	f7ff fae9 	bl	8008c30 <UpdateRxSlotIdleState>
}
 800965e:	3788      	adds	r7, #136	; 0x88
 8009660:	46bd      	mov	sp, r7
 8009662:	bdb0      	pop	{r4, r5, r7, pc}
 8009664:	20000318 	.word	0x20000318
 8009668:	20000820 	.word	0x20000820
 800966c:	20000550 	.word	0x20000550

08009670 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009674:	4b11      	ldr	r3, [pc, #68]	; (80096bc <ProcessRadioTxTimeout+0x4c>)
 8009676:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800967a:	2b02      	cmp	r3, #2
 800967c:	d002      	beq.n	8009684 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800967e:	4b10      	ldr	r3, [pc, #64]	; (80096c0 <ProcessRadioTxTimeout+0x50>)
 8009680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009682:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8009684:	f7ff fad4 	bl	8008c30 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009688:	4b0e      	ldr	r3, [pc, #56]	; (80096c4 <ProcessRadioTxTimeout+0x54>)
 800968a:	2202      	movs	r2, #2
 800968c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009690:	2002      	movs	r0, #2
 8009692:	f004 fbe9 	bl	800de68 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8009696:	4b0b      	ldr	r3, [pc, #44]	; (80096c4 <ProcessRadioTxTimeout+0x54>)
 8009698:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800969c:	2b00      	cmp	r3, #0
 800969e:	d003      	beq.n	80096a8 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 80096a0:	4b08      	ldr	r3, [pc, #32]	; (80096c4 <ProcessRadioTxTimeout+0x54>)
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80096a8:	4a06      	ldr	r2, [pc, #24]	; (80096c4 <ProcessRadioTxTimeout+0x54>)
 80096aa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80096ae:	f043 0320 	orr.w	r3, r3, #32
 80096b2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 80096b6:	bf00      	nop
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20000820 	.word	0x20000820
 80096c0:	080183e0 	.word	0x080183e0
 80096c4:	20000318 	.word	0x20000318

080096c8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	460a      	mov	r2, r1
 80096d2:	71fb      	strb	r3, [r7, #7]
 80096d4:	4613      	mov	r3, r2
 80096d6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80096d8:	2300      	movs	r3, #0
 80096da:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80096dc:	4b40      	ldr	r3, [pc, #256]	; (80097e0 <HandleRadioRxErrorTimeout+0x118>)
 80096de:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d002      	beq.n	80096ec <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80096e6:	4b3f      	ldr	r3, [pc, #252]	; (80097e4 <HandleRadioRxErrorTimeout+0x11c>)
 80096e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ea:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80096ec:	f003 ff1d 	bl	800d52a <LoRaMacClassBIsBeaconExpected>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d007      	beq.n	8009706 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80096f6:	2002      	movs	r0, #2
 80096f8:	f003 fecb 	bl	800d492 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80096fc:	2000      	movs	r0, #0
 80096fe:	f003 feed 	bl	800d4dc <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8009702:	2301      	movs	r3, #1
 8009704:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009706:	4b36      	ldr	r3, [pc, #216]	; (80097e0 <HandleRadioRxErrorTimeout+0x118>)
 8009708:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800970c:	2b01      	cmp	r3, #1
 800970e:	d119      	bne.n	8009744 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009710:	f003 ff12 	bl	800d538 <LoRaMacClassBIsPingExpected>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d007      	beq.n	800972a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800971a:	2000      	movs	r0, #0
 800971c:	f003 fec3 	bl	800d4a6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009720:	2000      	movs	r0, #0
 8009722:	f003 fee4 	bl	800d4ee <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8009726:	2301      	movs	r3, #1
 8009728:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800972a:	f003 ff0c 	bl	800d546 <LoRaMacClassBIsMulticastExpected>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d007      	beq.n	8009744 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009734:	2000      	movs	r0, #0
 8009736:	f003 fec0 	bl	800d4ba <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800973a:	2000      	movs	r0, #0
 800973c:	f003 fee0 	bl	800d500 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8009740:	2301      	movs	r3, #1
 8009742:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8009744:	7bfb      	ldrb	r3, [r7, #15]
 8009746:	f083 0301 	eor.w	r3, r3, #1
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2b00      	cmp	r3, #0
 800974e:	d040      	beq.n	80097d2 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009750:	4b25      	ldr	r3, [pc, #148]	; (80097e8 <HandleRadioRxErrorTimeout+0x120>)
 8009752:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8009756:	2b00      	cmp	r3, #0
 8009758:	d122      	bne.n	80097a0 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800975a:	4b23      	ldr	r3, [pc, #140]	; (80097e8 <HandleRadioRxErrorTimeout+0x120>)
 800975c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8009760:	2b00      	cmp	r3, #0
 8009762:	d003      	beq.n	800976c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8009764:	4a20      	ldr	r2, [pc, #128]	; (80097e8 <HandleRadioRxErrorTimeout+0x120>)
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	4618      	mov	r0, r3
 8009770:	f004 fb7a 	bl	800de68 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8009774:	4b1a      	ldr	r3, [pc, #104]	; (80097e0 <HandleRadioRxErrorTimeout+0x118>)
 8009776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009778:	4618      	mov	r0, r3
 800977a:	f00d f87b 	bl	8016874 <UTIL_TIMER_GetElapsedTime>
 800977e:	4602      	mov	r2, r0
 8009780:	4b19      	ldr	r3, [pc, #100]	; (80097e8 <HandleRadioRxErrorTimeout+0x120>)
 8009782:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8009786:	429a      	cmp	r2, r3
 8009788:	d323      	bcc.n	80097d2 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800978a:	4818      	ldr	r0, [pc, #96]	; (80097ec <HandleRadioRxErrorTimeout+0x124>)
 800978c:	f00c ffc6 	bl	801671c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8009790:	4a15      	ldr	r2, [pc, #84]	; (80097e8 <HandleRadioRxErrorTimeout+0x120>)
 8009792:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009796:	f043 0320 	orr.w	r3, r3, #32
 800979a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800979e:	e018      	b.n	80097d2 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 80097a0:	4b11      	ldr	r3, [pc, #68]	; (80097e8 <HandleRadioRxErrorTimeout+0x120>)
 80097a2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80097aa:	4a0f      	ldr	r2, [pc, #60]	; (80097e8 <HandleRadioRxErrorTimeout+0x120>)
 80097ac:	79bb      	ldrb	r3, [r7, #6]
 80097ae:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80097b2:	79bb      	ldrb	r3, [r7, #6]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f004 fb57 	bl	800de68 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80097ba:	4b09      	ldr	r3, [pc, #36]	; (80097e0 <HandleRadioRxErrorTimeout+0x118>)
 80097bc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d006      	beq.n	80097d2 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 80097c4:	4a08      	ldr	r2, [pc, #32]	; (80097e8 <HandleRadioRxErrorTimeout+0x120>)
 80097c6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80097ca:	f043 0320 	orr.w	r3, r3, #32
 80097ce:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 80097d2:	f7ff fa2d 	bl	8008c30 <UpdateRxSlotIdleState>
}
 80097d6:	bf00      	nop
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000820 	.word	0x20000820
 80097e4:	080183e0 	.word	0x080183e0
 80097e8:	20000318 	.word	0x20000318
 80097ec:	200006b0 	.word	0x200006b0

080097f0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80097f4:	2106      	movs	r1, #6
 80097f6:	2005      	movs	r0, #5
 80097f8:	f7ff ff66 	bl	80096c8 <HandleRadioRxErrorTimeout>
}
 80097fc:	bf00      	nop
 80097fe:	bd80      	pop	{r7, pc}

08009800 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009804:	2104      	movs	r1, #4
 8009806:	2003      	movs	r0, #3
 8009808:	f7ff ff5e 	bl	80096c8 <HandleRadioRxErrorTimeout>
}
 800980c:	bf00      	nop
 800980e:	bd80      	pop	{r7, pc}

08009810 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009816:	f3ef 8310 	mrs	r3, PRIMASK
 800981a:	607b      	str	r3, [r7, #4]
  return(result);
 800981c:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800981e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009820:	b672      	cpsid	i
}
 8009822:	bf00      	nop
    events = LoRaMacRadioEvents;
 8009824:	4b1d      	ldr	r3, [pc, #116]	; (800989c <LoRaMacHandleIrqEvents+0x8c>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800982a:	4b1c      	ldr	r3, [pc, #112]	; (800989c <LoRaMacHandleIrqEvents+0x8c>)
 800982c:	2200      	movs	r2, #0
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	f383 8810 	msr	PRIMASK, r3
}
 800983a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d027      	beq.n	8009892 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8009842:	783b      	ldrb	r3, [r7, #0]
 8009844:	f003 0310 	and.w	r3, r3, #16
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800984e:	f7ff fa07 	bl	8008c60 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8009852:	783b      	ldrb	r3, [r7, #0]
 8009854:	f003 0308 	and.w	r3, r3, #8
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800985e:	f7ff fabf 	bl	8008de0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8009862:	783b      	ldrb	r3, [r7, #0]
 8009864:	f003 0304 	and.w	r3, r3, #4
 8009868:	b2db      	uxtb	r3, r3
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800986e:	f7ff feff 	bl	8009670 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8009872:	783b      	ldrb	r3, [r7, #0]
 8009874:	f003 0302 	and.w	r3, r3, #2
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800987e:	f7ff ffb7 	bl	80097f0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8009882:	783b      	ldrb	r3, [r7, #0]
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800988e:	f7ff ffb7 	bl	8009800 <ProcessRadioRxTimeout>
        }
    }
}
 8009892:	bf00      	nop
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20000e30 	.word	0x20000e30

080098a0 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 80098a0:	b480      	push	{r7}
 80098a2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80098a4:	4b08      	ldr	r3, [pc, #32]	; (80098c8 <LoRaMacIsBusy+0x28>)
 80098a6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d106      	bne.n	80098bc <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80098ae:	4b06      	ldr	r3, [pc, #24]	; (80098c8 <LoRaMacIsBusy+0x28>)
 80098b0:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d101      	bne.n	80098bc <LoRaMacIsBusy+0x1c>
    {
        return false;
 80098b8:	2300      	movs	r3, #0
 80098ba:	e000      	b.n	80098be <LoRaMacIsBusy+0x1e>
    }
    return true;
 80098bc:	2301      	movs	r3, #1
}
 80098be:	4618      	mov	r0, r3
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bc80      	pop	{r7}
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	20000318 	.word	0x20000318

080098cc <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	4603      	mov	r3, r0
 80098d4:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 80098d6:	4a04      	ldr	r2, [pc, #16]	; (80098e8 <LoRaMacEnableRequests+0x1c>)
 80098d8:	79fb      	ldrb	r3, [r7, #7]
 80098da:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 80098de:	bf00      	nop
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bc80      	pop	{r7}
 80098e6:	4770      	bx	lr
 80098e8:	20000318 	.word	0x20000318

080098ec <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 80098f2:	4b2c      	ldr	r3, [pc, #176]	; (80099a4 <LoRaMacHandleRequestEvents+0xb8>)
 80098f4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80098f8:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 80098fa:	4b2a      	ldr	r3, [pc, #168]	; (80099a4 <LoRaMacHandleRequestEvents+0xb8>)
 80098fc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009900:	2b00      	cmp	r3, #0
 8009902:	d14a      	bne.n	800999a <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009904:	4b27      	ldr	r3, [pc, #156]	; (80099a4 <LoRaMacHandleRequestEvents+0xb8>)
 8009906:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b00      	cmp	r3, #0
 8009912:	d006      	beq.n	8009922 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8009914:	4a23      	ldr	r2, [pc, #140]	; (80099a4 <LoRaMacHandleRequestEvents+0xb8>)
 8009916:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800991a:	f36f 0300 	bfc	r3, #0, #1
 800991e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009922:	4b20      	ldr	r3, [pc, #128]	; (80099a4 <LoRaMacHandleRequestEvents+0xb8>)
 8009924:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009928:	f003 0304 	and.w	r3, r3, #4
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d006      	beq.n	8009940 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009932:	4a1c      	ldr	r2, [pc, #112]	; (80099a4 <LoRaMacHandleRequestEvents+0xb8>)
 8009934:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009938:	f36f 0382 	bfc	r3, #2, #1
 800993c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009940:	2001      	movs	r0, #1
 8009942:	f7ff ffc3 	bl	80098cc <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8009946:	793b      	ldrb	r3, [r7, #4]
 8009948:	f003 0301 	and.w	r3, r3, #1
 800994c:	b2db      	uxtb	r3, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	d005      	beq.n	800995e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009952:	4b14      	ldr	r3, [pc, #80]	; (80099a4 <LoRaMacHandleRequestEvents+0xb8>)
 8009954:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4813      	ldr	r0, [pc, #76]	; (80099a8 <LoRaMacHandleRequestEvents+0xbc>)
 800995c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800995e:	793b      	ldrb	r3, [r7, #4]
 8009960:	f003 0304 	and.w	r3, r3, #4
 8009964:	b2db      	uxtb	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00e      	beq.n	8009988 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800996a:	4810      	ldr	r0, [pc, #64]	; (80099ac <LoRaMacHandleRequestEvents+0xc0>)
 800996c:	f004 faca 	bl	800df04 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8009970:	f004 fb14 	bl	800df9c <LoRaMacConfirmQueueGetCnt>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d006      	beq.n	8009988 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800997a:	4a0a      	ldr	r2, [pc, #40]	; (80099a4 <LoRaMacHandleRequestEvents+0xb8>)
 800997c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009980:	f043 0304 	orr.w	r3, r3, #4
 8009984:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8009988:	f003 fdfb 	bl	800d582 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800998c:	4a05      	ldr	r2, [pc, #20]	; (80099a4 <LoRaMacHandleRequestEvents+0xb8>)
 800998e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009992:	f36f 1345 	bfc	r3, #5, #1
 8009996:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800999a:	bf00      	nop
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	20000318 	.word	0x20000318
 80099a8:	20000750 	.word	0x20000750
 80099ac:	20000764 	.word	0x20000764

080099b0 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 80099b6:	4b0a      	ldr	r3, [pc, #40]	; (80099e0 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 80099b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10a      	bne.n	80099d6 <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 80099c0:	2300      	movs	r3, #0
 80099c2:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80099c4:	1dfb      	adds	r3, r7, #7
 80099c6:	4618      	mov	r0, r3
 80099c8:	f004 f882 	bl	800dad0 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 80099cc:	79fb      	ldrb	r3, [r7, #7]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 80099d2:	f000 fc81 	bl	800a2d8 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 80099d6:	bf00      	nop
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	20000318 	.word	0x20000318

080099e4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b088      	sub	sp, #32
 80099e8:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80099ea:	4b25      	ldr	r3, [pc, #148]	; (8009a80 <LoRaMacHandleIndicationEvents+0x9c>)
 80099ec:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80099f0:	f003 0308 	and.w	r3, r3, #8
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00d      	beq.n	8009a16 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80099fa:	4a21      	ldr	r2, [pc, #132]	; (8009a80 <LoRaMacHandleIndicationEvents+0x9c>)
 80099fc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009a00:	f36f 03c3 	bfc	r3, #3, #1
 8009a04:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8009a08:	4b1d      	ldr	r3, [pc, #116]	; (8009a80 <LoRaMacHandleIndicationEvents+0x9c>)
 8009a0a:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	491c      	ldr	r1, [pc, #112]	; (8009a84 <LoRaMacHandleIndicationEvents+0xa0>)
 8009a12:	481d      	ldr	r0, [pc, #116]	; (8009a88 <LoRaMacHandleIndicationEvents+0xa4>)
 8009a14:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8009a16:	4b1a      	ldr	r3, [pc, #104]	; (8009a80 <LoRaMacHandleIndicationEvents+0x9c>)
 8009a18:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009a1c:	f003 0310 	and.w	r3, r3, #16
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d012      	beq.n	8009a4c <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8009a26:	2307      	movs	r3, #7
 8009a28:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8009a2e:	4b14      	ldr	r3, [pc, #80]	; (8009a80 <LoRaMacHandleIndicationEvents+0x9c>)
 8009a30:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	1d3a      	adds	r2, r7, #4
 8009a38:	4912      	ldr	r1, [pc, #72]	; (8009a84 <LoRaMacHandleIndicationEvents+0xa0>)
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8009a3e:	4a10      	ldr	r2, [pc, #64]	; (8009a80 <LoRaMacHandleIndicationEvents+0x9c>)
 8009a40:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009a44:	f36f 1304 	bfc	r3, #4, #1
 8009a48:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <LoRaMacHandleIndicationEvents+0x9c>)
 8009a4e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009a52:	f003 0302 	and.w	r3, r3, #2
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00d      	beq.n	8009a78 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8009a5c:	4a08      	ldr	r2, [pc, #32]	; (8009a80 <LoRaMacHandleIndicationEvents+0x9c>)
 8009a5e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009a62:	f36f 0341 	bfc	r3, #1, #1
 8009a66:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8009a6a:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <LoRaMacHandleIndicationEvents+0x9c>)
 8009a6c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	4904      	ldr	r1, [pc, #16]	; (8009a84 <LoRaMacHandleIndicationEvents+0xa0>)
 8009a74:	4805      	ldr	r0, [pc, #20]	; (8009a8c <LoRaMacHandleIndicationEvents+0xa8>)
 8009a76:	4798      	blx	r3
    }
}
 8009a78:	bf00      	nop
 8009a7a:	3720      	adds	r7, #32
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	20000318 	.word	0x20000318
 8009a84:	20000794 	.word	0x20000794
 8009a88:	20000778 	.word	0x20000778
 8009a8c:	20000734 	.word	0x20000734

08009a90 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009a96:	4b32      	ldr	r3, [pc, #200]	; (8009b60 <LoRaMacHandleMcpsRequest+0xd0>)
 8009a98:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d058      	beq.n	8009b58 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8009aae:	4b2c      	ldr	r3, [pc, #176]	; (8009b60 <LoRaMacHandleMcpsRequest+0xd0>)
 8009ab0:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d004      	beq.n	8009ac2 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8009ab8:	4b29      	ldr	r3, [pc, #164]	; (8009b60 <LoRaMacHandleMcpsRequest+0xd0>)
 8009aba:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8009abe:	2b03      	cmp	r3, #3
 8009ac0:	d104      	bne.n	8009acc <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8009ac2:	f002 f89f 	bl	800bc04 <CheckRetransUnconfirmedUplink>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	71fb      	strb	r3, [r7, #7]
 8009aca:	e020      	b.n	8009b0e <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8009acc:	4b24      	ldr	r3, [pc, #144]	; (8009b60 <LoRaMacHandleMcpsRequest+0xd0>)
 8009ace:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d11b      	bne.n	8009b0e <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 8009ad6:	4b22      	ldr	r3, [pc, #136]	; (8009b60 <LoRaMacHandleMcpsRequest+0xd0>)
 8009ad8:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d014      	beq.n	8009b0a <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8009ae0:	f002 f8bc 	bl	800bc5c <CheckRetransConfirmedUplink>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009ae8:	4b1e      	ldr	r3, [pc, #120]	; (8009b64 <LoRaMacHandleMcpsRequest+0xd4>)
 8009aea:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10d      	bne.n	8009b0e <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 8009af2:	79fb      	ldrb	r3, [r7, #7]
 8009af4:	f083 0301 	eor.w	r3, r3, #1
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 8009afe:	f002 f929 	bl	800bd54 <AckTimeoutRetriesProcess>
 8009b02:	e004      	b.n	8009b0e <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8009b04:	f002 f964 	bl	800bdd0 <AckTimeoutRetriesFinalize>
 8009b08:	e001      	b.n	8009b0e <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 8009b0e:	79fb      	ldrb	r3, [r7, #7]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00d      	beq.n	8009b30 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8009b14:	4814      	ldr	r0, [pc, #80]	; (8009b68 <LoRaMacHandleMcpsRequest+0xd8>)
 8009b16:	f00c fe01 	bl	801671c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009b1a:	4b11      	ldr	r3, [pc, #68]	; (8009b60 <LoRaMacHandleMcpsRequest+0xd0>)
 8009b1c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009b20:	f023 0320 	bic.w	r3, r3, #32
 8009b24:	4a0e      	ldr	r2, [pc, #56]	; (8009b60 <LoRaMacHandleMcpsRequest+0xd0>)
 8009b26:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8009b2a:	f002 f8b9 	bl	800bca0 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8009b2e:	e013      	b.n	8009b58 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8009b30:	79bb      	ldrb	r3, [r7, #6]
 8009b32:	f083 0301 	eor.w	r3, r3, #1
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00d      	beq.n	8009b58 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009b3c:	4a08      	ldr	r2, [pc, #32]	; (8009b60 <LoRaMacHandleMcpsRequest+0xd0>)
 8009b3e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009b42:	f36f 1345 	bfc	r3, #5, #1
 8009b46:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 8009b4a:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <LoRaMacHandleMcpsRequest+0xd0>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 8009b52:	2000      	movs	r0, #0
 8009b54:	f000 f97e 	bl	8009e54 <OnTxDelayedTimerEvent>
}
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	20000318 	.word	0x20000318
 8009b64:	20000820 	.word	0x20000820
 8009b68:	20000680 	.word	0x20000680

08009b6c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009b70:	4b1b      	ldr	r3, [pc, #108]	; (8009be0 <LoRaMacHandleMlmeRequest+0x74>)
 8009b72:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009b76:	f003 0304 	and.w	r3, r3, #4
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d02c      	beq.n	8009bda <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009b80:	2001      	movs	r0, #1
 8009b82:	f004 f9a5 	bl	800ded0 <LoRaMacConfirmQueueIsCmdActive>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d012      	beq.n	8009bb2 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009b8c:	2001      	movs	r0, #1
 8009b8e:	f004 f941 	bl	800de14 <LoRaMacConfirmQueueGetStatus>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d103      	bne.n	8009ba0 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8009b98:	4b11      	ldr	r3, [pc, #68]	; (8009be0 <LoRaMacHandleMlmeRequest+0x74>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009ba0:	4b0f      	ldr	r3, [pc, #60]	; (8009be0 <LoRaMacHandleMlmeRequest+0x74>)
 8009ba2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009ba6:	f023 0302 	bic.w	r3, r3, #2
 8009baa:	4a0d      	ldr	r2, [pc, #52]	; (8009be0 <LoRaMacHandleMlmeRequest+0x74>)
 8009bac:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 8009bb0:	e013      	b.n	8009bda <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8009bb2:	2005      	movs	r0, #5
 8009bb4:	f004 f98c 	bl	800ded0 <LoRaMacConfirmQueueIsCmdActive>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d105      	bne.n	8009bca <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8009bbe:	2006      	movs	r0, #6
 8009bc0:	f004 f986 	bl	800ded0 <LoRaMacConfirmQueueIsCmdActive>
 8009bc4:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d007      	beq.n	8009bda <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009bca:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <LoRaMacHandleMlmeRequest+0x74>)
 8009bcc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009bd0:	f023 0302 	bic.w	r3, r3, #2
 8009bd4:	4a02      	ldr	r2, [pc, #8]	; (8009be0 <LoRaMacHandleMlmeRequest+0x74>)
 8009bd6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8009bda:	bf00      	nop
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	20000318 	.word	0x20000318

08009be4 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009be8:	200c      	movs	r0, #12
 8009bea:	f004 f971 	bl	800ded0 <LoRaMacConfirmQueueIsCmdActive>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d019      	beq.n	8009c28 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8009bf4:	4b0e      	ldr	r3, [pc, #56]	; (8009c30 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8009bf6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d111      	bne.n	8009c28 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009c04:	4b0a      	ldr	r3, [pc, #40]	; (8009c30 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8009c06:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009c0a:	f003 0304 	and.w	r3, r3, #4
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d009      	beq.n	8009c28 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009c14:	4b06      	ldr	r3, [pc, #24]	; (8009c30 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8009c16:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009c1a:	f023 0302 	bic.w	r3, r3, #2
 8009c1e:	4a04      	ldr	r2, [pc, #16]	; (8009c30 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8009c20:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e000      	b.n	8009c2a <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	20000318 	.word	0x20000318

08009c34 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 8009c34:	b480      	push	{r7}
 8009c36:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009c38:	4b0d      	ldr	r3, [pc, #52]	; (8009c70 <LoRaMacCheckForRxAbort+0x3c>)
 8009c3a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00f      	beq.n	8009c66 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8009c46:	4b0a      	ldr	r3, [pc, #40]	; (8009c70 <LoRaMacCheckForRxAbort+0x3c>)
 8009c48:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c50:	4a07      	ldr	r2, [pc, #28]	; (8009c70 <LoRaMacCheckForRxAbort+0x3c>)
 8009c52:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009c56:	4b06      	ldr	r3, [pc, #24]	; (8009c70 <LoRaMacCheckForRxAbort+0x3c>)
 8009c58:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009c5c:	f023 0302 	bic.w	r3, r3, #2
 8009c60:	4a03      	ldr	r2, [pc, #12]	; (8009c70 <LoRaMacCheckForRxAbort+0x3c>)
 8009c62:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8009c66:	bf00      	nop
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bc80      	pop	{r7}
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	20000318 	.word	0x20000318

08009c74 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8009c80:	2300      	movs	r3, #0
 8009c82:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8009c84:	4b50      	ldr	r3, [pc, #320]	; (8009dc8 <LoRaMacHandleNvm+0x154>)
 8009c86:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f040 8098 	bne.w	8009dc0 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2124      	movs	r1, #36	; 0x24
 8009c94:	4618      	mov	r0, r3
 8009c96:	f009 fa7b 	bl	8013190 <Crc32>
 8009c9a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d006      	beq.n	8009cb4 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8009cac:	89fb      	ldrh	r3, [r7, #14]
 8009cae:	f043 0301 	orr.w	r3, r3, #1
 8009cb2:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	3328      	adds	r3, #40	; 0x28
 8009cb8:	2114      	movs	r1, #20
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f009 fa68 	bl	8013190 <Crc32>
 8009cc0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d006      	beq.n	8009cda <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8009cd2:	89fb      	ldrh	r3, [r7, #14]
 8009cd4:	f043 0302 	orr.w	r3, r3, #2
 8009cd8:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	3340      	adds	r3, #64	; 0x40
 8009cde:	21d4      	movs	r1, #212	; 0xd4
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f009 fa55 	bl	8013190 <Crc32>
 8009ce6:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d007      	beq.n	8009d04 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8009cfc:	89fb      	ldrh	r3, [r7, #14]
 8009cfe:	f043 0304 	orr.w	r3, r3, #4
 8009d02:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8009d0a:	21bc      	movs	r1, #188	; 0xbc
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f009 fa3f 	bl	8013190 <Crc32>
 8009d12:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d007      	beq.n	8009d30 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8009d28:	89fb      	ldrh	r3, [r7, #14]
 8009d2a:	f043 0308 	orr.w	r3, r3, #8
 8009d2e:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8009d36:	21a0      	movs	r1, #160	; 0xa0
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f009 fa29 	bl	8013190 <Crc32>
 8009d3e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d007      	beq.n	8009d5c <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8009d54:	89fb      	ldrh	r3, [r7, #14]
 8009d56:	f043 0310 	orr.w	r3, r3, #16
 8009d5a:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009d62:	f44f 715e 	mov.w	r1, #888	; 0x378
 8009d66:	4618      	mov	r0, r3
 8009d68:	f009 fa12 	bl	8013190 <Crc32>
 8009d6c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d007      	beq.n	8009d8a <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8009d82:	89fb      	ldrh	r3, [r7, #14]
 8009d84:	f043 0320 	orr.w	r3, r3, #32
 8009d88:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 8009d90:	2114      	movs	r1, #20
 8009d92:	4618      	mov	r0, r3
 8009d94:	f009 f9fc 	bl	8013190 <Crc32>
 8009d98:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d007      	beq.n	8009db6 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8009dae:	89fb      	ldrh	r3, [r7, #14]
 8009db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009db4:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8009db6:	89fb      	ldrh	r3, [r7, #14]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f001 ffad 	bl	800bd18 <CallNvmDataChangeCallback>
 8009dbe:	e000      	b.n	8009dc2 <LoRaMacHandleNvm+0x14e>
        return;
 8009dc0:	bf00      	nop
}
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	20000318 	.word	0x20000318

08009dcc <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8009dd6:	f7ff fd1b 	bl	8009810 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8009dda:	f003 fc36 	bl	800d64a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8009dde:	4b1b      	ldr	r3, [pc, #108]	; (8009e4c <LoRaMacProcess+0x80>)
 8009de0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009de4:	f003 0320 	and.w	r3, r3, #32
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d021      	beq.n	8009e32 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8009dee:	2000      	movs	r0, #0
 8009df0:	f7ff fd6c 	bl	80098cc <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8009df4:	f7ff ff1e 	bl	8009c34 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8009df8:	f002 f81e 	bl	800be38 <IsRequestPending>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d006      	beq.n	8009e10 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8009e02:	f7ff feef 	bl	8009be4 <LoRaMacCheckForBeaconAcquisition>
 8009e06:	4603      	mov	r3, r0
 8009e08:	461a      	mov	r2, r3
 8009e0a:	79fb      	ldrb	r3, [r7, #7]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8009e10:	79fb      	ldrb	r3, [r7, #7]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d103      	bne.n	8009e1e <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8009e16:	f7ff fea9 	bl	8009b6c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8009e1a:	f7ff fe39 	bl	8009a90 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8009e1e:	f7ff fd65 	bl	80098ec <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8009e22:	f7ff fdc5 	bl	80099b0 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 8009e26:	480a      	ldr	r0, [pc, #40]	; (8009e50 <LoRaMacProcess+0x84>)
 8009e28:	f7ff ff24 	bl	8009c74 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009e2c:	2001      	movs	r0, #1
 8009e2e:	f7ff fd4d 	bl	80098cc <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 8009e32:	f7ff fdd7 	bl	80099e4 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8009e36:	4b05      	ldr	r3, [pc, #20]	; (8009e4c <LoRaMacProcess+0x80>)
 8009e38:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d101      	bne.n	8009e44 <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 8009e40:	f001 fb7c 	bl	800b53c <OpenContinuousRxCWindow>
    }
}
 8009e44:	bf00      	nop
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	20000318 	.word	0x20000318
 8009e50:	20000820 	.word	0x20000820

08009e54 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8009e5c:	4817      	ldr	r0, [pc, #92]	; (8009ebc <OnTxDelayedTimerEvent+0x68>)
 8009e5e:	f00c fc5d 	bl	801671c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009e62:	4b17      	ldr	r3, [pc, #92]	; (8009ec0 <OnTxDelayedTimerEvent+0x6c>)
 8009e64:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009e68:	f023 0320 	bic.w	r3, r3, #32
 8009e6c:	4a14      	ldr	r2, [pc, #80]	; (8009ec0 <OnTxDelayedTimerEvent+0x6c>)
 8009e6e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8009e72:	2001      	movs	r0, #1
 8009e74:	f001 f8fc 	bl	800b070 <ScheduleTx>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d018      	beq.n	8009eb0 <OnTxDelayedTimerEvent+0x5c>
 8009e7e:	2b0b      	cmp	r3, #11
 8009e80:	d016      	beq.n	8009eb0 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009e82:	4b10      	ldr	r3, [pc, #64]	; (8009ec4 <OnTxDelayedTimerEvent+0x70>)
 8009e84:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	4b0d      	ldr	r3, [pc, #52]	; (8009ec0 <OnTxDelayedTimerEvent+0x6c>)
 8009e8c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009e90:	4b0b      	ldr	r3, [pc, #44]	; (8009ec0 <OnTxDelayedTimerEvent+0x6c>)
 8009e92:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8009e96:	4b0a      	ldr	r3, [pc, #40]	; (8009ec0 <OnTxDelayedTimerEvent+0x6c>)
 8009e98:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009e9c:	4b08      	ldr	r3, [pc, #32]	; (8009ec0 <OnTxDelayedTimerEvent+0x6c>)
 8009e9e:	2209      	movs	r2, #9
 8009ea0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8009ea4:	2009      	movs	r0, #9
 8009ea6:	f003 ffdf 	bl	800de68 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8009eaa:	f001 fef9 	bl	800bca0 <StopRetransmission>
            break;
 8009eae:	e000      	b.n	8009eb2 <OnTxDelayedTimerEvent+0x5e>
            break;
 8009eb0:	bf00      	nop
        }
    }
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20000680 	.word	0x20000680
 8009ec0:	20000318 	.word	0x20000318
 8009ec4:	20000820 	.word	0x20000820

08009ec8 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8009ed0:	4b14      	ldr	r3, [pc, #80]	; (8009f24 <OnRxWindow1TimerEvent+0x5c>)
 8009ed2:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8009ed6:	4b13      	ldr	r3, [pc, #76]	; (8009f24 <OnRxWindow1TimerEvent+0x5c>)
 8009ed8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8009edc:	4b12      	ldr	r3, [pc, #72]	; (8009f28 <OnRxWindow1TimerEvent+0x60>)
 8009ede:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009ee2:	b25a      	sxtb	r2, r3
 8009ee4:	4b0f      	ldr	r3, [pc, #60]	; (8009f24 <OnRxWindow1TimerEvent+0x5c>)
 8009ee6:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009eea:	4b0f      	ldr	r3, [pc, #60]	; (8009f28 <OnRxWindow1TimerEvent+0x60>)
 8009eec:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009ef0:	4b0c      	ldr	r3, [pc, #48]	; (8009f24 <OnRxWindow1TimerEvent+0x5c>)
 8009ef2:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009ef6:	4b0c      	ldr	r3, [pc, #48]	; (8009f28 <OnRxWindow1TimerEvent+0x60>)
 8009ef8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8009efc:	4b09      	ldr	r3, [pc, #36]	; (8009f24 <OnRxWindow1TimerEvent+0x5c>)
 8009efe:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8009f02:	4b08      	ldr	r3, [pc, #32]	; (8009f24 <OnRxWindow1TimerEvent+0x5c>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8009f0a:	4b06      	ldr	r3, [pc, #24]	; (8009f24 <OnRxWindow1TimerEvent+0x5c>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8009f12:	4906      	ldr	r1, [pc, #24]	; (8009f2c <OnRxWindow1TimerEvent+0x64>)
 8009f14:	4806      	ldr	r0, [pc, #24]	; (8009f30 <OnRxWindow1TimerEvent+0x68>)
 8009f16:	f001 fae3 	bl	800b4e0 <RxWindowSetup>
}
 8009f1a:	bf00      	nop
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20000318 	.word	0x20000318
 8009f28:	20000820 	.word	0x20000820
 8009f2c:	200006d0 	.word	0x200006d0
 8009f30:	20000698 	.word	0x20000698

08009f34 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009f3c:	4b16      	ldr	r3, [pc, #88]	; (8009f98 <OnRxWindow2TimerEvent+0x64>)
 8009f3e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d023      	beq.n	8009f8e <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009f46:	4b14      	ldr	r3, [pc, #80]	; (8009f98 <OnRxWindow2TimerEvent+0x64>)
 8009f48:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8009f4c:	4b12      	ldr	r3, [pc, #72]	; (8009f98 <OnRxWindow2TimerEvent+0x64>)
 8009f4e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009f52:	4b12      	ldr	r3, [pc, #72]	; (8009f9c <OnRxWindow2TimerEvent+0x68>)
 8009f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f56:	4a10      	ldr	r2, [pc, #64]	; (8009f98 <OnRxWindow2TimerEvent+0x64>)
 8009f58:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009f5c:	4b0f      	ldr	r3, [pc, #60]	; (8009f9c <OnRxWindow2TimerEvent+0x68>)
 8009f5e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009f62:	4b0d      	ldr	r3, [pc, #52]	; (8009f98 <OnRxWindow2TimerEvent+0x64>)
 8009f64:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009f68:	4b0c      	ldr	r3, [pc, #48]	; (8009f9c <OnRxWindow2TimerEvent+0x68>)
 8009f6a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8009f6e:	4b0a      	ldr	r3, [pc, #40]	; (8009f98 <OnRxWindow2TimerEvent+0x64>)
 8009f70:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009f74:	4b08      	ldr	r3, [pc, #32]	; (8009f98 <OnRxWindow2TimerEvent+0x64>)
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009f7c:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <OnRxWindow2TimerEvent+0x64>)
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009f84:	4906      	ldr	r1, [pc, #24]	; (8009fa0 <OnRxWindow2TimerEvent+0x6c>)
 8009f86:	4807      	ldr	r0, [pc, #28]	; (8009fa4 <OnRxWindow2TimerEvent+0x70>)
 8009f88:	f001 faaa 	bl	800b4e0 <RxWindowSetup>
 8009f8c:	e000      	b.n	8009f90 <OnRxWindow2TimerEvent+0x5c>
        return;
 8009f8e:	bf00      	nop
}
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	20000318 	.word	0x20000318
 8009f9c:	20000820 	.word	0x20000820
 8009fa0:	200006e4 	.word	0x200006e4
 8009fa4:	200006b0 	.word	0x200006b0

08009fa8 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8009fb0:	4815      	ldr	r0, [pc, #84]	; (800a008 <OnAckTimeoutTimerEvent+0x60>)
 8009fb2:	f00c fbb3 	bl	801671c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8009fb6:	4b15      	ldr	r3, [pc, #84]	; (800a00c <OnAckTimeoutTimerEvent+0x64>)
 8009fb8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d003      	beq.n	8009fc8 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8009fc0:	4b12      	ldr	r3, [pc, #72]	; (800a00c <OnAckTimeoutTimerEvent+0x64>)
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009fc8:	4b11      	ldr	r3, [pc, #68]	; (800a010 <OnAckTimeoutTimerEvent+0x68>)
 8009fca:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d106      	bne.n	8009fe0 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8009fd2:	4a0e      	ldr	r2, [pc, #56]	; (800a00c <OnAckTimeoutTimerEvent+0x64>)
 8009fd4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8009fd8:	f043 0320 	orr.w	r3, r3, #32
 8009fdc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009fe0:	4b0a      	ldr	r3, [pc, #40]	; (800a00c <OnAckTimeoutTimerEvent+0x64>)
 8009fe2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00a      	beq.n	800a000 <OnAckTimeoutTimerEvent+0x58>
 8009fea:	4b08      	ldr	r3, [pc, #32]	; (800a00c <OnAckTimeoutTimerEvent+0x64>)
 8009fec:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d004      	beq.n	800a000 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009ff6:	4b05      	ldr	r3, [pc, #20]	; (800a00c <OnAckTimeoutTimerEvent+0x64>)
 8009ff8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	4798      	blx	r3
    }
}
 800a000:	bf00      	nop
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	20000710 	.word	0x20000710
 800a00c:	20000318 	.word	0x20000318
 800a010:	20000820 	.word	0x20000820

0800a014 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60ba      	str	r2, [r7, #8]
 800a01c:	607b      	str	r3, [r7, #4]
 800a01e:	4603      	mov	r3, r0
 800a020:	73fb      	strb	r3, [r7, #15]
 800a022:	460b      	mov	r3, r1
 800a024:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d005      	beq.n	800a038 <GetFCntDown+0x24>
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d002      	beq.n	800a038 <GetFCntDown+0x24>
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d101      	bne.n	800a03c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a038:	230a      	movs	r3, #10
 800a03a:	e029      	b.n	800a090 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800a03c:	7bfb      	ldrb	r3, [r7, #15]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d016      	beq.n	800a070 <GetFCntDown+0x5c>
 800a042:	2b01      	cmp	r3, #1
 800a044:	d118      	bne.n	800a078 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800a046:	79bb      	ldrb	r3, [r7, #6]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d10d      	bne.n	800a068 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800a04c:	7bbb      	ldrb	r3, [r7, #14]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d002      	beq.n	800a058 <GetFCntDown+0x44>
 800a052:	7bbb      	ldrb	r3, [r7, #14]
 800a054:	2b03      	cmp	r3, #3
 800a056:	d103      	bne.n	800a060 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	2202      	movs	r2, #2
 800a05c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800a05e:	e00d      	b.n	800a07c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	2201      	movs	r2, #1
 800a064:	701a      	strb	r2, [r3, #0]
            break;
 800a066:	e009      	b.n	800a07c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	2203      	movs	r2, #3
 800a06c:	701a      	strb	r2, [r3, #0]
            break;
 800a06e:	e005      	b.n	800a07c <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	2204      	movs	r2, #4
 800a074:	701a      	strb	r2, [r3, #0]
            break;
 800a076:	e001      	b.n	800a07c <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800a078:	2305      	movs	r3, #5
 800a07a:	e009      	b.n	800a090 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	7818      	ldrb	r0, [r3, #0]
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	89db      	ldrh	r3, [r3, #14]
 800a084:	461a      	mov	r2, r3
 800a086:	8b39      	ldrh	r1, [r7, #24]
 800a088:	6a3b      	ldr	r3, [r7, #32]
 800a08a:	f004 faf1 	bl	800e670 <LoRaMacCryptoGetFCntDown>
 800a08e:	4603      	mov	r3, r0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800a098:	b5b0      	push	{r4, r5, r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	4603      	mov	r3, r0
 800a0a0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800a0a6:	4b61      	ldr	r3, [pc, #388]	; (800a22c <SwitchClass+0x194>)
 800a0a8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	f000 80a5 	beq.w	800a1fc <SwitchClass+0x164>
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	f300 80b4 	bgt.w	800a220 <SwitchClass+0x188>
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d003      	beq.n	800a0c4 <SwitchClass+0x2c>
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	f000 808f 	beq.w	800a1e0 <SwitchClass+0x148>
 800a0c2:	e0ad      	b.n	800a220 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800a0c4:	79fb      	ldrb	r3, [r7, #7]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d107      	bne.n	800a0da <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a0ca:	4b58      	ldr	r3, [pc, #352]	; (800a22c <SwitchClass+0x194>)
 800a0cc:	4a57      	ldr	r2, [pc, #348]	; (800a22c <SwitchClass+0x194>)
 800a0ce:	336c      	adds	r3, #108	; 0x6c
 800a0d0:	3264      	adds	r2, #100	; 0x64
 800a0d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a0d6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800a0da:	79fb      	ldrb	r3, [r7, #7]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d10c      	bne.n	800a0fa <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800a0e0:	79fb      	ldrb	r3, [r7, #7]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f003 fa53 	bl	800d58e <LoRaMacClassBSwitchClass>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d103      	bne.n	800a0fa <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800a0f2:	4a4e      	ldr	r2, [pc, #312]	; (800a22c <SwitchClass+0x194>)
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800a0fa:	79fb      	ldrb	r3, [r7, #7]
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	f040 808a 	bne.w	800a216 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a102:	4a4a      	ldr	r2, [pc, #296]	; (800a22c <SwitchClass+0x194>)
 800a104:	79fb      	ldrb	r3, [r7, #7]
 800a106:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800a10a:	4a49      	ldr	r2, [pc, #292]	; (800a230 <SwitchClass+0x198>)
 800a10c:	4b48      	ldr	r3, [pc, #288]	; (800a230 <SwitchClass+0x198>)
 800a10e:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800a112:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800a116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a11a:	682b      	ldr	r3, [r5, #0]
 800a11c:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a11e:	4b44      	ldr	r3, [pc, #272]	; (800a230 <SwitchClass+0x198>)
 800a120:	2202      	movs	r2, #2
 800a122:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a126:	2300      	movs	r3, #0
 800a128:	73bb      	strb	r3, [r7, #14]
 800a12a:	e049      	b.n	800a1c0 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800a12c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a130:	4a3e      	ldr	r2, [pc, #248]	; (800a22c <SwitchClass+0x194>)
 800a132:	212c      	movs	r1, #44	; 0x2c
 800a134:	fb01 f303 	mul.w	r3, r1, r3
 800a138:	4413      	add	r3, r2
 800a13a:	33d2      	adds	r3, #210	; 0xd2
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d038      	beq.n	800a1b4 <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800a142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a146:	4a39      	ldr	r2, [pc, #228]	; (800a22c <SwitchClass+0x194>)
 800a148:	212c      	movs	r1, #44	; 0x2c
 800a14a:	fb01 f303 	mul.w	r3, r1, r3
 800a14e:	4413      	add	r3, r2
 800a150:	33e8      	adds	r3, #232	; 0xe8
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a35      	ldr	r2, [pc, #212]	; (800a22c <SwitchClass+0x194>)
 800a156:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800a158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a15c:	4a33      	ldr	r2, [pc, #204]	; (800a22c <SwitchClass+0x194>)
 800a15e:	212c      	movs	r1, #44	; 0x2c
 800a160:	fb01 f303 	mul.w	r3, r1, r3
 800a164:	4413      	add	r3, r2
 800a166:	33ec      	adds	r3, #236	; 0xec
 800a168:	f993 3000 	ldrsb.w	r3, [r3]
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	4b2f      	ldr	r3, [pc, #188]	; (800a22c <SwitchClass+0x194>)
 800a170:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800a174:	4b2e      	ldr	r3, [pc, #184]	; (800a230 <SwitchClass+0x198>)
 800a176:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800a17a:	4b2d      	ldr	r3, [pc, #180]	; (800a230 <SwitchClass+0x198>)
 800a17c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800a180:	4b2a      	ldr	r3, [pc, #168]	; (800a22c <SwitchClass+0x194>)
 800a182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a184:	4a2a      	ldr	r2, [pc, #168]	; (800a230 <SwitchClass+0x198>)
 800a186:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a18a:	4b28      	ldr	r3, [pc, #160]	; (800a22c <SwitchClass+0x194>)
 800a18c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a190:	4b27      	ldr	r3, [pc, #156]	; (800a230 <SwitchClass+0x198>)
 800a192:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800a196:	4b25      	ldr	r3, [pc, #148]	; (800a22c <SwitchClass+0x194>)
 800a198:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800a19c:	4b24      	ldr	r3, [pc, #144]	; (800a230 <SwitchClass+0x198>)
 800a19e:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a1a2:	4b23      	ldr	r3, [pc, #140]	; (800a230 <SwitchClass+0x198>)
 800a1a4:	2203      	movs	r2, #3
 800a1a6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800a1aa:	4b21      	ldr	r3, [pc, #132]	; (800a230 <SwitchClass+0x198>)
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800a1b2:	e009      	b.n	800a1c8 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a1b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	73bb      	strb	r3, [r7, #14]
 800a1c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	ddb1      	ble.n	800a12c <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800a1c8:	4b19      	ldr	r3, [pc, #100]	; (800a230 <SwitchClass+0x198>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800a1d0:	4b18      	ldr	r3, [pc, #96]	; (800a234 <SwitchClass+0x19c>)
 800a1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d4:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800a1d6:	f001 f9b1 	bl	800b53c <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800a1de:	e01a      	b.n	800a216 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800a1e0:	79fb      	ldrb	r3, [r7, #7]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f003 f9d3 	bl	800d58e <LoRaMacClassBSwitchClass>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800a1ec:	7bfb      	ldrb	r3, [r7, #15]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d113      	bne.n	800a21a <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a1f2:	4a0e      	ldr	r2, [pc, #56]	; (800a22c <SwitchClass+0x194>)
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800a1fa:	e00e      	b.n	800a21a <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800a1fc:	79fb      	ldrb	r3, [r7, #7]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10d      	bne.n	800a21e <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a202:	4a0a      	ldr	r2, [pc, #40]	; (800a22c <SwitchClass+0x194>)
 800a204:	79fb      	ldrb	r3, [r7, #7]
 800a206:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800a20a:	4b0a      	ldr	r3, [pc, #40]	; (800a234 <SwitchClass+0x19c>)
 800a20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800a214:	e003      	b.n	800a21e <SwitchClass+0x186>
            break;
 800a216:	bf00      	nop
 800a218:	e002      	b.n	800a220 <SwitchClass+0x188>
            break;
 800a21a:	bf00      	nop
 800a21c:	e000      	b.n	800a220 <SwitchClass+0x188>
            break;
 800a21e:	bf00      	nop
        }
    }

    return status;
 800a220:	7bfb      	ldrb	r3, [r7, #15]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bdb0      	pop	{r4, r5, r7, pc}
 800a22a:	bf00      	nop
 800a22c:	20000820 	.word	0x20000820
 800a230:	20000318 	.word	0x20000318
 800a234:	080183e0 	.word	0x080183e0

0800a238 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a242:	4b10      	ldr	r3, [pc, #64]	; (800a284 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800a244:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a248:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800a24a:	79fb      	ldrb	r3, [r7, #7]
 800a24c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a24e:	230d      	movs	r3, #13
 800a250:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800a252:	4b0c      	ldr	r3, [pc, #48]	; (800a284 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800a254:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a25c:	230e      	movs	r3, #14
 800a25e:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a260:	4b08      	ldr	r3, [pc, #32]	; (800a284 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800a262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a266:	f107 0210 	add.w	r2, r7, #16
 800a26a:	4611      	mov	r1, r2
 800a26c:	4618      	mov	r0, r3
 800a26e:	f005 f886 	bl	800f37e <RegionGetPhyParam>
 800a272:	4603      	mov	r3, r0
 800a274:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	b2db      	uxtb	r3, r3
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	20000820 	.word	0x20000820

0800a288 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	4603      	mov	r3, r0
 800a290:	71fb      	strb	r3, [r7, #7]
 800a292:	460b      	mov	r3, r1
 800a294:	71bb      	strb	r3, [r7, #6]
 800a296:	4613      	mov	r3, r2
 800a298:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a2a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7ff ffc6 	bl	800a238 <GetMaxAppPayloadWithoutFOptsLength>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800a2b0:	79fb      	ldrb	r3, [r7, #7]
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	797b      	ldrb	r3, [r7, #5]
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	4413      	add	r3, r2
 800a2ba:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800a2bc:	89ba      	ldrh	r2, [r7, #12]
 800a2be:	89fb      	ldrh	r3, [r7, #14]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d804      	bhi.n	800a2ce <ValidatePayloadLength+0x46>
 800a2c4:	89bb      	ldrh	r3, [r7, #12]
 800a2c6:	2bff      	cmp	r3, #255	; 0xff
 800a2c8:	d801      	bhi.n	800a2ce <ValidatePayloadLength+0x46>
    {
        return true;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e000      	b.n	800a2d0 <ValidatePayloadLength+0x48>
    }
    return false;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800a2d8:	b480      	push	{r7}
 800a2da:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800a2dc:	4a05      	ldr	r2, [pc, #20]	; (800a2f4 <SetMlmeScheduleUplinkIndication+0x1c>)
 800a2de:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800a2e2:	f043 0310 	orr.w	r3, r3, #16
 800a2e6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800a2ea:	bf00      	nop
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bc80      	pop	{r7}
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	20000318 	.word	0x20000318

0800a2f8 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800a2f8:	b590      	push	{r4, r7, lr}
 800a2fa:	b0a5      	sub	sp, #148	; 0x94
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	4608      	mov	r0, r1
 800a302:	4611      	mov	r1, r2
 800a304:	461a      	mov	r2, r3
 800a306:	4603      	mov	r3, r0
 800a308:	70fb      	strb	r3, [r7, #3]
 800a30a:	460b      	mov	r3, r1
 800a30c:	70bb      	strb	r3, [r7, #2]
 800a30e:	4613      	mov	r3, r2
 800a310:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800a312:	2300      	movs	r3, #0
 800a314:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800a318:	2300      	movs	r3, #0
 800a31a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a31e:	2300      	movs	r3, #0
 800a320:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800a324:	f000 bc73 	b.w	800ac0e <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800a328:	78fb      	ldrb	r3, [r7, #3]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	4413      	add	r3, r2
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	4618      	mov	r0, r3
 800a332:	f003 fbf5 	bl	800db20 <LoRaMacCommandsGetCmdSize>
 800a336:	4603      	mov	r3, r0
 800a338:	461a      	mov	r2, r3
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	441a      	add	r2, r3
 800a33e:	78bb      	ldrb	r3, [r7, #2]
 800a340:	429a      	cmp	r2, r3
 800a342:	f300 846a 	bgt.w	800ac1a <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800a346:	78fb      	ldrb	r3, [r7, #3]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	70fa      	strb	r2, [r7, #3]
 800a34c:	461a      	mov	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4413      	add	r3, r2
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	3b02      	subs	r3, #2
 800a356:	2b11      	cmp	r3, #17
 800a358:	f200 8461 	bhi.w	800ac1e <ProcessMacCommands+0x926>
 800a35c:	a201      	add	r2, pc, #4	; (adr r2, 800a364 <ProcessMacCommands+0x6c>)
 800a35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a362:	bf00      	nop
 800a364:	0800a3ad 	.word	0x0800a3ad
 800a368:	0800a3ef 	.word	0x0800a3ef
 800a36c:	0800a50b 	.word	0x0800a50b
 800a370:	0800a549 	.word	0x0800a549
 800a374:	0800a639 	.word	0x0800a639
 800a378:	0800a695 	.word	0x0800a695
 800a37c:	0800a751 	.word	0x0800a751
 800a380:	0800a7ab 	.word	0x0800a7ab
 800a384:	0800a88f 	.word	0x0800a88f
 800a388:	0800ac1f 	.word	0x0800ac1f
 800a38c:	0800ac1f 	.word	0x0800ac1f
 800a390:	0800a939 	.word	0x0800a939
 800a394:	0800ac1f 	.word	0x0800ac1f
 800a398:	0800ac1f 	.word	0x0800ac1f
 800a39c:	0800aa4f 	.word	0x0800aa4f
 800a3a0:	0800aa83 	.word	0x0800aa83
 800a3a4:	0800ab13 	.word	0x0800ab13
 800a3a8:	0800ab89 	.word	0x0800ab89
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800a3ac:	2004      	movs	r0, #4
 800a3ae:	f003 fd8f 	bl	800ded0 <LoRaMacConfirmQueueIsCmdActive>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 842a 	beq.w	800ac0e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800a3ba:	2104      	movs	r1, #4
 800a3bc:	2000      	movs	r0, #0
 800a3be:	f003 fcfb 	bl	800ddb8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800a3c2:	78fb      	ldrb	r3, [r7, #3]
 800a3c4:	1c5a      	adds	r2, r3, #1
 800a3c6:	70fa      	strb	r2, [r7, #3]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	781a      	ldrb	r2, [r3, #0]
 800a3d0:	4bad      	ldr	r3, [pc, #692]	; (800a688 <ProcessMacCommands+0x390>)
 800a3d2:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800a3d6:	78fb      	ldrb	r3, [r7, #3]
 800a3d8:	1c5a      	adds	r2, r3, #1
 800a3da:	70fa      	strb	r2, [r7, #3]
 800a3dc:	461a      	mov	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	781a      	ldrb	r2, [r3, #0]
 800a3e4:	4ba8      	ldr	r3, [pc, #672]	; (800a688 <ProcessMacCommands+0x390>)
 800a3e6:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800a3ea:	f000 bc10 	b.w	800ac0e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800a400:	2300      	movs	r3, #0
 800a402:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800a406:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800a40a:	f083 0301 	eor.w	r3, r3, #1
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2b00      	cmp	r3, #0
 800a412:	d078      	beq.n	800a506 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800a414:	2301      	movs	r3, #1
 800a416:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800a41a:	78fb      	ldrb	r3, [r7, #3]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	4413      	add	r3, r2
 800a422:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800a424:	78ba      	ldrb	r2, [r7, #2]
 800a426:	78fb      	ldrb	r3, [r7, #3]
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	3301      	adds	r3, #1
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a434:	4b95      	ldr	r3, [pc, #596]	; (800a68c <ProcessMacCommands+0x394>)
 800a436:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800a43a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a43e:	4b93      	ldr	r3, [pc, #588]	; (800a68c <ProcessMacCommands+0x394>)
 800a440:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a444:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800a448:	4b90      	ldr	r3, [pc, #576]	; (800a68c <ProcessMacCommands+0x394>)
 800a44a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a44e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a452:	4b8e      	ldr	r3, [pc, #568]	; (800a68c <ProcessMacCommands+0x394>)
 800a454:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800a458:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a45c:	4b8b      	ldr	r3, [pc, #556]	; (800a68c <ProcessMacCommands+0x394>)
 800a45e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a462:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800a466:	4b89      	ldr	r3, [pc, #548]	; (800a68c <ProcessMacCommands+0x394>)
 800a468:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a46c:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800a46e:	4b87      	ldr	r3, [pc, #540]	; (800a68c <ProcessMacCommands+0x394>)
 800a470:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a474:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800a478:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800a47c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a480:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	4623      	mov	r3, r4
 800a48e:	f005 f87e 	bl	800f58e <RegionLinkAdrReq>
 800a492:	4603      	mov	r3, r0
 800a494:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800a498:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800a49c:	f003 0307 	and.w	r3, r3, #7
 800a4a0:	2b07      	cmp	r3, #7
 800a4a2:	d10e      	bne.n	800a4c2 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800a4a4:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800a4a8:	4b78      	ldr	r3, [pc, #480]	; (800a68c <ProcessMacCommands+0x394>)
 800a4aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800a4ae:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800a4b2:	4b76      	ldr	r3, [pc, #472]	; (800a68c <ProcessMacCommands+0x394>)
 800a4b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800a4b8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800a4bc:	4b73      	ldr	r3, [pc, #460]	; (800a68c <ProcessMacCommands+0x394>)
 800a4be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800a4c8:	e00b      	b.n	800a4e2 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800a4ca:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	2003      	movs	r0, #3
 800a4d4:	f003 f9d4 	bl	800d880 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800a4d8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800a4dc:	3301      	adds	r3, #1
 800a4de:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800a4e2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800a4e6:	4a6a      	ldr	r2, [pc, #424]	; (800a690 <ProcessMacCommands+0x398>)
 800a4e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ec:	089b      	lsrs	r3, r3, #2
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d3e8      	bcc.n	800a4ca <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800a4f8:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800a4fc:	78fb      	ldrb	r3, [r7, #3]
 800a4fe:	4413      	add	r3, r2
 800a500:	b2db      	uxtb	r3, r3
 800a502:	3b01      	subs	r3, #1
 800a504:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800a506:	bf00      	nop
 800a508:	e381      	b.n	800ac0e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800a50a:	78fb      	ldrb	r3, [r7, #3]
 800a50c:	1c5a      	adds	r2, r3, #1
 800a50e:	70fa      	strb	r2, [r7, #3]
 800a510:	461a      	mov	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4413      	add	r3, r2
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	f003 030f 	and.w	r3, r3, #15
 800a51c:	b2da      	uxtb	r2, r3
 800a51e:	4b5b      	ldr	r3, [pc, #364]	; (800a68c <ProcessMacCommands+0x394>)
 800a520:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800a524:	4b59      	ldr	r3, [pc, #356]	; (800a68c <ProcessMacCommands+0x394>)
 800a526:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800a52a:	461a      	mov	r2, r3
 800a52c:	2301      	movs	r3, #1
 800a52e:	4093      	lsls	r3, r2
 800a530:	b29a      	uxth	r2, r3
 800a532:	4b56      	ldr	r3, [pc, #344]	; (800a68c <ProcessMacCommands+0x394>)
 800a534:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800a538:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a53c:	2200      	movs	r2, #0
 800a53e:	4619      	mov	r1, r3
 800a540:	2004      	movs	r0, #4
 800a542:	f003 f99d 	bl	800d880 <LoRaMacCommandsAddCmd>
                break;
 800a546:	e362      	b.n	800ac0e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800a548:	2307      	movs	r3, #7
 800a54a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800a54e:	78fb      	ldrb	r3, [r7, #3]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	4413      	add	r3, r2
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	091b      	lsrs	r3, r3, #4
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	b25b      	sxtb	r3, r3
 800a55c:	f003 0307 	and.w	r3, r3, #7
 800a560:	b25b      	sxtb	r3, r3
 800a562:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800a566:	78fb      	ldrb	r3, [r7, #3]
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	4413      	add	r3, r2
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	b25b      	sxtb	r3, r3
 800a570:	f003 030f 	and.w	r3, r3, #15
 800a574:	b25b      	sxtb	r3, r3
 800a576:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800a57a:	78fb      	ldrb	r3, [r7, #3]
 800a57c:	3301      	adds	r3, #1
 800a57e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800a580:	78fb      	ldrb	r3, [r7, #3]
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	70fa      	strb	r2, [r7, #3]
 800a586:	461a      	mov	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4413      	add	r3, r2
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a590:	78fb      	ldrb	r3, [r7, #3]
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	70fa      	strb	r2, [r7, #3]
 800a596:	461a      	mov	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4413      	add	r3, r2
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	021a      	lsls	r2, r3, #8
 800a5a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a5a6:	78fb      	ldrb	r3, [r7, #3]
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	70fa      	strb	r2, [r7, #3]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	041a      	lsls	r2, r3, #16
 800a5b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800a5bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5be:	2264      	movs	r2, #100	; 0x64
 800a5c0:	fb02 f303 	mul.w	r3, r2, r3
 800a5c4:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800a5c6:	4b31      	ldr	r3, [pc, #196]	; (800a68c <ProcessMacCommands+0x394>)
 800a5c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5cc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f005 f802 	bl	800f5dc <RegionRxParamSetupReq>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800a5de:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	2b07      	cmp	r3, #7
 800a5e8:	d117      	bne.n	800a61a <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800a5ea:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	4b26      	ldr	r3, [pc, #152]	; (800a68c <ProcessMacCommands+0x394>)
 800a5f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800a5f6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	4b23      	ldr	r3, [pc, #140]	; (800a68c <ProcessMacCommands+0x394>)
 800a5fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800a602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a604:	4a21      	ldr	r2, [pc, #132]	; (800a68c <ProcessMacCommands+0x394>)
 800a606:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800a608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a60a:	4a20      	ldr	r2, [pc, #128]	; (800a68c <ProcessMacCommands+0x394>)
 800a60c:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800a60e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800a612:	b2da      	uxtb	r2, r3
 800a614:	4b1d      	ldr	r3, [pc, #116]	; (800a68c <ProcessMacCommands+0x394>)
 800a616:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800a61a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800a61e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800a622:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a626:	2201      	movs	r2, #1
 800a628:	4619      	mov	r1, r3
 800a62a:	2005      	movs	r0, #5
 800a62c:	f003 f928 	bl	800d880 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800a630:	f7ff fe52 	bl	800a2d8 <SetMlmeScheduleUplinkIndication>
                break;
 800a634:	bf00      	nop
 800a636:	e2ea      	b.n	800ac0e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800a638:	23ff      	movs	r3, #255	; 0xff
 800a63a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800a63e:	4b12      	ldr	r3, [pc, #72]	; (800a688 <ProcessMacCommands+0x390>)
 800a640:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00d      	beq.n	800a664 <ProcessMacCommands+0x36c>
 800a648:	4b0f      	ldr	r3, [pc, #60]	; (800a688 <ProcessMacCommands+0x390>)
 800a64a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d007      	beq.n	800a664 <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800a654:	4b0c      	ldr	r3, [pc, #48]	; (800a688 <ProcessMacCommands+0x390>)
 800a656:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4798      	blx	r3
 800a65e:	4603      	mov	r3, r0
 800a660:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800a664:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800a668:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800a66c:	787b      	ldrb	r3, [r7, #1]
 800a66e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a672:	b2db      	uxtb	r3, r3
 800a674:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800a678:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a67c:	2202      	movs	r2, #2
 800a67e:	4619      	mov	r1, r3
 800a680:	2006      	movs	r0, #6
 800a682:	f003 f8fd 	bl	800d880 <LoRaMacCommandsAddCmd>
                break;
 800a686:	e2c2      	b.n	800ac0e <ProcessMacCommands+0x916>
 800a688:	20000318 	.word	0x20000318
 800a68c:	20000820 	.word	0x20000820
 800a690:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800a694:	2303      	movs	r3, #3
 800a696:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800a69a:	78fb      	ldrb	r3, [r7, #3]
 800a69c:	1c5a      	adds	r2, r3, #1
 800a69e:	70fa      	strb	r2, [r7, #3]
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	b25b      	sxtb	r3, r3
 800a6aa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800a6ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a6b2:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800a6b4:	78fb      	ldrb	r3, [r7, #3]
 800a6b6:	1c5a      	adds	r2, r3, #1
 800a6b8:	70fa      	strb	r2, [r7, #3]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4413      	add	r3, r2
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a6c4:	78fb      	ldrb	r3, [r7, #3]
 800a6c6:	1c5a      	adds	r2, r3, #1
 800a6c8:	70fa      	strb	r2, [r7, #3]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	021a      	lsls	r2, r3, #8
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a6da:	78fb      	ldrb	r3, [r7, #3]
 800a6dc:	1c5a      	adds	r2, r3, #1
 800a6de:	70fa      	strb	r2, [r7, #3]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	041a      	lsls	r2, r3, #16
 800a6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f2:	2264      	movs	r2, #100	; 0x64
 800a6f4:	fb02 f303 	mul.w	r3, r2, r3
 800a6f8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800a6fe:	78fb      	ldrb	r3, [r7, #3]
 800a700:	1c5a      	adds	r2, r3, #1
 800a702:	70fa      	strb	r2, [r7, #3]
 800a704:	461a      	mov	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4413      	add	r3, r2
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	b25b      	sxtb	r3, r3
 800a70e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800a712:	4b87      	ldr	r3, [pc, #540]	; (800a930 <ProcessMacCommands+0x638>)
 800a714:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a718:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a71c:	4611      	mov	r1, r2
 800a71e:	4618      	mov	r0, r3
 800a720:	f004 ff77 	bl	800f612 <RegionNewChannelReq>
 800a724:	4603      	mov	r3, r0
 800a726:	b2db      	uxtb	r3, r3
 800a728:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800a72c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800a730:	b25b      	sxtb	r3, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	db0a      	blt.n	800a74c <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800a736:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800a73a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800a73e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a742:	2201      	movs	r2, #1
 800a744:	4619      	mov	r1, r3
 800a746:	2007      	movs	r0, #7
 800a748:	f003 f89a 	bl	800d880 <LoRaMacCommandsAddCmd>
                }
                break;
 800a74c:	bf00      	nop
 800a74e:	e25e      	b.n	800ac0e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800a750:	78fb      	ldrb	r3, [r7, #3]
 800a752:	1c5a      	adds	r2, r3, #1
 800a754:	70fa      	strb	r2, [r7, #3]
 800a756:	461a      	mov	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4413      	add	r3, r2
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	f003 030f 	and.w	r3, r3, #15
 800a762:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800a766:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d104      	bne.n	800a778 <ProcessMacCommands+0x480>
                {
                    delay++;
 800a76e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800a772:	3301      	adds	r3, #1
 800a774:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800a778:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800a77c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a780:	fb02 f303 	mul.w	r3, r2, r3
 800a784:	461a      	mov	r2, r3
 800a786:	4b6a      	ldr	r3, [pc, #424]	; (800a930 <ProcessMacCommands+0x638>)
 800a788:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a78a:	4b69      	ldr	r3, [pc, #420]	; (800a930 <ProcessMacCommands+0x638>)
 800a78c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a78e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800a792:	4a67      	ldr	r2, [pc, #412]	; (800a930 <ProcessMacCommands+0x638>)
 800a794:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800a796:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a79a:	2200      	movs	r2, #0
 800a79c:	4619      	mov	r1, r3
 800a79e:	2008      	movs	r0, #8
 800a7a0:	f003 f86e 	bl	800d880 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800a7a4:	f7ff fd98 	bl	800a2d8 <SetMlmeScheduleUplinkIndication>
                break;
 800a7a8:	e231      	b.n	800ac0e <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800a7aa:	78fb      	ldrb	r3, [r7, #3]
 800a7ac:	1c5a      	adds	r2, r3, #1
 800a7ae:	70fa      	strb	r2, [r7, #3]
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800a7c8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800a7cc:	f003 0320 	and.w	r3, r3, #32
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d002      	beq.n	800a7da <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800a7da:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800a7de:	f003 0310 	and.w	r3, r3, #16
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d002      	beq.n	800a7ec <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800a7ec:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800a7f0:	f003 030f 	and.w	r3, r3, #15
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800a7fa:	4b4d      	ldr	r3, [pc, #308]	; (800a930 <ProcessMacCommands+0x638>)
 800a7fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a800:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800a804:	4611      	mov	r1, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f004 ff1e 	bl	800f648 <RegionTxParamSetupReq>
 800a80c:	4603      	mov	r3, r0
 800a80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a812:	d03a      	beq.n	800a88a <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800a814:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800a818:	4b45      	ldr	r3, [pc, #276]	; (800a930 <ProcessMacCommands+0x638>)
 800a81a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800a81e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800a822:	4b43      	ldr	r3, [pc, #268]	; (800a930 <ProcessMacCommands+0x638>)
 800a824:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800a828:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a82c:	461a      	mov	r2, r3
 800a82e:	4b41      	ldr	r3, [pc, #260]	; (800a934 <ProcessMacCommands+0x63c>)
 800a830:	5c9b      	ldrb	r3, [r3, r2]
 800a832:	4618      	mov	r0, r3
 800a834:	f7f6 f816 	bl	8000864 <__aeabi_ui2f>
 800a838:	4603      	mov	r3, r0
 800a83a:	4a3d      	ldr	r2, [pc, #244]	; (800a930 <ProcessMacCommands+0x638>)
 800a83c:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800a83e:	2302      	movs	r3, #2
 800a840:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a844:	4b3a      	ldr	r3, [pc, #232]	; (800a930 <ProcessMacCommands+0x638>)
 800a846:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a84a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a84e:	4b38      	ldr	r3, [pc, #224]	; (800a930 <ProcessMacCommands+0x638>)
 800a850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a854:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a858:	4611      	mov	r1, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f004 fd8f 	bl	800f37e <RegionGetPhyParam>
 800a860:	4603      	mov	r3, r0
 800a862:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800a864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a866:	b25a      	sxtb	r2, r3
 800a868:	4b31      	ldr	r3, [pc, #196]	; (800a930 <ProcessMacCommands+0x638>)
 800a86a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a86e:	4293      	cmp	r3, r2
 800a870:	bfb8      	it	lt
 800a872:	4613      	movlt	r3, r2
 800a874:	b25a      	sxtb	r2, r3
 800a876:	4b2e      	ldr	r3, [pc, #184]	; (800a930 <ProcessMacCommands+0x638>)
 800a878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800a87c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a880:	2200      	movs	r2, #0
 800a882:	4619      	mov	r1, r3
 800a884:	2009      	movs	r0, #9
 800a886:	f002 fffb 	bl	800d880 <LoRaMacCommandsAddCmd>
                }
                break;
 800a88a:	bf00      	nop
 800a88c:	e1bf      	b.n	800ac0e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800a88e:	2303      	movs	r3, #3
 800a890:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800a894:	78fb      	ldrb	r3, [r7, #3]
 800a896:	1c5a      	adds	r2, r3, #1
 800a898:	70fa      	strb	r2, [r7, #3]
 800a89a:	461a      	mov	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4413      	add	r3, r2
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800a8a6:	78fb      	ldrb	r3, [r7, #3]
 800a8a8:	1c5a      	adds	r2, r3, #1
 800a8aa:	70fa      	strb	r2, [r7, #3]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a8b6:	78fb      	ldrb	r3, [r7, #3]
 800a8b8:	1c5a      	adds	r2, r3, #1
 800a8ba:	70fa      	strb	r2, [r7, #3]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	021a      	lsls	r2, r3, #8
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a8cc:	78fb      	ldrb	r3, [r7, #3]
 800a8ce:	1c5a      	adds	r2, r3, #1
 800a8d0:	70fa      	strb	r2, [r7, #3]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	041a      	lsls	r2, r3, #16
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e4:	2264      	movs	r2, #100	; 0x64
 800a8e6:	fb02 f303 	mul.w	r3, r2, r3
 800a8ea:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800a8ec:	4b10      	ldr	r3, [pc, #64]	; (800a930 <ProcessMacCommands+0x638>)
 800a8ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8f2:	f107 0220 	add.w	r2, r7, #32
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f004 fec0 	bl	800f67e <RegionDlChannelReq>
 800a8fe:	4603      	mov	r3, r0
 800a900:	b2db      	uxtb	r3, r3
 800a902:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800a906:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800a90a:	b25b      	sxtb	r3, r3
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	db0c      	blt.n	800a92a <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800a910:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800a914:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800a918:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a91c:	2201      	movs	r2, #1
 800a91e:	4619      	mov	r1, r3
 800a920:	200a      	movs	r0, #10
 800a922:	f002 ffad 	bl	800d880 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800a926:	f7ff fcd7 	bl	800a2d8 <SetMlmeScheduleUplinkIndication>
                }
                break;
 800a92a:	bf00      	nop
 800a92c:	e16f      	b.n	800ac0e <ProcessMacCommands+0x916>
 800a92e:	bf00      	nop
 800a930:	20000820 	.word	0x20000820
 800a934:	08018314 	.word	0x08018314
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800a938:	200a      	movs	r0, #10
 800a93a:	f003 fac9 	bl	800ded0 <LoRaMacConfirmQueueIsCmdActive>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 8164 	beq.w	800ac0e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800a946:	210a      	movs	r1, #10
 800a948:	2000      	movs	r0, #0
 800a94a:	f003 fa35 	bl	800ddb8 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800a94e:	f107 0318 	add.w	r3, r7, #24
 800a952:	2200      	movs	r2, #0
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800a958:	f107 0310 	add.w	r3, r7, #16
 800a95c:	2200      	movs	r2, #0
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800a962:	f107 0308 	add.w	r3, r7, #8
 800a966:	2200      	movs	r2, #0
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800a96c:	78fb      	ldrb	r3, [r7, #3]
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	70fa      	strb	r2, [r7, #3]
 800a972:	461a      	mov	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4413      	add	r3, r2
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800a97c:	78fb      	ldrb	r3, [r7, #3]
 800a97e:	1c5a      	adds	r2, r3, #1
 800a980:	70fa      	strb	r2, [r7, #3]
 800a982:	461a      	mov	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4413      	add	r3, r2
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	021a      	lsls	r2, r3, #8
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	4313      	orrs	r3, r2
 800a990:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800a992:	78fb      	ldrb	r3, [r7, #3]
 800a994:	1c5a      	adds	r2, r3, #1
 800a996:	70fa      	strb	r2, [r7, #3]
 800a998:	461a      	mov	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4413      	add	r3, r2
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	041a      	lsls	r2, r3, #16
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800a9a8:	78fb      	ldrb	r3, [r7, #3]
 800a9aa:	1c5a      	adds	r2, r3, #1
 800a9ac:	70fa      	strb	r2, [r7, #3]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	061a      	lsls	r2, r3, #24
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	1c5a      	adds	r2, r3, #1
 800a9c2:	70fa      	strb	r2, [r7, #3]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	b21b      	sxth	r3, r3
 800a9ce:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800a9d0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a9da:	fb03 f302 	mul.w	r3, r3, r2
 800a9de:	121b      	asrs	r3, r3, #8
 800a9e0:	b21b      	sxth	r3, r3
 800a9e2:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800a9e4:	f107 0310 	add.w	r3, r7, #16
 800a9e8:	f107 0218 	add.w	r2, r7, #24
 800a9ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9f0:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800a9f4:	693a      	ldr	r2, [r7, #16]
 800a9f6:	4b8c      	ldr	r3, [pc, #560]	; (800ac28 <ProcessMacCommands+0x930>)
 800a9f8:	4413      	add	r3, r2
 800a9fa:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800a9fc:	f107 0308 	add.w	r3, r7, #8
 800aa00:	4618      	mov	r0, r3
 800aa02:	f00b fd29 	bl	8016458 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800aa06:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800aa0a:	4b88      	ldr	r3, [pc, #544]	; (800ac2c <ProcessMacCommands+0x934>)
 800aa0c:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800aa10:	9200      	str	r2, [sp, #0]
 800aa12:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800aa16:	f107 0210 	add.w	r2, r7, #16
 800aa1a:	ca06      	ldmia	r2, {r1, r2}
 800aa1c:	f00b fcb6 	bl	801638c <SysTimeSub>
 800aa20:	f107 0010 	add.w	r0, r7, #16
 800aa24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa2a:	f107 0208 	add.w	r2, r7, #8
 800aa2e:	ca06      	ldmia	r2, {r1, r2}
 800aa30:	f00b fc73 	bl	801631a <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800aa34:	f107 0310 	add.w	r3, r7, #16
 800aa38:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa3c:	f00b fcde 	bl	80163fc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800aa40:	f002 fde3 	bl	800d60a <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800aa44:	4b79      	ldr	r3, [pc, #484]	; (800ac2c <ProcessMacCommands+0x934>)
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800aa4c:	e0df      	b.n	800ac0e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800aa4e:	200d      	movs	r0, #13
 800aa50:	f003 fa3e 	bl	800ded0 <LoRaMacConfirmQueueIsCmdActive>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f000 80d9 	beq.w	800ac0e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800aa5c:	210d      	movs	r1, #13
 800aa5e:	2000      	movs	r0, #0
 800aa60:	f003 f9aa 	bl	800ddb8 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800aa64:	4b71      	ldr	r3, [pc, #452]	; (800ac2c <ProcessMacCommands+0x934>)
 800aa66:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800aa6a:	2b04      	cmp	r3, #4
 800aa6c:	f000 80cf 	beq.w	800ac0e <ProcessMacCommands+0x916>
 800aa70:	4b6e      	ldr	r3, [pc, #440]	; (800ac2c <ProcessMacCommands+0x934>)
 800aa72:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800aa76:	2b05      	cmp	r3, #5
 800aa78:	f000 80c9 	beq.w	800ac0e <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800aa7c:	f002 fda6 	bl	800d5cc <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800aa80:	e0c5      	b.n	800ac0e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800aa82:	2303      	movs	r3, #3
 800aa84:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800aa8c:	78fb      	ldrb	r3, [r7, #3]
 800aa8e:	1c5a      	adds	r2, r3, #1
 800aa90:	70fa      	strb	r2, [r7, #3]
 800aa92:	461a      	mov	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4413      	add	r3, r2
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800aa9c:	78fb      	ldrb	r3, [r7, #3]
 800aa9e:	1c5a      	adds	r2, r3, #1
 800aaa0:	70fa      	strb	r2, [r7, #3]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	021b      	lsls	r3, r3, #8
 800aaac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aaae:	4313      	orrs	r3, r2
 800aab0:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800aab2:	78fb      	ldrb	r3, [r7, #3]
 800aab4:	1c5a      	adds	r2, r3, #1
 800aab6:	70fa      	strb	r2, [r7, #3]
 800aab8:	461a      	mov	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4413      	add	r3, r2
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	041b      	lsls	r3, r3, #16
 800aac2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aac4:	4313      	orrs	r3, r2
 800aac6:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800aac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaca:	2264      	movs	r2, #100	; 0x64
 800aacc:	fb02 f303 	mul.w	r3, r2, r3
 800aad0:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800aad2:	78fb      	ldrb	r3, [r7, #3]
 800aad4:	1c5a      	adds	r2, r3, #1
 800aad6:	70fa      	strb	r2, [r7, #3]
 800aad8:	461a      	mov	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4413      	add	r3, r2
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	f003 030f 	and.w	r3, r3, #15
 800aae4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800aae8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aaec:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f002 fd72 	bl	800d5d8 <LoRaMacClassBPingSlotChannelReq>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800aafa:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800aafe:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800ab02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ab06:	2201      	movs	r2, #1
 800ab08:	4619      	mov	r1, r3
 800ab0a:	2011      	movs	r0, #17
 800ab0c:	f002 feb8 	bl	800d880 <LoRaMacCommandsAddCmd>
                break;
 800ab10:	e07d      	b.n	800ac0e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800ab12:	200e      	movs	r0, #14
 800ab14:	f003 f9dc 	bl	800ded0 <LoRaMacConfirmQueueIsCmdActive>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d077      	beq.n	800ac0e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800ab1e:	210e      	movs	r1, #14
 800ab20:	2000      	movs	r0, #0
 800ab22:	f003 f949 	bl	800ddb8 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800ab32:	78fb      	ldrb	r3, [r7, #3]
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	70fa      	strb	r2, [r7, #3]
 800ab38:	461a      	mov	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800ab44:	78fb      	ldrb	r3, [r7, #3]
 800ab46:	1c5a      	adds	r2, r3, #1
 800ab48:	70fa      	strb	r2, [r7, #3]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4413      	add	r3, r2
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	021b      	lsls	r3, r3, #8
 800ab54:	b21a      	sxth	r2, r3
 800ab56:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	b21b      	sxth	r3, r3
 800ab5e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800ab62:	78fb      	ldrb	r3, [r7, #3]
 800ab64:	1c5a      	adds	r2, r3, #1
 800ab66:	70fa      	strb	r2, [r7, #3]
 800ab68:	461a      	mov	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800ab74:	4b2e      	ldr	r3, [pc, #184]	; (800ac30 <ProcessMacCommands+0x938>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800ab7c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ab80:	4618      	mov	r0, r3
 800ab82:	f002 fd35 	bl	800d5f0 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800ab86:	e042      	b.n	800ac0e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800ab8e:	78fb      	ldrb	r3, [r7, #3]
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	70fa      	strb	r2, [r7, #3]
 800ab94:	461a      	mov	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4413      	add	r3, r2
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800aba0:	78fb      	ldrb	r3, [r7, #3]
 800aba2:	1c5a      	adds	r2, r3, #1
 800aba4:	70fa      	strb	r2, [r7, #3]
 800aba6:	461a      	mov	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4413      	add	r3, r2
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	021b      	lsls	r3, r3, #8
 800abb0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800abb4:	4313      	orrs	r3, r2
 800abb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800abba:	78fb      	ldrb	r3, [r7, #3]
 800abbc:	1c5a      	adds	r2, r3, #1
 800abbe:	70fa      	strb	r2, [r7, #3]
 800abc0:	461a      	mov	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4413      	add	r3, r2
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	041b      	lsls	r3, r3, #16
 800abca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800abce:	4313      	orrs	r3, r2
 800abd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800abd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800abd8:	2264      	movs	r2, #100	; 0x64
 800abda:	fb02 f303 	mul.w	r3, r2, r3
 800abde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800abe2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800abe6:	f002 fd16 	bl	800d616 <LoRaMacClassBBeaconFreqReq>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d003      	beq.n	800abf8 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800abf0:	2301      	movs	r3, #1
 800abf2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800abf6:	e002      	b.n	800abfe <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800abfe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ac02:	2201      	movs	r2, #1
 800ac04:	4619      	mov	r1, r3
 800ac06:	2013      	movs	r0, #19
 800ac08:	f002 fe3a 	bl	800d880 <LoRaMacCommandsAddCmd>
                }
                break;
 800ac0c:	bf00      	nop
    while( macIndex < commandsSize )
 800ac0e:	78fa      	ldrb	r2, [r7, #3]
 800ac10:	78bb      	ldrb	r3, [r7, #2]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	f4ff ab88 	bcc.w	800a328 <ProcessMacCommands+0x30>
 800ac18:	e002      	b.n	800ac20 <ProcessMacCommands+0x928>
            return;
 800ac1a:	bf00      	nop
 800ac1c:	e000      	b.n	800ac20 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800ac1e:	bf00      	nop
        }
    }
}
 800ac20:	378c      	adds	r7, #140	; 0x8c
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd90      	pop	{r4, r7, pc}
 800ac26:	bf00      	nop
 800ac28:	12d53d80 	.word	0x12d53d80
 800ac2c:	20000318 	.word	0x20000318
 800ac30:	20001224 	.word	0x20001224

0800ac34 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b08e      	sub	sp, #56	; 0x38
 800ac38:	af02      	add	r7, sp, #8
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	607a      	str	r2, [r7, #4]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	460b      	mov	r3, r1
 800ac42:	72fb      	strb	r3, [r7, #11]
 800ac44:	4613      	mov	r3, r2
 800ac46:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ac4e:	4b65      	ldr	r3, [pc, #404]	; (800ade4 <Send+0x1b0>)
 800ac50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac54:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800ac58:	4b62      	ldr	r3, [pc, #392]	; (800ade4 <Send+0x1b0>)
 800ac5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ac62:	4b60      	ldr	r3, [pc, #384]	; (800ade4 <Send+0x1b0>)
 800ac64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac66:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ac68:	4b5e      	ldr	r3, [pc, #376]	; (800ade4 <Send+0x1b0>)
 800ac6a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d101      	bne.n	800ac76 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800ac72:	2307      	movs	r3, #7
 800ac74:	e0b1      	b.n	800adda <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800ac76:	4b5b      	ldr	r3, [pc, #364]	; (800ade4 <Send+0x1b0>)
 800ac78:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d102      	bne.n	800ac86 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800ac80:	4b58      	ldr	r3, [pc, #352]	; (800ade4 <Send+0x1b0>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800ac86:	2300      	movs	r3, #0
 800ac88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800ac8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ac90:	f36f 0303 	bfc	r3, #0, #4
 800ac94:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800ac98:	4b52      	ldr	r3, [pc, #328]	; (800ade4 <Send+0x1b0>)
 800ac9a:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800ac9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aca2:	f362 13c7 	bfi	r3, r2, #7, #1
 800aca6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800acaa:	4b4e      	ldr	r3, [pc, #312]	; (800ade4 <Send+0x1b0>)
 800acac:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d106      	bne.n	800acc2 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800acb4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800acb8:	f043 0310 	orr.w	r3, r3, #16
 800acbc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800acc0:	e005      	b.n	800acce <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800acc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800acc6:	f36f 1304 	bfc	r3, #4, #1
 800acca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800acce:	4b45      	ldr	r3, [pc, #276]	; (800ade4 <Send+0x1b0>)
 800acd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d005      	beq.n	800ace4 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800acd8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800acdc:	f043 0320 	orr.w	r3, r3, #32
 800ace0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800ace4:	4b3f      	ldr	r3, [pc, #252]	; (800ade4 <Send+0x1b0>)
 800ace6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800acea:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800acec:	2301      	movs	r3, #1
 800acee:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800acf0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800acf4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	bf14      	ite	ne
 800acfe:	2301      	movne	r3, #1
 800ad00:	2300      	moveq	r3, #0
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ad06:	4b37      	ldr	r3, [pc, #220]	; (800ade4 <Send+0x1b0>)
 800ad08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad0a:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800ad0c:	4b36      	ldr	r3, [pc, #216]	; (800ade8 <Send+0x1b4>)
 800ad0e:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800ad12:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800ad14:	4b34      	ldr	r3, [pc, #208]	; (800ade8 <Send+0x1b4>)
 800ad16:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800ad1a:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ad1c:	4b31      	ldr	r3, [pc, #196]	; (800ade4 <Send+0x1b0>)
 800ad1e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ad22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ad26:	4b2f      	ldr	r3, [pc, #188]	; (800ade4 <Send+0x1b0>)
 800ad28:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ad2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ad30:	4b2c      	ldr	r3, [pc, #176]	; (800ade4 <Send+0x1b0>)
 800ad32:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ad36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800ad3a:	4b2a      	ldr	r3, [pc, #168]	; (800ade4 <Send+0x1b0>)
 800ad3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800ad44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad48:	f107 0014 	add.w	r0, r7, #20
 800ad4c:	4a27      	ldr	r2, [pc, #156]	; (800adec <Send+0x1b8>)
 800ad4e:	4928      	ldr	r1, [pc, #160]	; (800adf0 <Send+0x1bc>)
 800ad50:	f002 fb7c 	bl	800d44c <LoRaMacAdrCalcNext>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461a      	mov	r2, r3
 800ad58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ad5c:	f362 1386 	bfi	r3, r2, #6, #1
 800ad60:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800ad64:	7afa      	ldrb	r2, [r7, #11]
 800ad66:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800ad6a:	893b      	ldrh	r3, [r7, #8]
 800ad6c:	9300      	str	r3, [sp, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f000 fc21 	bl	800b5b8 <PrepareFrame>
 800ad76:	4603      	mov	r3, r0
 800ad78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800ad7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d003      	beq.n	800ad8c <Send+0x158>
 800ad84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad88:	2b0a      	cmp	r3, #10
 800ad8a:	d107      	bne.n	800ad9c <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800ad8c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 f96d 	bl	800b070 <ScheduleTx>
 800ad96:	4603      	mov	r3, r0
 800ad98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800ad9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00a      	beq.n	800adba <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800ada4:	4a0f      	ldr	r2, [pc, #60]	; (800ade4 <Send+0x1b0>)
 800ada6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800adaa:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800adae:	4a0d      	ldr	r2, [pc, #52]	; (800ade4 <Send+0x1b0>)
 800adb0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800adb4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800adb8:	e00d      	b.n	800add6 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800adba:	4b0a      	ldr	r3, [pc, #40]	; (800ade4 <Send+0x1b0>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800adc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc4:	4a07      	ldr	r2, [pc, #28]	; (800ade4 <Send+0x1b0>)
 800adc6:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800adc8:	f002 fdd2 	bl	800d970 <LoRaMacCommandsRemoveNoneStickyCmds>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d001      	beq.n	800add6 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800add2:	2313      	movs	r3, #19
 800add4:	e001      	b.n	800adda <Send+0x1a6>
        }
    }
    return status;
 800add6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800adda:	4618      	mov	r0, r3
 800addc:	3730      	adds	r7, #48	; 0x30
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	20000820 	.word	0x20000820
 800ade8:	20000318 	.word	0x20000318
 800adec:	20000858 	.word	0x20000858
 800adf0:	20000859 	.word	0x20000859

0800adf4 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	4603      	mov	r3, r0
 800adfc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800ae06:	2301      	movs	r3, #1
 800ae08:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800ae0a:	79fb      	ldrb	r3, [r7, #7]
 800ae0c:	2bff      	cmp	r3, #255	; 0xff
 800ae0e:	d129      	bne.n	800ae64 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800ae10:	2000      	movs	r0, #0
 800ae12:	f7ff f941 	bl	800a098 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800ae16:	4b1a      	ldr	r3, [pc, #104]	; (800ae80 <SendReJoinReq+0x8c>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800ae1e:	4b18      	ldr	r3, [pc, #96]	; (800ae80 <SendReJoinReq+0x8c>)
 800ae20:	4a18      	ldr	r2, [pc, #96]	; (800ae84 <SendReJoinReq+0x90>)
 800ae22:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ae26:	4b16      	ldr	r3, [pc, #88]	; (800ae80 <SendReJoinReq+0x8c>)
 800ae28:	22ff      	movs	r2, #255	; 0xff
 800ae2a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800ae2e:	7b3b      	ldrb	r3, [r7, #12]
 800ae30:	f36f 1347 	bfc	r3, #5, #3
 800ae34:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800ae36:	7b3a      	ldrb	r2, [r7, #12]
 800ae38:	4b11      	ldr	r3, [pc, #68]	; (800ae80 <SendReJoinReq+0x8c>)
 800ae3a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800ae3e:	f7fc fd0d 	bl	800785c <SecureElementGetJoinEui>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2208      	movs	r2, #8
 800ae46:	4619      	mov	r1, r3
 800ae48:	480f      	ldr	r0, [pc, #60]	; (800ae88 <SendReJoinReq+0x94>)
 800ae4a:	f008 f94c 	bl	80130e6 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800ae4e:	f7fc fce3 	bl	8007818 <SecureElementGetDevEui>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2208      	movs	r2, #8
 800ae56:	4619      	mov	r1, r3
 800ae58:	480c      	ldr	r0, [pc, #48]	; (800ae8c <SendReJoinReq+0x98>)
 800ae5a:	f008 f944 	bl	80130e6 <memcpy1>

            allowDelayedTx = false;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73fb      	strb	r3, [r7, #15]

            break;
 800ae62:	e002      	b.n	800ae6a <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ae64:	2302      	movs	r3, #2
 800ae66:	73bb      	strb	r3, [r7, #14]
            break;
 800ae68:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 f8ff 	bl	800b070 <ScheduleTx>
 800ae72:	4603      	mov	r3, r0
 800ae74:	73bb      	strb	r3, [r7, #14]
    return status;
 800ae76:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	20000318 	.word	0x20000318
 800ae84:	2000031a 	.word	0x2000031a
 800ae88:	20000426 	.word	0x20000426
 800ae8c:	2000042e 	.word	0x2000042e

0800ae90 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ae94:	f002 fb49 	bl	800d52a <LoRaMacClassBIsBeaconExpected>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800ae9e:	230e      	movs	r3, #14
 800aea0:	e013      	b.n	800aeca <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800aea2:	4b0b      	ldr	r3, [pc, #44]	; (800aed0 <CheckForClassBCollision+0x40>)
 800aea4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d10d      	bne.n	800aec8 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800aeac:	f002 fb44 	bl	800d538 <LoRaMacClassBIsPingExpected>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800aeb6:	230f      	movs	r3, #15
 800aeb8:	e007      	b.n	800aeca <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800aeba:	f002 fb44 	bl	800d546 <LoRaMacClassBIsMulticastExpected>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d001      	beq.n	800aec8 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800aec4:	230f      	movs	r3, #15
 800aec6:	e000      	b.n	800aeca <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	20000820 	.word	0x20000820

0800aed4 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800aed4:	b590      	push	{r4, r7, lr}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800aeda:	4b2d      	ldr	r3, [pc, #180]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800aedc:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800aee0:	4b2b      	ldr	r3, [pc, #172]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800aee2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aee6:	4b2a      	ldr	r3, [pc, #168]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800aee8:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800aeec:	4b28      	ldr	r3, [pc, #160]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800aeee:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800aef2:	4b27      	ldr	r3, [pc, #156]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800aef4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800aef8:	b25b      	sxtb	r3, r3
 800aefa:	f004 fc3c 	bl	800f776 <RegionApplyDrOffset>
 800aefe:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800af00:	b259      	sxtb	r1, r3
 800af02:	4b23      	ldr	r3, [pc, #140]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800af04:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800af08:	4b21      	ldr	r3, [pc, #132]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800af0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af0c:	4821      	ldr	r0, [pc, #132]	; (800af94 <ComputeRxWindowParameters+0xc0>)
 800af0e:	9000      	str	r0, [sp, #0]
 800af10:	4620      	mov	r0, r4
 800af12:	f004 fad9 	bl	800f4c8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800af16:	4b1e      	ldr	r3, [pc, #120]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800af18:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800af1c:	4b1c      	ldr	r3, [pc, #112]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800af1e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800af22:	b259      	sxtb	r1, r3
 800af24:	4b1a      	ldr	r3, [pc, #104]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800af26:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800af2a:	4b19      	ldr	r3, [pc, #100]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800af2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af2e:	4c1a      	ldr	r4, [pc, #104]	; (800af98 <ComputeRxWindowParameters+0xc4>)
 800af30:	9400      	str	r4, [sp, #0]
 800af32:	f004 fac9 	bl	800f4c8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800af36:	4b16      	ldr	r3, [pc, #88]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800af38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af3a:	4a18      	ldr	r2, [pc, #96]	; (800af9c <ComputeRxWindowParameters+0xc8>)
 800af3c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800af40:	4413      	add	r3, r2
 800af42:	4a16      	ldr	r2, [pc, #88]	; (800af9c <ComputeRxWindowParameters+0xc8>)
 800af44:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800af48:	4b11      	ldr	r3, [pc, #68]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800af4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af4c:	4a13      	ldr	r2, [pc, #76]	; (800af9c <ComputeRxWindowParameters+0xc8>)
 800af4e:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800af52:	4413      	add	r3, r2
 800af54:	4a11      	ldr	r2, [pc, #68]	; (800af9c <ComputeRxWindowParameters+0xc8>)
 800af56:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800af5a:	4b0d      	ldr	r3, [pc, #52]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800af5c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800af60:	2b00      	cmp	r3, #0
 800af62:	d111      	bne.n	800af88 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800af64:	4b0a      	ldr	r3, [pc, #40]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800af66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af68:	4a0c      	ldr	r2, [pc, #48]	; (800af9c <ComputeRxWindowParameters+0xc8>)
 800af6a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800af6e:	4413      	add	r3, r2
 800af70:	4a0a      	ldr	r2, [pc, #40]	; (800af9c <ComputeRxWindowParameters+0xc8>)
 800af72:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800af76:	4b06      	ldr	r3, [pc, #24]	; (800af90 <ComputeRxWindowParameters+0xbc>)
 800af78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af7a:	4a08      	ldr	r2, [pc, #32]	; (800af9c <ComputeRxWindowParameters+0xc8>)
 800af7c:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800af80:	4413      	add	r3, r2
 800af82:	4a06      	ldr	r2, [pc, #24]	; (800af9c <ComputeRxWindowParameters+0xc8>)
 800af84:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800af88:	bf00      	nop
 800af8a:	3704      	adds	r7, #4
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd90      	pop	{r4, r7, pc}
 800af90:	20000820 	.word	0x20000820
 800af94:	200006d0 	.word	0x200006d0
 800af98:	200006e4 	.word	0x200006e4
 800af9c:	20000318 	.word	0x20000318

0800afa0 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800afaa:	4b13      	ldr	r3, [pc, #76]	; (800aff8 <VerifyTxFrame+0x58>)
 800afac:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d01b      	beq.n	800afec <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800afb4:	1d3b      	adds	r3, r7, #4
 800afb6:	4618      	mov	r0, r3
 800afb8:	f002 fd20 	bl	800d9fc <LoRaMacCommandsGetSizeSerializedCmds>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800afc2:	2313      	movs	r3, #19
 800afc4:	e013      	b.n	800afee <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800afc6:	4b0d      	ldr	r3, [pc, #52]	; (800affc <VerifyTxFrame+0x5c>)
 800afc8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800afcc:	4a0a      	ldr	r2, [pc, #40]	; (800aff8 <VerifyTxFrame+0x58>)
 800afce:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	b2d2      	uxtb	r2, r2
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7ff f956 	bl	800a288 <ValidatePayloadLength>
 800afdc:	4603      	mov	r3, r0
 800afde:	f083 0301 	eor.w	r3, r3, #1
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800afe8:	2308      	movs	r3, #8
 800afea:	e000      	b.n	800afee <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20000820 	.word	0x20000820
 800affc:	20000318 	.word	0x20000318

0800b000 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800b006:	4b18      	ldr	r3, [pc, #96]	; (800b068 <SerializeTxFrame+0x68>)
 800b008:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d002      	beq.n	800b016 <SerializeTxFrame+0x16>
 800b010:	2b04      	cmp	r3, #4
 800b012:	d011      	beq.n	800b038 <SerializeTxFrame+0x38>
 800b014:	e021      	b.n	800b05a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800b016:	4815      	ldr	r0, [pc, #84]	; (800b06c <SerializeTxFrame+0x6c>)
 800b018:	f004 f823 	bl	800f062 <LoRaMacSerializerJoinRequest>
 800b01c:	4603      	mov	r3, r0
 800b01e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800b020:	79fb      	ldrb	r3, [r7, #7]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800b026:	2311      	movs	r3, #17
 800b028:	e01a      	b.n	800b060 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800b02a:	4b0f      	ldr	r3, [pc, #60]	; (800b068 <SerializeTxFrame+0x68>)
 800b02c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800b030:	b29a      	uxth	r2, r3
 800b032:	4b0d      	ldr	r3, [pc, #52]	; (800b068 <SerializeTxFrame+0x68>)
 800b034:	801a      	strh	r2, [r3, #0]
            break;
 800b036:	e012      	b.n	800b05e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800b038:	480c      	ldr	r0, [pc, #48]	; (800b06c <SerializeTxFrame+0x6c>)
 800b03a:	f004 f894 	bl	800f166 <LoRaMacSerializerData>
 800b03e:	4603      	mov	r3, r0
 800b040:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800b042:	79fb      	ldrb	r3, [r7, #7]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800b048:	2311      	movs	r3, #17
 800b04a:	e009      	b.n	800b060 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800b04c:	4b06      	ldr	r3, [pc, #24]	; (800b068 <SerializeTxFrame+0x68>)
 800b04e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800b052:	b29a      	uxth	r2, r3
 800b054:	4b04      	ldr	r3, [pc, #16]	; (800b068 <SerializeTxFrame+0x68>)
 800b056:	801a      	strh	r2, [r3, #0]
            break;
 800b058:	e001      	b.n	800b05e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800b05a:	2303      	movs	r3, #3
 800b05c:	e000      	b.n	800b060 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	20000318 	.word	0x20000318
 800b06c:	20000420 	.word	0x20000420

0800b070 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b090      	sub	sp, #64	; 0x40
 800b074:	af02      	add	r7, sp, #8
 800b076:	4603      	mov	r3, r0
 800b078:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b07a:	2303      	movs	r3, #3
 800b07c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800b080:	f7ff ff06 	bl	800ae90 <CheckForClassBCollision>
 800b084:	4603      	mov	r3, r0
 800b086:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800b08a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d002      	beq.n	800b098 <ScheduleTx+0x28>
    {
        return status;
 800b092:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b096:	e08f      	b.n	800b1b8 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800b098:	f000 f8fa 	bl	800b290 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800b09c:	f7ff ffb0 	bl	800b000 <SerializeTxFrame>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800b0a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d002      	beq.n	800b0b4 <ScheduleTx+0x44>
    {
        return status;
 800b0ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0b2:	e081      	b.n	800b1b8 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800b0b4:	4b42      	ldr	r3, [pc, #264]	; (800b1c0 <ScheduleTx+0x150>)
 800b0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b8:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b0ba:	4b41      	ldr	r3, [pc, #260]	; (800b1c0 <ScheduleTx+0x150>)
 800b0bc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800b0c0:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800b0c2:	4b3f      	ldr	r3, [pc, #252]	; (800b1c0 <ScheduleTx+0x150>)
 800b0c4:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800b0c8:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800b0ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f00b f9fa 	bl	80164c8 <SysTimeGetMcuTime>
 800b0d4:	4638      	mov	r0, r7
 800b0d6:	4b3a      	ldr	r3, [pc, #232]	; (800b1c0 <ScheduleTx+0x150>)
 800b0d8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800b0dc:	9200      	str	r2, [sp, #0]
 800b0de:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800b0e2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b0e6:	ca06      	ldmia	r2, {r1, r2}
 800b0e8:	f00b f950 	bl	801638c <SysTimeSub>
 800b0ec:	f107 0320 	add.w	r3, r7, #32
 800b0f0:	463a      	mov	r2, r7
 800b0f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b0f6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800b0fa:	4b31      	ldr	r3, [pc, #196]	; (800b1c0 <ScheduleTx+0x150>)
 800b0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fe:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800b100:	2300      	movs	r3, #0
 800b102:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800b106:	2301      	movs	r3, #1
 800b108:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800b10a:	4b2e      	ldr	r3, [pc, #184]	; (800b1c4 <ScheduleTx+0x154>)
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b110:	4b2b      	ldr	r3, [pc, #172]	; (800b1c0 <ScheduleTx+0x150>)
 800b112:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800b116:	2b00      	cmp	r3, #0
 800b118:	d104      	bne.n	800b124 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800b11a:	2301      	movs	r3, #1
 800b11c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800b120:	2300      	movs	r3, #0
 800b122:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800b124:	4b26      	ldr	r3, [pc, #152]	; (800b1c0 <ScheduleTx+0x150>)
 800b126:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b12a:	f107 0114 	add.w	r1, r7, #20
 800b12e:	4b26      	ldr	r3, [pc, #152]	; (800b1c8 <ScheduleTx+0x158>)
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	4b26      	ldr	r3, [pc, #152]	; (800b1cc <ScheduleTx+0x15c>)
 800b134:	4a26      	ldr	r2, [pc, #152]	; (800b1d0 <ScheduleTx+0x160>)
 800b136:	f004 fae3 	bl	800f700 <RegionNextChannel>
 800b13a:	4603      	mov	r3, r0
 800b13c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800b140:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b144:	2b00      	cmp	r3, #0
 800b146:	d022      	beq.n	800b18e <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800b148:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b14c:	2b0b      	cmp	r3, #11
 800b14e:	d11b      	bne.n	800b188 <ScheduleTx+0x118>
 800b150:	7bfb      	ldrb	r3, [r7, #15]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d018      	beq.n	800b188 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800b156:	4b1b      	ldr	r3, [pc, #108]	; (800b1c4 <ScheduleTx+0x154>)
 800b158:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d011      	beq.n	800b184 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800b160:	4b18      	ldr	r3, [pc, #96]	; (800b1c4 <ScheduleTx+0x154>)
 800b162:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b166:	f043 0320 	orr.w	r3, r3, #32
 800b16a:	4a16      	ldr	r2, [pc, #88]	; (800b1c4 <ScheduleTx+0x154>)
 800b16c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800b170:	4b14      	ldr	r3, [pc, #80]	; (800b1c4 <ScheduleTx+0x154>)
 800b172:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800b176:	4619      	mov	r1, r3
 800b178:	4816      	ldr	r0, [pc, #88]	; (800b1d4 <ScheduleTx+0x164>)
 800b17a:	f00b fb3f 	bl	80167fc <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800b17e:	4815      	ldr	r0, [pc, #84]	; (800b1d4 <ScheduleTx+0x164>)
 800b180:	f00b fa5e 	bl	8016640 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	e017      	b.n	800b1b8 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800b188:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b18c:	e014      	b.n	800b1b8 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800b18e:	f7ff fea1 	bl	800aed4 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800b192:	f7ff ff05 	bl	800afa0 <VerifyTxFrame>
 800b196:	4603      	mov	r3, r0
 800b198:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800b19c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <ScheduleTx+0x13a>
    {
        return status;
 800b1a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b1a8:	e006      	b.n	800b1b8 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800b1aa:	4b06      	ldr	r3, [pc, #24]	; (800b1c4 <ScheduleTx+0x154>)
 800b1ac:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 fb1d 	bl	800b7f0 <SendFrameOnChannel>
 800b1b6:	4603      	mov	r3, r0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3738      	adds	r7, #56	; 0x38
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	20000820 	.word	0x20000820
 800b1c4:	20000318 	.word	0x20000318
 800b1c8:	20000850 	.word	0x20000850
 800b1cc:	2000079c 	.word	0x2000079c
 800b1d0:	2000072d 	.word	0x2000072d
 800b1d4:	20000680 	.word	0x20000680

0800b1d8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	4603      	mov	r3, r0
 800b1e0:	460a      	mov	r2, r1
 800b1e2:	71fb      	strb	r3, [r7, #7]
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800b1e8:	2313      	movs	r3, #19
 800b1ea:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800b1f0:	4b25      	ldr	r3, [pc, #148]	; (800b288 <SecureFrame+0xb0>)
 800b1f2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d002      	beq.n	800b200 <SecureFrame+0x28>
 800b1fa:	2b04      	cmp	r3, #4
 800b1fc:	d011      	beq.n	800b222 <SecureFrame+0x4a>
 800b1fe:	e03b      	b.n	800b278 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800b200:	4822      	ldr	r0, [pc, #136]	; (800b28c <SecureFrame+0xb4>)
 800b202:	f003 faf7 	bl	800e7f4 <LoRaMacCryptoPrepareJoinRequest>
 800b206:	4603      	mov	r3, r0
 800b208:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800b210:	2311      	movs	r3, #17
 800b212:	e034      	b.n	800b27e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800b214:	4b1c      	ldr	r3, [pc, #112]	; (800b288 <SecureFrame+0xb0>)
 800b216:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	4b1a      	ldr	r3, [pc, #104]	; (800b288 <SecureFrame+0xb0>)
 800b21e:	801a      	strh	r2, [r3, #0]
            break;
 800b220:	e02c      	b.n	800b27c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b222:	f107 0308 	add.w	r3, r7, #8
 800b226:	4618      	mov	r0, r3
 800b228:	f003 fa0a 	bl	800e640 <LoRaMacCryptoGetFCntUp>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b232:	2312      	movs	r3, #18
 800b234:	e023      	b.n	800b27e <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800b236:	4b14      	ldr	r3, [pc, #80]	; (800b288 <SecureFrame+0xb0>)
 800b238:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d104      	bne.n	800b24a <SecureFrame+0x72>
 800b240:	4b11      	ldr	r3, [pc, #68]	; (800b288 <SecureFrame+0xb0>)
 800b242:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800b246:	2b01      	cmp	r3, #1
 800b248:	d902      	bls.n	800b250 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	3b01      	subs	r3, #1
 800b24e:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800b250:	68b8      	ldr	r0, [r7, #8]
 800b252:	79ba      	ldrb	r2, [r7, #6]
 800b254:	79f9      	ldrb	r1, [r7, #7]
 800b256:	4b0d      	ldr	r3, [pc, #52]	; (800b28c <SecureFrame+0xb4>)
 800b258:	f003 fbe4 	bl	800ea24 <LoRaMacCryptoSecureMessage>
 800b25c:	4603      	mov	r3, r0
 800b25e:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800b260:	7bfb      	ldrb	r3, [r7, #15]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d001      	beq.n	800b26a <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800b266:	2311      	movs	r3, #17
 800b268:	e009      	b.n	800b27e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800b26a:	4b07      	ldr	r3, [pc, #28]	; (800b288 <SecureFrame+0xb0>)
 800b26c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800b270:	b29a      	uxth	r2, r3
 800b272:	4b05      	ldr	r3, [pc, #20]	; (800b288 <SecureFrame+0xb0>)
 800b274:	801a      	strh	r2, [r3, #0]
            break;
 800b276:	e001      	b.n	800b27c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800b278:	2303      	movs	r3, #3
 800b27a:	e000      	b.n	800b27e <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	20000318 	.word	0x20000318
 800b28c:	20000420 	.word	0x20000420

0800b290 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800b290:	b480      	push	{r7}
 800b292:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800b294:	4b09      	ldr	r3, [pc, #36]	; (800b2bc <CalculateBackOff+0x2c>)
 800b296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10a      	bne.n	800b2b2 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800b29c:	4b07      	ldr	r3, [pc, #28]	; (800b2bc <CalculateBackOff+0x2c>)
 800b29e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	4a06      	ldr	r2, [pc, #24]	; (800b2c0 <CalculateBackOff+0x30>)
 800b2a6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800b2aa:	fb02 f303 	mul.w	r3, r2, r3
 800b2ae:	4a03      	ldr	r2, [pc, #12]	; (800b2bc <CalculateBackOff+0x2c>)
 800b2b0:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800b2b2:	bf00      	nop
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bc80      	pop	{r7}
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	20000820 	.word	0x20000820
 800b2c0:	20000318 	.word	0x20000318

0800b2c4 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	7139      	strb	r1, [r7, #4]
 800b2ce:	71fb      	strb	r3, [r7, #7]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800b2d4:	79fb      	ldrb	r3, [r7, #7]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d002      	beq.n	800b2e0 <RemoveMacCommands+0x1c>
 800b2da:	79fb      	ldrb	r3, [r7, #7]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d10d      	bne.n	800b2fc <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800b2e0:	79bb      	ldrb	r3, [r7, #6]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d108      	bne.n	800b2f8 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800b2e6:	793b      	ldrb	r3, [r7, #4]
 800b2e8:	f003 0320 	and.w	r3, r3, #32
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d004      	beq.n	800b2fc <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800b2f2:	f002 fb61 	bl	800d9b8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800b2f6:	e001      	b.n	800b2fc <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800b2f8:	f002 fb5e 	bl	800d9b8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800b2fc:	bf00      	nop
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800b304:	b5b0      	push	{r4, r5, r7, lr}
 800b306:	b08e      	sub	sp, #56	; 0x38
 800b308:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800b30a:	4b68      	ldr	r3, [pc, #416]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800b312:	4b66      	ldr	r3, [pc, #408]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b314:	2200      	movs	r2, #0
 800b316:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800b318:	4b65      	ldr	r3, [pc, #404]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b31a:	2200      	movs	r2, #0
 800b31c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800b320:	4b63      	ldr	r3, [pc, #396]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b328:	4b61      	ldr	r3, [pc, #388]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800b330:	4b5f      	ldr	r3, [pc, #380]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b332:	2200      	movs	r2, #0
 800b334:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 800b338:	4b5c      	ldr	r3, [pc, #368]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800b340:	4b5a      	ldr	r3, [pc, #360]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b342:	2201      	movs	r2, #1
 800b344:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b348:	4b58      	ldr	r3, [pc, #352]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b34a:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 800b34e:	4b57      	ldr	r3, [pc, #348]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b354:	4b55      	ldr	r3, [pc, #340]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b356:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 800b35a:	4b54      	ldr	r3, [pc, #336]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b35c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800b360:	4b52      	ldr	r3, [pc, #328]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b362:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800b366:	4b51      	ldr	r3, [pc, #324]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b368:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800b36c:	4b4f      	ldr	r3, [pc, #316]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b36e:	4a4f      	ldr	r2, [pc, #316]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b370:	3364      	adds	r3, #100	; 0x64
 800b372:	32a4      	adds	r2, #164	; 0xa4
 800b374:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b378:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800b37c:	4b4b      	ldr	r3, [pc, #300]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b37e:	4a4b      	ldr	r2, [pc, #300]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b380:	336c      	adds	r3, #108	; 0x6c
 800b382:	32ac      	adds	r2, #172	; 0xac
 800b384:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b388:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800b38c:	4b47      	ldr	r3, [pc, #284]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b38e:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 800b392:	4b46      	ldr	r3, [pc, #280]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b394:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800b398:	4b44      	ldr	r3, [pc, #272]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b39a:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 800b39e:	4b43      	ldr	r3, [pc, #268]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b3a0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800b3a4:	4b41      	ldr	r3, [pc, #260]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b3a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b3aa:	4a40      	ldr	r2, [pc, #256]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b3ac:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800b3ae:	4b3f      	ldr	r3, [pc, #252]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b3b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b3b4:	4a3d      	ldr	r2, [pc, #244]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b3b6:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800b3b8:	4b3d      	ldr	r3, [pc, #244]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800b3c0:	4b3a      	ldr	r3, [pc, #232]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b3cc:	4b39      	ldr	r3, [pc, #228]	; (800b4b4 <ResetMacParameters+0x1b0>)
 800b3ce:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b3d0:	4b39      	ldr	r3, [pc, #228]	; (800b4b8 <ResetMacParameters+0x1b4>)
 800b3d2:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b3d4:	4b35      	ldr	r3, [pc, #212]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b3d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3da:	1d3a      	adds	r2, r7, #4
 800b3dc:	4611      	mov	r1, r2
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f004 f806 	bl	800f3f0 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800b3e4:	4b32      	ldr	r3, [pc, #200]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b3ec:	4b30      	ldr	r3, [pc, #192]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b3ee:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800b3f2:	4b2f      	ldr	r3, [pc, #188]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b3f4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b3f8:	4b2c      	ldr	r3, [pc, #176]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b3fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3fc:	4a2c      	ldr	r2, [pc, #176]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b3fe:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b402:	4b2a      	ldr	r3, [pc, #168]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b404:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b408:	4b29      	ldr	r3, [pc, #164]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b40a:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b40e:	4b27      	ldr	r3, [pc, #156]	; (800b4ac <ResetMacParameters+0x1a8>)
 800b410:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800b414:	4b26      	ldr	r3, [pc, #152]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b416:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b41a:	4b25      	ldr	r3, [pc, #148]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b422:	4b23      	ldr	r3, [pc, #140]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b424:	2201      	movs	r2, #1
 800b426:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b42a:	4a21      	ldr	r2, [pc, #132]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b42c:	4b20      	ldr	r3, [pc, #128]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b42e:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800b432:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800b436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b43a:	682b      	ldr	r3, [r5, #0]
 800b43c:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b43e:	4b1c      	ldr	r3, [pc, #112]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b440:	2201      	movs	r2, #1
 800b442:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b446:	4b1a      	ldr	r3, [pc, #104]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b448:	2202      	movs	r2, #2
 800b44a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800b44e:	2300      	movs	r3, #0
 800b450:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800b452:	2300      	movs	r3, #0
 800b454:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800b456:	4b16      	ldr	r3, [pc, #88]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b458:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d009      	beq.n	800b474 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800b460:	4b13      	ldr	r3, [pc, #76]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b462:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800b46a:	4b11      	ldr	r3, [pc, #68]	; (800b4b0 <ResetMacParameters+0x1ac>)
 800b46c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800b474:	4b11      	ldr	r3, [pc, #68]	; (800b4bc <ResetMacParameters+0x1b8>)
 800b476:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800b478:	4b11      	ldr	r3, [pc, #68]	; (800b4c0 <ResetMacParameters+0x1bc>)
 800b47a:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800b47c:	4b11      	ldr	r3, [pc, #68]	; (800b4c4 <ResetMacParameters+0x1c0>)
 800b47e:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800b480:	4b11      	ldr	r3, [pc, #68]	; (800b4c8 <ResetMacParameters+0x1c4>)
 800b482:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800b484:	4b11      	ldr	r3, [pc, #68]	; (800b4cc <ResetMacParameters+0x1c8>)
 800b486:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800b488:	4b11      	ldr	r3, [pc, #68]	; (800b4d0 <ResetMacParameters+0x1cc>)
 800b48a:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800b48c:	4b11      	ldr	r3, [pc, #68]	; (800b4d4 <ResetMacParameters+0x1d0>)
 800b48e:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800b490:	4b11      	ldr	r3, [pc, #68]	; (800b4d8 <ResetMacParameters+0x1d4>)
 800b492:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800b494:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800b498:	f107 0310 	add.w	r3, r7, #16
 800b49c:	4a0f      	ldr	r2, [pc, #60]	; (800b4dc <ResetMacParameters+0x1d8>)
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f001 ffec 	bl	800d47c <LoRaMacClassBInit>
}
 800b4a4:	bf00      	nop
 800b4a6:	3738      	adds	r7, #56	; 0x38
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bdb0      	pop	{r4, r5, r7, pc}
 800b4ac:	20000820 	.word	0x20000820
 800b4b0:	20000318 	.word	0x20000318
 800b4b4:	200009f8 	.word	0x200009f8
 800b4b8:	20000a9c 	.word	0x20000a9c
 800b4bc:	20000778 	.word	0x20000778
 800b4c0:	20000734 	.word	0x20000734
 800b4c4:	20000764 	.word	0x20000764
 800b4c8:	20000799 	.word	0x20000799
 800b4cc:	200008ec 	.word	0x200008ec
 800b4d0:	20000860 	.word	0x20000860
 800b4d4:	20000864 	.word	0x20000864
 800b4d8:	200008f0 	.word	0x200008f0
 800b4dc:	20000e18 	.word	0x20000e18

0800b4e0 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f00b f916 	bl	801671c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800b4f0:	4b0e      	ldr	r3, [pc, #56]	; (800b52c <RxWindowSetup+0x4c>)
 800b4f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f4:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800b4f6:	4b0e      	ldr	r3, [pc, #56]	; (800b530 <RxWindowSetup+0x50>)
 800b4f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4fc:	4a0d      	ldr	r2, [pc, #52]	; (800b534 <RxWindowSetup+0x54>)
 800b4fe:	6839      	ldr	r1, [r7, #0]
 800b500:	4618      	mov	r0, r3
 800b502:	f004 f805 	bl	800f510 <RegionRxConfig>
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00a      	beq.n	800b522 <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800b50c:	4b07      	ldr	r3, [pc, #28]	; (800b52c <RxWindowSetup+0x4c>)
 800b50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b510:	4a07      	ldr	r2, [pc, #28]	; (800b530 <RxWindowSetup+0x50>)
 800b512:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b514:	4610      	mov	r0, r2
 800b516:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	7cda      	ldrb	r2, [r3, #19]
 800b51c:	4b06      	ldr	r3, [pc, #24]	; (800b538 <RxWindowSetup+0x58>)
 800b51e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800b522:	bf00      	nop
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	080183e0 	.word	0x080183e0
 800b530:	20000820 	.word	0x20000820
 800b534:	20000738 	.word	0x20000738
 800b538:	20000318 	.word	0x20000318

0800b53c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800b53c:	b590      	push	{r4, r7, lr}
 800b53e:	b083      	sub	sp, #12
 800b540:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800b542:	4b18      	ldr	r3, [pc, #96]	; (800b5a4 <OpenContinuousRxCWindow+0x68>)
 800b544:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800b548:	4b16      	ldr	r3, [pc, #88]	; (800b5a4 <OpenContinuousRxCWindow+0x68>)
 800b54a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800b54e:	b259      	sxtb	r1, r3
 800b550:	4b14      	ldr	r3, [pc, #80]	; (800b5a4 <OpenContinuousRxCWindow+0x68>)
 800b552:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b556:	4b13      	ldr	r3, [pc, #76]	; (800b5a4 <OpenContinuousRxCWindow+0x68>)
 800b558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b55a:	4c13      	ldr	r4, [pc, #76]	; (800b5a8 <OpenContinuousRxCWindow+0x6c>)
 800b55c:	9400      	str	r4, [sp, #0]
 800b55e:	f003 ffb3 	bl	800f4c8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b562:	4b12      	ldr	r3, [pc, #72]	; (800b5ac <OpenContinuousRxCWindow+0x70>)
 800b564:	2202      	movs	r2, #2
 800b566:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b56a:	4b10      	ldr	r3, [pc, #64]	; (800b5ac <OpenContinuousRxCWindow+0x70>)
 800b56c:	2201      	movs	r2, #1
 800b56e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800b572:	4b0c      	ldr	r3, [pc, #48]	; (800b5a4 <OpenContinuousRxCWindow+0x68>)
 800b574:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b578:	4a0d      	ldr	r2, [pc, #52]	; (800b5b0 <OpenContinuousRxCWindow+0x74>)
 800b57a:	490b      	ldr	r1, [pc, #44]	; (800b5a8 <OpenContinuousRxCWindow+0x6c>)
 800b57c:	4618      	mov	r0, r3
 800b57e:	f003 ffc7 	bl	800f510 <RegionRxConfig>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d009      	beq.n	800b59c <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 800b588:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <OpenContinuousRxCWindow+0x78>)
 800b58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58c:	2000      	movs	r0, #0
 800b58e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800b590:	4b06      	ldr	r3, [pc, #24]	; (800b5ac <OpenContinuousRxCWindow+0x70>)
 800b592:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 800b596:	4b05      	ldr	r3, [pc, #20]	; (800b5ac <OpenContinuousRxCWindow+0x70>)
 800b598:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800b59c:	bf00      	nop
 800b59e:	3704      	adds	r7, #4
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd90      	pop	{r4, r7, pc}
 800b5a4:	20000820 	.word	0x20000820
 800b5a8:	200006f8 	.word	0x200006f8
 800b5ac:	20000318 	.word	0x20000318
 800b5b0:	20000738 	.word	0x20000738
 800b5b4:	080183e0 	.word	0x080183e0

0800b5b8 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b088      	sub	sp, #32
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	603b      	str	r3, [r7, #0]
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800b5c8:	4b82      	ldr	r3, [pc, #520]	; (800b7d4 <PrepareFrame+0x21c>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800b5ce:	4b81      	ldr	r3, [pc, #516]	; (800b7d4 <PrepareFrame+0x21c>)
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d101      	bne.n	800b5ec <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b5ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	6839      	ldr	r1, [r7, #0]
 800b5f2:	4879      	ldr	r0, [pc, #484]	; (800b7d8 <PrepareFrame+0x220>)
 800b5f4:	f007 fd77 	bl	80130e6 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800b5f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b5fa:	b2da      	uxtb	r2, r3
 800b5fc:	4b75      	ldr	r3, [pc, #468]	; (800b7d4 <PrepareFrame+0x21c>)
 800b5fe:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	781a      	ldrb	r2, [r3, #0]
 800b606:	4b73      	ldr	r3, [pc, #460]	; (800b7d4 <PrepareFrame+0x21c>)
 800b608:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800b612:	b2db      	uxtb	r3, r3
 800b614:	2b07      	cmp	r3, #7
 800b616:	f000 80b9 	beq.w	800b78c <PrepareFrame+0x1d4>
 800b61a:	2b07      	cmp	r3, #7
 800b61c:	f300 80d0 	bgt.w	800b7c0 <PrepareFrame+0x208>
 800b620:	2b02      	cmp	r3, #2
 800b622:	d006      	beq.n	800b632 <PrepareFrame+0x7a>
 800b624:	2b04      	cmp	r3, #4
 800b626:	f040 80cb 	bne.w	800b7c0 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800b62a:	4b6a      	ldr	r3, [pc, #424]	; (800b7d4 <PrepareFrame+0x21c>)
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b632:	4b68      	ldr	r3, [pc, #416]	; (800b7d4 <PrepareFrame+0x21c>)
 800b634:	2204      	movs	r2, #4
 800b636:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b63a:	4b66      	ldr	r3, [pc, #408]	; (800b7d4 <PrepareFrame+0x21c>)
 800b63c:	4a67      	ldr	r2, [pc, #412]	; (800b7dc <PrepareFrame+0x224>)
 800b63e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b642:	4b64      	ldr	r3, [pc, #400]	; (800b7d4 <PrepareFrame+0x21c>)
 800b644:	22ff      	movs	r2, #255	; 0xff
 800b646:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	781a      	ldrb	r2, [r3, #0]
 800b64e:	4b61      	ldr	r3, [pc, #388]	; (800b7d4 <PrepareFrame+0x21c>)
 800b650:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b654:	4a5f      	ldr	r2, [pc, #380]	; (800b7d4 <PrepareFrame+0x21c>)
 800b656:	79fb      	ldrb	r3, [r7, #7]
 800b658:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800b65c:	4b60      	ldr	r3, [pc, #384]	; (800b7e0 <PrepareFrame+0x228>)
 800b65e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800b662:	4a5c      	ldr	r2, [pc, #368]	; (800b7d4 <PrepareFrame+0x21c>)
 800b664:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	781a      	ldrb	r2, [r3, #0]
 800b66c:	4b59      	ldr	r3, [pc, #356]	; (800b7d4 <PrepareFrame+0x21c>)
 800b66e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b672:	4b58      	ldr	r3, [pc, #352]	; (800b7d4 <PrepareFrame+0x21c>)
 800b674:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 800b678:	4b56      	ldr	r3, [pc, #344]	; (800b7d4 <PrepareFrame+0x21c>)
 800b67a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800b67e:	4b55      	ldr	r3, [pc, #340]	; (800b7d4 <PrepareFrame+0x21c>)
 800b680:	4a55      	ldr	r2, [pc, #340]	; (800b7d8 <PrepareFrame+0x220>)
 800b682:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b686:	f107 0318 	add.w	r3, r7, #24
 800b68a:	4618      	mov	r0, r3
 800b68c:	f002 ffd8 	bl	800e640 <LoRaMacCryptoGetFCntUp>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d001      	beq.n	800b69a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b696:	2312      	movs	r3, #18
 800b698:	e098      	b.n	800b7cc <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	4b4d      	ldr	r3, [pc, #308]	; (800b7d4 <PrepareFrame+0x21c>)
 800b6a0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 800b6a4:	4b4b      	ldr	r3, [pc, #300]	; (800b7d4 <PrepareFrame+0x21c>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 800b6ac:	4b49      	ldr	r3, [pc, #292]	; (800b7d4 <PrepareFrame+0x21c>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	4a47      	ldr	r2, [pc, #284]	; (800b7d4 <PrepareFrame+0x21c>)
 800b6b8:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b6bc:	f107 0314 	add.w	r3, r7, #20
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f002 f99b 	bl	800d9fc <LoRaMacCommandsGetSizeSerializedCmds>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b6cc:	2313      	movs	r3, #19
 800b6ce:	e07d      	b.n	800b7cc <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d076      	beq.n	800b7c4 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800b6d6:	4b42      	ldr	r3, [pc, #264]	; (800b7e0 <PrepareFrame+0x228>)
 800b6d8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fe fdab 	bl	800a238 <GetMaxAppPayloadWithoutFOptsLength>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b6e6:	4b3b      	ldr	r3, [pc, #236]	; (800b7d4 <PrepareFrame+0x21c>)
 800b6e8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d01d      	beq.n	800b72c <PrepareFrame+0x174>
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	2b0f      	cmp	r3, #15
 800b6f4:	d81a      	bhi.n	800b72c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800b6f6:	f107 0314 	add.w	r3, r7, #20
 800b6fa:	4a3a      	ldr	r2, [pc, #232]	; (800b7e4 <PrepareFrame+0x22c>)
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	200f      	movs	r0, #15
 800b700:	f002 f992 	bl	800da28 <LoRaMacCommandsSerializeCmds>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b70a:	2313      	movs	r3, #19
 800b70c:	e05e      	b.n	800b7cc <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	f003 030f 	and.w	r3, r3, #15
 800b714:	b2d9      	uxtb	r1, r3
 800b716:	68ba      	ldr	r2, [r7, #8]
 800b718:	7813      	ldrb	r3, [r2, #0]
 800b71a:	f361 0303 	bfi	r3, r1, #0, #4
 800b71e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	781a      	ldrb	r2, [r3, #0]
 800b724:	4b2b      	ldr	r3, [pc, #172]	; (800b7d4 <PrepareFrame+0x21c>)
 800b726:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800b72a:	e04b      	b.n	800b7c4 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b72c:	4b29      	ldr	r3, [pc, #164]	; (800b7d4 <PrepareFrame+0x21c>)
 800b72e:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800b732:	2b00      	cmp	r3, #0
 800b734:	d010      	beq.n	800b758 <PrepareFrame+0x1a0>
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	2b0f      	cmp	r3, #15
 800b73a:	d90d      	bls.n	800b758 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b73c:	7ffb      	ldrb	r3, [r7, #31]
 800b73e:	f107 0114 	add.w	r1, r7, #20
 800b742:	4a29      	ldr	r2, [pc, #164]	; (800b7e8 <PrepareFrame+0x230>)
 800b744:	4618      	mov	r0, r3
 800b746:	f002 f96f 	bl	800da28 <LoRaMacCommandsSerializeCmds>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d001      	beq.n	800b754 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b750:	2313      	movs	r3, #19
 800b752:	e03b      	b.n	800b7cc <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800b754:	230a      	movs	r3, #10
 800b756:	e039      	b.n	800b7cc <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b758:	7ffb      	ldrb	r3, [r7, #31]
 800b75a:	f107 0114 	add.w	r1, r7, #20
 800b75e:	4a22      	ldr	r2, [pc, #136]	; (800b7e8 <PrepareFrame+0x230>)
 800b760:	4618      	mov	r0, r3
 800b762:	f002 f961 	bl	800da28 <LoRaMacCommandsSerializeCmds>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b76c:	2313      	movs	r3, #19
 800b76e:	e02d      	b.n	800b7cc <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800b770:	4b18      	ldr	r3, [pc, #96]	; (800b7d4 <PrepareFrame+0x21c>)
 800b772:	2200      	movs	r2, #0
 800b774:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800b778:	4b16      	ldr	r3, [pc, #88]	; (800b7d4 <PrepareFrame+0x21c>)
 800b77a:	4a1b      	ldr	r2, [pc, #108]	; (800b7e8 <PrepareFrame+0x230>)
 800b77c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	b2da      	uxtb	r2, r3
 800b784:	4b13      	ldr	r3, [pc, #76]	; (800b7d4 <PrepareFrame+0x21c>)
 800b786:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 800b78a:	e01b      	b.n	800b7c4 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d01a      	beq.n	800b7c8 <PrepareFrame+0x210>
 800b792:	4b10      	ldr	r3, [pc, #64]	; (800b7d4 <PrepareFrame+0x21c>)
 800b794:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d015      	beq.n	800b7c8 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800b79c:	4813      	ldr	r0, [pc, #76]	; (800b7ec <PrepareFrame+0x234>)
 800b79e:	4b0d      	ldr	r3, [pc, #52]	; (800b7d4 <PrepareFrame+0x21c>)
 800b7a0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	6839      	ldr	r1, [r7, #0]
 800b7aa:	f007 fc9c 	bl	80130e6 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800b7ae:	4b09      	ldr	r3, [pc, #36]	; (800b7d4 <PrepareFrame+0x21c>)
 800b7b0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	4b06      	ldr	r3, [pc, #24]	; (800b7d4 <PrepareFrame+0x21c>)
 800b7bc:	801a      	strh	r2, [r3, #0]
            }
            break;
 800b7be:	e003      	b.n	800b7c8 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	e003      	b.n	800b7cc <PrepareFrame+0x214>
            break;
 800b7c4:	bf00      	nop
 800b7c6:	e000      	b.n	800b7ca <PrepareFrame+0x212>
            break;
 800b7c8:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3720      	adds	r7, #32
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	20000318 	.word	0x20000318
 800b7d8:	20000450 	.word	0x20000450
 800b7dc:	2000031a 	.word	0x2000031a
 800b7e0:	20000820 	.word	0x20000820
 800b7e4:	20000430 	.word	0x20000430
 800b7e8:	200007a0 	.word	0x200007a0
 800b7ec:	2000031b 	.word	0x2000031b

0800b7f0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b08a      	sub	sp, #40	; 0x28
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b7fa:	2303      	movs	r3, #3
 800b7fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800b800:	2300      	movs	r3, #0
 800b802:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800b804:	79fb      	ldrb	r3, [r7, #7]
 800b806:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b808:	4b47      	ldr	r3, [pc, #284]	; (800b928 <SendFrameOnChannel+0x138>)
 800b80a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800b80e:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b810:	4b45      	ldr	r3, [pc, #276]	; (800b928 <SendFrameOnChannel+0x138>)
 800b812:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800b816:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800b818:	4b43      	ldr	r3, [pc, #268]	; (800b928 <SendFrameOnChannel+0x138>)
 800b81a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b81c:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800b81e:	4b42      	ldr	r3, [pc, #264]	; (800b928 <SendFrameOnChannel+0x138>)
 800b820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b822:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800b824:	4b41      	ldr	r3, [pc, #260]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b826:	881b      	ldrh	r3, [r3, #0]
 800b828:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800b82a:	4b3f      	ldr	r3, [pc, #252]	; (800b928 <SendFrameOnChannel+0x138>)
 800b82c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b830:	f107 020f 	add.w	r2, r7, #15
 800b834:	f107 0110 	add.w	r1, r7, #16
 800b838:	4b3d      	ldr	r3, [pc, #244]	; (800b930 <SendFrameOnChannel+0x140>)
 800b83a:	f003 fe87 	bl	800f54c <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b83e:	4b3b      	ldr	r3, [pc, #236]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b840:	2201      	movs	r2, #1
 800b842:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b846:	4b38      	ldr	r3, [pc, #224]	; (800b928 <SendFrameOnChannel+0x138>)
 800b848:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800b84c:	b2da      	uxtb	r2, r3
 800b84e:	4b37      	ldr	r3, [pc, #220]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b850:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 800b854:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800b858:	4b34      	ldr	r3, [pc, #208]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b85a:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 800b85e:	79fb      	ldrb	r3, [r7, #7]
 800b860:	4a32      	ldr	r2, [pc, #200]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b862:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b866:	4b31      	ldr	r3, [pc, #196]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b868:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800b86c:	4a2f      	ldr	r2, [pc, #188]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b86e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b872:	4b2e      	ldr	r3, [pc, #184]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b874:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800b878:	4a2c      	ldr	r2, [pc, #176]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b87a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800b87e:	f001 fe69 	bl	800d554 <LoRaMacClassBIsBeaconModeActive>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00b      	beq.n	800b8a0 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800b888:	4b28      	ldr	r3, [pc, #160]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b88a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800b88e:	4618      	mov	r0, r3
 800b890:	f001 fecb 	bl	800d62a <LoRaMacClassBIsUplinkCollision>
 800b894:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800b896:	6a3b      	ldr	r3, [r7, #32]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800b89c:	2310      	movs	r3, #16
 800b89e:	e03e      	b.n	800b91e <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b8a0:	4b21      	ldr	r3, [pc, #132]	; (800b928 <SendFrameOnChannel+0x138>)
 800b8a2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d101      	bne.n	800b8ae <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800b8aa:	f001 fec8 	bl	800d63e <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800b8ae:	f001 fe62 	bl	800d576 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800b8b2:	4b1d      	ldr	r3, [pc, #116]	; (800b928 <SendFrameOnChannel+0x138>)
 800b8b4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	4a1c      	ldr	r2, [pc, #112]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b8bc:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7ff fc88 	bl	800b1d8 <SecureFrame>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 800b8ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d002      	beq.n	800b8dc <SendFrameOnChannel+0xec>
    {
        return status;
 800b8d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8da:	e020      	b.n	800b91e <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b8dc:	4b13      	ldr	r3, [pc, #76]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b8de:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b8e2:	f043 0302 	orr.w	r3, r3, #2
 800b8e6:	4a11      	ldr	r2, [pc, #68]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b8e8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800b8ec:	4b0f      	ldr	r3, [pc, #60]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b8ee:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800b8f2:	f083 0301 	eor.w	r3, r3, #1
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d007      	beq.n	800b90c <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 800b8fc:	4b0b      	ldr	r3, [pc, #44]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b8fe:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800b902:	3301      	adds	r3, #1
 800b904:	b2da      	uxtb	r2, r3
 800b906:	4b09      	ldr	r3, [pc, #36]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b908:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800b90c:	4b09      	ldr	r3, [pc, #36]	; (800b934 <SendFrameOnChannel+0x144>)
 800b90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b910:	4a06      	ldr	r2, [pc, #24]	; (800b92c <SendFrameOnChannel+0x13c>)
 800b912:	8812      	ldrh	r2, [r2, #0]
 800b914:	b2d2      	uxtb	r2, r2
 800b916:	4611      	mov	r1, r2
 800b918:	4807      	ldr	r0, [pc, #28]	; (800b938 <SendFrameOnChannel+0x148>)
 800b91a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3728      	adds	r7, #40	; 0x28
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	20000820 	.word	0x20000820
 800b92c:	20000318 	.word	0x20000318
 800b930:	20000730 	.word	0x20000730
 800b934:	080183e0 	.word	0x080183e0
 800b938:	2000031a 	.word	0x2000031a

0800b93c <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b086      	sub	sp, #24
 800b940:	af00      	add	r7, sp, #0
 800b942:	4603      	mov	r3, r0
 800b944:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800b946:	4b15      	ldr	r3, [pc, #84]	; (800b99c <SetTxContinuousWave+0x60>)
 800b948:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800b94c:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b94e:	4b14      	ldr	r3, [pc, #80]	; (800b9a0 <SetTxContinuousWave+0x64>)
 800b950:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800b954:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b956:	4b12      	ldr	r3, [pc, #72]	; (800b9a0 <SetTxContinuousWave+0x64>)
 800b958:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800b95c:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800b95e:	4b10      	ldr	r3, [pc, #64]	; (800b9a0 <SetTxContinuousWave+0x64>)
 800b960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b962:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800b964:	4b0e      	ldr	r3, [pc, #56]	; (800b9a0 <SetTxContinuousWave+0x64>)
 800b966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b968:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 800b96a:	88fb      	ldrh	r3, [r7, #6]
 800b96c:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800b96e:	4b0c      	ldr	r3, [pc, #48]	; (800b9a0 <SetTxContinuousWave+0x64>)
 800b970:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b974:	f107 0208 	add.w	r2, r7, #8
 800b978:	4611      	mov	r1, r2
 800b97a:	4618      	mov	r0, r3
 800b97c:	f003 fee3 	bl	800f746 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b980:	4b06      	ldr	r3, [pc, #24]	; (800b99c <SetTxContinuousWave+0x60>)
 800b982:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b986:	f043 0302 	orr.w	r3, r3, #2
 800b98a:	4a04      	ldr	r2, [pc, #16]	; (800b99c <SetTxContinuousWave+0x60>)
 800b98c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3718      	adds	r7, #24
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	20000318 	.word	0x20000318
 800b9a0:	20000820 	.word	0x20000820

0800b9a4 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	6039      	str	r1, [r7, #0]
 800b9ae:	80fb      	strh	r3, [r7, #6]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800b9b4:	4b09      	ldr	r3, [pc, #36]	; (800b9dc <SetTxContinuousWave1+0x38>)
 800b9b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9b8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800b9bc:	88fa      	ldrh	r2, [r7, #6]
 800b9be:	6838      	ldr	r0, [r7, #0]
 800b9c0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b9c2:	4b07      	ldr	r3, [pc, #28]	; (800b9e0 <SetTxContinuousWave1+0x3c>)
 800b9c4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b9c8:	f043 0302 	orr.w	r3, r3, #2
 800b9cc:	4a04      	ldr	r2, [pc, #16]	; (800b9e0 <SetTxContinuousWave1+0x3c>)
 800b9ce:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	080183e0 	.word	0x080183e0
 800b9e0:	20000318 	.word	0x20000318

0800b9e4 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	af00      	add	r7, sp, #0
    return &Nvm;
 800b9e8:	4b02      	ldr	r3, [pc, #8]	; (800b9f4 <GetNvmData+0x10>)
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bc80      	pop	{r7}
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	20000820 	.word	0x20000820

0800b9f8 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800ba00:	2300      	movs	r3, #0
 800ba02:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	e09a      	b.n	800bb44 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800ba0e:	4b4f      	ldr	r3, [pc, #316]	; (800bb4c <RestoreNvmData+0x154>)
 800ba10:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d001      	beq.n	800ba1c <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e093      	b.n	800bb44 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2124      	movs	r1, #36	; 0x24
 800ba20:	4618      	mov	r0, r3
 800ba22:	f007 fbb5 	bl	8013190 <Crc32>
 800ba26:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d105      	bne.n	800ba3e <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2228      	movs	r2, #40	; 0x28
 800ba36:	4619      	mov	r1, r3
 800ba38:	4845      	ldr	r0, [pc, #276]	; (800bb50 <RestoreNvmData+0x158>)
 800ba3a:	f007 fb54 	bl	80130e6 <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	3328      	adds	r3, #40	; 0x28
 800ba42:	2114      	movs	r1, #20
 800ba44:	4618      	mov	r0, r3
 800ba46:	f007 fba3 	bl	8013190 <Crc32>
 800ba4a:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d106      	bne.n	800ba64 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	3328      	adds	r3, #40	; 0x28
 800ba5a:	2218      	movs	r2, #24
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	483d      	ldr	r0, [pc, #244]	; (800bb54 <RestoreNvmData+0x15c>)
 800ba60:	f007 fb41 	bl	80130e6 <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	3340      	adds	r3, #64	; 0x40
 800ba68:	21d4      	movs	r1, #212	; 0xd4
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f007 fb90 	bl	8013190 <Crc32>
 800ba70:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d11f      	bne.n	800babe <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	3340      	adds	r3, #64	; 0x40
 800ba82:	22d8      	movs	r2, #216	; 0xd8
 800ba84:	4619      	mov	r1, r3
 800ba86:	4834      	ldr	r0, [pc, #208]	; (800bb58 <RestoreNvmData+0x160>)
 800ba88:	f007 fb2d 	bl	80130e6 <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ba8c:	4b2f      	ldr	r3, [pc, #188]	; (800bb4c <RestoreNvmData+0x154>)
 800ba8e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ba92:	4b2e      	ldr	r3, [pc, #184]	; (800bb4c <RestoreNvmData+0x154>)
 800ba94:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ba98:	4b2d      	ldr	r3, [pc, #180]	; (800bb50 <RestoreNvmData+0x158>)
 800ba9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba9c:	4a2b      	ldr	r2, [pc, #172]	; (800bb4c <RestoreNvmData+0x154>)
 800ba9e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800baa2:	4b2b      	ldr	r3, [pc, #172]	; (800bb50 <RestoreNvmData+0x158>)
 800baa4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800baa8:	4b28      	ldr	r3, [pc, #160]	; (800bb4c <RestoreNvmData+0x154>)
 800baaa:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 800baae:	4b27      	ldr	r3, [pc, #156]	; (800bb4c <RestoreNvmData+0x154>)
 800bab0:	2201      	movs	r2, #1
 800bab2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800bab6:	4b25      	ldr	r3, [pc, #148]	; (800bb4c <RestoreNvmData+0x154>)
 800bab8:	2202      	movs	r2, #2
 800baba:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800bac4:	21bc      	movs	r1, #188	; 0xbc
 800bac6:	4618      	mov	r0, r3
 800bac8:	f007 fb62 	bl	8013190 <Crc32>
 800bacc:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d107      	bne.n	800baea <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800bae0:	22c0      	movs	r2, #192	; 0xc0
 800bae2:	4619      	mov	r1, r3
 800bae4:	481d      	ldr	r0, [pc, #116]	; (800bb5c <RestoreNvmData+0x164>)
 800bae6:	f007 fafe 	bl	80130e6 <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800baf0:	21a0      	movs	r1, #160	; 0xa0
 800baf2:	4618      	mov	r0, r3
 800baf4:	f007 fb4c 	bl	8013190 <Crc32>
 800baf8:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d107      	bne.n	800bb16 <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800bb0c:	22a4      	movs	r2, #164	; 0xa4
 800bb0e:	4619      	mov	r1, r3
 800bb10:	4813      	ldr	r0, [pc, #76]	; (800bb60 <RestoreNvmData+0x168>)
 800bb12:	f007 fae8 	bl	80130e6 <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 800bb1c:	2114      	movs	r1, #20
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f007 fb36 	bl	8013190 <Crc32>
 800bb24:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d107      	bne.n	800bb42 <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 800bb38:	2218      	movs	r2, #24
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	4809      	ldr	r0, [pc, #36]	; (800bb64 <RestoreNvmData+0x16c>)
 800bb3e:	f007 fad2 	bl	80130e6 <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20000318 	.word	0x20000318
 800bb50:	20000820 	.word	0x20000820
 800bb54:	20000848 	.word	0x20000848
 800bb58:	20000860 	.word	0x20000860
 800bb5c:	20000938 	.word	0x20000938
 800bb60:	200009f8 	.word	0x200009f8
 800bb64:	20000e18 	.word	0x20000e18

0800bb68 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <DetermineFrameType+0x16>
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d101      	bne.n	800bb82 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bb7e:	2303      	movs	r3, #3
 800bb80:	e03b      	b.n	800bbfa <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	7b1b      	ldrb	r3, [r3, #12]
 800bb86:	f003 030f 	and.w	r3, r3, #15
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d008      	beq.n	800bba2 <DetermineFrameType+0x3a>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d003      	beq.n	800bba2 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	701a      	strb	r2, [r3, #0]
 800bba0:	e02a      	b.n	800bbf8 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d103      	bne.n	800bbb4 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	701a      	strb	r2, [r3, #0]
 800bbb2:	e021      	b.n	800bbf8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	7b1b      	ldrb	r3, [r3, #12]
 800bbb8:	f003 030f 	and.w	r3, r3, #15
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d108      	bne.n	800bbd4 <DetermineFrameType+0x6c>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d103      	bne.n	800bbd4 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	2202      	movs	r2, #2
 800bbd0:	701a      	strb	r2, [r3, #0]
 800bbd2:	e011      	b.n	800bbf8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	7b1b      	ldrb	r3, [r3, #12]
 800bbd8:	f003 030f 	and.w	r3, r3, #15
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d108      	bne.n	800bbf4 <DetermineFrameType+0x8c>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d003      	beq.n	800bbf4 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	2203      	movs	r2, #3
 800bbf0:	701a      	strb	r2, [r3, #0]
 800bbf2:	e001      	b.n	800bbf8 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800bbf4:	2317      	movs	r3, #23
 800bbf6:	e000      	b.n	800bbfa <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	370c      	adds	r7, #12
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bc80      	pop	{r7}
 800bc02:	4770      	bx	lr

0800bc04 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800bc04:	b480      	push	{r7}
 800bc06:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800bc08:	4b12      	ldr	r3, [pc, #72]	; (800bc54 <CheckRetransUnconfirmedUplink+0x50>)
 800bc0a:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800bc0e:	4b12      	ldr	r3, [pc, #72]	; (800bc58 <CheckRetransUnconfirmedUplink+0x54>)
 800bc10:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d301      	bcc.n	800bc1c <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e016      	b.n	800bc4a <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800bc1c:	4b0d      	ldr	r3, [pc, #52]	; (800bc54 <CheckRetransUnconfirmedUplink+0x50>)
 800bc1e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800bc22:	f003 0302 	and.w	r3, r3, #2
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00d      	beq.n	800bc48 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800bc2c:	4b0a      	ldr	r3, [pc, #40]	; (800bc58 <CheckRetransUnconfirmedUplink+0x54>)
 800bc2e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e007      	b.n	800bc4a <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800bc3a:	4b06      	ldr	r3, [pc, #24]	; (800bc54 <CheckRetransUnconfirmedUplink+0x50>)
 800bc3c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d101      	bne.n	800bc48 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 800bc44:	2301      	movs	r3, #1
 800bc46:	e000      	b.n	800bc4a <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bc80      	pop	{r7}
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	20000318 	.word	0x20000318
 800bc58:	20000820 	.word	0x20000820

0800bc5c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800bc60:	4b0e      	ldr	r3, [pc, #56]	; (800bc9c <CheckRetransConfirmedUplink+0x40>)
 800bc62:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 800bc66:	4b0d      	ldr	r3, [pc, #52]	; (800bc9c <CheckRetransConfirmedUplink+0x40>)
 800bc68:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d301      	bcc.n	800bc74 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 800bc70:	2301      	movs	r3, #1
 800bc72:	e00f      	b.n	800bc94 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800bc74:	4b09      	ldr	r3, [pc, #36]	; (800bc9c <CheckRetransConfirmedUplink+0x40>)
 800bc76:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800bc7a:	f003 0302 	and.w	r3, r3, #2
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d006      	beq.n	800bc92 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800bc84:	4b05      	ldr	r3, [pc, #20]	; (800bc9c <CheckRetransConfirmedUplink+0x40>)
 800bc86:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e000      	b.n	800bc94 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bc80      	pop	{r7}
 800bc9a:	4770      	bx	lr
 800bc9c:	20000318 	.word	0x20000318

0800bca0 <StopRetransmission>:

static bool StopRetransmission( void )
{
 800bca0:	b480      	push	{r7}
 800bca2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800bca4:	4b1a      	ldr	r3, [pc, #104]	; (800bd10 <StopRetransmission+0x70>)
 800bca6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800bcaa:	f003 0302 	and.w	r3, r3, #2
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d009      	beq.n	800bcc8 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800bcb4:	4b16      	ldr	r3, [pc, #88]	; (800bd10 <StopRetransmission+0x70>)
 800bcb6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00e      	beq.n	800bcdc <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 800bcbe:	4b14      	ldr	r3, [pc, #80]	; (800bd10 <StopRetransmission+0x70>)
 800bcc0:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d009      	beq.n	800bcdc <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800bcc8:	4b12      	ldr	r3, [pc, #72]	; (800bd14 <StopRetransmission+0x74>)
 800bcca:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d004      	beq.n	800bcdc <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 800bcd2:	4b10      	ldr	r3, [pc, #64]	; (800bd14 <StopRetransmission+0x74>)
 800bcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	4a0e      	ldr	r2, [pc, #56]	; (800bd14 <StopRetransmission+0x74>)
 800bcda:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800bcdc:	4b0c      	ldr	r3, [pc, #48]	; (800bd10 <StopRetransmission+0x70>)
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 800bce4:	4b0a      	ldr	r3, [pc, #40]	; (800bd10 <StopRetransmission+0x70>)
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 800bcec:	4b08      	ldr	r3, [pc, #32]	; (800bd10 <StopRetransmission+0x70>)
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800bcf4:	4b06      	ldr	r3, [pc, #24]	; (800bd10 <StopRetransmission+0x70>)
 800bcf6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800bcfa:	f023 0302 	bic.w	r3, r3, #2
 800bcfe:	4a04      	ldr	r2, [pc, #16]	; (800bd10 <StopRetransmission+0x70>)
 800bd00:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 800bd04:	2301      	movs	r3, #1
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bc80      	pop	{r7}
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	20000318 	.word	0x20000318
 800bd14:	20000820 	.word	0x20000820

0800bd18 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800bd22:	4b0b      	ldr	r3, [pc, #44]	; (800bd50 <CallNvmDataChangeCallback+0x38>)
 800bd24:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00c      	beq.n	800bd46 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800bd2c:	4b08      	ldr	r3, [pc, #32]	; (800bd50 <CallNvmDataChangeCallback+0x38>)
 800bd2e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800bd32:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d006      	beq.n	800bd46 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800bd38:	4b05      	ldr	r3, [pc, #20]	; (800bd50 <CallNvmDataChangeCallback+0x38>)
 800bd3a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	88fa      	ldrh	r2, [r7, #6]
 800bd42:	4610      	mov	r0, r2
 800bd44:	4798      	blx	r3
    }
}
 800bd46:	bf00      	nop
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	20000318 	.word	0x20000318

0800bd54 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800bd5a:	4b1b      	ldr	r3, [pc, #108]	; (800bdc8 <AckTimeoutRetriesProcess+0x74>)
 800bd5c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800bd60:	4b19      	ldr	r3, [pc, #100]	; (800bdc8 <AckTimeoutRetriesProcess+0x74>)
 800bd62:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d229      	bcs.n	800bdbe <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 800bd6a:	4b17      	ldr	r3, [pc, #92]	; (800bdc8 <AckTimeoutRetriesProcess+0x74>)
 800bd6c:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800bd70:	3301      	adds	r3, #1
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	4b14      	ldr	r3, [pc, #80]	; (800bdc8 <AckTimeoutRetriesProcess+0x74>)
 800bd76:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800bd7a:	4b13      	ldr	r3, [pc, #76]	; (800bdc8 <AckTimeoutRetriesProcess+0x74>)
 800bd7c:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800bd80:	f003 0301 	and.w	r3, r3, #1
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d019      	beq.n	800bdbe <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800bd8a:	2322      	movs	r3, #34	; 0x22
 800bd8c:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bd8e:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <AckTimeoutRetriesProcess+0x78>)
 800bd90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bd94:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800bd96:	4b0d      	ldr	r3, [pc, #52]	; (800bdcc <AckTimeoutRetriesProcess+0x78>)
 800bd98:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800bd9c:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bd9e:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <AckTimeoutRetriesProcess+0x78>)
 800bda0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bda4:	f107 0208 	add.w	r2, r7, #8
 800bda8:	4611      	mov	r1, r2
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f003 fae7 	bl	800f37e <RegionGetPhyParam>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	b25a      	sxtb	r2, r3
 800bdb8:	4b04      	ldr	r3, [pc, #16]	; (800bdcc <AckTimeoutRetriesProcess+0x78>)
 800bdba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 800bdbe:	bf00      	nop
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20000318 	.word	0x20000318
 800bdcc:	20000820 	.word	0x20000820

0800bdd0 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800bdd6:	4b14      	ldr	r3, [pc, #80]	; (800be28 <AckTimeoutRetriesFinalize+0x58>)
 800bdd8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800bddc:	f083 0301 	eor.w	r3, r3, #1
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d015      	beq.n	800be12 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800bde6:	2302      	movs	r3, #2
 800bde8:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800bdea:	4b10      	ldr	r3, [pc, #64]	; (800be2c <AckTimeoutRetriesFinalize+0x5c>)
 800bdec:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800bdee:	4b10      	ldr	r3, [pc, #64]	; (800be30 <AckTimeoutRetriesFinalize+0x60>)
 800bdf0:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800bdf2:	4b10      	ldr	r3, [pc, #64]	; (800be34 <AckTimeoutRetriesFinalize+0x64>)
 800bdf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bdf8:	1d3a      	adds	r2, r7, #4
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f003 faf7 	bl	800f3f0 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 800be02:	4b09      	ldr	r3, [pc, #36]	; (800be28 <AckTimeoutRetriesFinalize+0x58>)
 800be04:	2200      	movs	r2, #0
 800be06:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 800be0a:	4b07      	ldr	r3, [pc, #28]	; (800be28 <AckTimeoutRetriesFinalize+0x58>)
 800be0c:	2200      	movs	r2, #0
 800be0e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800be12:	4b05      	ldr	r3, [pc, #20]	; (800be28 <AckTimeoutRetriesFinalize+0x58>)
 800be14:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800be18:	4b03      	ldr	r3, [pc, #12]	; (800be28 <AckTimeoutRetriesFinalize+0x58>)
 800be1a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 800be1e:	bf00      	nop
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	20000318 	.word	0x20000318
 800be2c:	200009f8 	.word	0x200009f8
 800be30:	20000a9c 	.word	0x20000a9c
 800be34:	20000820 	.word	0x20000820

0800be38 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 800be38:	b480      	push	{r7}
 800be3a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800be3c:	4b0b      	ldr	r3, [pc, #44]	; (800be6c <IsRequestPending+0x34>)
 800be3e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800be42:	f003 0304 	and.w	r3, r3, #4
 800be46:	b2db      	uxtb	r3, r3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d107      	bne.n	800be5c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800be4c:	4b07      	ldr	r3, [pc, #28]	; (800be6c <IsRequestPending+0x34>)
 800be4e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800be52:	f003 0301 	and.w	r3, r3, #1
 800be56:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d001      	beq.n	800be60 <IsRequestPending+0x28>
    {
        return 1;
 800be5c:	2301      	movs	r3, #1
 800be5e:	e000      	b.n	800be62 <IsRequestPending+0x2a>
    }
    return 0;
 800be60:	2300      	movs	r3, #0
}
 800be62:	4618      	mov	r0, r3
 800be64:	46bd      	mov	sp, r7
 800be66:	bc80      	pop	{r7}
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	20000318 	.word	0x20000318

0800be70 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800be70:	b590      	push	{r4, r7, lr}
 800be72:	b08f      	sub	sp, #60	; 0x3c
 800be74:	af02      	add	r7, sp, #8
 800be76:	6178      	str	r0, [r7, #20]
 800be78:	6139      	str	r1, [r7, #16]
 800be7a:	4613      	mov	r3, r2
 800be7c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <LoRaMacInitialization+0x1a>
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d101      	bne.n	800be8e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800be8a:	2303      	movs	r3, #3
 800be8c:	e275      	b.n	800c37a <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00b      	beq.n	800beae <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d007      	beq.n	800beae <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d003      	beq.n	800beae <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800beae:	2303      	movs	r3, #3
 800beb0:	e263      	b.n	800c37a <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800beb2:	7bfb      	ldrb	r3, [r7, #15]
 800beb4:	4618      	mov	r0, r3
 800beb6:	f003 fa4d 	bl	800f354 <RegionIsActive>
 800beba:	4603      	mov	r3, r0
 800bebc:	f083 0301 	eor.w	r3, r3, #1
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800bec6:	2309      	movs	r3, #9
 800bec8:	e257      	b.n	800c37a <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800beca:	6978      	ldr	r0, [r7, #20]
 800becc:	f001 fef6 	bl	800dcbc <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800bed0:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 800bed4:	2100      	movs	r1, #0
 800bed6:	48c7      	ldr	r0, [pc, #796]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bed8:	f007 f940 	bl	801315c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800bedc:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 800bee0:	2100      	movs	r1, #0
 800bee2:	48c5      	ldr	r0, [pc, #788]	; (800c1f8 <LoRaMacInitialization+0x388>)
 800bee4:	f007 f93a 	bl	801315c <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800bee8:	4bc3      	ldr	r3, [pc, #780]	; (800c1f8 <LoRaMacInitialization+0x388>)
 800beea:	2201      	movs	r2, #1
 800beec:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 800bef0:	4bc1      	ldr	r3, [pc, #772]	; (800c1f8 <LoRaMacInitialization+0x388>)
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 800bef8:	4abe      	ldr	r2, [pc, #760]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800befa:	7bfb      	ldrb	r3, [r7, #15]
 800befc:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800bf00:	4bbc      	ldr	r3, [pc, #752]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800bf08:	4bba      	ldr	r3, [pc, #744]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800bf10:	4bb8      	ldr	r3, [pc, #736]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bf12:	4aba      	ldr	r2, [pc, #744]	; (800c1fc <LoRaMacInitialization+0x38c>)
 800bf14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800bf18:	230f      	movs	r3, #15
 800bf1a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf1e:	4bb5      	ldr	r3, [pc, #724]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bf20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf24:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bf28:	4611      	mov	r1, r2
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f003 fa27 	bl	800f37e <RegionGetPhyParam>
 800bf30:	4603      	mov	r3, r0
 800bf32:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	bf14      	ite	ne
 800bf3a:	2301      	movne	r3, #1
 800bf3c:	2300      	moveq	r3, #0
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	4bac      	ldr	r3, [pc, #688]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bf42:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800bf46:	230a      	movs	r3, #10
 800bf48:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf4c:	4ba9      	ldr	r3, [pc, #676]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bf4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bf56:	4611      	mov	r1, r2
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f003 fa10 	bl	800f37e <RegionGetPhyParam>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	b25a      	sxtb	r2, r3
 800bf66:	4ba3      	ldr	r3, [pc, #652]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bf68:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 800bf6c:	2306      	movs	r3, #6
 800bf6e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf72:	4ba0      	ldr	r3, [pc, #640]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bf74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f003 f9fd 	bl	800f37e <RegionGetPhyParam>
 800bf84:	4603      	mov	r3, r0
 800bf86:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8a:	b25a      	sxtb	r2, r3
 800bf8c:	4b99      	ldr	r3, [pc, #612]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bf8e:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800bf92:	2310      	movs	r3, #16
 800bf94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf98:	4b96      	ldr	r3, [pc, #600]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bf9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bfa2:	4611      	mov	r1, r2
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f003 f9ea 	bl	800f37e <RegionGetPhyParam>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb0:	4a90      	ldr	r2, [pc, #576]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bfb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800bfb6:	2311      	movs	r3, #17
 800bfb8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bfbc:	4b8d      	ldr	r3, [pc, #564]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bfbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bfc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f003 f9d8 	bl	800f37e <RegionGetPhyParam>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd4:	4a87      	ldr	r2, [pc, #540]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bfd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800bfda:	2312      	movs	r3, #18
 800bfdc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bfe0:	4b84      	ldr	r3, [pc, #528]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bfe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bfe6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bfea:	4611      	mov	r1, r2
 800bfec:	4618      	mov	r0, r3
 800bfee:	f003 f9c6 	bl	800f37e <RegionGetPhyParam>
 800bff2:	4603      	mov	r3, r0
 800bff4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800bff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff8:	4a7e      	ldr	r2, [pc, #504]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800bffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800bffe:	2313      	movs	r3, #19
 800c000:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c004:	4b7b      	ldr	r3, [pc, #492]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c00a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c00e:	4611      	mov	r1, r2
 800c010:	4618      	mov	r0, r3
 800c012:	f003 f9b4 	bl	800f37e <RegionGetPhyParam>
 800c016:	4603      	mov	r3, r0
 800c018:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800c01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01c:	4a75      	ldr	r2, [pc, #468]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c01e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800c022:	2314      	movs	r3, #20
 800c024:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c028:	4b72      	ldr	r3, [pc, #456]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c02a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c02e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c032:	4611      	mov	r1, r2
 800c034:	4618      	mov	r0, r3
 800c036:	f003 f9a2 	bl	800f37e <RegionGetPhyParam>
 800c03a:	4603      	mov	r3, r0
 800c03c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800c03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c040:	4a6c      	ldr	r2, [pc, #432]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c042:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800c046:	2317      	movs	r3, #23
 800c048:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c04c:	4b69      	ldr	r3, [pc, #420]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c04e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c052:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c056:	4611      	mov	r1, r2
 800c058:	4618      	mov	r0, r3
 800c05a:	f003 f990 	bl	800f37e <RegionGetPhyParam>
 800c05e:	4603      	mov	r3, r0
 800c060:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800c062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c064:	b2da      	uxtb	r2, r3
 800c066:	4b63      	ldr	r3, [pc, #396]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c068:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800c06c:	2318      	movs	r3, #24
 800c06e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c072:	4b60      	ldr	r3, [pc, #384]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c078:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c07c:	4611      	mov	r1, r2
 800c07e:	4618      	mov	r0, r3
 800c080:	f003 f97d 	bl	800f37e <RegionGetPhyParam>
 800c084:	4603      	mov	r3, r0
 800c086:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800c088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08a:	4a5a      	ldr	r2, [pc, #360]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c08c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c092:	4a58      	ldr	r2, [pc, #352]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c094:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800c098:	2319      	movs	r3, #25
 800c09a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c09e:	4b55      	ldr	r3, [pc, #340]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c0a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c0a8:	4611      	mov	r1, r2
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f003 f967 	bl	800f37e <RegionGetPhyParam>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	4b4e      	ldr	r3, [pc, #312]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c0ba:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800c0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c0:	b2da      	uxtb	r2, r3
 800c0c2:	4b4c      	ldr	r3, [pc, #304]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c0c4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800c0c8:	231e      	movs	r3, #30
 800c0ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c0ce:	4b49      	ldr	r3, [pc, #292]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c0d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c0d8:	4611      	mov	r1, r2
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f003 f94f 	bl	800f37e <RegionGetPhyParam>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	4b42      	ldr	r3, [pc, #264]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c0ea:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800c0ee:	231f      	movs	r3, #31
 800c0f0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c0f4:	4b3f      	ldr	r3, [pc, #252]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c0f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c0fe:	4611      	mov	r1, r2
 800c100:	4618      	mov	r0, r3
 800c102:	f003 f93c 	bl	800f37e <RegionGetPhyParam>
 800c106:	4603      	mov	r3, r0
 800c108:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800c10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	4b39      	ldr	r3, [pc, #228]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c110:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800c114:	2320      	movs	r3, #32
 800c116:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c11a:	4b36      	ldr	r3, [pc, #216]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c11c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c120:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c124:	4611      	mov	r1, r2
 800c126:	4618      	mov	r0, r3
 800c128:	f003 f929 	bl	800f37e <RegionGetPhyParam>
 800c12c:	4603      	mov	r3, r0
 800c12e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	4a30      	ldr	r2, [pc, #192]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c134:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800c138:	2321      	movs	r3, #33	; 0x21
 800c13a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c13e:	4b2d      	ldr	r3, [pc, #180]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c144:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c148:	4611      	mov	r1, r2
 800c14a:	4618      	mov	r0, r3
 800c14c:	f003 f917 	bl	800f37e <RegionGetPhyParam>
 800c150:	4603      	mov	r3, r0
 800c152:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800c154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c156:	4a27      	ldr	r2, [pc, #156]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c158:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800c15c:	230b      	movs	r3, #11
 800c15e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c162:	4b24      	ldr	r3, [pc, #144]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c168:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c16c:	4611      	mov	r1, r2
 800c16e:	4618      	mov	r0, r3
 800c170:	f003 f905 	bl	800f37e <RegionGetPhyParam>
 800c174:	4603      	mov	r3, r0
 800c176:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800c178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	4b1e      	ldr	r3, [pc, #120]	; (800c1f8 <LoRaMacInitialization+0x388>)
 800c17e:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800c182:	230c      	movs	r3, #12
 800c184:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c188:	4b1a      	ldr	r3, [pc, #104]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c18a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c18e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c192:	4611      	mov	r1, r2
 800c194:	4618      	mov	r0, r3
 800c196:	f003 f8f2 	bl	800f37e <RegionGetPhyParam>
 800c19a:	4603      	mov	r3, r0
 800c19c:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	4b15      	ldr	r3, [pc, #84]	; (800c1f8 <LoRaMacInitialization+0x388>)
 800c1a4:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800c1a8:	4b12      	ldr	r3, [pc, #72]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800c1b0:	4b10      	ldr	r3, [pc, #64]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c1b2:	220a      	movs	r2, #10
 800c1b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800c1b8:	4b0e      	ldr	r3, [pc, #56]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c1ba:	2206      	movs	r2, #6
 800c1bc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800c1c0:	4b0c      	ldr	r3, [pc, #48]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c1c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1c6:	4a0b      	ldr	r2, [pc, #44]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c1c8:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800c1ca:	4b0a      	ldr	r3, [pc, #40]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c1cc:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800c1d0:	4b08      	ldr	r3, [pc, #32]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c1d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800c1d6:	4b07      	ldr	r3, [pc, #28]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c1d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1dc:	4a05      	ldr	r2, [pc, #20]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c1de:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800c1e0:	4b04      	ldr	r3, [pc, #16]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1e6:	4a03      	ldr	r2, [pc, #12]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c1e8:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800c1ea:	4b02      	ldr	r3, [pc, #8]	; (800c1f4 <LoRaMacInitialization+0x384>)
 800c1ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c1f0:	e006      	b.n	800c200 <LoRaMacInitialization+0x390>
 800c1f2:	bf00      	nop
 800c1f4:	20000820 	.word	0x20000820
 800c1f8:	20000318 	.word	0x20000318
 800c1fc:	01000300 	.word	0x01000300
 800c200:	4a60      	ldr	r2, [pc, #384]	; (800c384 <LoRaMacInitialization+0x514>)
 800c202:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800c204:	4b5f      	ldr	r3, [pc, #380]	; (800c384 <LoRaMacInitialization+0x514>)
 800c206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c20a:	4a5e      	ldr	r2, [pc, #376]	; (800c384 <LoRaMacInitialization+0x514>)
 800c20c:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800c20e:	4b5d      	ldr	r3, [pc, #372]	; (800c384 <LoRaMacInitialization+0x514>)
 800c210:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c214:	4a5b      	ldr	r2, [pc, #364]	; (800c384 <LoRaMacInitialization+0x514>)
 800c216:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800c218:	4b5a      	ldr	r3, [pc, #360]	; (800c384 <LoRaMacInitialization+0x514>)
 800c21a:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 800c21e:	4b59      	ldr	r3, [pc, #356]	; (800c384 <LoRaMacInitialization+0x514>)
 800c220:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800c224:	2300      	movs	r3, #0
 800c226:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800c22a:	4b57      	ldr	r3, [pc, #348]	; (800c388 <LoRaMacInitialization+0x518>)
 800c22c:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800c22e:	4b57      	ldr	r3, [pc, #348]	; (800c38c <LoRaMacInitialization+0x51c>)
 800c230:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800c232:	4b54      	ldr	r3, [pc, #336]	; (800c384 <LoRaMacInitialization+0x514>)
 800c234:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c238:	f107 0218 	add.w	r2, r7, #24
 800c23c:	4611      	mov	r1, r2
 800c23e:	4618      	mov	r0, r3
 800c240:	f003 f8d6 	bl	800f3f0 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 800c244:	4a52      	ldr	r2, [pc, #328]	; (800c390 <LoRaMacInitialization+0x520>)
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 800c24c:	f7ff f85a 	bl	800b304 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800c250:	4b4c      	ldr	r3, [pc, #304]	; (800c384 <LoRaMacInitialization+0x514>)
 800c252:	2201      	movs	r2, #1
 800c254:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 800c258:	4a4d      	ldr	r2, [pc, #308]	; (800c390 <LoRaMacInitialization+0x520>)
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800c260:	4b4b      	ldr	r3, [pc, #300]	; (800c390 <LoRaMacInitialization+0x520>)
 800c262:	2200      	movs	r2, #0
 800c264:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 800c268:	4b49      	ldr	r3, [pc, #292]	; (800c390 <LoRaMacInitialization+0x520>)
 800c26a:	2201      	movs	r2, #1
 800c26c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800c270:	4b44      	ldr	r3, [pc, #272]	; (800c384 <LoRaMacInitialization+0x514>)
 800c272:	2200      	movs	r2, #0
 800c274:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800c276:	4b43      	ldr	r3, [pc, #268]	; (800c384 <LoRaMacInitialization+0x514>)
 800c278:	2200      	movs	r2, #0
 800c27a:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800c27c:	2300      	movs	r3, #0
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	4b44      	ldr	r3, [pc, #272]	; (800c394 <LoRaMacInitialization+0x524>)
 800c282:	2200      	movs	r2, #0
 800c284:	f04f 31ff 	mov.w	r1, #4294967295
 800c288:	4843      	ldr	r0, [pc, #268]	; (800c398 <LoRaMacInitialization+0x528>)
 800c28a:	f00a f9a3 	bl	80165d4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800c28e:	2300      	movs	r3, #0
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	4b42      	ldr	r3, [pc, #264]	; (800c39c <LoRaMacInitialization+0x52c>)
 800c294:	2200      	movs	r2, #0
 800c296:	f04f 31ff 	mov.w	r1, #4294967295
 800c29a:	4841      	ldr	r0, [pc, #260]	; (800c3a0 <LoRaMacInitialization+0x530>)
 800c29c:	f00a f99a 	bl	80165d4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	4b3f      	ldr	r3, [pc, #252]	; (800c3a4 <LoRaMacInitialization+0x534>)
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f04f 31ff 	mov.w	r1, #4294967295
 800c2ac:	483e      	ldr	r0, [pc, #248]	; (800c3a8 <LoRaMacInitialization+0x538>)
 800c2ae:	f00a f991 	bl	80165d4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	4b3d      	ldr	r3, [pc, #244]	; (800c3ac <LoRaMacInitialization+0x53c>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f04f 31ff 	mov.w	r1, #4294967295
 800c2be:	483c      	ldr	r0, [pc, #240]	; (800c3b0 <LoRaMacInitialization+0x540>)
 800c2c0:	f00a f988 	bl	80165d4 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800c2c4:	4c2f      	ldr	r4, [pc, #188]	; (800c384 <LoRaMacInitialization+0x514>)
 800c2c6:	463b      	mov	r3, r7
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f00a f8fd 	bl	80164c8 <SysTimeGetMcuTime>
 800c2ce:	f504 7382 	add.w	r3, r4, #260	; 0x104
 800c2d2:	463a      	mov	r2, r7
 800c2d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c2d8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800c2dc:	4b2c      	ldr	r3, [pc, #176]	; (800c390 <LoRaMacInitialization+0x520>)
 800c2de:	4a35      	ldr	r2, [pc, #212]	; (800c3b4 <LoRaMacInitialization+0x544>)
 800c2e0:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800c2e4:	4b2a      	ldr	r3, [pc, #168]	; (800c390 <LoRaMacInitialization+0x520>)
 800c2e6:	4a34      	ldr	r2, [pc, #208]	; (800c3b8 <LoRaMacInitialization+0x548>)
 800c2e8:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800c2ec:	4b28      	ldr	r3, [pc, #160]	; (800c390 <LoRaMacInitialization+0x520>)
 800c2ee:	4a33      	ldr	r2, [pc, #204]	; (800c3bc <LoRaMacInitialization+0x54c>)
 800c2f0:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800c2f4:	4b26      	ldr	r3, [pc, #152]	; (800c390 <LoRaMacInitialization+0x520>)
 800c2f6:	4a32      	ldr	r2, [pc, #200]	; (800c3c0 <LoRaMacInitialization+0x550>)
 800c2f8:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800c2fc:	4b24      	ldr	r3, [pc, #144]	; (800c390 <LoRaMacInitialization+0x520>)
 800c2fe:	4a31      	ldr	r2, [pc, #196]	; (800c3c4 <LoRaMacInitialization+0x554>)
 800c300:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800c304:	4b30      	ldr	r3, [pc, #192]	; (800c3c8 <LoRaMacInitialization+0x558>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4830      	ldr	r0, [pc, #192]	; (800c3cc <LoRaMacInitialization+0x55c>)
 800c30a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	4619      	mov	r1, r3
 800c312:	482f      	ldr	r0, [pc, #188]	; (800c3d0 <LoRaMacInitialization+0x560>)
 800c314:	f7fb f818 	bl	8007348 <SecureElementInit>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d001      	beq.n	800c322 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c31e:	2311      	movs	r3, #17
 800c320:	e02b      	b.n	800c37a <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800c322:	4818      	ldr	r0, [pc, #96]	; (800c384 <LoRaMacInitialization+0x514>)
 800c324:	f002 f950 	bl	800e5c8 <LoRaMacCryptoInit>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d001      	beq.n	800c332 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c32e:	2311      	movs	r3, #17
 800c330:	e023      	b.n	800c37a <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800c332:	f001 fa95 	bl	800d860 <LoRaMacCommandsInit>
 800c336:	4603      	mov	r3, r0
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d001      	beq.n	800c340 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c33c:	2313      	movs	r3, #19
 800c33e:	e01c      	b.n	800c37a <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800c340:	4824      	ldr	r0, [pc, #144]	; (800c3d4 <LoRaMacInitialization+0x564>)
 800c342:	f002 f9ff 	bl	800e744 <LoRaMacCryptoSetMulticastReference>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c34c:	2311      	movs	r3, #17
 800c34e:	e014      	b.n	800c37a <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800c350:	4b1d      	ldr	r3, [pc, #116]	; (800c3c8 <LoRaMacInitialization+0x558>)
 800c352:	695b      	ldr	r3, [r3, #20]
 800c354:	4798      	blx	r3
 800c356:	4603      	mov	r3, r0
 800c358:	4618      	mov	r0, r3
 800c35a:	f006 fe9f 	bl	801309c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800c35e:	4b1a      	ldr	r3, [pc, #104]	; (800c3c8 <LoRaMacInitialization+0x558>)
 800c360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c362:	4a08      	ldr	r2, [pc, #32]	; (800c384 <LoRaMacInitialization+0x514>)
 800c364:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 800c368:	4610      	mov	r0, r2
 800c36a:	4798      	blx	r3
    Radio.Sleep( );
 800c36c:	4b16      	ldr	r3, [pc, #88]	; (800c3c8 <LoRaMacInitialization+0x558>)
 800c36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c370:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800c372:	2001      	movs	r0, #1
 800c374:	f7fd faaa 	bl	80098cc <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3734      	adds	r7, #52	; 0x34
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd90      	pop	{r4, r7, pc}
 800c382:	bf00      	nop
 800c384:	20000820 	.word	0x20000820
 800c388:	200009f8 	.word	0x200009f8
 800c38c:	20000a9c 	.word	0x20000a9c
 800c390:	20000318 	.word	0x20000318
 800c394:	08009e55 	.word	0x08009e55
 800c398:	20000680 	.word	0x20000680
 800c39c:	08009ec9 	.word	0x08009ec9
 800c3a0:	20000698 	.word	0x20000698
 800c3a4:	08009f35 	.word	0x08009f35
 800c3a8:	200006b0 	.word	0x200006b0
 800c3ac:	08009fa9 	.word	0x08009fa9
 800c3b0:	20000710 	.word	0x20000710
 800c3b4:	08008a99 	.word	0x08008a99
 800c3b8:	08008b01 	.word	0x08008b01
 800c3bc:	08008bb9 	.word	0x08008bb9
 800c3c0:	08008b7d 	.word	0x08008b7d
 800c3c4:	08008bf5 	.word	0x08008bf5
 800c3c8:	080183e0 	.word	0x080183e0
 800c3cc:	20000664 	.word	0x20000664
 800c3d0:	20000938 	.word	0x20000938
 800c3d4:	200008f0 	.word	0x200008f0

0800c3d8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800c3d8:	b480      	push	{r7}
 800c3da:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800c3dc:	4b04      	ldr	r3, [pc, #16]	; (800c3f0 <LoRaMacStart+0x18>)
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 800c3e4:	2300      	movs	r3, #0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bc80      	pop	{r7}
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	20000318 	.word	0x20000318

0800c3f4 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b08a      	sub	sp, #40	; 0x28
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	6039      	str	r1, [r7, #0]
 800c3fe:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800c400:	4b3e      	ldr	r3, [pc, #248]	; (800c4fc <LoRaMacQueryTxPossible+0x108>)
 800c402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c404:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800c406:	4b3d      	ldr	r3, [pc, #244]	; (800c4fc <LoRaMacQueryTxPossible+0x108>)
 800c408:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 800c40c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800c40e:	4b3b      	ldr	r3, [pc, #236]	; (800c4fc <LoRaMacQueryTxPossible+0x108>)
 800c410:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 800c414:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 800c416:	2300      	movs	r3, #0
 800c418:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d101      	bne.n	800c424 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c420:	2303      	movs	r3, #3
 800c422:	e066      	b.n	800c4f2 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 800c424:	4b35      	ldr	r3, [pc, #212]	; (800c4fc <LoRaMacQueryTxPossible+0x108>)
 800c426:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c42a:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 800c42c:	2300      	movs	r3, #0
 800c42e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800c430:	4b32      	ldr	r3, [pc, #200]	; (800c4fc <LoRaMacQueryTxPossible+0x108>)
 800c432:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800c436:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800c438:	4b30      	ldr	r3, [pc, #192]	; (800c4fc <LoRaMacQueryTxPossible+0x108>)
 800c43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c43c:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800c43e:	4b30      	ldr	r3, [pc, #192]	; (800c500 <LoRaMacQueryTxPossible+0x10c>)
 800c440:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800c444:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800c446:	4b2e      	ldr	r3, [pc, #184]	; (800c500 <LoRaMacQueryTxPossible+0x10c>)
 800c448:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800c44c:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c44e:	4b2b      	ldr	r3, [pc, #172]	; (800c4fc <LoRaMacQueryTxPossible+0x108>)
 800c450:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800c454:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c458:	4b28      	ldr	r3, [pc, #160]	; (800c4fc <LoRaMacQueryTxPossible+0x108>)
 800c45a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800c45e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c462:	4b26      	ldr	r3, [pc, #152]	; (800c4fc <LoRaMacQueryTxPossible+0x108>)
 800c464:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c468:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800c46c:	4b23      	ldr	r3, [pc, #140]	; (800c4fc <LoRaMacQueryTxPossible+0x108>)
 800c46e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800c476:	f107 0310 	add.w	r3, r7, #16
 800c47a:	f107 020e 	add.w	r2, r7, #14
 800c47e:	f107 010f 	add.w	r1, r7, #15
 800c482:	f107 0014 	add.w	r0, r7, #20
 800c486:	f000 ffe1 	bl	800d44c <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800c48a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fd fed2 	bl	800a238 <GetMaxAppPayloadWithoutFOptsLength>
 800c494:	4603      	mov	r3, r0
 800c496:	461a      	mov	r2, r3
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800c49c:	f107 0308 	add.w	r3, r7, #8
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f001 faab 	bl	800d9fc <LoRaMacCommandsGetSizeSerializedCmds>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d001      	beq.n	800c4b0 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c4ac:	2313      	movs	r3, #19
 800c4ae:	e020      	b.n	800c4f2 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	2b0f      	cmp	r3, #15
 800c4b4:	d819      	bhi.n	800c4ea <LoRaMacQueryTxPossible+0xf6>
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	785b      	ldrb	r3, [r3, #1]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d313      	bcc.n	800c4ea <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	785a      	ldrb	r2, [r3, #1]
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	1ad3      	subs	r3, r2, r3
 800c4cc:	b2da      	uxtb	r2, r3
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	785b      	ldrb	r3, [r3, #1]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	79fa      	ldrb	r2, [r7, #7]
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	4413      	add	r3, r2
 800c4de:	4299      	cmp	r1, r3
 800c4e0:	d301      	bcc.n	800c4e6 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	e005      	b.n	800c4f2 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800c4e6:	2308      	movs	r3, #8
 800c4e8:	e003      	b.n	800c4f2 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800c4f0:	2308      	movs	r3, #8
    }
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3728      	adds	r7, #40	; 0x28
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	20000820 	.word	0x20000820
 800c500:	20000318 	.word	0x20000318

0800c504 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800c504:	b590      	push	{r4, r7, lr}
 800c506:	b087      	sub	sp, #28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c50c:	2300      	movs	r3, #0
 800c50e:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d101      	bne.n	800c51a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c516:	2303      	movs	r3, #3
 800c518:	e14b      	b.n	800c7b2 <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	2b28      	cmp	r3, #40	; 0x28
 800c520:	f200 8140 	bhi.w	800c7a4 <LoRaMacMibGetRequestConfirm+0x2a0>
 800c524:	a201      	add	r2, pc, #4	; (adr r2, 800c52c <LoRaMacMibGetRequestConfirm+0x28>)
 800c526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52a:	bf00      	nop
 800c52c:	0800c5d1 	.word	0x0800c5d1
 800c530:	0800c5dd 	.word	0x0800c5dd
 800c534:	0800c5e9 	.word	0x0800c5e9
 800c538:	0800c5f5 	.word	0x0800c5f5
 800c53c:	0800c601 	.word	0x0800c601
 800c540:	0800c60d 	.word	0x0800c60d
 800c544:	0800c619 	.word	0x0800c619
 800c548:	0800c7a5 	.word	0x0800c7a5
 800c54c:	0800c7a5 	.word	0x0800c7a5
 800c550:	0800c7a5 	.word	0x0800c7a5
 800c554:	0800c7a5 	.word	0x0800c7a5
 800c558:	0800c7a5 	.word	0x0800c7a5
 800c55c:	0800c7a5 	.word	0x0800c7a5
 800c560:	0800c7a5 	.word	0x0800c7a5
 800c564:	0800c7a5 	.word	0x0800c7a5
 800c568:	0800c625 	.word	0x0800c625
 800c56c:	0800c631 	.word	0x0800c631
 800c570:	0800c63d 	.word	0x0800c63d
 800c574:	0800c65f 	.word	0x0800c65f
 800c578:	0800c671 	.word	0x0800c671
 800c57c:	0800c683 	.word	0x0800c683
 800c580:	0800c695 	.word	0x0800c695
 800c584:	0800c6c9 	.word	0x0800c6c9
 800c588:	0800c6a7 	.word	0x0800c6a7
 800c58c:	0800c6eb 	.word	0x0800c6eb
 800c590:	0800c6f7 	.word	0x0800c6f7
 800c594:	0800c701 	.word	0x0800c701
 800c598:	0800c70b 	.word	0x0800c70b
 800c59c:	0800c715 	.word	0x0800c715
 800c5a0:	0800c71f 	.word	0x0800c71f
 800c5a4:	0800c729 	.word	0x0800c729
 800c5a8:	0800c735 	.word	0x0800c735
 800c5ac:	0800c74d 	.word	0x0800c74d
 800c5b0:	0800c741 	.word	0x0800c741
 800c5b4:	0800c759 	.word	0x0800c759
 800c5b8:	0800c763 	.word	0x0800c763
 800c5bc:	0800c76f 	.word	0x0800c76f
 800c5c0:	0800c785 	.word	0x0800c785
 800c5c4:	0800c779 	.word	0x0800c779
 800c5c8:	0800c7a5 	.word	0x0800c7a5
 800c5cc:	0800c791 	.word	0x0800c791
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800c5d0:	4b7a      	ldr	r3, [pc, #488]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c5d2:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	711a      	strb	r2, [r3, #4]
            break;
 800c5da:	e0e9      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c5dc:	4b77      	ldr	r3, [pc, #476]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c5de:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	711a      	strb	r2, [r3, #4]
            break;
 800c5e6:	e0e3      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800c5e8:	f7fb f916 	bl	8007818 <SecureElementGetDevEui>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	605a      	str	r2, [r3, #4]
            break;
 800c5f2:	e0dd      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800c5f4:	f7fb f932 	bl	800785c <SecureElementGetJoinEui>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	605a      	str	r2, [r3, #4]
            break;
 800c5fe:	e0d7      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800c600:	4b6e      	ldr	r3, [pc, #440]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c602:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	711a      	strb	r2, [r3, #4]
            break;
 800c60a:	e0d1      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800c60c:	4b6b      	ldr	r3, [pc, #428]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c60e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	605a      	str	r2, [r3, #4]
            break;
 800c616:	e0cb      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800c618:	4b68      	ldr	r3, [pc, #416]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c61a:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	605a      	str	r2, [r3, #4]
            break;
 800c622:	e0c5      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800c624:	4b65      	ldr	r3, [pc, #404]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c626:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	711a      	strb	r2, [r3, #4]
            break;
 800c62e:	e0bf      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800c630:	4b62      	ldr	r3, [pc, #392]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c632:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	711a      	strb	r2, [r3, #4]
            break;
 800c63a:	e0b9      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800c63c:	231d      	movs	r3, #29
 800c63e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c640:	4b5e      	ldr	r3, [pc, #376]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c646:	f107 0210 	add.w	r2, r7, #16
 800c64a:	4611      	mov	r1, r2
 800c64c:	4618      	mov	r0, r3
 800c64e:	f002 fe96 	bl	800f37e <RegionGetPhyParam>
 800c652:	4603      	mov	r3, r0
 800c654:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	605a      	str	r2, [r3, #4]
            break;
 800c65c:	e0a8      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4a56      	ldr	r2, [pc, #344]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c662:	3304      	adds	r3, #4
 800c664:	3264      	adds	r2, #100	; 0x64
 800c666:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c66a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800c66e:	e09f      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4a52      	ldr	r2, [pc, #328]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c674:	3304      	adds	r3, #4
 800c676:	32a4      	adds	r2, #164	; 0xa4
 800c678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c67c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800c680:	e096      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a4d      	ldr	r2, [pc, #308]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c686:	3304      	adds	r3, #4
 800c688:	326c      	adds	r2, #108	; 0x6c
 800c68a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c68e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800c692:	e08d      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a49      	ldr	r2, [pc, #292]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c698:	3304      	adds	r3, #4
 800c69a:	32ac      	adds	r2, #172	; 0xac
 800c69c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6a0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800c6a4:	e084      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800c6a6:	231b      	movs	r3, #27
 800c6a8:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c6aa:	4b44      	ldr	r3, [pc, #272]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c6ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c6b0:	f107 0210 	add.w	r2, r7, #16
 800c6b4:	4611      	mov	r1, r2
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f002 fe61 	bl	800f37e <RegionGetPhyParam>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800c6c0:	68fa      	ldr	r2, [r7, #12]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	605a      	str	r2, [r3, #4]
            break;
 800c6c6:	e073      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800c6c8:	231a      	movs	r3, #26
 800c6ca:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c6cc:	4b3b      	ldr	r3, [pc, #236]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c6ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c6d2:	f107 0210 	add.w	r2, r7, #16
 800c6d6:	4611      	mov	r1, r2
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f002 fe50 	bl	800f37e <RegionGetPhyParam>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	605a      	str	r2, [r3, #4]
            break;
 800c6e8:	e062      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800c6ea:	4b34      	ldr	r3, [pc, #208]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c6ec:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	711a      	strb	r2, [r3, #4]
            break;
 800c6f4:	e05c      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800c6f6:	4b31      	ldr	r3, [pc, #196]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c6f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	605a      	str	r2, [r3, #4]
            break;
 800c6fe:	e057      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800c700:	4b2e      	ldr	r3, [pc, #184]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c702:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	605a      	str	r2, [r3, #4]
            break;
 800c708:	e052      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800c70a:	4b2c      	ldr	r3, [pc, #176]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c70c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	605a      	str	r2, [r3, #4]
            break;
 800c712:	e04d      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800c714:	4b29      	ldr	r3, [pc, #164]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c716:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	605a      	str	r2, [r3, #4]
            break;
 800c71c:	e048      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800c71e:	4b27      	ldr	r3, [pc, #156]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c720:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	605a      	str	r2, [r3, #4]
            break;
 800c726:	e043      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800c728:	4b24      	ldr	r3, [pc, #144]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c72a:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	711a      	strb	r2, [r3, #4]
            break;
 800c732:	e03d      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800c734:	4b21      	ldr	r3, [pc, #132]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c736:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	711a      	strb	r2, [r3, #4]
            break;
 800c73e:	e037      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800c740:	4b1e      	ldr	r3, [pc, #120]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c742:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	711a      	strb	r2, [r3, #4]
            break;
 800c74a:	e031      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c74c:	4b1b      	ldr	r3, [pc, #108]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c74e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	711a      	strb	r2, [r3, #4]
            break;
 800c756:	e02b      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800c758:	4b18      	ldr	r3, [pc, #96]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c75a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	605a      	str	r2, [r3, #4]
            break;
 800c760:	e026      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800c762:	4b16      	ldr	r3, [pc, #88]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c764:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	711a      	strb	r2, [r3, #4]
            break;
 800c76c:	e020      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800c76e:	4b13      	ldr	r3, [pc, #76]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c770:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	605a      	str	r2, [r3, #4]
            break;
 800c776:	e01b      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 800c778:	f7ff f934 	bl	800b9e4 <GetNvmData>
 800c77c:	4602      	mov	r2, r0
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	605a      	str	r2, [r3, #4]
            break;
 800c782:	e015      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800c784:	4b0d      	ldr	r3, [pc, #52]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c786:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	605a      	str	r2, [r3, #4]
            break;
 800c78e:	e00f      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a0a      	ldr	r2, [pc, #40]	; (800c7bc <LoRaMacMibGetRequestConfirm+0x2b8>)
 800c794:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 800c798:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800c79a:	687c      	ldr	r4, [r7, #4]
 800c79c:	f003 f81a 	bl	800f7d4 <RegionGetVersion>
 800c7a0:	60a0      	str	r0, [r4, #8]
            break;
 800c7a2:	e005      	b.n	800c7b0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 fefd 	bl	800d5a4 <LoRaMacClassBMibGetRequestConfirm>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	75fb      	strb	r3, [r7, #23]
            break;
 800c7ae:	bf00      	nop
        }
    }
    return status;
 800c7b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	371c      	adds	r7, #28
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd90      	pop	{r4, r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	20000820 	.word	0x20000820

0800c7c0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d101      	bne.n	800c7d6 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c7d2:	2303      	movs	r3, #3
 800c7d4:	e32b      	b.n	800ce2e <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800c7d6:	4bbe      	ldr	r3, [pc, #760]	; (800cad0 <LoRaMacMibSetRequestConfirm+0x310>)
 800c7d8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c7dc:	f003 0302 	and.w	r3, r3, #2
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d001      	beq.n	800c7e8 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	e322      	b.n	800ce2e <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	2b27      	cmp	r3, #39	; 0x27
 800c7ee:	f200 82fc 	bhi.w	800cdea <LoRaMacMibSetRequestConfirm+0x62a>
 800c7f2:	a201      	add	r2, pc, #4	; (adr r2, 800c7f8 <LoRaMacMibSetRequestConfirm+0x38>)
 800c7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f8:	0800c899 	.word	0x0800c899
 800c7fc:	0800c8a9 	.word	0x0800c8a9
 800c800:	0800c8c3 	.word	0x0800c8c3
 800c804:	0800c8db 	.word	0x0800c8db
 800c808:	0800c8f3 	.word	0x0800c8f3
 800c80c:	0800c8ff 	.word	0x0800c8ff
 800c810:	0800c90b 	.word	0x0800c90b
 800c814:	0800c917 	.word	0x0800c917
 800c818:	0800c93d 	.word	0x0800c93d
 800c81c:	0800c963 	.word	0x0800c963
 800c820:	0800c989 	.word	0x0800c989
 800c824:	0800c9af 	.word	0x0800c9af
 800c828:	0800c9d5 	.word	0x0800c9d5
 800c82c:	0800c9fb 	.word	0x0800c9fb
 800c830:	0800ca21 	.word	0x0800ca21
 800c834:	0800ca47 	.word	0x0800ca47
 800c838:	0800ca67 	.word	0x0800ca67
 800c83c:	0800cdeb 	.word	0x0800cdeb
 800c840:	0800ca73 	.word	0x0800ca73
 800c844:	0800caef 	.word	0x0800caef
 800c848:	0800cb2f 	.word	0x0800cb2f
 800c84c:	0800cb91 	.word	0x0800cb91
 800c850:	0800cc01 	.word	0x0800cc01
 800c854:	0800cbd1 	.word	0x0800cbd1
 800c858:	0800cc31 	.word	0x0800cc31
 800c85c:	0800cc53 	.word	0x0800cc53
 800c860:	0800cc5d 	.word	0x0800cc5d
 800c864:	0800cc67 	.word	0x0800cc67
 800c868:	0800cc71 	.word	0x0800cc71
 800c86c:	0800cc7b 	.word	0x0800cc7b
 800c870:	0800cc85 	.word	0x0800cc85
 800c874:	0800ccb7 	.word	0x0800ccb7
 800c878:	0800cd23 	.word	0x0800cd23
 800c87c:	0800ccf1 	.word	0x0800ccf1
 800c880:	0800cd55 	.word	0x0800cd55
 800c884:	0800cd6b 	.word	0x0800cd6b
 800c888:	0800cd83 	.word	0x0800cd83
 800c88c:	0800cd8d 	.word	0x0800cd8d
 800c890:	0800cd99 	.word	0x0800cd99
 800c894:	0800cdc1 	.word	0x0800cdc1
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	791b      	ldrb	r3, [r3, #4]
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7fd fbfb 	bl	800a098 <SwitchClass>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	75fb      	strb	r3, [r7, #23]
            break;
 800c8a6:	e2c1      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	791b      	ldrb	r3, [r3, #4]
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d005      	beq.n	800c8bc <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	791a      	ldrb	r2, [r3, #4]
 800c8b4:	4b87      	ldr	r3, [pc, #540]	; (800cad4 <LoRaMacMibSetRequestConfirm+0x314>)
 800c8b6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800c8ba:	e2b7      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c8bc:	2303      	movs	r3, #3
 800c8be:	75fb      	strb	r3, [r7, #23]
            break;
 800c8c0:	e2b4      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7fa ff8e 	bl	80077e8 <SecureElementSetDevEui>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f000 8291 	beq.w	800cdf6 <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800c8d8:	e28d      	b.n	800cdf6 <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fa ffa4 	bl	800782c <SecureElementSetJoinEui>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f000 8287 	beq.w	800cdfa <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c8ec:	2303      	movs	r3, #3
 800c8ee:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800c8f0:	e283      	b.n	800cdfa <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	791a      	ldrb	r2, [r3, #4]
 800c8f6:	4b77      	ldr	r3, [pc, #476]	; (800cad4 <LoRaMacMibSetRequestConfirm+0x314>)
 800c8f8:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 800c8fc:	e296      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	4a74      	ldr	r2, [pc, #464]	; (800cad4 <LoRaMacMibSetRequestConfirm+0x314>)
 800c904:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 800c908:	e290      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	4a71      	ldr	r2, [pc, #452]	; (800cad4 <LoRaMacMibSetRequestConfirm+0x314>)
 800c910:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 800c914:	e28a      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00b      	beq.n	800c936 <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	4619      	mov	r1, r3
 800c924:	2000      	movs	r0, #0
 800c926:	f001 ff35 	bl	800e794 <LoRaMacCryptoSetKey>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	f000 8266 	beq.w	800cdfe <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c932:	2311      	movs	r3, #17
 800c934:	e27b      	b.n	800ce2e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c936:	2303      	movs	r3, #3
 800c938:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800c93a:	e260      	b.n	800cdfe <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d00b      	beq.n	800c95c <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	4619      	mov	r1, r3
 800c94a:	2001      	movs	r0, #1
 800c94c:	f001 ff22 	bl	800e794 <LoRaMacCryptoSetKey>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	f000 8255 	beq.w	800ce02 <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c958:	2311      	movs	r3, #17
 800c95a:	e268      	b.n	800ce2e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c95c:	2303      	movs	r3, #3
 800c95e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800c960:	e24f      	b.n	800ce02 <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d00b      	beq.n	800c982 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	4619      	mov	r1, r3
 800c970:	2002      	movs	r0, #2
 800c972:	f001 ff0f 	bl	800e794 <LoRaMacCryptoSetKey>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f000 8244 	beq.w	800ce06 <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c97e:	2311      	movs	r3, #17
 800c980:	e255      	b.n	800ce2e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c982:	2303      	movs	r3, #3
 800c984:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800c986:	e23e      	b.n	800ce06 <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00b      	beq.n	800c9a8 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	4619      	mov	r1, r3
 800c996:	2003      	movs	r0, #3
 800c998:	f001 fefc 	bl	800e794 <LoRaMacCryptoSetKey>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f000 8233 	beq.w	800ce0a <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c9a4:	2311      	movs	r3, #17
 800c9a6:	e242      	b.n	800ce2e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c9a8:	2303      	movs	r3, #3
 800c9aa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800c9ac:	e22d      	b.n	800ce0a <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00b      	beq.n	800c9ce <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	207f      	movs	r0, #127	; 0x7f
 800c9be:	f001 fee9 	bl	800e794 <LoRaMacCryptoSetKey>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f000 8222 	beq.w	800ce0e <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c9ca:	2311      	movs	r3, #17
 800c9cc:	e22f      	b.n	800ce2e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800c9d2:	e21c      	b.n	800ce0e <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00b      	beq.n	800c9f4 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	2080      	movs	r0, #128	; 0x80
 800c9e4:	f001 fed6 	bl	800e794 <LoRaMacCryptoSetKey>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	f000 8211 	beq.w	800ce12 <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c9f0:	2311      	movs	r3, #17
 800c9f2:	e21c      	b.n	800ce2e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c9f4:	2303      	movs	r3, #3
 800c9f6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800c9f8:	e20b      	b.n	800ce12 <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00b      	beq.n	800ca1a <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	4619      	mov	r1, r3
 800ca08:	2081      	movs	r0, #129	; 0x81
 800ca0a:	f001 fec3 	bl	800e794 <LoRaMacCryptoSetKey>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f000 8200 	beq.w	800ce16 <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ca16:	2311      	movs	r3, #17
 800ca18:	e209      	b.n	800ce2e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca1a:	2303      	movs	r3, #3
 800ca1c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ca1e:	e1fa      	b.n	800ce16 <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00b      	beq.n	800ca40 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	2082      	movs	r0, #130	; 0x82
 800ca30:	f001 feb0 	bl	800e794 <LoRaMacCryptoSetKey>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f000 81ef 	beq.w	800ce1a <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ca3c:	2311      	movs	r3, #17
 800ca3e:	e1f6      	b.n	800ce2e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca40:	2303      	movs	r3, #3
 800ca42:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ca44:	e1e9      	b.n	800ce1a <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	791a      	ldrb	r2, [r3, #4]
 800ca4a:	4b22      	ldr	r3, [pc, #136]	; (800cad4 <LoRaMacMibSetRequestConfirm+0x314>)
 800ca4c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ca50:	4b21      	ldr	r3, [pc, #132]	; (800cad8 <LoRaMacMibSetRequestConfirm+0x318>)
 800ca52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca54:	4a1f      	ldr	r2, [pc, #124]	; (800cad4 <LoRaMacMibSetRequestConfirm+0x314>)
 800ca56:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 800ca5a:	4610      	mov	r0, r2
 800ca5c:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 800ca5e:	4b1e      	ldr	r3, [pc, #120]	; (800cad8 <LoRaMacMibSetRequestConfirm+0x318>)
 800ca60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca62:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 800ca64:	e1e2      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	791a      	ldrb	r2, [r3, #4]
 800ca6a:	4b1a      	ldr	r3, [pc, #104]	; (800cad4 <LoRaMacMibSetRequestConfirm+0x314>)
 800ca6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 800ca70:	e1dc      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	7a1b      	ldrb	r3, [r3, #8]
 800ca76:	b25b      	sxtb	r3, r3
 800ca78:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ca7a:	4b16      	ldr	r3, [pc, #88]	; (800cad4 <LoRaMacMibSetRequestConfirm+0x314>)
 800ca7c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800ca80:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800ca82:	4b14      	ldr	r3, [pc, #80]	; (800cad4 <LoRaMacMibSetRequestConfirm+0x314>)
 800ca84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca88:	f107 0108 	add.w	r1, r7, #8
 800ca8c:	2207      	movs	r2, #7
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f002 fcc6 	bl	800f420 <RegionVerify>
 800ca94:	4603      	mov	r3, r0
 800ca96:	f083 0301 	eor.w	r3, r3, #1
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800caa0:	2303      	movs	r3, #3
 800caa2:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 800caa4:	e1c2      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800caac:	4b09      	ldr	r3, [pc, #36]	; (800cad4 <LoRaMacMibSetRequestConfirm+0x314>)
 800caae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cab2:	f107 0108 	add.w	r1, r7, #8
 800cab6:	2200      	movs	r2, #0
 800cab8:	4618      	mov	r0, r3
 800caba:	f002 fcb1 	bl	800f420 <RegionVerify>
 800cabe:	4603      	mov	r3, r0
 800cac0:	f083 0301 	eor.w	r3, r3, #1
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d008      	beq.n	800cadc <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800caca:	2303      	movs	r3, #3
 800cacc:	75fb      	strb	r3, [r7, #23]
            break;
 800cace:	e1ad      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
 800cad0:	20000318 	.word	0x20000318
 800cad4:	20000820 	.word	0x20000820
 800cad8:	080183e0 	.word	0x080183e0
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800cadc:	4bb6      	ldr	r3, [pc, #728]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	3364      	adds	r3, #100	; 0x64
 800cae2:	3204      	adds	r2, #4
 800cae4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cae8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800caec:	e19e      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	7a1b      	ldrb	r3, [r3, #8]
 800caf2:	b25b      	sxtb	r3, r3
 800caf4:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800caf6:	4bb0      	ldr	r3, [pc, #704]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800caf8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800cafc:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800cafe:	4bae      	ldr	r3, [pc, #696]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cb00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb04:	f107 0108 	add.w	r1, r7, #8
 800cb08:	2207      	movs	r2, #7
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f002 fc88 	bl	800f420 <RegionVerify>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d008      	beq.n	800cb28 <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800cb16:	4ba8      	ldr	r3, [pc, #672]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	33a4      	adds	r3, #164	; 0xa4
 800cb1c:	3204      	adds	r2, #4
 800cb1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cb22:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800cb26:	e181      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cb28:	2303      	movs	r3, #3
 800cb2a:	75fb      	strb	r3, [r7, #23]
            break;
 800cb2c:	e17e      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	7a1b      	ldrb	r3, [r3, #8]
 800cb32:	b25b      	sxtb	r3, r3
 800cb34:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cb36:	4ba0      	ldr	r3, [pc, #640]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cb38:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800cb3c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800cb3e:	4b9e      	ldr	r3, [pc, #632]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cb40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb44:	f107 0108 	add.w	r1, r7, #8
 800cb48:	2207      	movs	r2, #7
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f002 fc68 	bl	800f420 <RegionVerify>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d019      	beq.n	800cb8a <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800cb56:	4b98      	ldr	r3, [pc, #608]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	336c      	adds	r3, #108	; 0x6c
 800cb5c:	3204      	adds	r2, #4
 800cb5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cb62:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800cb66:	4b94      	ldr	r3, [pc, #592]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cb68:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	f040 8156 	bne.w	800ce1e <LoRaMacMibSetRequestConfirm+0x65e>
 800cb72:	4b91      	ldr	r3, [pc, #580]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cb74:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f000 8150 	beq.w	800ce1e <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800cb7e:	4b8f      	ldr	r3, [pc, #572]	; (800cdbc <LoRaMacMibSetRequestConfirm+0x5fc>)
 800cb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb82:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800cb84:	f7fe fcda 	bl	800b53c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800cb88:	e149      	b.n	800ce1e <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cb8a:	2303      	movs	r3, #3
 800cb8c:	75fb      	strb	r3, [r7, #23]
            break;
 800cb8e:	e146      	b.n	800ce1e <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	7a1b      	ldrb	r3, [r3, #8]
 800cb94:	b25b      	sxtb	r3, r3
 800cb96:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cb98:	4b87      	ldr	r3, [pc, #540]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cb9a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800cb9e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800cba0:	4b85      	ldr	r3, [pc, #532]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cba6:	f107 0108 	add.w	r1, r7, #8
 800cbaa:	2207      	movs	r2, #7
 800cbac:	4618      	mov	r0, r3
 800cbae:	f002 fc37 	bl	800f420 <RegionVerify>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d008      	beq.n	800cbca <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800cbb8:	4b7f      	ldr	r3, [pc, #508]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	33ac      	adds	r3, #172	; 0xac
 800cbbe:	3204      	adds	r2, #4
 800cbc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cbc4:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800cbc8:	e130      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbca:	2303      	movs	r3, #3
 800cbcc:	75fb      	strb	r3, [r7, #23]
            break;
 800cbce:	e12d      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800cbda:	4b77      	ldr	r3, [pc, #476]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cbdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cbe0:	f107 020c 	add.w	r2, r7, #12
 800cbe4:	4611      	mov	r1, r2
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f002 fc53 	bl	800f492 <RegionChanMaskSet>
 800cbec:	4603      	mov	r3, r0
 800cbee:	f083 0301 	eor.w	r3, r3, #1
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f000 8114 	beq.w	800ce22 <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cbfa:	2303      	movs	r3, #3
 800cbfc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800cbfe:	e110      	b.n	800ce22 <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800cc06:	2300      	movs	r3, #0
 800cc08:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800cc0a:	4b6b      	ldr	r3, [pc, #428]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cc0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc10:	f107 020c 	add.w	r2, r7, #12
 800cc14:	4611      	mov	r1, r2
 800cc16:	4618      	mov	r0, r3
 800cc18:	f002 fc3b 	bl	800f492 <RegionChanMaskSet>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	f083 0301 	eor.w	r3, r3, #1
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	f000 80fe 	beq.w	800ce26 <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cc2a:	2303      	movs	r3, #3
 800cc2c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800cc2e:	e0fa      	b.n	800ce26 <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	791b      	ldrb	r3, [r3, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d009      	beq.n	800cc4c <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800cc3c:	2b0f      	cmp	r3, #15
 800cc3e:	d805      	bhi.n	800cc4c <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	791a      	ldrb	r2, [r3, #4]
 800cc44:	4b5c      	ldr	r3, [pc, #368]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cc46:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800cc4a:	e0ef      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	75fb      	strb	r3, [r7, #23]
            break;
 800cc50:	e0ec      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	4a58      	ldr	r2, [pc, #352]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cc58:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 800cc5a:	e0e7      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	4a55      	ldr	r2, [pc, #340]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cc62:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 800cc64:	e0e2      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	4a53      	ldr	r2, [pc, #332]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cc6c:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 800cc6e:	e0dd      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	4a50      	ldr	r2, [pc, #320]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cc76:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 800cc78:	e0d8      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	4a4e      	ldr	r2, [pc, #312]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cc80:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 800cc82:	e0d3      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cc8a:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800cc8c:	4b4a      	ldr	r3, [pc, #296]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cc8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc92:	f107 0108 	add.w	r1, r7, #8
 800cc96:	2206      	movs	r2, #6
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f002 fbc1 	bl	800f420 <RegionVerify>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d005      	beq.n	800ccb0 <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800cca4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800cca8:	4b43      	ldr	r3, [pc, #268]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800ccaa:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ccae:	e0bd      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ccb0:	2303      	movs	r3, #3
 800ccb2:	75fb      	strb	r3, [r7, #23]
            break;
 800ccb4:	e0ba      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ccbc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ccbe:	4b3e      	ldr	r3, [pc, #248]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800ccc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ccc4:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ccc6:	4b3c      	ldr	r3, [pc, #240]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800ccc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cccc:	f107 0108 	add.w	r1, r7, #8
 800ccd0:	2205      	movs	r2, #5
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f002 fba4 	bl	800f420 <RegionVerify>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d005      	beq.n	800ccea <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ccde:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800cce2:	4b35      	ldr	r3, [pc, #212]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cce4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800cce8:	e0a0      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ccea:	2303      	movs	r3, #3
 800ccec:	75fb      	strb	r3, [r7, #23]
            break;
 800ccee:	e09d      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ccf6:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800ccf8:	4b2f      	ldr	r3, [pc, #188]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800ccfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ccfe:	f107 0108 	add.w	r1, r7, #8
 800cd02:	220a      	movs	r2, #10
 800cd04:	4618      	mov	r0, r3
 800cd06:	f002 fb8b 	bl	800f420 <RegionVerify>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d005      	beq.n	800cd1c <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800cd10:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800cd14:	4b28      	ldr	r3, [pc, #160]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cd16:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800cd1a:	e087      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cd1c:	2303      	movs	r3, #3
 800cd1e:	75fb      	strb	r3, [r7, #23]
            break;
 800cd20:	e084      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cd28:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800cd2a:	4b23      	ldr	r3, [pc, #140]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cd2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd30:	f107 0108 	add.w	r1, r7, #8
 800cd34:	2209      	movs	r2, #9
 800cd36:	4618      	mov	r0, r3
 800cd38:	f002 fb72 	bl	800f420 <RegionVerify>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d005      	beq.n	800cd4e <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800cd42:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800cd46:	4b1c      	ldr	r3, [pc, #112]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cd48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800cd4c:	e06e      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cd4e:	2303      	movs	r3, #3
 800cd50:	75fb      	strb	r3, [r7, #23]
            break;
 800cd52:	e06b      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	4a17      	ldr	r2, [pc, #92]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cd5a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800cd5e:	4b16      	ldr	r3, [pc, #88]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cd60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd64:	4a14      	ldr	r2, [pc, #80]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cd66:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 800cd68:	e060      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	791a      	ldrb	r2, [r3, #4]
 800cd6e:	4b12      	ldr	r3, [pc, #72]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cd70:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800cd74:	4b10      	ldr	r3, [pc, #64]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cd76:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800cd7a:	4b0f      	ldr	r3, [pc, #60]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cd7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 800cd80:	e054      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	4a0c      	ldr	r2, [pc, #48]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cd88:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 800cd8a:	e04f      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	4a09      	ldr	r2, [pc, #36]	; (800cdb8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 800cd92:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 800cd96:	e049      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d007      	beq.n	800cdb0 <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7fe fe27 	bl	800b9f8 <RestoreNvmData>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800cdae:	e03d      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	75fb      	strb	r3, [r7, #23]
            break;
 800cdb4:	e03a      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
 800cdb6:	bf00      	nop
 800cdb8:	20000820 	.word	0x20000820
 800cdbc:	080183e0 	.word	0x080183e0
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	799b      	ldrb	r3, [r3, #6]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d80d      	bhi.n	800cde4 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800cdc8:	4a1b      	ldr	r2, [pc, #108]	; (800ce38 <LoRaMacMibSetRequestConfirm+0x678>)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6858      	ldr	r0, [r3, #4]
 800cdd6:	f001 fc23 	bl	800e620 <LoRaMacCryptoSetLrWanVersion>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d024      	beq.n	800ce2a <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800cde0:	2311      	movs	r3, #17
 800cde2:	e024      	b.n	800ce2e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cde4:	2303      	movs	r3, #3
 800cde6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800cde8:	e01f      	b.n	800ce2a <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 fbe4 	bl	800d5b8 <LoRaMacMibClassBSetRequestConfirm>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	75fb      	strb	r3, [r7, #23]
            break;
 800cdf4:	e01a      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800cdf6:	bf00      	nop
 800cdf8:	e018      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800cdfa:	bf00      	nop
 800cdfc:	e016      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800cdfe:	bf00      	nop
 800ce00:	e014      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800ce02:	bf00      	nop
 800ce04:	e012      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800ce06:	bf00      	nop
 800ce08:	e010      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800ce0a:	bf00      	nop
 800ce0c:	e00e      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800ce0e:	bf00      	nop
 800ce10:	e00c      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800ce12:	bf00      	nop
 800ce14:	e00a      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800ce16:	bf00      	nop
 800ce18:	e008      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800ce1a:	bf00      	nop
 800ce1c:	e006      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800ce1e:	bf00      	nop
 800ce20:	e004      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800ce22:	bf00      	nop
 800ce24:	e002      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800ce26:	bf00      	nop
 800ce28:	e000      	b.n	800ce2c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 800ce2a:	bf00      	nop
        }
    }
    return status;
 800ce2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3718      	adds	r7, #24
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	20000820 	.word	0x20000820

0800ce3c <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b086      	sub	sp, #24
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ce44:	2302      	movs	r3, #2
 800ce46:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ce48:	2300      	movs	r3, #0
 800ce4a:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ce52:	2303      	movs	r3, #3
 800ce54:	e127      	b.n	800d0a6 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 800ce56:	f7fc fd23 	bl	80098a0 <LoRaMacIsBusy>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d001      	beq.n	800ce64 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800ce60:	2301      	movs	r3, #1
 800ce62:	e120      	b.n	800d0a6 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800ce64:	f001 f8a6 	bl	800dfb4 <LoRaMacConfirmQueueIsFull>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d001      	beq.n	800ce72 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e119      	b.n	800d0a6 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ce72:	f001 f893 	bl	800df9c <LoRaMacConfirmQueueGetCnt>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d104      	bne.n	800ce86 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800ce7c:	2214      	movs	r2, #20
 800ce7e:	2100      	movs	r1, #0
 800ce80:	488b      	ldr	r0, [pc, #556]	; (800d0b0 <LoRaMacMlmeRequest+0x274>)
 800ce82:	f006 f96b 	bl	801315c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ce86:	4b8b      	ldr	r3, [pc, #556]	; (800d0b4 <LoRaMacMlmeRequest+0x278>)
 800ce88:	2201      	movs	r2, #1
 800ce8a:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ce8e:	4a89      	ldr	r2, [pc, #548]	; (800d0b4 <LoRaMacMlmeRequest+0x278>)
 800ce90:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ce94:	f043 0304 	orr.w	r3, r3, #4
 800ce98:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cea2:	2301      	movs	r3, #1
 800cea4:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 800cea6:	2300      	movs	r3, #0
 800cea8:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	2b0d      	cmp	r3, #13
 800ceb2:	f200 80ce 	bhi.w	800d052 <LoRaMacMlmeRequest+0x216>
 800ceb6:	a201      	add	r2, pc, #4	; (adr r2, 800cebc <LoRaMacMlmeRequest+0x80>)
 800ceb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cebc:	0800cef5 	.word	0x0800cef5
 800cec0:	0800d053 	.word	0x0800d053
 800cec4:	0800d053 	.word	0x0800d053
 800cec8:	0800cf5f 	.word	0x0800cf5f
 800cecc:	0800cf7d 	.word	0x0800cf7d
 800ced0:	0800cf8d 	.word	0x0800cf8d
 800ced4:	0800d053 	.word	0x0800d053
 800ced8:	0800d053 	.word	0x0800d053
 800cedc:	0800d053 	.word	0x0800d053
 800cee0:	0800cfa9 	.word	0x0800cfa9
 800cee4:	0800d053 	.word	0x0800d053
 800cee8:	0800d027 	.word	0x0800d027
 800ceec:	0800cfc7 	.word	0x0800cfc7
 800cef0:	0800d009 	.word	0x0800d009
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800cef4:	4b6f      	ldr	r3, [pc, #444]	; (800d0b4 <LoRaMacMlmeRequest+0x278>)
 800cef6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cefa:	f003 0320 	and.w	r3, r3, #32
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d001      	beq.n	800cf06 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e0cf      	b.n	800d0a6 <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 800cf06:	f7fe f9fd 	bl	800b304 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800cf0a:	4b6b      	ldr	r3, [pc, #428]	; (800d0b8 <LoRaMacMlmeRequest+0x27c>)
 800cf0c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	791b      	ldrb	r3, [r3, #4]
 800cf14:	b25b      	sxtb	r3, r3
 800cf16:	2200      	movs	r2, #0
 800cf18:	4619      	mov	r1, r3
 800cf1a:	f002 fbcb 	bl	800f6b4 <RegionAlternateDr>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	461a      	mov	r2, r3
 800cf22:	4b65      	ldr	r3, [pc, #404]	; (800d0b8 <LoRaMacMlmeRequest+0x27c>)
 800cf24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800cf28:	2307      	movs	r3, #7
 800cf2a:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 800cf2c:	20ff      	movs	r0, #255	; 0xff
 800cf2e:	f7fd ff61 	bl	800adf4 <SendReJoinReq>
 800cf32:	4603      	mov	r3, r0
 800cf34:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 800cf36:	7dfb      	ldrb	r3, [r7, #23]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 808c 	beq.w	800d056 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800cf3e:	4b5e      	ldr	r3, [pc, #376]	; (800d0b8 <LoRaMacMlmeRequest+0x27c>)
 800cf40:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	791b      	ldrb	r3, [r3, #4]
 800cf48:	b25b      	sxtb	r3, r3
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	f002 fbb1 	bl	800f6b4 <RegionAlternateDr>
 800cf52:	4603      	mov	r3, r0
 800cf54:	461a      	mov	r2, r3
 800cf56:	4b58      	ldr	r3, [pc, #352]	; (800d0b8 <LoRaMacMlmeRequest+0x27c>)
 800cf58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 800cf5c:	e07b      	b.n	800d056 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800cf62:	f107 030c 	add.w	r3, r7, #12
 800cf66:	2200      	movs	r2, #0
 800cf68:	4619      	mov	r1, r3
 800cf6a:	2002      	movs	r0, #2
 800cf6c:	f000 fc88 	bl	800d880 <LoRaMacCommandsAddCmd>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d071      	beq.n	800d05a <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cf76:	2313      	movs	r3, #19
 800cf78:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800cf7a:	e06e      	b.n	800d05a <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	889b      	ldrh	r3, [r3, #4]
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fe fcdb 	bl	800b93c <SetTxContinuousWave>
 800cf86:	4603      	mov	r3, r0
 800cf88:	75fb      	strb	r3, [r7, #23]
            break;
 800cf8a:	e06d      	b.n	800d068 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	8898      	ldrh	r0, [r3, #4]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6899      	ldr	r1, [r3, #8]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	f7fe fd01 	bl	800b9a4 <SetTxContinuousWave1>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	75fb      	strb	r3, [r7, #23]
            break;
 800cfa6:	e05f      	b.n	800d068 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800cfac:	f107 030c 	add.w	r3, r7, #12
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	200d      	movs	r0, #13
 800cfb6:	f000 fc63 	bl	800d880 <LoRaMacCommandsAddCmd>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d04e      	beq.n	800d05e <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cfc0:	2313      	movs	r3, #19
 800cfc2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800cfc4:	e04b      	b.n	800d05e <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800cfc6:	4b3c      	ldr	r3, [pc, #240]	; (800d0b8 <LoRaMacMlmeRequest+0x27c>)
 800cfc8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d148      	bne.n	800d062 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	791b      	ldrb	r3, [r3, #4]
 800cfd4:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	791b      	ldrb	r3, [r3, #4]
 800cfda:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f000 fabe 	bl	800d562 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800cfe6:	7dbb      	ldrb	r3, [r7, #22]
 800cfe8:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800cfee:	f107 030c 	add.w	r3, r7, #12
 800cff2:	2201      	movs	r2, #1
 800cff4:	4619      	mov	r1, r3
 800cff6:	2010      	movs	r0, #16
 800cff8:	f000 fc42 	bl	800d880 <LoRaMacCommandsAddCmd>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d02f      	beq.n	800d062 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d002:	2313      	movs	r3, #19
 800d004:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 800d006:	e02c      	b.n	800d062 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800d008:	2300      	movs	r3, #0
 800d00a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800d00c:	f107 030c 	add.w	r3, r7, #12
 800d010:	2200      	movs	r2, #0
 800d012:	4619      	mov	r1, r3
 800d014:	2012      	movs	r0, #18
 800d016:	f000 fc33 	bl	800d880 <LoRaMacCommandsAddCmd>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d022      	beq.n	800d066 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d020:	2313      	movs	r3, #19
 800d022:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800d024:	e01f      	b.n	800d066 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800d026:	2301      	movs	r3, #1
 800d028:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800d02a:	f000 fa50 	bl	800d4ce <LoRaMacClassBIsAcquisitionInProgress>
 800d02e:	4603      	mov	r3, r0
 800d030:	f083 0301 	eor.w	r3, r3, #1
 800d034:	b2db      	uxtb	r3, r3
 800d036:	2b00      	cmp	r3, #0
 800d038:	d008      	beq.n	800d04c <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800d03a:	2000      	movs	r0, #0
 800d03c:	f000 fa29 	bl	800d492 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800d040:	2000      	movs	r0, #0
 800d042:	f000 fa4b 	bl	800d4dc <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800d046:	2300      	movs	r3, #0
 800d048:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 800d04a:	e00d      	b.n	800d068 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 800d04c:	2301      	movs	r3, #1
 800d04e:	75fb      	strb	r3, [r7, #23]
            break;
 800d050:	e00a      	b.n	800d068 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 800d052:	bf00      	nop
 800d054:	e008      	b.n	800d068 <LoRaMacMlmeRequest+0x22c>
            break;
 800d056:	bf00      	nop
 800d058:	e006      	b.n	800d068 <LoRaMacMlmeRequest+0x22c>
            break;
 800d05a:	bf00      	nop
 800d05c:	e004      	b.n	800d068 <LoRaMacMlmeRequest+0x22c>
            break;
 800d05e:	bf00      	nop
 800d060:	e002      	b.n	800d068 <LoRaMacMlmeRequest+0x22c>
            break;
 800d062:	bf00      	nop
 800d064:	e000      	b.n	800d068 <LoRaMacMlmeRequest+0x22c>
            break;
 800d066:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800d068:	4b12      	ldr	r3, [pc, #72]	; (800d0b4 <LoRaMacMlmeRequest+0x278>)
 800d06a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 800d072:	7dfb      	ldrb	r3, [r7, #23]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d010      	beq.n	800d09a <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800d078:	f000 ff90 	bl	800df9c <LoRaMacConfirmQueueGetCnt>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d110      	bne.n	800d0a4 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 800d082:	4b0c      	ldr	r3, [pc, #48]	; (800d0b4 <LoRaMacMlmeRequest+0x278>)
 800d084:	2200      	movs	r2, #0
 800d086:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800d08a:	4a0a      	ldr	r2, [pc, #40]	; (800d0b4 <LoRaMacMlmeRequest+0x278>)
 800d08c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d090:	f36f 0382 	bfc	r3, #2, #1
 800d094:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800d098:	e004      	b.n	800d0a4 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 800d09a:	f107 0310 	add.w	r3, r7, #16
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f000 fe2e 	bl	800dd00 <LoRaMacConfirmQueueAdd>
    }
    return status;
 800d0a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3718      	adds	r7, #24
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	20000764 	.word	0x20000764
 800d0b4:	20000318 	.word	0x20000318
 800d0b8:	20000820 	.word	0x20000820

0800d0bc <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b08c      	sub	sp, #48	; 0x30
 800d0c0:	af02      	add	r7, sp, #8
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d0c8:	2302      	movs	r3, #2
 800d0ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d101      	bne.n	800d0ea <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	e0d4      	b.n	800d294 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 800d0ea:	f7fc fbd9 	bl	80098a0 <LoRaMacIsBusy>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d001      	beq.n	800d0f8 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e0cd      	b.n	800d294 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800d0fc:	2214      	movs	r2, #20
 800d0fe:	2100      	movs	r1, #0
 800d100:	4866      	ldr	r0, [pc, #408]	; (800d29c <LoRaMacMcpsRequest+0x1e0>)
 800d102:	f006 f82b 	bl	801315c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d106:	4b66      	ldr	r3, [pc, #408]	; (800d2a0 <LoRaMacMcpsRequest+0x1e4>)
 800d108:	2201      	movs	r2, #1
 800d10a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 800d10e:	4b64      	ldr	r3, [pc, #400]	; (800d2a0 <LoRaMacMcpsRequest+0x1e4>)
 800d110:	2201      	movs	r2, #1
 800d112:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	2b03      	cmp	r3, #3
 800d11c:	d03d      	beq.n	800d19a <LoRaMacMcpsRequest+0xde>
 800d11e:	2b03      	cmp	r3, #3
 800d120:	dc4f      	bgt.n	800d1c2 <LoRaMacMcpsRequest+0x106>
 800d122:	2b00      	cmp	r3, #0
 800d124:	d002      	beq.n	800d12c <LoRaMacMcpsRequest+0x70>
 800d126:	2b01      	cmp	r3, #1
 800d128:	d019      	beq.n	800d15e <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 800d12a:	e04a      	b.n	800d1c2 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 800d12c:	2301      	movs	r3, #1
 800d12e:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 800d130:	4b5b      	ldr	r3, [pc, #364]	; (800d2a0 <LoRaMacMcpsRequest+0x1e4>)
 800d132:	2201      	movs	r2, #1
 800d134:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800d138:	7b3b      	ldrb	r3, [r7, #12]
 800d13a:	2202      	movs	r2, #2
 800d13c:	f362 1347 	bfi	r3, r2, #5, #3
 800d140:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	791b      	ldrb	r3, [r3, #4]
 800d146:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	899b      	ldrh	r3, [r3, #12]
 800d154:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	7b9b      	ldrb	r3, [r3, #14]
 800d15a:	777b      	strb	r3, [r7, #29]
            break;
 800d15c:	e032      	b.n	800d1c4 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 800d15e:	2301      	movs	r3, #1
 800d160:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	7bdb      	ldrb	r3, [r3, #15]
 800d166:	2b08      	cmp	r3, #8
 800d168:	bf28      	it	cs
 800d16a:	2308      	movcs	r3, #8
 800d16c:	b2da      	uxtb	r2, r3
 800d16e:	4b4c      	ldr	r3, [pc, #304]	; (800d2a0 <LoRaMacMcpsRequest+0x1e4>)
 800d170:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800d174:	7b3b      	ldrb	r3, [r7, #12]
 800d176:	2204      	movs	r2, #4
 800d178:	f362 1347 	bfi	r3, r2, #5, #3
 800d17c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	791b      	ldrb	r3, [r3, #4]
 800d182:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	899b      	ldrh	r3, [r3, #12]
 800d190:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	7b9b      	ldrb	r3, [r3, #14]
 800d196:	777b      	strb	r3, [r7, #29]
            break;
 800d198:	e014      	b.n	800d1c4 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 800d19a:	2301      	movs	r3, #1
 800d19c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 800d19e:	4b40      	ldr	r3, [pc, #256]	; (800d2a0 <LoRaMacMcpsRequest+0x1e4>)
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800d1a6:	7b3b      	ldrb	r3, [r7, #12]
 800d1a8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800d1ac:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	891b      	ldrh	r3, [r3, #8]
 800d1b8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	7a9b      	ldrb	r3, [r3, #10]
 800d1be:	777b      	strb	r3, [r7, #29]
            break;
 800d1c0:	e000      	b.n	800d1c4 <LoRaMacMcpsRequest+0x108>
            break;
 800d1c2:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d1c8:	4b36      	ldr	r3, [pc, #216]	; (800d2a4 <LoRaMacMcpsRequest+0x1e8>)
 800d1ca:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d1ce:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d1d0:	4b34      	ldr	r3, [pc, #208]	; (800d2a4 <LoRaMacMcpsRequest+0x1e8>)
 800d1d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d1d6:	f107 0214 	add.w	r2, r7, #20
 800d1da:	4611      	mov	r1, r2
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f002 f8ce 	bl	800f37e <RegionGetPhyParam>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	b25b      	sxtb	r3, r3
 800d1ea:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	bfb8      	it	lt
 800d1f2:	4613      	movlt	r3, r2
 800d1f4:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 800d1f6:	7f3b      	ldrb	r3, [r7, #28]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d044      	beq.n	800d286 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800d1fc:	4b29      	ldr	r3, [pc, #164]	; (800d2a4 <LoRaMacMcpsRequest+0x1e8>)
 800d1fe:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800d202:	f083 0301 	eor.w	r3, r3, #1
 800d206:	b2db      	uxtb	r3, r3
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d019      	beq.n	800d240 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 800d20c:	7f7b      	ldrb	r3, [r7, #29]
 800d20e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d210:	4b24      	ldr	r3, [pc, #144]	; (800d2a4 <LoRaMacMcpsRequest+0x1e8>)
 800d212:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d216:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800d218:	4b22      	ldr	r3, [pc, #136]	; (800d2a4 <LoRaMacMcpsRequest+0x1e8>)
 800d21a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d21e:	f107 0108 	add.w	r1, r7, #8
 800d222:	2205      	movs	r2, #5
 800d224:	4618      	mov	r0, r3
 800d226:	f002 f8fb 	bl	800f420 <RegionVerify>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d005      	beq.n	800d23c <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800d230:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800d234:	4b1b      	ldr	r3, [pc, #108]	; (800d2a4 <LoRaMacMcpsRequest+0x1e8>)
 800d236:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800d23a:	e001      	b.n	800d240 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800d23c:	2303      	movs	r3, #3
 800d23e:	e029      	b.n	800d294 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800d240:	8bfa      	ldrh	r2, [r7, #30]
 800d242:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800d246:	f107 000c 	add.w	r0, r7, #12
 800d24a:	78fb      	ldrb	r3, [r7, #3]
 800d24c:	9300      	str	r3, [sp, #0]
 800d24e:	4613      	mov	r3, r2
 800d250:	6a3a      	ldr	r2, [r7, #32]
 800d252:	f7fd fcef 	bl	800ac34 <Send>
 800d256:	4603      	mov	r3, r0
 800d258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 800d25c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d260:	2b00      	cmp	r3, #0
 800d262:	d10c      	bne.n	800d27e <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	781a      	ldrb	r2, [r3, #0]
 800d268:	4b0d      	ldr	r3, [pc, #52]	; (800d2a0 <LoRaMacMcpsRequest+0x1e4>)
 800d26a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800d26e:	4a0c      	ldr	r2, [pc, #48]	; (800d2a0 <LoRaMacMcpsRequest+0x1e4>)
 800d270:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d274:	f043 0301 	orr.w	r3, r3, #1
 800d278:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800d27c:	e003      	b.n	800d286 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 800d27e:	4b08      	ldr	r3, [pc, #32]	; (800d2a0 <LoRaMacMcpsRequest+0x1e4>)
 800d280:	2200      	movs	r2, #0
 800d282:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800d286:	4b06      	ldr	r3, [pc, #24]	; (800d2a0 <LoRaMacMcpsRequest+0x1e4>)
 800d288:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	611a      	str	r2, [r3, #16]

    return status;
 800d290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d294:	4618      	mov	r0, r3
 800d296:	3728      	adds	r7, #40	; 0x28
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	20000750 	.word	0x20000750
 800d2a0:	20000318 	.word	0x20000318
 800d2a4:	20000820 	.word	0x20000820

0800d2a8 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800d2b2:	79fb      	ldrb	r3, [r7, #7]
 800d2b4:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800d2b6:	4b0a      	ldr	r3, [pc, #40]	; (800d2e0 <LoRaMacTestSetDutyCycleOn+0x38>)
 800d2b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d2bc:	f107 010c 	add.w	r1, r7, #12
 800d2c0:	220f      	movs	r2, #15
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f002 f8ac 	bl	800f420 <RegionVerify>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d003      	beq.n	800d2d6 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800d2ce:	4a04      	ldr	r2, [pc, #16]	; (800d2e0 <LoRaMacTestSetDutyCycleOn+0x38>)
 800d2d0:	79fb      	ldrb	r3, [r7, #7]
 800d2d2:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 800d2d6:	bf00      	nop
 800d2d8:	3710      	adds	r7, #16
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	20000820 	.word	0x20000820

0800d2e4 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b08c      	sub	sp, #48	; 0x30
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	607a      	str	r2, [r7, #4]
 800d2f0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	7c1b      	ldrb	r3, [r3, #16]
 800d2fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	7c5b      	ldrb	r3, [r3, #17]
 800d304:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	689a      	ldr	r2, [r3, #8]
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	795b      	ldrb	r3, [r3, #5]
 800d314:	2b00      	cmp	r3, #0
 800d316:	f000 808b 	beq.w	800d430 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 800d31a:	2302      	movs	r3, #2
 800d31c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	7c9b      	ldrb	r3, [r3, #18]
 800d324:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	7cdb      	ldrb	r3, [r3, #19]
 800d32c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d330:	4611      	mov	r1, r2
 800d332:	4618      	mov	r0, r3
 800d334:	f002 f823 	bl	800f37e <RegionGetPhyParam>
 800d338:	4603      	mov	r3, r0
 800d33a:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 800d33c:	6a3b      	ldr	r3, [r7, #32]
 800d33e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 800d342:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 800d346:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800d34a:	4293      	cmp	r3, r2
 800d34c:	bfb8      	it	lt
 800d34e:	4613      	movlt	r3, r2
 800d350:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 800d354:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 800d358:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d106      	bne.n	800d36e <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	2200      	movs	r2, #0
 800d364:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 800d366:	2300      	movs	r3, #0
 800d368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d36c:	e060      	b.n	800d430 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	689b      	ldr	r3, [r3, #8]
 800d372:	68fa      	ldr	r2, [r7, #12]
 800d374:	8992      	ldrh	r2, [r2, #12]
 800d376:	4293      	cmp	r3, r2
 800d378:	d303      	bcc.n	800d382 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 800d37a:	2301      	movs	r3, #1
 800d37c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d380:	e002      	b.n	800d388 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 800d382:	2300      	movs	r3, #0
 800d384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	8992      	ldrh	r2, [r2, #12]
 800d390:	4611      	mov	r1, r2
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	89d2      	ldrh	r2, [r2, #14]
 800d396:	440a      	add	r2, r1
 800d398:	4293      	cmp	r3, r2
 800d39a:	d349      	bcc.n	800d430 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800d39c:	2308      	movs	r3, #8
 800d39e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	7cdb      	ldrb	r3, [r3, #19]
 800d3a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d3aa:	4611      	mov	r1, r2
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f001 ffe6 	bl	800f37e <RegionGetPhyParam>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 800d3b6:	6a3b      	ldr	r3, [r7, #32]
 800d3b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	89d2      	ldrh	r2, [r2, #14]
 800d3c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3c8:	fb02 f201 	mul.w	r2, r2, r1
 800d3cc:	1a9b      	subs	r3, r3, r2
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d12e      	bne.n	800d430 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800d3d2:	2322      	movs	r3, #34	; 0x22
 800d3d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 800d3d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d3dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	7c9b      	ldrb	r3, [r3, #18]
 800d3e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	7cdb      	ldrb	r3, [r3, #19]
 800d3ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f001 ffc3 	bl	800f37e <RegionGetPhyParam>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 800d3fc:	6a3b      	ldr	r3, [r7, #32]
 800d3fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 800d402:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 800d406:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d110      	bne.n	800d430 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 800d40e:	2300      	movs	r3, #0
 800d410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	791b      	ldrb	r3, [r3, #4]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d009      	beq.n	800d430 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800d41c:	2302      	movs	r3, #2
 800d41e:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	7cdb      	ldrb	r3, [r3, #19]
 800d424:	f107 0214 	add.w	r2, r7, #20
 800d428:	4611      	mov	r1, r2
 800d42a:	4618      	mov	r0, r3
 800d42c:	f001 ffe0 	bl	800f3f0 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d436:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800d43e:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 800d440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d444:	4618      	mov	r0, r3
 800d446:	3730      	adds	r7, #48	; 0x30
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	607a      	str	r2, [r7, #4]
 800d458:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	789b      	ldrb	r3, [r3, #2]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d107      	bne.n	800d472 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	68b9      	ldr	r1, [r7, #8]
 800d468:	68f8      	ldr	r0, [r7, #12]
 800d46a:	f7ff ff3b 	bl	800d2e4 <CalcNextV10X>
 800d46e:	4603      	mov	r3, r0
 800d470:	e000      	b.n	800d474 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 800d472:	2300      	movs	r3, #0
}
 800d474:	4618      	mov	r0, r3
 800d476:	3710      	adds	r7, #16
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 800d47c:	b480      	push	{r7}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d488:	bf00      	nop
 800d48a:	3714      	adds	r7, #20
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bc80      	pop	{r7}
 800d490:	4770      	bx	lr

0800d492 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 800d492:	b480      	push	{r7}
 800d494:	b083      	sub	sp, #12
 800d496:	af00      	add	r7, sp, #0
 800d498:	4603      	mov	r3, r0
 800d49a:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d49c:	bf00      	nop
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bc80      	pop	{r7}
 800d4a4:	4770      	bx	lr

0800d4a6 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 800d4a6:	b480      	push	{r7}
 800d4a8:	b083      	sub	sp, #12
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bc80      	pop	{r7}
 800d4b8:	4770      	bx	lr

0800d4ba <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 800d4ba:	b480      	push	{r7}
 800d4bc:	b083      	sub	sp, #12
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d4c4:	bf00      	nop
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bc80      	pop	{r7}
 800d4cc:	4770      	bx	lr

0800d4ce <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 800d4ce:	b480      	push	{r7}
 800d4d0:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 800d4d2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bc80      	pop	{r7}
 800d4da:	4770      	bx	lr

0800d4dc <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d4e4:	bf00      	nop
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bc80      	pop	{r7}
 800d4ec:	4770      	bx	lr

0800d4ee <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800d4ee:	b480      	push	{r7}
 800d4f0:	b083      	sub	sp, #12
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d4f6:	bf00      	nop
 800d4f8:	370c      	adds	r7, #12
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bc80      	pop	{r7}
 800d4fe:	4770      	bx	lr

0800d500 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bc80      	pop	{r7}
 800d510:	4770      	bx	lr

0800d512 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800d512:	b480      	push	{r7}
 800d514:	b083      	sub	sp, #12
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
 800d51a:	460b      	mov	r3, r1
 800d51c:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 800d51e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d520:	4618      	mov	r0, r3
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	bc80      	pop	{r7}
 800d528:	4770      	bx	lr

0800d52a <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 800d52a:	b480      	push	{r7}
 800d52c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800d52e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d530:	4618      	mov	r0, r3
 800d532:	46bd      	mov	sp, r7
 800d534:	bc80      	pop	{r7}
 800d536:	4770      	bx	lr

0800d538 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 800d538:	b480      	push	{r7}
 800d53a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800d53c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d53e:	4618      	mov	r0, r3
 800d540:	46bd      	mov	sp, r7
 800d542:	bc80      	pop	{r7}
 800d544:	4770      	bx	lr

0800d546 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800d546:	b480      	push	{r7}
 800d548:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800d54a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	46bd      	mov	sp, r7
 800d550:	bc80      	pop	{r7}
 800d552:	4770      	bx	lr

0800d554 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800d554:	b480      	push	{r7}
 800d556:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800d558:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bc80      	pop	{r7}
 800d560:	4770      	bx	lr

0800d562 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 800d562:	b480      	push	{r7}
 800d564:	b083      	sub	sp, #12
 800d566:	af00      	add	r7, sp, #0
 800d568:	4603      	mov	r3, r0
 800d56a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d56c:	bf00      	nop
 800d56e:	370c      	adds	r7, #12
 800d570:	46bd      	mov	sp, r7
 800d572:	bc80      	pop	{r7}
 800d574:	4770      	bx	lr

0800d576 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 800d576:	b480      	push	{r7}
 800d578:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d57a:	bf00      	nop
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bc80      	pop	{r7}
 800d580:	4770      	bx	lr

0800d582 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 800d582:	b480      	push	{r7}
 800d584:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d586:	bf00      	nop
 800d588:	46bd      	mov	sp, r7
 800d58a:	bc80      	pop	{r7}
 800d58c:	4770      	bx	lr

0800d58e <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 800d58e:	b480      	push	{r7}
 800d590:	b083      	sub	sp, #12
 800d592:	af00      	add	r7, sp, #0
 800d594:	4603      	mov	r3, r0
 800d596:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d598:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	370c      	adds	r7, #12
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bc80      	pop	{r7}
 800d5a2:	4770      	bx	lr

0800d5a4 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d5ac:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	370c      	adds	r7, #12
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bc80      	pop	{r7}
 800d5b6:	4770      	bx	lr

0800d5b8 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d5c0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	370c      	adds	r7, #12
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bc80      	pop	{r7}
 800d5ca:	4770      	bx	lr

0800d5cc <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d5d0:	bf00      	nop
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bc80      	pop	{r7}
 800d5d6:	4770      	bx	lr

0800d5d8 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	4603      	mov	r3, r0
 800d5e0:	6039      	str	r1, [r7, #0]
 800d5e2:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 800d5e4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	370c      	adds	r7, #12
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bc80      	pop	{r7}
 800d5ee:	4770      	bx	lr

0800d5f0 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	603a      	str	r2, [r7, #0]
 800d5fa:	80fb      	strh	r3, [r7, #6]
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d600:	bf00      	nop
 800d602:	370c      	adds	r7, #12
 800d604:	46bd      	mov	sp, r7
 800d606:	bc80      	pop	{r7}
 800d608:	4770      	bx	lr

0800d60a <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800d60a:	b480      	push	{r7}
 800d60c:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d60e:	bf00      	nop
 800d610:	46bd      	mov	sp, r7
 800d612:	bc80      	pop	{r7}
 800d614:	4770      	bx	lr

0800d616 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 800d616:	b480      	push	{r7}
 800d618:	b083      	sub	sp, #12
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 800d61e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d620:	4618      	mov	r0, r3
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	bc80      	pop	{r7}
 800d628:	4770      	bx	lr

0800d62a <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800d62a:	b480      	push	{r7}
 800d62c:	b083      	sub	sp, #12
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 800d632:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d634:	4618      	mov	r0, r3
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	bc80      	pop	{r7}
 800d63c:	4770      	bx	lr

0800d63e <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800d63e:	b480      	push	{r7}
 800d640:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d642:	bf00      	nop
 800d644:	46bd      	mov	sp, r7
 800d646:	bc80      	pop	{r7}
 800d648:	4770      	bx	lr

0800d64a <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 800d64a:	b480      	push	{r7}
 800d64c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800d64e:	bf00      	nop
 800d650:	46bd      	mov	sp, r7
 800d652:	bc80      	pop	{r7}
 800d654:	4770      	bx	lr

0800d656 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 800d656:	b480      	push	{r7}
 800d658:	b085      	sub	sp, #20
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800d662:	2300      	movs	r3, #0
 800d664:	81fb      	strh	r3, [r7, #14]
 800d666:	e00a      	b.n	800d67e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 800d668:	89fb      	ldrh	r3, [r7, #14]
 800d66a:	68ba      	ldr	r2, [r7, #8]
 800d66c:	4413      	add	r3, r2
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <IsSlotFree+0x22>
        {
            return false;
 800d674:	2300      	movs	r3, #0
 800d676:	e006      	b.n	800d686 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800d678:	89fb      	ldrh	r3, [r7, #14]
 800d67a:	3301      	adds	r3, #1
 800d67c:	81fb      	strh	r3, [r7, #14]
 800d67e:	89fb      	ldrh	r3, [r7, #14]
 800d680:	2b0f      	cmp	r3, #15
 800d682:	d9f1      	bls.n	800d668 <IsSlotFree+0x12>
        }
    }
    return true;
 800d684:	2301      	movs	r3, #1
}
 800d686:	4618      	mov	r0, r3
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bc80      	pop	{r7}
 800d68e:	4770      	bx	lr

0800d690 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 800d696:	2300      	movs	r3, #0
 800d698:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800d69a:	e007      	b.n	800d6ac <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 800d69c:	79fb      	ldrb	r3, [r7, #7]
 800d69e:	3301      	adds	r3, #1
 800d6a0:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 800d6a2:	79fb      	ldrb	r3, [r7, #7]
 800d6a4:	2b0f      	cmp	r3, #15
 800d6a6:	d101      	bne.n	800d6ac <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	e012      	b.n	800d6d2 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800d6ac:	79fb      	ldrb	r3, [r7, #7]
 800d6ae:	011b      	lsls	r3, r3, #4
 800d6b0:	3308      	adds	r3, #8
 800d6b2:	4a0a      	ldr	r2, [pc, #40]	; (800d6dc <MallocNewMacCommandSlot+0x4c>)
 800d6b4:	4413      	add	r3, r2
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7ff ffcd 	bl	800d656 <IsSlotFree>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	f083 0301 	eor.w	r3, r3, #1
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1e9      	bne.n	800d69c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 800d6c8:	79fb      	ldrb	r3, [r7, #7]
 800d6ca:	011b      	lsls	r3, r3, #4
 800d6cc:	3308      	adds	r3, #8
 800d6ce:	4a03      	ldr	r2, [pc, #12]	; (800d6dc <MallocNewMacCommandSlot+0x4c>)
 800d6d0:	4413      	add	r3, r2
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	20000e34 	.word	0x20000e34

0800d6e0 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d101      	bne.n	800d6f2 <FreeMacCommandSlot+0x12>
    {
        return false;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	e005      	b.n	800d6fe <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800d6f2:	2210      	movs	r2, #16
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f005 fd30 	bl	801315c <memset1>

    return true;
 800d6fc:	2301      	movs	r3, #1
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 800d706:	b480      	push	{r7}
 800d708:	b083      	sub	sp, #12
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d101      	bne.n	800d718 <LinkedListInit+0x12>
    {
        return false;
 800d714:	2300      	movs	r3, #0
 800d716:	e006      	b.n	800d726 <LinkedListInit+0x20>
    }

    list->First = NULL;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2200      	movs	r2, #0
 800d71c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	605a      	str	r2, [r3, #4]

    return true;
 800d724:	2301      	movs	r3, #1
}
 800d726:	4618      	mov	r0, r3
 800d728:	370c      	adds	r7, #12
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bc80      	pop	{r7}
 800d72e:	4770      	bx	lr

0800d730 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 800d730:	b480      	push	{r7}
 800d732:	b083      	sub	sp, #12
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d002      	beq.n	800d746 <LinkedListAdd+0x16>
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d101      	bne.n	800d74a <LinkedListAdd+0x1a>
    {
        return false;
 800d746:	2300      	movs	r3, #0
 800d748:	e015      	b.n	800d776 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d102      	bne.n	800d758 <LinkedListAdd+0x28>
    {
        list->First = element;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	683a      	ldr	r2, [r7, #0]
 800d756:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d003      	beq.n	800d768 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	683a      	ldr	r2, [r7, #0]
 800d766:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	2200      	movs	r2, #0
 800d76c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	683a      	ldr	r2, [r7, #0]
 800d772:	605a      	str	r2, [r3, #4]

    return true;
 800d774:	2301      	movs	r3, #1
}
 800d776:	4618      	mov	r0, r3
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bc80      	pop	{r7}
 800d77e:	4770      	bx	lr

0800d780 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 800d780:	b480      	push	{r7}
 800d782:	b085      	sub	sp, #20
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d002      	beq.n	800d796 <LinkedListGetPrevious+0x16>
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d101      	bne.n	800d79a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 800d796:	2300      	movs	r3, #0
 800d798:	e016      	b.n	800d7c8 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800d7a0:	683a      	ldr	r2, [r7, #0]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d00c      	beq.n	800d7c2 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800d7a8:	e002      	b.n	800d7b0 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d007      	beq.n	800d7c6 <LinkedListGetPrevious+0x46>
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	683a      	ldr	r2, [r7, #0]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d1f4      	bne.n	800d7aa <LinkedListGetPrevious+0x2a>
 800d7c0:	e001      	b.n	800d7c6 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3714      	adds	r7, #20
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bc80      	pop	{r7}
 800d7d0:	4770      	bx	lr

0800d7d2 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b084      	sub	sp, #16
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
 800d7da:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d002      	beq.n	800d7e8 <LinkedListRemove+0x16>
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d101      	bne.n	800d7ec <LinkedListRemove+0x1a>
    {
        return false;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	e020      	b.n	800d82e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800d7ec:	6839      	ldr	r1, [r7, #0]
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7ff ffc6 	bl	800d780 <LinkedListGetPrevious>
 800d7f4:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	683a      	ldr	r2, [r7, #0]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d103      	bne.n	800d808 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	683a      	ldr	r2, [r7, #0]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d102      	bne.n	800d818 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	68fa      	ldr	r2, [r7, #12]
 800d816:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d003      	beq.n	800d826 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	2200      	movs	r2, #0
 800d82a:	601a      	str	r2, [r3, #0]

    return true;
 800d82c:	2301      	movs	r3, #1
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 800d836:	b480      	push	{r7}
 800d838:	b083      	sub	sp, #12
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	4603      	mov	r3, r0
 800d83e:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 800d840:	79fb      	ldrb	r3, [r7, #7]
 800d842:	2b05      	cmp	r3, #5
 800d844:	d004      	beq.n	800d850 <IsSticky+0x1a>
 800d846:	2b05      	cmp	r3, #5
 800d848:	db04      	blt.n	800d854 <IsSticky+0x1e>
 800d84a:	3b08      	subs	r3, #8
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	d801      	bhi.n	800d854 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 800d850:	2301      	movs	r3, #1
 800d852:	e000      	b.n	800d856 <IsSticky+0x20>
        default:
            return false;
 800d854:	2300      	movs	r3, #0
    }
}
 800d856:	4618      	mov	r0, r3
 800d858:	370c      	adds	r7, #12
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bc80      	pop	{r7}
 800d85e:	4770      	bx	lr

0800d860 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800d864:	22fc      	movs	r2, #252	; 0xfc
 800d866:	2100      	movs	r1, #0
 800d868:	4804      	ldr	r0, [pc, #16]	; (800d87c <LoRaMacCommandsInit+0x1c>)
 800d86a:	f005 fc77 	bl	801315c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800d86e:	4803      	ldr	r0, [pc, #12]	; (800d87c <LoRaMacCommandsInit+0x1c>)
 800d870:	f7ff ff49 	bl	800d706 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	20000e34 	.word	0x20000e34

0800d880 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b086      	sub	sp, #24
 800d884:	af00      	add	r7, sp, #0
 800d886:	4603      	mov	r3, r0
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
 800d88c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d101      	bne.n	800d898 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d894:	2301      	movs	r3, #1
 800d896:	e033      	b.n	800d900 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800d898:	f7ff fefa 	bl	800d690 <MallocNewMacCommandSlot>
 800d89c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d101      	bne.n	800d8a8 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800d8a4:	2302      	movs	r3, #2
 800d8a6:	e02b      	b.n	800d900 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800d8a8:	6979      	ldr	r1, [r7, #20]
 800d8aa:	4817      	ldr	r0, [pc, #92]	; (800d908 <LoRaMacCommandsAddCmd+0x88>)
 800d8ac:	f7ff ff40 	bl	800d730 <LinkedListAdd>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	f083 0301 	eor.w	r3, r3, #1
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d001      	beq.n	800d8c0 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 800d8bc:	2305      	movs	r3, #5
 800d8be:	e01f      	b.n	800d900 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	7bfa      	ldrb	r2, [r7, #15]
 800d8c4:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	3305      	adds	r3, #5
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	b292      	uxth	r2, r2
 800d8d4:	68b9      	ldr	r1, [r7, #8]
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f005 fc05 	bl	80130e6 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7ff ffa9 	bl	800d836 <IsSticky>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800d8ec:	4b06      	ldr	r3, [pc, #24]	; (800d908 <LoRaMacCommandsAddCmd+0x88>)
 800d8ee:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	4a03      	ldr	r2, [pc, #12]	; (800d908 <LoRaMacCommandsAddCmd+0x88>)
 800d8fa:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800d8fe:	2300      	movs	r3, #0
}
 800d900:	4618      	mov	r0, r3
 800d902:	3718      	adds	r7, #24
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	20000e34 	.word	0x20000e34

0800d90c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d101      	bne.n	800d91e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d91a:	2301      	movs	r3, #1
 800d91c:	e021      	b.n	800d962 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800d91e:	6879      	ldr	r1, [r7, #4]
 800d920:	4812      	ldr	r0, [pc, #72]	; (800d96c <LoRaMacCommandsRemoveCmd+0x60>)
 800d922:	f7ff ff56 	bl	800d7d2 <LinkedListRemove>
 800d926:	4603      	mov	r3, r0
 800d928:	f083 0301 	eor.w	r3, r3, #1
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d001      	beq.n	800d936 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800d932:	2303      	movs	r3, #3
 800d934:	e015      	b.n	800d962 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800d936:	4b0d      	ldr	r3, [pc, #52]	; (800d96c <LoRaMacCommandsRemoveCmd+0x60>)
 800d938:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	3b01      	subs	r3, #1
 800d944:	4a09      	ldr	r2, [pc, #36]	; (800d96c <LoRaMacCommandsRemoveCmd+0x60>)
 800d946:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f7ff fec8 	bl	800d6e0 <FreeMacCommandSlot>
 800d950:	4603      	mov	r3, r0
 800d952:	f083 0301 	eor.w	r3, r3, #1
 800d956:	b2db      	uxtb	r3, r3
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d001      	beq.n	800d960 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 800d95c:	2305      	movs	r3, #5
 800d95e:	e000      	b.n	800d962 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800d960:	2300      	movs	r3, #0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	20000e34 	.word	0x20000e34

0800d970 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800d976:	4b0f      	ldr	r3, [pc, #60]	; (800d9b4 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 800d97c:	e012      	b.n	800d9a4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	7b1b      	ldrb	r3, [r3, #12]
 800d982:	f083 0301 	eor.w	r3, r3, #1
 800d986:	b2db      	uxtb	r3, r3
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d008      	beq.n	800d99e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7ff ffba 	bl	800d90c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	607b      	str	r3, [r7, #4]
 800d99c:	e002      	b.n	800d9a4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1e9      	bne.n	800d97e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3708      	adds	r7, #8
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	20000e34 	.word	0x20000e34

0800d9b8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800d9be:	4b0e      	ldr	r3, [pc, #56]	; (800d9f8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 800d9c4:	e00f      	b.n	800d9e6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	791b      	ldrb	r3, [r3, #4]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7ff ff30 	bl	800d836 <IsSticky>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7ff ff95 	bl	800d90c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1ec      	bne.n	800d9c6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3708      	adds	r7, #8
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	20000e34 	.word	0x20000e34

0800d9fc <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d101      	bne.n	800da0e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800da0a:	2301      	movs	r3, #1
 800da0c:	e005      	b.n	800da1a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800da0e:	4b05      	ldr	r3, [pc, #20]	; (800da24 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 800da10:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800da18:	2300      	movs	r3, #0
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	bc80      	pop	{r7}
 800da22:	4770      	bx	lr
 800da24:	20000e34 	.word	0x20000e34

0800da28 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b088      	sub	sp, #32
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800da34:	4b25      	ldr	r3, [pc, #148]	; (800dacc <LoRaMacCommandsSerializeCmds+0xa4>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 800da3a:	2300      	movs	r3, #0
 800da3c:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d002      	beq.n	800da4a <LoRaMacCommandsSerializeCmds+0x22>
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d126      	bne.n	800da98 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800da4a:	2301      	movs	r3, #1
 800da4c:	e039      	b.n	800dac2 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800da4e:	7efb      	ldrb	r3, [r7, #27]
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	1ad2      	subs	r2, r2, r3
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	689b      	ldr	r3, [r3, #8]
 800da58:	3301      	adds	r3, #1
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d320      	bcc.n	800daa0 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 800da5e:	7efb      	ldrb	r3, [r7, #27]
 800da60:	1c5a      	adds	r2, r3, #1
 800da62:	76fa      	strb	r2, [r7, #27]
 800da64:	461a      	mov	r2, r3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	4413      	add	r3, r2
 800da6a:	69fa      	ldr	r2, [r7, #28]
 800da6c:	7912      	ldrb	r2, [r2, #4]
 800da6e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800da70:	7efb      	ldrb	r3, [r7, #27]
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	18d0      	adds	r0, r2, r3
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	1d59      	adds	r1, r3, #5
 800da7a:	69fb      	ldr	r3, [r7, #28]
 800da7c:	689b      	ldr	r3, [r3, #8]
 800da7e:	b29b      	uxth	r3, r3
 800da80:	461a      	mov	r2, r3
 800da82:	f005 fb30 	bl	80130e6 <memcpy1>
            itr += curElement->PayloadSize;
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	b2da      	uxtb	r2, r3
 800da8c:	7efb      	ldrb	r3, [r7, #27]
 800da8e:	4413      	add	r3, r2
 800da90:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1d7      	bne.n	800da4e <LoRaMacCommandsSerializeCmds+0x26>
 800da9e:	e009      	b.n	800dab4 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 800daa0:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800daa2:	e007      	b.n	800dab4 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800daa4:	69fb      	ldr	r3, [r7, #28]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 800daaa:	69f8      	ldr	r0, [r7, #28]
 800daac:	f7ff ff2e 	bl	800d90c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d1f4      	bne.n	800daa4 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800daba:	68b8      	ldr	r0, [r7, #8]
 800dabc:	f7ff ff9e 	bl	800d9fc <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3720      	adds	r7, #32
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	20000e34 	.word	0x20000e34

0800dad0 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800dad0:	b480      	push	{r7}
 800dad2:	b085      	sub	sp, #20
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d101      	bne.n	800dae2 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800dade:	2301      	movs	r3, #1
 800dae0:	e016      	b.n	800db10 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800dae2:	4b0e      	ldr	r3, [pc, #56]	; (800db1c <LoRaMacCommandsStickyCmdsPending+0x4c>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800daee:	e00b      	b.n	800db08 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	7b1b      	ldrb	r3, [r3, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d004      	beq.n	800db02 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2201      	movs	r2, #1
 800dafc:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800dafe:	2300      	movs	r3, #0
 800db00:	e006      	b.n	800db10 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1f0      	bne.n	800daf0 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800db0e:	2300      	movs	r3, #0
}
 800db10:	4618      	mov	r0, r3
 800db12:	3714      	adds	r7, #20
 800db14:	46bd      	mov	sp, r7
 800db16:	bc80      	pop	{r7}
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	20000e34 	.word	0x20000e34

0800db20 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 800db20:	b480      	push	{r7}
 800db22:	b085      	sub	sp, #20
 800db24:	af00      	add	r7, sp, #0
 800db26:	4603      	mov	r3, r0
 800db28:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 800db2a:	2300      	movs	r3, #0
 800db2c:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 800db2e:	79fb      	ldrb	r3, [r7, #7]
 800db30:	3b02      	subs	r3, #2
 800db32:	2b11      	cmp	r3, #17
 800db34:	d850      	bhi.n	800dbd8 <LoRaMacCommandsGetCmdSize+0xb8>
 800db36:	a201      	add	r2, pc, #4	; (adr r2, 800db3c <LoRaMacCommandsGetCmdSize+0x1c>)
 800db38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3c:	0800db85 	.word	0x0800db85
 800db40:	0800db8b 	.word	0x0800db8b
 800db44:	0800db91 	.word	0x0800db91
 800db48:	0800db97 	.word	0x0800db97
 800db4c:	0800db9d 	.word	0x0800db9d
 800db50:	0800dba3 	.word	0x0800dba3
 800db54:	0800dba9 	.word	0x0800dba9
 800db58:	0800dbaf 	.word	0x0800dbaf
 800db5c:	0800dbb5 	.word	0x0800dbb5
 800db60:	0800dbd9 	.word	0x0800dbd9
 800db64:	0800dbd9 	.word	0x0800dbd9
 800db68:	0800dbbb 	.word	0x0800dbbb
 800db6c:	0800dbd9 	.word	0x0800dbd9
 800db70:	0800dbd9 	.word	0x0800dbd9
 800db74:	0800dbc1 	.word	0x0800dbc1
 800db78:	0800dbc7 	.word	0x0800dbc7
 800db7c:	0800dbcd 	.word	0x0800dbcd
 800db80:	0800dbd3 	.word	0x0800dbd3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 800db84:	2303      	movs	r3, #3
 800db86:	73fb      	strb	r3, [r7, #15]
            break;
 800db88:	e027      	b.n	800dbda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800db8a:	2305      	movs	r3, #5
 800db8c:	73fb      	strb	r3, [r7, #15]
            break;
 800db8e:	e024      	b.n	800dbda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800db90:	2302      	movs	r3, #2
 800db92:	73fb      	strb	r3, [r7, #15]
            break;
 800db94:	e021      	b.n	800dbda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 800db96:	2305      	movs	r3, #5
 800db98:	73fb      	strb	r3, [r7, #15]
            break;
 800db9a:	e01e      	b.n	800dbda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800db9c:	2301      	movs	r3, #1
 800db9e:	73fb      	strb	r3, [r7, #15]
            break;
 800dba0:	e01b      	b.n	800dbda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800dba2:	2306      	movs	r3, #6
 800dba4:	73fb      	strb	r3, [r7, #15]
            break;
 800dba6:	e018      	b.n	800dbda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800dba8:	2302      	movs	r3, #2
 800dbaa:	73fb      	strb	r3, [r7, #15]
            break;
 800dbac:	e015      	b.n	800dbda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800dbae:	2302      	movs	r3, #2
 800dbb0:	73fb      	strb	r3, [r7, #15]
            break;
 800dbb2:	e012      	b.n	800dbda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800dbb4:	2305      	movs	r3, #5
 800dbb6:	73fb      	strb	r3, [r7, #15]
            break;
 800dbb8:	e00f      	b.n	800dbda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800dbba:	2306      	movs	r3, #6
 800dbbc:	73fb      	strb	r3, [r7, #15]
            break;
 800dbbe:	e00c      	b.n	800dbda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	73fb      	strb	r3, [r7, #15]
            break;
 800dbc4:	e009      	b.n	800dbda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800dbc6:	2305      	movs	r3, #5
 800dbc8:	73fb      	strb	r3, [r7, #15]
            break;
 800dbca:	e006      	b.n	800dbda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800dbcc:	2304      	movs	r3, #4
 800dbce:	73fb      	strb	r3, [r7, #15]
            break;
 800dbd0:	e003      	b.n	800dbda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800dbd2:	2304      	movs	r3, #4
 800dbd4:	73fb      	strb	r3, [r7, #15]
            break;
 800dbd6:	e000      	b.n	800dbda <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 800dbd8:	bf00      	nop
        }
    }
    return cidSize;
 800dbda:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3714      	adds	r7, #20
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bc80      	pop	{r7}
 800dbe4:	4770      	bx	lr
 800dbe6:	bf00      	nop

0800dbe8 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4a07      	ldr	r2, [pc, #28]	; (800dc10 <IncreaseBufferPointer+0x28>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d102      	bne.n	800dbfe <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800dbf8:	4b06      	ldr	r3, [pc, #24]	; (800dc14 <IncreaseBufferPointer+0x2c>)
 800dbfa:	607b      	str	r3, [r7, #4]
 800dbfc:	e002      	b.n	800dc04 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	3304      	adds	r3, #4
 800dc02:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 800dc04:	687b      	ldr	r3, [r7, #4]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	370c      	adds	r7, #12
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bc80      	pop	{r7}
 800dc0e:	4770      	bx	lr
 800dc10:	20000f4c 	.word	0x20000f4c
 800dc14:	20000f3c 	.word	0x20000f3c

0800dc18 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	4603      	mov	r3, r0
 800dc20:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 800dc22:	79fb      	ldrb	r3, [r7, #7]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d101      	bne.n	800dc2c <IsListEmpty+0x14>
    {
        return true;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	e000      	b.n	800dc2e <IsListEmpty+0x16>
    }
    return false;
 800dc2c:	2300      	movs	r3, #0
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	370c      	adds	r7, #12
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bc80      	pop	{r7}
 800dc36:	4770      	bx	lr

0800dc38 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b083      	sub	sp, #12
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	4603      	mov	r3, r0
 800dc40:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800dc42:	79fb      	ldrb	r3, [r7, #7]
 800dc44:	2b04      	cmp	r3, #4
 800dc46:	d901      	bls.n	800dc4c <IsListFull+0x14>
    {
        return true;
 800dc48:	2301      	movs	r3, #1
 800dc4a:	e000      	b.n	800dc4e <IsListFull+0x16>
    }
    return false;
 800dc4c:	2300      	movs	r3, #0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	370c      	adds	r7, #12
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bc80      	pop	{r7}
 800dc56:	4770      	bx	lr

0800dc58 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b086      	sub	sp, #24
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	4603      	mov	r3, r0
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	607a      	str	r2, [r7, #4]
 800dc64:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800dc6a:	4b13      	ldr	r3, [pc, #76]	; (800dcb8 <GetElement+0x60>)
 800dc6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7ff ffd1 	bl	800dc18 <IsListEmpty>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d001      	beq.n	800dc80 <GetElement+0x28>
    {
        return NULL;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	e017      	b.n	800dcb0 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800dc80:	2300      	movs	r3, #0
 800dc82:	74fb      	strb	r3, [r7, #19]
 800dc84:	e00d      	b.n	800dca2 <GetElement+0x4a>
    {
        if( element->Request == request )
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	7bfa      	ldrb	r2, [r7, #15]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d101      	bne.n	800dc94 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	e00d      	b.n	800dcb0 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 800dc94:	6978      	ldr	r0, [r7, #20]
 800dc96:	f7ff ffa7 	bl	800dbe8 <IncreaseBufferPointer>
 800dc9a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800dc9c:	7cfb      	ldrb	r3, [r7, #19]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	74fb      	strb	r3, [r7, #19]
 800dca2:	4b05      	ldr	r3, [pc, #20]	; (800dcb8 <GetElement+0x60>)
 800dca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dca8:	7cfa      	ldrb	r2, [r7, #19]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d3eb      	bcc.n	800dc86 <GetElement+0x2e>
    }

    return NULL;
 800dcae:	2300      	movs	r3, #0
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3718      	adds	r7, #24
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	20000f30 	.word	0x20000f30

0800dcbc <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 800dcc4:	4a0c      	ldr	r2, [pc, #48]	; (800dcf8 <LoRaMacConfirmQueueInit+0x3c>)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800dcca:	4b0b      	ldr	r3, [pc, #44]	; (800dcf8 <LoRaMacConfirmQueueInit+0x3c>)
 800dccc:	2200      	movs	r2, #0
 800dcce:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800dcd2:	4b09      	ldr	r3, [pc, #36]	; (800dcf8 <LoRaMacConfirmQueueInit+0x3c>)
 800dcd4:	4a09      	ldr	r2, [pc, #36]	; (800dcfc <LoRaMacConfirmQueueInit+0x40>)
 800dcd6:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800dcd8:	4b07      	ldr	r3, [pc, #28]	; (800dcf8 <LoRaMacConfirmQueueInit+0x3c>)
 800dcda:	4a08      	ldr	r2, [pc, #32]	; (800dcfc <LoRaMacConfirmQueueInit+0x40>)
 800dcdc:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800dcde:	2214      	movs	r2, #20
 800dce0:	21ff      	movs	r1, #255	; 0xff
 800dce2:	4806      	ldr	r0, [pc, #24]	; (800dcfc <LoRaMacConfirmQueueInit+0x40>)
 800dce4:	f005 fa3a 	bl	801315c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dce8:	4b03      	ldr	r3, [pc, #12]	; (800dcf8 <LoRaMacConfirmQueueInit+0x3c>)
 800dcea:	2201      	movs	r2, #1
 800dcec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800dcf0:	bf00      	nop
 800dcf2:	3708      	adds	r7, #8
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	20000f30 	.word	0x20000f30
 800dcfc:	20000f3c 	.word	0x20000f3c

0800dd00 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800dd08:	4b19      	ldr	r3, [pc, #100]	; (800dd70 <LoRaMacConfirmQueueAdd+0x70>)
 800dd0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7ff ff92 	bl	800dc38 <IsListFull>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d001      	beq.n	800dd1e <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	e023      	b.n	800dd66 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800dd1e:	4b14      	ldr	r3, [pc, #80]	; (800dd70 <LoRaMacConfirmQueueAdd+0x70>)
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	7812      	ldrb	r2, [r2, #0]
 800dd26:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800dd28:	4b11      	ldr	r3, [pc, #68]	; (800dd70 <LoRaMacConfirmQueueAdd+0x70>)
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	7852      	ldrb	r2, [r2, #1]
 800dd30:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800dd32:	4b0f      	ldr	r3, [pc, #60]	; (800dd70 <LoRaMacConfirmQueueAdd+0x70>)
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	78d2      	ldrb	r2, [r2, #3]
 800dd3a:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800dd3c:	4b0c      	ldr	r3, [pc, #48]	; (800dd70 <LoRaMacConfirmQueueAdd+0x70>)
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	2200      	movs	r2, #0
 800dd42:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800dd44:	4b0a      	ldr	r3, [pc, #40]	; (800dd70 <LoRaMacConfirmQueueAdd+0x70>)
 800dd46:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	b2da      	uxtb	r2, r3
 800dd4e:	4b08      	ldr	r3, [pc, #32]	; (800dd70 <LoRaMacConfirmQueueAdd+0x70>)
 800dd50:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800dd54:	4b06      	ldr	r3, [pc, #24]	; (800dd70 <LoRaMacConfirmQueueAdd+0x70>)
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7ff ff45 	bl	800dbe8 <IncreaseBufferPointer>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	4a03      	ldr	r2, [pc, #12]	; (800dd70 <LoRaMacConfirmQueueAdd+0x70>)
 800dd62:	6093      	str	r3, [r2, #8]

    return true;
 800dd64:	2301      	movs	r3, #1
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3708      	adds	r7, #8
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	20000f30 	.word	0x20000f30

0800dd74 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800dd78:	4b0e      	ldr	r3, [pc, #56]	; (800ddb4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800dd7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7ff ff4a 	bl	800dc18 <IsListEmpty>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d001      	beq.n	800dd8e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	e010      	b.n	800ddb0 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800dd8e:	4b09      	ldr	r3, [pc, #36]	; (800ddb4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800dd90:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd94:	3b01      	subs	r3, #1
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	4b06      	ldr	r3, [pc, #24]	; (800ddb4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800dd9a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800dd9e:	4b05      	ldr	r3, [pc, #20]	; (800ddb4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7ff ff20 	bl	800dbe8 <IncreaseBufferPointer>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	4a02      	ldr	r2, [pc, #8]	; (800ddb4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800ddac:	6053      	str	r3, [r2, #4]

    return true;
 800ddae:	2301      	movs	r3, #1
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	20000f30 	.word	0x20000f30

0800ddb8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	460a      	mov	r2, r1
 800ddc2:	71fb      	strb	r3, [r7, #7]
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800ddcc:	4b10      	ldr	r3, [pc, #64]	; (800de10 <LoRaMacConfirmQueueSetStatus+0x58>)
 800ddce:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7ff ff20 	bl	800dc18 <IsListEmpty>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	f083 0301 	eor.w	r3, r3, #1
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d011      	beq.n	800de08 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800dde4:	4b0a      	ldr	r3, [pc, #40]	; (800de10 <LoRaMacConfirmQueueSetStatus+0x58>)
 800dde6:	6859      	ldr	r1, [r3, #4]
 800dde8:	4b09      	ldr	r3, [pc, #36]	; (800de10 <LoRaMacConfirmQueueSetStatus+0x58>)
 800ddea:	689a      	ldr	r2, [r3, #8]
 800ddec:	79bb      	ldrb	r3, [r7, #6]
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7ff ff32 	bl	800dc58 <GetElement>
 800ddf4:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d005      	beq.n	800de08 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	79fa      	ldrb	r2, [r7, #7]
 800de00:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2201      	movs	r2, #1
 800de06:	709a      	strb	r2, [r3, #2]
        }
    }
}
 800de08:	bf00      	nop
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	20000f30 	.word	0x20000f30

0800de14 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	4603      	mov	r3, r0
 800de1c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 800de1e:	2300      	movs	r3, #0
 800de20:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800de22:	4b10      	ldr	r3, [pc, #64]	; (800de64 <LoRaMacConfirmQueueGetStatus+0x50>)
 800de24:	f893 3020 	ldrb.w	r3, [r3, #32]
 800de28:	4618      	mov	r0, r3
 800de2a:	f7ff fef5 	bl	800dc18 <IsListEmpty>
 800de2e:	4603      	mov	r3, r0
 800de30:	f083 0301 	eor.w	r3, r3, #1
 800de34:	b2db      	uxtb	r3, r3
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00e      	beq.n	800de58 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800de3a:	4b0a      	ldr	r3, [pc, #40]	; (800de64 <LoRaMacConfirmQueueGetStatus+0x50>)
 800de3c:	6859      	ldr	r1, [r3, #4]
 800de3e:	4b09      	ldr	r3, [pc, #36]	; (800de64 <LoRaMacConfirmQueueGetStatus+0x50>)
 800de40:	689a      	ldr	r2, [r3, #8]
 800de42:	79fb      	ldrb	r3, [r7, #7]
 800de44:	4618      	mov	r0, r3
 800de46:	f7ff ff07 	bl	800dc58 <GetElement>
 800de4a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d002      	beq.n	800de58 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	785b      	ldrb	r3, [r3, #1]
 800de56:	e000      	b.n	800de5a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800de58:	2301      	movs	r3, #1
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3710      	adds	r7, #16
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	20000f30 	.word	0x20000f30

0800de68 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b084      	sub	sp, #16
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	4603      	mov	r3, r0
 800de70:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800de72:	4b16      	ldr	r3, [pc, #88]	; (800decc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800de78:	4a14      	ldr	r2, [pc, #80]	; (800decc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 800de7a:	79fb      	ldrb	r3, [r7, #7]
 800de7c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800de80:	4b12      	ldr	r3, [pc, #72]	; (800decc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 800de82:	f893 3020 	ldrb.w	r3, [r3, #32]
 800de86:	4618      	mov	r0, r3
 800de88:	f7ff fec6 	bl	800dc18 <IsListEmpty>
 800de8c:	4603      	mov	r3, r0
 800de8e:	f083 0301 	eor.w	r3, r3, #1
 800de92:	b2db      	uxtb	r3, r3
 800de94:	2b00      	cmp	r3, #0
 800de96:	d015      	beq.n	800dec4 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	79fa      	ldrb	r2, [r7, #7]
 800de9c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	78db      	ldrb	r3, [r3, #3]
 800dea2:	f083 0301 	eor.w	r3, r3, #1
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d002      	beq.n	800deb2 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	2201      	movs	r2, #1
 800deb0:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f7ff fe98 	bl	800dbe8 <IncreaseBufferPointer>
 800deb8:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 800deba:	4b04      	ldr	r3, [pc, #16]	; (800decc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	68fa      	ldr	r2, [r7, #12]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d1e9      	bne.n	800de98 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 800dec4:	bf00      	nop
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	20000f30 	.word	0x20000f30

0800ded0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	4603      	mov	r3, r0
 800ded8:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800deda:	4b09      	ldr	r3, [pc, #36]	; (800df00 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 800dedc:	6859      	ldr	r1, [r3, #4]
 800dede:	4b08      	ldr	r3, [pc, #32]	; (800df00 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 800dee0:	689a      	ldr	r2, [r3, #8]
 800dee2:	79fb      	ldrb	r3, [r7, #7]
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7ff feb7 	bl	800dc58 <GetElement>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d001      	beq.n	800def4 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 800def0:	2301      	movs	r3, #1
 800def2:	e000      	b.n	800def6 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 800def4:	2300      	movs	r3, #0
}
 800def6:	4618      	mov	r0, r3
 800def8:	3708      	adds	r7, #8
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	20000f30 	.word	0x20000f30

0800df04 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800df0c:	4b22      	ldr	r3, [pc, #136]	; (800df98 <LoRaMacConfirmQueueHandleCb+0x94>)
 800df0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800df12:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 800df14:	2300      	movs	r3, #0
 800df16:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800df18:	2300      	movs	r3, #0
 800df1a:	73fb      	strb	r3, [r7, #15]
 800df1c:	e032      	b.n	800df84 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800df1e:	4b1e      	ldr	r3, [pc, #120]	; (800df98 <LoRaMacConfirmQueueHandleCb+0x94>)
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	781a      	ldrb	r2, [r3, #0]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800df28:	4b1b      	ldr	r3, [pc, #108]	; (800df98 <LoRaMacConfirmQueueHandleCb+0x94>)
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	785a      	ldrb	r2, [r3, #1]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800df32:	4b19      	ldr	r3, [pc, #100]	; (800df98 <LoRaMacConfirmQueueHandleCb+0x94>)
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	789b      	ldrb	r3, [r3, #2]
 800df38:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 800df3a:	7b7b      	ldrb	r3, [r7, #13]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d005      	beq.n	800df4c <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800df40:	4b15      	ldr	r3, [pc, #84]	; (800df98 <LoRaMacConfirmQueueHandleCb+0x94>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	689b      	ldr	r3, [r3, #8]
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	4798      	blx	r3
 800df4a:	e00b      	b.n	800df64 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800df4c:	4b12      	ldr	r3, [pc, #72]	; (800df98 <LoRaMacConfirmQueueHandleCb+0x94>)
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800df54:	4b10      	ldr	r3, [pc, #64]	; (800df98 <LoRaMacConfirmQueueHandleCb+0x94>)
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	785b      	ldrb	r3, [r3, #1]
 800df5a:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800df5c:	4b0e      	ldr	r3, [pc, #56]	; (800df98 <LoRaMacConfirmQueueHandleCb+0x94>)
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	78db      	ldrb	r3, [r3, #3]
 800df62:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800df64:	f7ff ff06 	bl	800dd74 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800df68:	7b7b      	ldrb	r3, [r7, #13]
 800df6a:	f083 0301 	eor.w	r3, r3, #1
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	2b00      	cmp	r3, #0
 800df72:	d004      	beq.n	800df7e <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800df74:	f107 0308 	add.w	r3, r7, #8
 800df78:	4618      	mov	r0, r3
 800df7a:	f7ff fec1 	bl	800dd00 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800df7e:	7bfb      	ldrb	r3, [r7, #15]
 800df80:	3301      	adds	r3, #1
 800df82:	73fb      	strb	r3, [r7, #15]
 800df84:	7bfa      	ldrb	r2, [r7, #15]
 800df86:	7bbb      	ldrb	r3, [r7, #14]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d3c8      	bcc.n	800df1e <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 800df8c:	bf00      	nop
 800df8e:	bf00      	nop
 800df90:	3710      	adds	r7, #16
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	20000f30 	.word	0x20000f30

0800df9c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 800df9c:	b480      	push	{r7}
 800df9e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800dfa0:	4b03      	ldr	r3, [pc, #12]	; (800dfb0 <LoRaMacConfirmQueueGetCnt+0x14>)
 800dfa2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bc80      	pop	{r7}
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop
 800dfb0:	20000f30 	.word	0x20000f30

0800dfb4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800dfb8:	4b06      	ldr	r3, [pc, #24]	; (800dfd4 <LoRaMacConfirmQueueIsFull+0x20>)
 800dfba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7ff fe3a 	bl	800dc38 <IsListFull>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d001      	beq.n	800dfce <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e000      	b.n	800dfd0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 800dfce:	2300      	movs	r3, #0
    }
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	bd80      	pop	{r7, pc}
 800dfd4:	20000f30 	.word	0x20000f30

0800dfd8 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b08e      	sub	sp, #56	; 0x38
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	60f8      	str	r0, [r7, #12]
 800dfe0:	607b      	str	r3, [r7, #4]
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	817b      	strh	r3, [r7, #10]
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d101      	bne.n	800dff4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dff0:	230a      	movs	r3, #10
 800dff2:	e087      	b.n	800e104 <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 800dff4:	2300      	movs	r3, #0
 800dff6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 800dffa:	2301      	movs	r3, #1
 800dffc:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 800dffe:	2300      	movs	r3, #0
 800e000:	623b      	str	r3, [r7, #32]
 800e002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e006:	2200      	movs	r2, #0
 800e008:	601a      	str	r2, [r3, #0]
 800e00a:	605a      	str	r2, [r3, #4]
 800e00c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 800e00e:	2300      	movs	r3, #0
 800e010:	613b      	str	r3, [r7, #16]
 800e012:	f107 0314 	add.w	r3, r7, #20
 800e016:	2200      	movs	r2, #0
 800e018:	601a      	str	r2, [r3, #0]
 800e01a:	605a      	str	r2, [r3, #4]
 800e01c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 800e01e:	2301      	movs	r3, #1
 800e020:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 800e022:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e026:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	0a1b      	lsrs	r3, r3, #8
 800e032:	b2db      	uxtb	r3, r3
 800e034:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	0c1b      	lsrs	r3, r3, #16
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	0e1b      	lsrs	r3, r3, #24
 800e042:	b2db      	uxtb	r3, r3
 800e044:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 800e046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800e04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e04e:	0a1b      	lsrs	r3, r3, #8
 800e050:	b2db      	uxtb	r3, r3
 800e052:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800e054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e056:	0c1b      	lsrs	r3, r3, #16
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800e05c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e05e:	0e1b      	lsrs	r3, r3, #24
 800e060:	b2db      	uxtb	r3, r3
 800e062:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 800e064:	e049      	b.n	800e0fa <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 800e066:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 800e06c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e06e:	3301      	adds	r3, #1
 800e070:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800e072:	f107 0320 	add.w	r3, r7, #32
 800e076:	7a7a      	ldrb	r2, [r7, #9]
 800e078:	f107 0010 	add.w	r0, r7, #16
 800e07c:	2110      	movs	r1, #16
 800e07e:	f7f9 fa82 	bl	8007586 <SecureElementAesEncrypt>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d001      	beq.n	800e08c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e088:	230f      	movs	r3, #15
 800e08a:	e03b      	b.n	800e104 <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800e08c:	2300      	movs	r3, #0
 800e08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e092:	e01f      	b.n	800e0d4 <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800e094:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e098:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e09c:	4413      	add	r3, r2
 800e09e:	461a      	mov	r2, r3
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	7819      	ldrb	r1, [r3, #0]
 800e0a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e0aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e0ae:	4413      	add	r3, r2
 800e0b0:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800e0b4:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 800e0b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e0bc:	4403      	add	r3, r0
 800e0be:	4618      	mov	r0, r3
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	4403      	add	r3, r0
 800e0c4:	404a      	eors	r2, r1
 800e0c6:	b2d2      	uxtb	r2, r2
 800e0c8:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800e0ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e0d8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800e0dc:	2a10      	cmp	r2, #16
 800e0de:	bfa8      	it	ge
 800e0e0:	2210      	movge	r2, #16
 800e0e2:	b212      	sxth	r2, r2
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	dbd5      	blt.n	800e094 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 800e0e8:	897b      	ldrh	r3, [r7, #10]
 800e0ea:	3b10      	subs	r3, #16
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 800e0f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0f4:	3310      	adds	r3, #16
 800e0f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 800e0fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	dcb1      	bgt.n	800e066 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800e102:	2300      	movs	r3, #0
}
 800e104:	4618      	mov	r0, r3
 800e106:	3738      	adds	r7, #56	; 0x38
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800e10c:	b490      	push	{r4, r7}
 800e10e:	b082      	sub	sp, #8
 800e110:	af00      	add	r7, sp, #0
 800e112:	4604      	mov	r4, r0
 800e114:	4608      	mov	r0, r1
 800e116:	4611      	mov	r1, r2
 800e118:	461a      	mov	r2, r3
 800e11a:	4623      	mov	r3, r4
 800e11c:	80fb      	strh	r3, [r7, #6]
 800e11e:	4603      	mov	r3, r0
 800e120:	717b      	strb	r3, [r7, #5]
 800e122:	460b      	mov	r3, r1
 800e124:	713b      	strb	r3, [r7, #4]
 800e126:	4613      	mov	r3, r2
 800e128:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 800e12a:	69bb      	ldr	r3, [r7, #24]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d101      	bne.n	800e134 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e130:	230a      	movs	r3, #10
 800e132:	e04e      	b.n	800e1d2 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	2249      	movs	r2, #73	; 0x49
 800e138:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	3301      	adds	r3, #1
 800e13e:	2200      	movs	r2, #0
 800e140:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	3302      	adds	r3, #2
 800e146:	2200      	movs	r2, #0
 800e148:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 800e14a:	69bb      	ldr	r3, [r7, #24]
 800e14c:	3303      	adds	r3, #3
 800e14e:	2200      	movs	r2, #0
 800e150:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	3304      	adds	r3, #4
 800e156:	2200      	movs	r2, #0
 800e158:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	3305      	adds	r3, #5
 800e15e:	78fa      	ldrb	r2, [r7, #3]
 800e160:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	3306      	adds	r3, #6
 800e166:	693a      	ldr	r2, [r7, #16]
 800e168:	b2d2      	uxtb	r2, r2
 800e16a:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	0a1a      	lsrs	r2, r3, #8
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	3307      	adds	r3, #7
 800e174:	b2d2      	uxtb	r2, r2
 800e176:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	0c1a      	lsrs	r2, r3, #16
 800e17c:	69bb      	ldr	r3, [r7, #24]
 800e17e:	3308      	adds	r3, #8
 800e180:	b2d2      	uxtb	r2, r2
 800e182:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	0e1a      	lsrs	r2, r3, #24
 800e188:	69bb      	ldr	r3, [r7, #24]
 800e18a:	3309      	adds	r3, #9
 800e18c:	b2d2      	uxtb	r2, r2
 800e18e:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 800e190:	69bb      	ldr	r3, [r7, #24]
 800e192:	330a      	adds	r3, #10
 800e194:	697a      	ldr	r2, [r7, #20]
 800e196:	b2d2      	uxtb	r2, r2
 800e198:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	0a1a      	lsrs	r2, r3, #8
 800e19e:	69bb      	ldr	r3, [r7, #24]
 800e1a0:	330b      	adds	r3, #11
 800e1a2:	b2d2      	uxtb	r2, r2
 800e1a4:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	0c1a      	lsrs	r2, r3, #16
 800e1aa:	69bb      	ldr	r3, [r7, #24]
 800e1ac:	330c      	adds	r3, #12
 800e1ae:	b2d2      	uxtb	r2, r2
 800e1b0:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	0e1a      	lsrs	r2, r3, #24
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	330d      	adds	r3, #13
 800e1ba:	b2d2      	uxtb	r2, r2
 800e1bc:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	330e      	adds	r3, #14
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	330f      	adds	r3, #15
 800e1ca:	88fa      	ldrh	r2, [r7, #6]
 800e1cc:	b2d2      	uxtb	r2, r2
 800e1ce:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800e1d0:	2300      	movs	r3, #0
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3708      	adds	r7, #8
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bc90      	pop	{r4, r7}
 800e1da:	4770      	bx	lr

0800e1dc <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 800e1dc:	b590      	push	{r4, r7, lr}
 800e1de:	b08b      	sub	sp, #44	; 0x2c
 800e1e0:	af04      	add	r7, sp, #16
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	4608      	mov	r0, r1
 800e1e6:	4611      	mov	r1, r2
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	807b      	strh	r3, [r7, #2]
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	707b      	strb	r3, [r7, #1]
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d002      	beq.n	800e202 <ComputeCmacB0+0x26>
 800e1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d101      	bne.n	800e206 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e202:	230a      	movs	r3, #10
 800e204:	e024      	b.n	800e250 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800e206:	887b      	ldrh	r3, [r7, #2]
 800e208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e20c:	d901      	bls.n	800e212 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800e20e:	230e      	movs	r3, #14
 800e210:	e01e      	b.n	800e250 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800e212:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800e216:	783a      	ldrb	r2, [r7, #0]
 800e218:	7879      	ldrb	r1, [r7, #1]
 800e21a:	8878      	ldrh	r0, [r7, #2]
 800e21c:	f107 0308 	add.w	r3, r7, #8
 800e220:	9302      	str	r3, [sp, #8]
 800e222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e224:	9301      	str	r3, [sp, #4]
 800e226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	4623      	mov	r3, r4
 800e22c:	f7ff ff6e 	bl	800e10c <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800e230:	7879      	ldrb	r1, [r7, #1]
 800e232:	887a      	ldrh	r2, [r7, #2]
 800e234:	f107 0008 	add.w	r0, r7, #8
 800e238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e23a:	9300      	str	r3, [sp, #0]
 800e23c:	460b      	mov	r3, r1
 800e23e:	6879      	ldr	r1, [r7, #4]
 800e240:	f7f9 f954 	bl	80074ec <SecureElementComputeAesCmac>
 800e244:	4603      	mov	r3, r0
 800e246:	2b00      	cmp	r3, #0
 800e248:	d001      	beq.n	800e24e <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e24a:	230f      	movs	r3, #15
 800e24c:	e000      	b.n	800e250 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800e24e:	2300      	movs	r3, #0
}
 800e250:	4618      	mov	r0, r3
 800e252:	371c      	adds	r7, #28
 800e254:	46bd      	mov	sp, r7
 800e256:	bd90      	pop	{r4, r7, pc}

0800e258 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 800e258:	b590      	push	{r4, r7, lr}
 800e25a:	b0cd      	sub	sp, #308	; 0x134
 800e25c:	af04      	add	r7, sp, #16
 800e25e:	1d3c      	adds	r4, r7, #4
 800e260:	6020      	str	r0, [r4, #0]
 800e262:	460c      	mov	r4, r1
 800e264:	4610      	mov	r0, r2
 800e266:	4619      	mov	r1, r3
 800e268:	1cbb      	adds	r3, r7, #2
 800e26a:	4622      	mov	r2, r4
 800e26c:	801a      	strh	r2, [r3, #0]
 800e26e:	1c7b      	adds	r3, r7, #1
 800e270:	4602      	mov	r2, r0
 800e272:	701a      	strb	r2, [r3, #0]
 800e274:	463b      	mov	r3, r7
 800e276:	460a      	mov	r2, r1
 800e278:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 800e27a:	1d3b      	adds	r3, r7, #4
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d101      	bne.n	800e286 <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e282:	230a      	movs	r3, #10
 800e284:	e04b      	b.n	800e31e <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800e286:	1cbb      	adds	r3, r7, #2
 800e288:	881b      	ldrh	r3, [r3, #0]
 800e28a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e28e:	d901      	bls.n	800e294 <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800e290:	230e      	movs	r3, #14
 800e292:	e044      	b.n	800e31e <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800e294:	f107 030c 	add.w	r3, r7, #12
 800e298:	f44f 7288 	mov.w	r2, #272	; 0x110
 800e29c:	2100      	movs	r1, #0
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f004 ff5c 	bl	801315c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800e2a4:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 800e2a8:	463b      	mov	r3, r7
 800e2aa:	781a      	ldrb	r2, [r3, #0]
 800e2ac:	1c7b      	adds	r3, r7, #1
 800e2ae:	7819      	ldrb	r1, [r3, #0]
 800e2b0:	1cbb      	adds	r3, r7, #2
 800e2b2:	8818      	ldrh	r0, [r3, #0]
 800e2b4:	f107 030c 	add.w	r3, r7, #12
 800e2b8:	9302      	str	r3, [sp, #8]
 800e2ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e2be:	9301      	str	r3, [sp, #4]
 800e2c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e2c4:	9300      	str	r3, [sp, #0]
 800e2c6:	4623      	mov	r3, r4
 800e2c8:	f7ff ff20 	bl	800e10c <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800e2cc:	f107 030c 	add.w	r3, r7, #12
 800e2d0:	3310      	adds	r3, #16
 800e2d2:	1cba      	adds	r2, r7, #2
 800e2d4:	8812      	ldrh	r2, [r2, #0]
 800e2d6:	1d39      	adds	r1, r7, #4
 800e2d8:	6809      	ldr	r1, [r1, #0]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f004 ff03 	bl	80130e6 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800e2e0:	2306      	movs	r3, #6
 800e2e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800e2e6:	1cbb      	adds	r3, r7, #2
 800e2e8:	881b      	ldrh	r3, [r3, #0]
 800e2ea:	3310      	adds	r3, #16
 800e2ec:	b299      	uxth	r1, r3
 800e2ee:	1c7b      	adds	r3, r7, #1
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	f107 000c 	add.w	r0, r7, #12
 800e2f6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800e2fa:	f7f9 f915 	bl	8007528 <SecureElementVerifyAesCmac>
 800e2fe:	4603      	mov	r3, r0
 800e300:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e304:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d101      	bne.n	800e310 <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 800e30c:	2300      	movs	r3, #0
 800e30e:	e006      	b.n	800e31e <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800e310:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e314:	2b01      	cmp	r3, #1
 800e316:	d101      	bne.n	800e31c <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 800e318:	2301      	movs	r3, #1
 800e31a:	e000      	b.n	800e31e <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e31c:	230f      	movs	r3, #15
}
 800e31e:	4618      	mov	r0, r3
 800e320:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800e324:	46bd      	mov	sp, r7
 800e326:	bd90      	pop	{r4, r7, pc}

0800e328 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	4603      	mov	r3, r0
 800e330:	6039      	str	r1, [r7, #0]
 800e332:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800e334:	2300      	movs	r3, #0
 800e336:	73fb      	strb	r3, [r7, #15]
 800e338:	e011      	b.n	800e35e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800e33a:	7bfb      	ldrb	r3, [r7, #15]
 800e33c:	4a0c      	ldr	r2, [pc, #48]	; (800e370 <GetKeyAddrItem+0x48>)
 800e33e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800e342:	79fa      	ldrb	r2, [r7, #7]
 800e344:	429a      	cmp	r2, r3
 800e346:	d107      	bne.n	800e358 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 800e348:	7bfb      	ldrb	r3, [r7, #15]
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	4a08      	ldr	r2, [pc, #32]	; (800e370 <GetKeyAddrItem+0x48>)
 800e34e:	441a      	add	r2, r3
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800e354:	2300      	movs	r3, #0
 800e356:	e006      	b.n	800e366 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800e358:	7bfb      	ldrb	r3, [r7, #15]
 800e35a:	3301      	adds	r3, #1
 800e35c:	73fb      	strb	r3, [r7, #15]
 800e35e:	7bfb      	ldrb	r3, [r7, #15]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d9ea      	bls.n	800e33a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800e364:	230c      	movs	r3, #12
}
 800e366:	4618      	mov	r0, r3
 800e368:	3714      	adds	r7, #20
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bc80      	pop	{r7}
 800e36e:	4770      	bx	lr
 800e370:	200000e0 	.word	0x200000e0

0800e374 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b088      	sub	sp, #32
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60b9      	str	r1, [r7, #8]
 800e37c:	607a      	str	r2, [r7, #4]
 800e37e:	461a      	mov	r2, r3
 800e380:	4603      	mov	r3, r0
 800e382:	73fb      	strb	r3, [r7, #15]
 800e384:	4613      	mov	r3, r2
 800e386:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 800e388:	2300      	movs	r3, #0
 800e38a:	613b      	str	r3, [r7, #16]
 800e38c:	f107 0314 	add.w	r3, r7, #20
 800e390:	2200      	movs	r2, #0
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	605a      	str	r2, [r3, #4]
 800e396:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 800e398:	7bfb      	ldrb	r3, [r7, #15]
 800e39a:	2b02      	cmp	r3, #2
 800e39c:	d002      	beq.n	800e3a4 <DeriveSessionKey10x+0x30>
 800e39e:	2b03      	cmp	r3, #3
 800e3a0:	d003      	beq.n	800e3aa <DeriveSessionKey10x+0x36>
 800e3a2:	e005      	b.n	800e3b0 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	743b      	strb	r3, [r7, #16]
            break;
 800e3a8:	e004      	b.n	800e3b4 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 800e3aa:	2302      	movs	r3, #2
 800e3ac:	743b      	strb	r3, [r7, #16]
            break;
 800e3ae:	e001      	b.n	800e3b4 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800e3b0:	230b      	movs	r3, #11
 800e3b2:	e02a      	b.n	800e40a <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	0a1b      	lsrs	r3, r3, #8
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	0c1b      	lsrs	r3, r3, #16
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	0a1b      	lsrs	r3, r3, #8
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	0c1b      	lsrs	r3, r3, #16
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800e3e0:	89bb      	ldrh	r3, [r7, #12]
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800e3e6:	89bb      	ldrh	r3, [r7, #12]
 800e3e8:	0a1b      	lsrs	r3, r3, #8
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800e3f0:	7bfa      	ldrb	r2, [r7, #15]
 800e3f2:	f107 0310 	add.w	r3, r7, #16
 800e3f6:	2101      	movs	r1, #1
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7f9 f922 	bl	8007642 <SecureElementDeriveAndStoreKey>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d001      	beq.n	800e408 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e404:	230f      	movs	r3, #15
 800e406:	e000      	b.n	800e40a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800e408:	2300      	movs	r3, #0
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3720      	adds	r7, #32
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
	...

0800e414 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 800e414:	b480      	push	{r7}
 800e416:	b083      	sub	sp, #12
 800e418:	af00      	add	r7, sp, #0
 800e41a:	4603      	mov	r3, r0
 800e41c:	6039      	str	r1, [r7, #0]
 800e41e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d101      	bne.n	800e42a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e426:	230a      	movs	r3, #10
 800e428:	e03b      	b.n	800e4a2 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 800e42a:	79fb      	ldrb	r3, [r7, #7]
 800e42c:	3b01      	subs	r3, #1
 800e42e:	2b03      	cmp	r3, #3
 800e430:	d834      	bhi.n	800e49c <GetLastFcntDown+0x88>
 800e432:	a201      	add	r2, pc, #4	; (adr r2, 800e438 <GetLastFcntDown+0x24>)
 800e434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e438:	0800e449 	.word	0x0800e449
 800e43c:	0800e461 	.word	0x0800e461
 800e440:	0800e479 	.word	0x0800e479
 800e444:	0800e491 	.word	0x0800e491
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800e448:	4b18      	ldr	r3, [pc, #96]	; (800e4ac <GetLastFcntDown+0x98>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	691a      	ldr	r2, [r3, #16]
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800e452:	4b16      	ldr	r3, [pc, #88]	; (800e4ac <GetLastFcntDown+0x98>)
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	4b15      	ldr	r3, [pc, #84]	; (800e4ac <GetLastFcntDown+0x98>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	6912      	ldr	r2, [r2, #16]
 800e45c:	621a      	str	r2, [r3, #32]
            break;
 800e45e:	e01f      	b.n	800e4a0 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800e460:	4b12      	ldr	r3, [pc, #72]	; (800e4ac <GetLastFcntDown+0x98>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	695a      	ldr	r2, [r3, #20]
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800e46a:	4b10      	ldr	r3, [pc, #64]	; (800e4ac <GetLastFcntDown+0x98>)
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	4b0f      	ldr	r3, [pc, #60]	; (800e4ac <GetLastFcntDown+0x98>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	6952      	ldr	r2, [r2, #20]
 800e474:	621a      	str	r2, [r3, #32]
            break;
 800e476:	e013      	b.n	800e4a0 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800e478:	4b0c      	ldr	r3, [pc, #48]	; (800e4ac <GetLastFcntDown+0x98>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	699a      	ldr	r2, [r3, #24]
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800e482:	4b0a      	ldr	r3, [pc, #40]	; (800e4ac <GetLastFcntDown+0x98>)
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	4b09      	ldr	r3, [pc, #36]	; (800e4ac <GetLastFcntDown+0x98>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	6992      	ldr	r2, [r2, #24]
 800e48c:	621a      	str	r2, [r3, #32]
            break;
 800e48e:	e007      	b.n	800e4a0 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800e490:	4b06      	ldr	r3, [pc, #24]	; (800e4ac <GetLastFcntDown+0x98>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	69da      	ldr	r2, [r3, #28]
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	601a      	str	r2, [r3, #0]
            break;
 800e49a:	e001      	b.n	800e4a0 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800e49c:	2305      	movs	r3, #5
 800e49e:	e000      	b.n	800e4a2 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800e4a0:	2300      	movs	r3, #0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	370c      	adds	r7, #12
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bc80      	pop	{r7}
 800e4aa:	4770      	bx	lr
 800e4ac:	20000f54 	.word	0x20000f54

0800e4b0 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	6039      	str	r1, [r7, #0]
 800e4ba:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800e4c0:	f107 020c 	add.w	r2, r7, #12
 800e4c4:	79fb      	ldrb	r3, [r7, #7]
 800e4c6:	4611      	mov	r1, r2
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7ff ffa3 	bl	800e414 <GetLastFcntDown>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d001      	beq.n	800e4d8 <CheckFCntDown+0x28>
    {
        return false;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	e00a      	b.n	800e4ee <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	683a      	ldr	r2, [r7, #0]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d803      	bhi.n	800e4e8 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 800e4e0:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 800e4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4e6:	d101      	bne.n	800e4ec <CheckFCntDown+0x3c>
    {
        return true;
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	e000      	b.n	800e4ee <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 800e4ec:	2300      	movs	r3, #0
    }
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
	...

0800e4f8 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b083      	sub	sp, #12
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	4603      	mov	r3, r0
 800e500:	6039      	str	r1, [r7, #0]
 800e502:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 800e504:	79fb      	ldrb	r3, [r7, #7]
 800e506:	3b01      	subs	r3, #1
 800e508:	2b03      	cmp	r3, #3
 800e50a:	d81f      	bhi.n	800e54c <UpdateFCntDown+0x54>
 800e50c:	a201      	add	r2, pc, #4	; (adr r2, 800e514 <UpdateFCntDown+0x1c>)
 800e50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e512:	bf00      	nop
 800e514:	0800e525 	.word	0x0800e525
 800e518:	0800e52f 	.word	0x0800e52f
 800e51c:	0800e539 	.word	0x0800e539
 800e520:	0800e543 	.word	0x0800e543
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800e524:	4b0c      	ldr	r3, [pc, #48]	; (800e558 <UpdateFCntDown+0x60>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	683a      	ldr	r2, [r7, #0]
 800e52a:	611a      	str	r2, [r3, #16]
            break;
 800e52c:	e00f      	b.n	800e54e <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800e52e:	4b0a      	ldr	r3, [pc, #40]	; (800e558 <UpdateFCntDown+0x60>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	683a      	ldr	r2, [r7, #0]
 800e534:	615a      	str	r2, [r3, #20]
            break;
 800e536:	e00a      	b.n	800e54e <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800e538:	4b07      	ldr	r3, [pc, #28]	; (800e558 <UpdateFCntDown+0x60>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	683a      	ldr	r2, [r7, #0]
 800e53e:	619a      	str	r2, [r3, #24]
            break;
 800e540:	e005      	b.n	800e54e <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800e542:	4b05      	ldr	r3, [pc, #20]	; (800e558 <UpdateFCntDown+0x60>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	683a      	ldr	r2, [r7, #0]
 800e548:	61da      	str	r2, [r3, #28]
            break;
 800e54a:	e000      	b.n	800e54e <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 800e54c:	bf00      	nop
    }
}
 800e54e:	bf00      	nop
 800e550:	370c      	adds	r7, #12
 800e552:	46bd      	mov	sp, r7
 800e554:	bc80      	pop	{r7}
 800e556:	4770      	bx	lr
 800e558:	20000f54 	.word	0x20000f54

0800e55c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 800e55c:	b480      	push	{r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 800e562:	4b18      	ldr	r3, [pc, #96]	; (800e5c4 <ResetFCnts+0x68>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2200      	movs	r2, #0
 800e568:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800e56a:	4b16      	ldr	r3, [pc, #88]	; (800e5c4 <ResetFCnts+0x68>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f04f 32ff 	mov.w	r2, #4294967295
 800e572:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800e574:	4b13      	ldr	r3, [pc, #76]	; (800e5c4 <ResetFCnts+0x68>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f04f 32ff 	mov.w	r2, #4294967295
 800e57c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800e57e:	4b11      	ldr	r3, [pc, #68]	; (800e5c4 <ResetFCnts+0x68>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f04f 32ff 	mov.w	r2, #4294967295
 800e586:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800e588:	4b0e      	ldr	r3, [pc, #56]	; (800e5c4 <ResetFCnts+0x68>)
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	4b0d      	ldr	r3, [pc, #52]	; (800e5c4 <ResetFCnts+0x68>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	6992      	ldr	r2, [r2, #24]
 800e592:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e594:	2300      	movs	r3, #0
 800e596:	607b      	str	r3, [r7, #4]
 800e598:	e00b      	b.n	800e5b2 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800e59a:	4b0a      	ldr	r3, [pc, #40]	; (800e5c4 <ResetFCnts+0x68>)
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	3306      	adds	r3, #6
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	4413      	add	r3, r2
 800e5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e5aa:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	607b      	str	r3, [r7, #4]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	ddf0      	ble.n	800e59a <ResetFCnts+0x3e>
    }
}
 800e5b8:	bf00      	nop
 800e5ba:	bf00      	nop
 800e5bc:	370c      	adds	r7, #12
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bc80      	pop	{r7}
 800e5c2:	4770      	bx	lr
 800e5c4:	20000f54 	.word	0x20000f54

0800e5c8 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d101      	bne.n	800e5da <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800e5d6:	2309      	movs	r3, #9
 800e5d8:	e01c      	b.n	800e614 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800e5da:	4a10      	ldr	r2, [pc, #64]	; (800e61c <LoRaMacCryptoInit+0x54>)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800e5e0:	4b0e      	ldr	r3, [pc, #56]	; (800e61c <LoRaMacCryptoInit+0x54>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2228      	movs	r2, #40	; 0x28
 800e5e6:	2100      	movs	r1, #0
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f004 fdb7 	bl	801315c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800e5ee:	4b0b      	ldr	r3, [pc, #44]	; (800e61c <LoRaMacCryptoInit+0x54>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800e5f6:	4b09      	ldr	r3, [pc, #36]	; (800e61c <LoRaMacCryptoInit+0x54>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800e5fe:	4b07      	ldr	r3, [pc, #28]	; (800e61c <LoRaMacCryptoInit+0x54>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2201      	movs	r2, #1
 800e604:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800e606:	4b05      	ldr	r3, [pc, #20]	; (800e61c <LoRaMacCryptoInit+0x54>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	2200      	movs	r2, #0
 800e60c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800e60e:	f7ff ffa5 	bl	800e55c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800e612:	2300      	movs	r3, #0
}
 800e614:	4618      	mov	r0, r3
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	20000f54 	.word	0x20000f54

0800e620 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 800e620:	b480      	push	{r7}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 800e628:	4b04      	ldr	r3, [pc, #16]	; (800e63c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800e630:	2300      	movs	r3, #0
}
 800e632:	4618      	mov	r0, r3
 800e634:	370c      	adds	r7, #12
 800e636:	46bd      	mov	sp, r7
 800e638:	bc80      	pop	{r7}
 800e63a:	4770      	bx	lr
 800e63c:	20000f54 	.word	0x20000f54

0800e640 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 800e640:	b480      	push	{r7}
 800e642:	b083      	sub	sp, #12
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d101      	bne.n	800e652 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e64e:	230a      	movs	r3, #10
 800e650:	e006      	b.n	800e660 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800e652:	4b06      	ldr	r3, [pc, #24]	; (800e66c <LoRaMacCryptoGetFCntUp+0x2c>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	68db      	ldr	r3, [r3, #12]
 800e658:	1c5a      	adds	r2, r3, #1
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800e65e:	2300      	movs	r3, #0
}
 800e660:	4618      	mov	r0, r3
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	bc80      	pop	{r7}
 800e668:	4770      	bx	lr
 800e66a:	bf00      	nop
 800e66c:	20000f54 	.word	0x20000f54

0800e670 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800e670:	b5b0      	push	{r4, r5, r7, lr}
 800e672:	b088      	sub	sp, #32
 800e674:	af00      	add	r7, sp, #0
 800e676:	60ba      	str	r2, [r7, #8]
 800e678:	607b      	str	r3, [r7, #4]
 800e67a:	4603      	mov	r3, r0
 800e67c:	73fb      	strb	r3, [r7, #15]
 800e67e:	460b      	mov	r3, r1
 800e680:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 800e682:	2300      	movs	r3, #0
 800e684:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 800e686:	2300      	movs	r3, #0
 800e688:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e68a:	2313      	movs	r3, #19
 800e68c:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d101      	bne.n	800e698 <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e694:	230a      	movs	r3, #10
 800e696:	e04f      	b.n	800e738 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800e698:	f107 0214 	add.w	r2, r7, #20
 800e69c:	7bfb      	ldrb	r3, [r7, #15]
 800e69e:	4611      	mov	r1, r2
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7ff feb7 	bl	800e414 <GetLastFcntDown>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e6aa:	7efb      	ldrb	r3, [r7, #27]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d001      	beq.n	800e6b4 <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 800e6b0:	7efb      	ldrb	r3, [r7, #27]
 800e6b2:	e041      	b.n	800e738 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ba:	d103      	bne.n	800e6c4 <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	68ba      	ldr	r2, [r7, #8]
 800e6c0:	601a      	str	r2, [r3, #0]
 800e6c2:	e01e      	b.n	800e702 <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	68ba      	ldr	r2, [r7, #8]
 800e6ca:	1ad3      	subs	r3, r2, r3
 800e6cc:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	dd05      	ble.n	800e6e0 <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800e6d4:	697a      	ldr	r2, [r7, #20]
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	441a      	add	r2, r3
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	601a      	str	r2, [r3, #0]
 800e6de:	e010      	b.n	800e702 <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d104      	bne.n	800e6f0 <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 800e6e6:	697a      	ldr	r2, [r7, #20]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800e6ec:	2307      	movs	r3, #7
 800e6ee:	e023      	b.n	800e738 <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	0c1b      	lsrs	r3, r3, #16
 800e6f4:	041b      	lsls	r3, r3, #16
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800e702:	4b0f      	ldr	r3, [pc, #60]	; (800e740 <LoRaMacCryptoGetFCntDown+0xd0>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	789b      	ldrb	r3, [r3, #2]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d114      	bne.n	800e736 <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4618      	mov	r0, r3
 800e712:	f04f 0100 	mov.w	r1, #0
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	461a      	mov	r2, r3
 800e71a:	f04f 0300 	mov.w	r3, #0
 800e71e:	1a84      	subs	r4, r0, r2
 800e720:	eb61 0503 	sbc.w	r5, r1, r3
 800e724:	89ba      	ldrh	r2, [r7, #12]
 800e726:	f04f 0300 	mov.w	r3, #0
 800e72a:	4294      	cmp	r4, r2
 800e72c:	eb75 0303 	sbcs.w	r3, r5, r3
 800e730:	db01      	blt.n	800e736 <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800e732:	2308      	movs	r3, #8
 800e734:	e000      	b.n	800e738 <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800e736:	2300      	movs	r3, #0
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3720      	adds	r7, #32
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bdb0      	pop	{r4, r5, r7, pc}
 800e740:	20000f54 	.word	0x20000f54

0800e744 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 800e744:	b480      	push	{r7}
 800e746:	b085      	sub	sp, #20
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d101      	bne.n	800e756 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e752:	230a      	movs	r3, #10
 800e754:	e017      	b.n	800e786 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e756:	2300      	movs	r3, #0
 800e758:	60fb      	str	r3, [r7, #12]
 800e75a:	e010      	b.n	800e77e <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800e75c:	4b0c      	ldr	r3, [pc, #48]	; (800e790 <LoRaMacCryptoSetMulticastReference+0x4c>)
 800e75e:	6819      	ldr	r1, [r3, #0]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	222c      	movs	r2, #44	; 0x2c
 800e764:	fb02 f303 	mul.w	r3, r2, r3
 800e768:	687a      	ldr	r2, [r7, #4]
 800e76a:	4413      	add	r3, r2
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	3206      	adds	r2, #6
 800e770:	0092      	lsls	r2, r2, #2
 800e772:	440a      	add	r2, r1
 800e774:	3204      	adds	r2, #4
 800e776:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	3301      	adds	r3, #1
 800e77c:	60fb      	str	r3, [r7, #12]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2b00      	cmp	r3, #0
 800e782:	ddeb      	ble.n	800e75c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800e784:	2300      	movs	r3, #0
}
 800e786:	4618      	mov	r0, r3
 800e788:	3714      	adds	r7, #20
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bc80      	pop	{r7}
 800e78e:	4770      	bx	lr
 800e790:	20000f54 	.word	0x20000f54

0800e794 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	4603      	mov	r3, r0
 800e79c:	6039      	str	r1, [r7, #0]
 800e79e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800e7a0:	79fb      	ldrb	r3, [r7, #7]
 800e7a2:	6839      	ldr	r1, [r7, #0]
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7f8 fe43 	bl	8007430 <SecureElementSetKey>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d001      	beq.n	800e7b4 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e7b0:	230f      	movs	r3, #15
 800e7b2:	e018      	b.n	800e7e6 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 800e7b4:	79fb      	ldrb	r3, [r7, #7]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d114      	bne.n	800e7e4 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800e7ba:	4b0d      	ldr	r3, [pc, #52]	; (800e7f0 <LoRaMacCryptoSetKey+0x5c>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	789b      	ldrb	r3, [r3, #2]
 800e7c0:	79fa      	ldrb	r2, [r7, #7]
 800e7c2:	4611      	mov	r1, r2
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f000 fa3f 	bl	800ec48 <LoRaMacCryptoDeriveMcRootKey>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d001      	beq.n	800e7d4 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e7d0:	230f      	movs	r3, #15
 800e7d2:	e008      	b.n	800e7e6 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800e7d4:	2004      	movs	r0, #4
 800e7d6:	f000 fa62 	bl	800ec9e <LoRaMacCryptoDeriveMcKEKey>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d001      	beq.n	800e7e4 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e7e0:	230f      	movs	r3, #15
 800e7e2:	e000      	b.n	800e7e6 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800e7e4:	2300      	movs	r3, #0
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3708      	adds	r7, #8
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	20000f54 	.word	0x20000f54

0800e7f4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b086      	sub	sp, #24
 800e7f8:	af02      	add	r7, sp, #8
 800e7fa:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d101      	bne.n	800e806 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e802:	230a      	movs	r3, #10
 800e804:	e033      	b.n	800e86e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 800e806:	2301      	movs	r3, #1
 800e808:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800e80a:	2300      	movs	r3, #0
 800e80c:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 800e80e:	f107 0308 	add.w	r3, r7, #8
 800e812:	4618      	mov	r0, r3
 800e814:	f7f8 ffd2 	bl	80077bc <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800e818:	68ba      	ldr	r2, [r7, #8]
 800e81a:	4b17      	ldr	r3, [pc, #92]	; (800e878 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	b292      	uxth	r2, r2
 800e820:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800e822:	4b15      	ldr	r3, [pc, #84]	; (800e878 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	889a      	ldrh	r2, [r3, #4]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 fc18 	bl	800f062 <LoRaMacSerializerJoinRequest>
 800e832:	4603      	mov	r3, r0
 800e834:	2b00      	cmp	r3, #0
 800e836:	d001      	beq.n	800e83c <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800e838:	2311      	movs	r3, #17
 800e83a:	e018      	b.n	800e86e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6819      	ldr	r1, [r3, #0]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	3318      	adds	r3, #24
 800e844:	7bfa      	ldrb	r2, [r7, #15]
 800e846:	9300      	str	r3, [sp, #0]
 800e848:	4613      	mov	r3, r2
 800e84a:	2213      	movs	r2, #19
 800e84c:	2000      	movs	r0, #0
 800e84e:	f7f8 fe4d 	bl	80074ec <SecureElementComputeAesCmac>
 800e852:	4603      	mov	r3, r0
 800e854:	2b00      	cmp	r3, #0
 800e856:	d001      	beq.n	800e85c <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e858:	230f      	movs	r3, #15
 800e85a:	e008      	b.n	800e86e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f000 fc00 	bl	800f062 <LoRaMacSerializerJoinRequest>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d001      	beq.n	800e86c <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800e868:	2311      	movs	r3, #17
 800e86a:	e000      	b.n	800e86e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800e86c:	2300      	movs	r3, #0
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	20000f54 	.word	0x20000f54

0800e87c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 800e87c:	b590      	push	{r4, r7, lr}
 800e87e:	b097      	sub	sp, #92	; 0x5c
 800e880:	af04      	add	r7, sp, #16
 800e882:	4603      	mov	r3, r0
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
 800e888:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d002      	beq.n	800e896 <LoRaMacCryptoHandleJoinAccept+0x1a>
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d101      	bne.n	800e89a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e896:	230a      	movs	r3, #10
 800e898:	e0bd      	b.n	800ea16 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800e89a:	2313      	movs	r3, #19
 800e89c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	61bb      	str	r3, [r7, #24]
 800e8a4:	f107 031c 	add.w	r3, r7, #28
 800e8a8:	221d      	movs	r2, #29
 800e8aa:	2100      	movs	r1, #0
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f008 f8bb 	bl	8016a28 <memset>
    uint8_t versionMinor         = 0;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800e8b6:	4b5a      	ldr	r3, [pc, #360]	; (800ea20 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	889b      	ldrh	r3, [r3, #4]
 800e8bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681c      	ldr	r4, [r3, #0]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	791b      	ldrb	r3, [r3, #4]
 800e8c8:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 800e8cc:	7bf8      	ldrb	r0, [r7, #15]
 800e8ce:	f107 0217 	add.w	r2, r7, #23
 800e8d2:	9202      	str	r2, [sp, #8]
 800e8d4:	f107 0218 	add.w	r2, r7, #24
 800e8d8:	9201      	str	r2, [sp, #4]
 800e8da:	9300      	str	r3, [sp, #0]
 800e8dc:	4623      	mov	r3, r4
 800e8de:	460a      	mov	r2, r1
 800e8e0:	68b9      	ldr	r1, [r7, #8]
 800e8e2:	f7f8 feee 	bl	80076c2 <SecureElementProcessJoinAccept>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d001      	beq.n	800e8f0 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e8ec:	230f      	movs	r3, #15
 800e8ee:	e092      	b.n	800ea16 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6818      	ldr	r0, [r3, #0]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	791b      	ldrb	r3, [r3, #4]
 800e8f8:	b29a      	uxth	r2, r3
 800e8fa:	f107 0318 	add.w	r3, r7, #24
 800e8fe:	4619      	mov	r1, r3
 800e900:	f004 fbf1 	bl	80130e6 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 f9ed 	bl	800ece4 <LoRaMacParserJoinAccept>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d001      	beq.n	800e914 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800e910:	2310      	movs	r3, #16
 800e912:	e080      	b.n	800ea16 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	799b      	ldrb	r3, [r3, #6]
 800e918:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	79db      	ldrb	r3, [r3, #7]
 800e91e:	021b      	lsls	r3, r3, #8
 800e920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e922:	4313      	orrs	r3, r2
 800e924:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	7a1b      	ldrb	r3, [r3, #8]
 800e92a:	041b      	lsls	r3, r3, #16
 800e92c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e92e:	4313      	orrs	r3, r2
 800e930:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800e932:	4b3b      	ldr	r3, [pc, #236]	; (800ea20 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d010      	beq.n	800e960 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 800e93e:	4b38      	ldr	r3, [pc, #224]	; (800ea20 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e944:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800e946:	7dfb      	ldrb	r3, [r7, #23]
 800e948:	2100      	movs	r1, #0
 800e94a:	4618      	mov	r0, r3
 800e94c:	f000 f97c 	bl	800ec48 <LoRaMacCryptoDeriveMcRootKey>
 800e950:	4603      	mov	r3, r0
 800e952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800e956:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d005      	beq.n	800e96a <LoRaMacCryptoHandleJoinAccept+0xee>
 800e95e:	e001      	b.n	800e964 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800e960:	2303      	movs	r3, #3
 800e962:	e058      	b.n	800ea16 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 800e964:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e968:	e055      	b.n	800ea16 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800e96a:	2004      	movs	r0, #4
 800e96c:	f000 f997 	bl	800ec9e <LoRaMacCryptoDeriveMcKEKey>
 800e970:	4603      	mov	r3, r0
 800e972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800e976:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d002      	beq.n	800e984 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 800e97e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e982:	e048      	b.n	800ea16 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	7a5b      	ldrb	r3, [r3, #9]
 800e988:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	7a9b      	ldrb	r3, [r3, #10]
 800e98e:	021b      	lsls	r3, r3, #8
 800e990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e992:	4313      	orrs	r3, r2
 800e994:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	7adb      	ldrb	r3, [r3, #11]
 800e99a:	041b      	lsls	r3, r3, #16
 800e99c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800e9a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e9a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9aa:	2003      	movs	r0, #3
 800e9ac:	f7ff fce2 	bl	800e374 <DeriveSessionKey10x>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800e9b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d002      	beq.n	800e9c4 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 800e9be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e9c2:	e028      	b.n	800ea16 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800e9c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e9c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9cc:	2002      	movs	r0, #2
 800e9ce:	f7ff fcd1 	bl	800e374 <DeriveSessionKey10x>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800e9d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d002      	beq.n	800e9e6 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 800e9e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e9e4:	e017      	b.n	800ea16 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800e9e6:	4b0e      	ldr	r3, [pc, #56]	; (800ea20 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	7dfa      	ldrb	r2, [r7, #23]
 800e9ec:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 800e9ee:	4b0c      	ldr	r3, [pc, #48]	; (800ea20 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800e9f6:	4b0a      	ldr	r3, [pc, #40]	; (800ea20 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e9fe:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ea00:	4b07      	ldr	r3, [pc, #28]	; (800ea20 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f04f 32ff 	mov.w	r2, #4294967295
 800ea08:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ea0a:	4b05      	ldr	r3, [pc, #20]	; (800ea20 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea12:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 800ea14:	2300      	movs	r3, #0
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	374c      	adds	r7, #76	; 0x4c
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd90      	pop	{r4, r7, pc}
 800ea1e:	bf00      	nop
 800ea20:	20000f54 	.word	0x20000f54

0800ea24 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 800ea24:	b590      	push	{r4, r7, lr}
 800ea26:	b08b      	sub	sp, #44	; 0x2c
 800ea28:	af04      	add	r7, sp, #16
 800ea2a:	60f8      	str	r0, [r7, #12]
 800ea2c:	607b      	str	r3, [r7, #4]
 800ea2e:	460b      	mov	r3, r1
 800ea30:	72fb      	strb	r3, [r7, #11]
 800ea32:	4613      	mov	r3, r2
 800ea34:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800ea36:	2313      	movs	r3, #19
 800ea38:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800ea3a:	2303      	movs	r3, #3
 800ea3c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d101      	bne.n	800ea48 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ea44:	230a      	movs	r3, #10
 800ea46:	e05f      	b.n	800eb08 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800ea48:	4b31      	ldr	r3, [pc, #196]	; (800eb10 <LoRaMacCryptoSecureMessage+0xec>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	68db      	ldr	r3, [r3, #12]
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d201      	bcs.n	800ea58 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ea54:	2306      	movs	r3, #6
 800ea56:	e057      	b.n	800eb08 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d101      	bne.n	800ea66 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800ea62:	2302      	movs	r3, #2
 800ea64:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800ea66:	4b2a      	ldr	r3, [pc, #168]	; (800eb10 <LoRaMacCryptoSecureMessage+0xec>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	68fa      	ldr	r2, [r7, #12]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d916      	bls.n	800eaa0 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea7c:	b219      	sxth	r1, r3
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	689c      	ldr	r4, [r3, #8]
 800ea82:	7dfa      	ldrb	r2, [r7, #23]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	9301      	str	r3, [sp, #4]
 800ea88:	2300      	movs	r3, #0
 800ea8a:	9300      	str	r3, [sp, #0]
 800ea8c:	4623      	mov	r3, r4
 800ea8e:	f7ff faa3 	bl	800dfd8 <PayloadEncrypt>
 800ea92:	4603      	mov	r3, r0
 800ea94:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ea96:	7dbb      	ldrb	r3, [r7, #22]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d001      	beq.n	800eaa0 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 800ea9c:	7dbb      	ldrb	r3, [r7, #22]
 800ea9e:	e033      	b.n	800eb08 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f000 fb60 	bl	800f166 <LoRaMacSerializerData>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d001      	beq.n	800eab0 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800eaac:	2311      	movs	r3, #17
 800eaae:	e02b      	b.n	800eb08 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800eab0:	2302      	movs	r3, #2
 800eab2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6818      	ldr	r0, [r3, #0]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	791b      	ldrb	r3, [r3, #4]
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	3b04      	subs	r3, #4
 800eac0:	b299      	uxth	r1, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	689b      	ldr	r3, [r3, #8]
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	322c      	adds	r2, #44	; 0x2c
 800eaca:	7dfc      	ldrb	r4, [r7, #23]
 800eacc:	9203      	str	r2, [sp, #12]
 800eace:	68fa      	ldr	r2, [r7, #12]
 800ead0:	9202      	str	r2, [sp, #8]
 800ead2:	9301      	str	r3, [sp, #4]
 800ead4:	2300      	movs	r3, #0
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	2300      	movs	r3, #0
 800eada:	4622      	mov	r2, r4
 800eadc:	f7ff fb7e 	bl	800e1dc <ComputeCmacB0>
 800eae0:	4603      	mov	r3, r0
 800eae2:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800eae4:	7dbb      	ldrb	r3, [r7, #22]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d001      	beq.n	800eaee <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 800eaea:	7dbb      	ldrb	r3, [r7, #22]
 800eaec:	e00c      	b.n	800eb08 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 fb39 	bl	800f166 <LoRaMacSerializerData>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d001      	beq.n	800eafe <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800eafa:	2311      	movs	r3, #17
 800eafc:	e004      	b.n	800eb08 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800eafe:	4b04      	ldr	r3, [pc, #16]	; (800eb10 <LoRaMacCryptoSecureMessage+0xec>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800eb06:	2300      	movs	r3, #0
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	371c      	adds	r7, #28
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd90      	pop	{r4, r7, pc}
 800eb10:	20000f54 	.word	0x20000f54

0800eb14 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800eb14:	b590      	push	{r4, r7, lr}
 800eb16:	b08b      	sub	sp, #44	; 0x2c
 800eb18:	af04      	add	r7, sp, #16
 800eb1a:	60b9      	str	r1, [r7, #8]
 800eb1c:	607b      	str	r3, [r7, #4]
 800eb1e:	4603      	mov	r3, r0
 800eb20:	73fb      	strb	r3, [r7, #15]
 800eb22:	4613      	mov	r3, r2
 800eb24:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 800eb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d101      	bne.n	800eb30 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800eb2c:	230a      	movs	r3, #10
 800eb2e:	e084      	b.n	800ec3a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800eb30:	7bbb      	ldrb	r3, [r7, #14]
 800eb32:	6879      	ldr	r1, [r7, #4]
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7ff fcbb 	bl	800e4b0 <CheckFCntDown>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	f083 0301 	eor.w	r3, r3, #1
 800eb40:	b2db      	uxtb	r3, r3
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d001      	beq.n	800eb4a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800eb46:	2306      	movs	r3, #6
 800eb48:	e077      	b.n	800ec3a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800eb4a:	2313      	movs	r3, #19
 800eb4c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800eb4e:	2303      	movs	r3, #3
 800eb50:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 800eb52:	2302      	movs	r3, #2
 800eb54:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800eb56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb58:	f000 f98f 	bl	800ee7a <LoRaMacParserData>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d001      	beq.n	800eb66 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800eb62:	2310      	movs	r3, #16
 800eb64:	e069      	b.n	800ec3a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800eb66:	f107 0210 	add.w	r2, r7, #16
 800eb6a:	7bfb      	ldrb	r3, [r7, #15]
 800eb6c:	4611      	mov	r1, r2
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7ff fbda 	bl	800e328 <GetKeyAddrItem>
 800eb74:	4603      	mov	r3, r0
 800eb76:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800eb78:	7d7b      	ldrb	r3, [r7, #21]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d001      	beq.n	800eb82 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 800eb7e:	7d7b      	ldrb	r3, [r7, #21]
 800eb80:	e05b      	b.n	800ec3a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	785b      	ldrb	r3, [r3, #1]
 800eb86:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	789b      	ldrb	r3, [r3, #2]
 800eb8c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800eb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb90:	689b      	ldr	r3, [r3, #8]
 800eb92:	68ba      	ldr	r2, [r7, #8]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d001      	beq.n	800eb9c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800eb98:	2302      	movs	r3, #2
 800eb9a:	e04e      	b.n	800ec3a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800eb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9e:	7b1b      	ldrb	r3, [r3, #12]
 800eba0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	bf14      	ite	ne
 800ebaa:	2301      	movne	r3, #1
 800ebac:	2300      	moveq	r3, #0
 800ebae:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800ebb0:	4b24      	ldr	r3, [pc, #144]	; (800ec44 <LoRaMacCryptoUnsecureMessage+0x130>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	789b      	ldrb	r3, [r3, #2]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d101      	bne.n	800ebbe <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800ebbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc0:	6818      	ldr	r0, [r3, #0]
 800ebc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc4:	791b      	ldrb	r3, [r3, #4]
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	3b04      	subs	r3, #4
 800ebca:	b299      	uxth	r1, r3
 800ebcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd0:	7dbc      	ldrb	r4, [r7, #22]
 800ebd2:	7d3a      	ldrb	r2, [r7, #20]
 800ebd4:	9303      	str	r3, [sp, #12]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	9302      	str	r3, [sp, #8]
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	9301      	str	r3, [sp, #4]
 800ebde:	2301      	movs	r3, #1
 800ebe0:	9300      	str	r3, [sp, #0]
 800ebe2:	4623      	mov	r3, r4
 800ebe4:	f7ff fb38 	bl	800e258 <VerifyCmacB0>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ebec:	7d7b      	ldrb	r3, [r7, #21]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d001      	beq.n	800ebf6 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 800ebf2:	7d7b      	ldrb	r3, [r7, #21]
 800ebf4:	e021      	b.n	800ec3a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800ebf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d101      	bne.n	800ec04 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800ec00:	2302      	movs	r3, #2
 800ec02:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800ec04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec06:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ec08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec0e:	b219      	sxth	r1, r3
 800ec10:	7dfa      	ldrb	r2, [r7, #23]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	9301      	str	r3, [sp, #4]
 800ec16:	2301      	movs	r3, #1
 800ec18:	9300      	str	r3, [sp, #0]
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	f7ff f9dc 	bl	800dfd8 <PayloadEncrypt>
 800ec20:	4603      	mov	r3, r0
 800ec22:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ec24:	7d7b      	ldrb	r3, [r7, #21]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d001      	beq.n	800ec2e <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 800ec2a:	7d7b      	ldrb	r3, [r7, #21]
 800ec2c:	e005      	b.n	800ec3a <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800ec2e:	7bbb      	ldrb	r3, [r7, #14]
 800ec30:	6879      	ldr	r1, [r7, #4]
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7ff fc60 	bl	800e4f8 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	371c      	adds	r7, #28
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd90      	pop	{r4, r7, pc}
 800ec42:	bf00      	nop
 800ec44:	20000f54 	.word	0x20000f54

0800ec48 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b086      	sub	sp, #24
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	4603      	mov	r3, r0
 800ec50:	460a      	mov	r2, r1
 800ec52:	71fb      	strb	r3, [r7, #7]
 800ec54:	4613      	mov	r3, r2
 800ec56:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800ec58:	79bb      	ldrb	r3, [r7, #6]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d001      	beq.n	800ec62 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ec5e:	230b      	movs	r3, #11
 800ec60:	e019      	b.n	800ec96 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 800ec62:	2300      	movs	r3, #0
 800ec64:	60bb      	str	r3, [r7, #8]
 800ec66:	f107 030c 	add.w	r3, r7, #12
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	601a      	str	r2, [r3, #0]
 800ec6e:	605a      	str	r2, [r3, #4]
 800ec70:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 800ec72:	79fb      	ldrb	r3, [r7, #7]
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d101      	bne.n	800ec7c <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 800ec78:	2320      	movs	r3, #32
 800ec7a:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ec7c:	79b9      	ldrb	r1, [r7, #6]
 800ec7e:	f107 0308 	add.w	r3, r7, #8
 800ec82:	2204      	movs	r2, #4
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7f8 fcdc 	bl	8007642 <SecureElementDeriveAndStoreKey>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d001      	beq.n	800ec94 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ec90:	230f      	movs	r3, #15
 800ec92:	e000      	b.n	800ec96 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800ec94:	2300      	movs	r3, #0
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3718      	adds	r7, #24
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}

0800ec9e <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 800ec9e:	b580      	push	{r7, lr}
 800eca0:	b086      	sub	sp, #24
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	4603      	mov	r3, r0
 800eca6:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800eca8:	79fb      	ldrb	r3, [r7, #7]
 800ecaa:	2b04      	cmp	r3, #4
 800ecac:	d001      	beq.n	800ecb2 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ecae:	230b      	movs	r3, #11
 800ecb0:	e014      	b.n	800ecdc <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	60bb      	str	r3, [r7, #8]
 800ecb6:	f107 030c 	add.w	r3, r7, #12
 800ecba:	2200      	movs	r2, #0
 800ecbc:	601a      	str	r2, [r3, #0]
 800ecbe:	605a      	str	r2, [r3, #4]
 800ecc0:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ecc2:	79f9      	ldrb	r1, [r7, #7]
 800ecc4:	f107 0308 	add.w	r3, r7, #8
 800ecc8:	227f      	movs	r2, #127	; 0x7f
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7f8 fcb9 	bl	8007642 <SecureElementDeriveAndStoreKey>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d001      	beq.n	800ecda <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ecd6:	230f      	movs	r3, #15
 800ecd8:	e000      	b.n	800ecdc <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3718      	adds	r7, #24
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d003      	beq.n	800ecfa <LoRaMacParserJoinAccept+0x16>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d101      	bne.n	800ecfe <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800ecfa:	2302      	movs	r3, #2
 800ecfc:	e0b9      	b.n	800ee72 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681a      	ldr	r2, [r3, #0]
 800ed06:	89fb      	ldrh	r3, [r7, #14]
 800ed08:	1c59      	adds	r1, r3, #1
 800ed0a:	81f9      	strh	r1, [r7, #14]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	781a      	ldrb	r2, [r3, #0]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	1d98      	adds	r0, r3, #6
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	89fb      	ldrh	r3, [r7, #14]
 800ed1e:	4413      	add	r3, r2
 800ed20:	2203      	movs	r2, #3
 800ed22:	4619      	mov	r1, r3
 800ed24:	f004 f9df 	bl	80130e6 <memcpy1>
    bufItr = bufItr + 3;
 800ed28:	89fb      	ldrh	r3, [r7, #14]
 800ed2a:	3303      	adds	r3, #3
 800ed2c:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f103 0009 	add.w	r0, r3, #9
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	89fb      	ldrh	r3, [r7, #14]
 800ed3a:	4413      	add	r3, r2
 800ed3c:	2203      	movs	r2, #3
 800ed3e:	4619      	mov	r1, r3
 800ed40:	f004 f9d1 	bl	80130e6 <memcpy1>
    bufItr = bufItr + 3;
 800ed44:	89fb      	ldrh	r3, [r7, #14]
 800ed46:	3303      	adds	r3, #3
 800ed48:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	89fb      	ldrh	r3, [r7, #14]
 800ed50:	1c59      	adds	r1, r3, #1
 800ed52:	81f9      	strh	r1, [r7, #14]
 800ed54:	4413      	add	r3, r2
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	461a      	mov	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	89fb      	ldrh	r3, [r7, #14]
 800ed64:	1c59      	adds	r1, r3, #1
 800ed66:	81f9      	strh	r1, [r7, #14]
 800ed68:	4413      	add	r3, r2
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	021a      	lsls	r2, r3, #8
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	431a      	orrs	r2, r3
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	89fb      	ldrh	r3, [r7, #14]
 800ed7e:	1c59      	adds	r1, r3, #1
 800ed80:	81f9      	strh	r1, [r7, #14]
 800ed82:	4413      	add	r3, r2
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	041a      	lsls	r2, r3, #16
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	431a      	orrs	r2, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	89fb      	ldrh	r3, [r7, #14]
 800ed98:	1c59      	adds	r1, r3, #1
 800ed9a:	81f9      	strh	r1, [r7, #14]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	061a      	lsls	r2, r3, #24
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	68db      	ldr	r3, [r3, #12]
 800eda6:	431a      	orrs	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	89fb      	ldrh	r3, [r7, #14]
 800edb2:	1c59      	adds	r1, r3, #1
 800edb4:	81f9      	strh	r1, [r7, #14]
 800edb6:	4413      	add	r3, r2
 800edb8:	781a      	ldrb	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	89fb      	ldrh	r3, [r7, #14]
 800edc4:	1c59      	adds	r1, r3, #1
 800edc6:	81f9      	strh	r1, [r7, #14]
 800edc8:	4413      	add	r3, r2
 800edca:	781a      	ldrb	r2, [r3, #0]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	791b      	ldrb	r3, [r3, #4]
 800edd4:	1f1a      	subs	r2, r3, #4
 800edd6:	89fb      	ldrh	r3, [r7, #14]
 800edd8:	1ad3      	subs	r3, r2, r3
 800edda:	2b10      	cmp	r3, #16
 800eddc:	d10e      	bne.n	800edfc <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f103 0012 	add.w	r0, r3, #18
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681a      	ldr	r2, [r3, #0]
 800ede8:	89fb      	ldrh	r3, [r7, #14]
 800edea:	4413      	add	r3, r2
 800edec:	2210      	movs	r2, #16
 800edee:	4619      	mov	r1, r3
 800edf0:	f004 f979 	bl	80130e6 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800edf4:	89fb      	ldrh	r3, [r7, #14]
 800edf6:	3310      	adds	r3, #16
 800edf8:	81fb      	strh	r3, [r7, #14]
 800edfa:	e008      	b.n	800ee0e <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	791b      	ldrb	r3, [r3, #4]
 800ee00:	1f1a      	subs	r2, r3, #4
 800ee02:	89fb      	ldrh	r3, [r7, #14]
 800ee04:	1ad3      	subs	r3, r2, r3
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	dd01      	ble.n	800ee0e <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	e031      	b.n	800ee72 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	89fb      	ldrh	r3, [r7, #14]
 800ee14:	1c59      	adds	r1, r3, #1
 800ee16:	81f9      	strh	r1, [r7, #14]
 800ee18:	4413      	add	r3, r2
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	89fb      	ldrh	r3, [r7, #14]
 800ee28:	1c59      	adds	r1, r3, #1
 800ee2a:	81f9      	strh	r1, [r7, #14]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	021a      	lsls	r2, r3, #8
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee36:	431a      	orrs	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	89fb      	ldrh	r3, [r7, #14]
 800ee42:	1c59      	adds	r1, r3, #1
 800ee44:	81f9      	strh	r1, [r7, #14]
 800ee46:	4413      	add	r3, r2
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	041a      	lsls	r2, r3, #16
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee50:	431a      	orrs	r2, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	89fb      	ldrh	r3, [r7, #14]
 800ee5c:	1c59      	adds	r1, r3, #1
 800ee5e:	81f9      	strh	r1, [r7, #14]
 800ee60:	4413      	add	r3, r2
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	061a      	lsls	r2, r3, #24
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee6a:	431a      	orrs	r2, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800ee70:	2300      	movs	r3, #0
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3710      	adds	r7, #16
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}

0800ee7a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800ee7a:	b580      	push	{r7, lr}
 800ee7c:	b084      	sub	sp, #16
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d003      	beq.n	800ee90 <LoRaMacParserData+0x16>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d101      	bne.n	800ee94 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800ee90:	2302      	movs	r3, #2
 800ee92:	e0e2      	b.n	800f05a <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 800ee94:	2300      	movs	r3, #0
 800ee96:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	89fb      	ldrh	r3, [r7, #14]
 800ee9e:	1c59      	adds	r1, r3, #1
 800eea0:	81f9      	strh	r1, [r7, #14]
 800eea2:	4413      	add	r3, r2
 800eea4:	781a      	ldrb	r2, [r3, #0]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	89fb      	ldrh	r3, [r7, #14]
 800eeb0:	1c59      	adds	r1, r3, #1
 800eeb2:	81f9      	strh	r1, [r7, #14]
 800eeb4:	4413      	add	r3, r2
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	461a      	mov	r2, r3
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681a      	ldr	r2, [r3, #0]
 800eec2:	89fb      	ldrh	r3, [r7, #14]
 800eec4:	1c59      	adds	r1, r3, #1
 800eec6:	81f9      	strh	r1, [r7, #14]
 800eec8:	4413      	add	r3, r2
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	021a      	lsls	r2, r3, #8
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	689b      	ldr	r3, [r3, #8]
 800eed2:	431a      	orrs	r2, r3
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681a      	ldr	r2, [r3, #0]
 800eedc:	89fb      	ldrh	r3, [r7, #14]
 800eede:	1c59      	adds	r1, r3, #1
 800eee0:	81f9      	strh	r1, [r7, #14]
 800eee2:	4413      	add	r3, r2
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	041a      	lsls	r2, r3, #16
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	431a      	orrs	r2, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	89fb      	ldrh	r3, [r7, #14]
 800eef8:	1c59      	adds	r1, r3, #1
 800eefa:	81f9      	strh	r1, [r7, #14]
 800eefc:	4413      	add	r3, r2
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	061a      	lsls	r2, r3, #24
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	431a      	orrs	r2, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	89fb      	ldrh	r3, [r7, #14]
 800ef12:	1c59      	adds	r1, r3, #1
 800ef14:	81f9      	strh	r1, [r7, #14]
 800ef16:	4413      	add	r3, r2
 800ef18:	781a      	ldrb	r2, [r3, #0]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681a      	ldr	r2, [r3, #0]
 800ef22:	89fb      	ldrh	r3, [r7, #14]
 800ef24:	1c59      	adds	r1, r3, #1
 800ef26:	81f9      	strh	r1, [r7, #14]
 800ef28:	4413      	add	r3, r2
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	b29a      	uxth	r2, r3
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	89fb      	ldrh	r3, [r7, #14]
 800ef38:	1c59      	adds	r1, r3, #1
 800ef3a:	81f9      	strh	r1, [r7, #14]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	0219      	lsls	r1, r3, #8
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	89db      	ldrh	r3, [r3, #14]
 800ef46:	b21a      	sxth	r2, r3
 800ef48:	b20b      	sxth	r3, r1
 800ef4a:	4313      	orrs	r3, r2
 800ef4c:	b21b      	sxth	r3, r3
 800ef4e:	b29a      	uxth	r2, r3
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f103 0010 	add.w	r0, r3, #16
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681a      	ldr	r2, [r3, #0]
 800ef5e:	89fb      	ldrh	r3, [r7, #14]
 800ef60:	18d1      	adds	r1, r2, r3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	7b1b      	ldrb	r3, [r3, #12]
 800ef66:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	461a      	mov	r2, r3
 800ef70:	f004 f8b9 	bl	80130e6 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	7b1b      	ldrb	r3, [r3, #12]
 800ef78:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	b29a      	uxth	r2, r3
 800ef80:	89fb      	ldrh	r3, [r7, #14]
 800ef82:	4413      	add	r3, r2
 800ef84:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	791b      	ldrb	r3, [r3, #4]
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	89fb      	ldrh	r3, [r7, #14]
 800ef9e:	1ad3      	subs	r3, r2, r3
 800efa0:	2b04      	cmp	r3, #4
 800efa2:	dd28      	ble.n	800eff6 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	89fb      	ldrh	r3, [r7, #14]
 800efaa:	1c59      	adds	r1, r3, #1
 800efac:	81f9      	strh	r1, [r7, #14]
 800efae:	4413      	add	r3, r2
 800efb0:	781a      	ldrb	r2, [r3, #0]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	791a      	ldrb	r2, [r3, #4]
 800efbc:	89fb      	ldrh	r3, [r7, #14]
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	1ad3      	subs	r3, r2, r3
 800efc2:	b2db      	uxtb	r3, r3
 800efc4:	3b04      	subs	r3, #4
 800efc6:	b2da      	uxtb	r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	89fb      	ldrh	r3, [r7, #14]
 800efd8:	18d1      	adds	r1, r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	461a      	mov	r2, r3
 800efe4:	f004 f87f 	bl	80130e6 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efee:	b29a      	uxth	r2, r3
 800eff0:	89fb      	ldrh	r3, [r7, #14]
 800eff2:	4413      	add	r3, r2
 800eff4:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	791b      	ldrb	r3, [r3, #4]
 800effe:	3b04      	subs	r3, #4
 800f000:	4413      	add	r3, r2
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	461a      	mov	r2, r3
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6819      	ldr	r1, [r3, #0]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	791b      	ldrb	r3, [r3, #4]
 800f016:	3b03      	subs	r3, #3
 800f018:	440b      	add	r3, r1
 800f01a:	781b      	ldrb	r3, [r3, #0]
 800f01c:	021b      	lsls	r3, r3, #8
 800f01e:	431a      	orrs	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6819      	ldr	r1, [r3, #0]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	791b      	ldrb	r3, [r3, #4]
 800f030:	3b02      	subs	r3, #2
 800f032:	440b      	add	r3, r1
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	041b      	lsls	r3, r3, #16
 800f038:	431a      	orrs	r2, r3
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6819      	ldr	r1, [r3, #0]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	791b      	ldrb	r3, [r3, #4]
 800f04a:	3b01      	subs	r3, #1
 800f04c:	440b      	add	r3, r1
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	061b      	lsls	r3, r3, #24
 800f052:	431a      	orrs	r2, r3
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800f058:	2300      	movs	r3, #0
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}

0800f062 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800f062:	b580      	push	{r7, lr}
 800f064:	b084      	sub	sp, #16
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d003      	beq.n	800f078 <LoRaMacSerializerJoinRequest+0x16>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d101      	bne.n	800f07c <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f078:	2301      	movs	r3, #1
 800f07a:	e070      	b.n	800f15e <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 800f07c:	2300      	movs	r3, #0
 800f07e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	791b      	ldrb	r3, [r3, #4]
 800f084:	2b16      	cmp	r3, #22
 800f086:	d801      	bhi.n	800f08c <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800f088:	2302      	movs	r3, #2
 800f08a:	e068      	b.n	800f15e <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	89fb      	ldrh	r3, [r7, #14]
 800f092:	1c59      	adds	r1, r3, #1
 800f094:	81f9      	strh	r1, [r7, #14]
 800f096:	4413      	add	r3, r2
 800f098:	687a      	ldr	r2, [r7, #4]
 800f09a:	7952      	ldrb	r2, [r2, #5]
 800f09c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	89fb      	ldrh	r3, [r7, #14]
 800f0a4:	18d0      	adds	r0, r2, r3
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	3306      	adds	r3, #6
 800f0aa:	2208      	movs	r2, #8
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	f004 f835 	bl	801311c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 800f0b2:	89fb      	ldrh	r3, [r7, #14]
 800f0b4:	3308      	adds	r3, #8
 800f0b6:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	89fb      	ldrh	r3, [r7, #14]
 800f0be:	18d0      	adds	r0, r2, r3
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	330e      	adds	r3, #14
 800f0c4:	2208      	movs	r2, #8
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	f004 f828 	bl	801311c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 800f0cc:	89fb      	ldrh	r3, [r7, #14]
 800f0ce:	3308      	adds	r3, #8
 800f0d0:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	8ad9      	ldrh	r1, [r3, #22]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681a      	ldr	r2, [r3, #0]
 800f0da:	89fb      	ldrh	r3, [r7, #14]
 800f0dc:	1c58      	adds	r0, r3, #1
 800f0de:	81f8      	strh	r0, [r7, #14]
 800f0e0:	4413      	add	r3, r2
 800f0e2:	b2ca      	uxtb	r2, r1
 800f0e4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	8adb      	ldrh	r3, [r3, #22]
 800f0ea:	0a1b      	lsrs	r3, r3, #8
 800f0ec:	b299      	uxth	r1, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	89fb      	ldrh	r3, [r7, #14]
 800f0f4:	1c58      	adds	r0, r3, #1
 800f0f6:	81f8      	strh	r0, [r7, #14]
 800f0f8:	4413      	add	r3, r2
 800f0fa:	b2ca      	uxtb	r2, r1
 800f0fc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6999      	ldr	r1, [r3, #24]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681a      	ldr	r2, [r3, #0]
 800f106:	89fb      	ldrh	r3, [r7, #14]
 800f108:	1c58      	adds	r0, r3, #1
 800f10a:	81f8      	strh	r0, [r7, #14]
 800f10c:	4413      	add	r3, r2
 800f10e:	b2ca      	uxtb	r2, r1
 800f110:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	699b      	ldr	r3, [r3, #24]
 800f116:	0a19      	lsrs	r1, r3, #8
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681a      	ldr	r2, [r3, #0]
 800f11c:	89fb      	ldrh	r3, [r7, #14]
 800f11e:	1c58      	adds	r0, r3, #1
 800f120:	81f8      	strh	r0, [r7, #14]
 800f122:	4413      	add	r3, r2
 800f124:	b2ca      	uxtb	r2, r1
 800f126:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	699b      	ldr	r3, [r3, #24]
 800f12c:	0c19      	lsrs	r1, r3, #16
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681a      	ldr	r2, [r3, #0]
 800f132:	89fb      	ldrh	r3, [r7, #14]
 800f134:	1c58      	adds	r0, r3, #1
 800f136:	81f8      	strh	r0, [r7, #14]
 800f138:	4413      	add	r3, r2
 800f13a:	b2ca      	uxtb	r2, r1
 800f13c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	699b      	ldr	r3, [r3, #24]
 800f142:	0e19      	lsrs	r1, r3, #24
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	89fb      	ldrh	r3, [r7, #14]
 800f14a:	1c58      	adds	r0, r3, #1
 800f14c:	81f8      	strh	r0, [r7, #14]
 800f14e:	4413      	add	r3, r2
 800f150:	b2ca      	uxtb	r2, r1
 800f152:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 800f154:	89fb      	ldrh	r3, [r7, #14]
 800f156:	b2da      	uxtb	r2, r3
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800f15c:	2300      	movs	r3, #0
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3710      	adds	r7, #16
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b084      	sub	sp, #16
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d003      	beq.n	800f17c <LoRaMacSerializerData+0x16>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d101      	bne.n	800f180 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f17c:	2301      	movs	r3, #1
 800f17e:	e0e5      	b.n	800f34c <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 800f180:	2300      	movs	r3, #0
 800f182:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 800f184:	2308      	movs	r3, #8
 800f186:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	7b1b      	ldrb	r3, [r3, #12]
 800f18c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f190:	b2db      	uxtb	r3, r3
 800f192:	b29a      	uxth	r2, r3
 800f194:	89bb      	ldrh	r3, [r7, #12]
 800f196:	4413      	add	r3, r2
 800f198:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d002      	beq.n	800f1aa <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800f1a4:	89bb      	ldrh	r3, [r7, #12]
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	89bb      	ldrh	r3, [r7, #12]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800f1b8:	89bb      	ldrh	r3, [r7, #12]
 800f1ba:	3304      	adds	r3, #4
 800f1bc:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	791b      	ldrb	r3, [r3, #4]
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	89ba      	ldrh	r2, [r7, #12]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d901      	bls.n	800f1ce <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800f1ca:	2302      	movs	r3, #2
 800f1cc:	e0be      	b.n	800f34c <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	89fb      	ldrh	r3, [r7, #14]
 800f1d4:	1c59      	adds	r1, r3, #1
 800f1d6:	81f9      	strh	r1, [r7, #14]
 800f1d8:	4413      	add	r3, r2
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	7952      	ldrb	r2, [r2, #5]
 800f1de:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6899      	ldr	r1, [r3, #8]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681a      	ldr	r2, [r3, #0]
 800f1e8:	89fb      	ldrh	r3, [r7, #14]
 800f1ea:	1c58      	adds	r0, r3, #1
 800f1ec:	81f8      	strh	r0, [r7, #14]
 800f1ee:	4413      	add	r3, r2
 800f1f0:	b2ca      	uxtb	r2, r1
 800f1f2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	689b      	ldr	r3, [r3, #8]
 800f1f8:	0a19      	lsrs	r1, r3, #8
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681a      	ldr	r2, [r3, #0]
 800f1fe:	89fb      	ldrh	r3, [r7, #14]
 800f200:	1c58      	adds	r0, r3, #1
 800f202:	81f8      	strh	r0, [r7, #14]
 800f204:	4413      	add	r3, r2
 800f206:	b2ca      	uxtb	r2, r1
 800f208:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	689b      	ldr	r3, [r3, #8]
 800f20e:	0c19      	lsrs	r1, r3, #16
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681a      	ldr	r2, [r3, #0]
 800f214:	89fb      	ldrh	r3, [r7, #14]
 800f216:	1c58      	adds	r0, r3, #1
 800f218:	81f8      	strh	r0, [r7, #14]
 800f21a:	4413      	add	r3, r2
 800f21c:	b2ca      	uxtb	r2, r1
 800f21e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	689b      	ldr	r3, [r3, #8]
 800f224:	0e19      	lsrs	r1, r3, #24
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	89fb      	ldrh	r3, [r7, #14]
 800f22c:	1c58      	adds	r0, r3, #1
 800f22e:	81f8      	strh	r0, [r7, #14]
 800f230:	4413      	add	r3, r2
 800f232:	b2ca      	uxtb	r2, r1
 800f234:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681a      	ldr	r2, [r3, #0]
 800f23a:	89fb      	ldrh	r3, [r7, #14]
 800f23c:	1c59      	adds	r1, r3, #1
 800f23e:	81f9      	strh	r1, [r7, #14]
 800f240:	4413      	add	r3, r2
 800f242:	687a      	ldr	r2, [r7, #4]
 800f244:	7b12      	ldrb	r2, [r2, #12]
 800f246:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	89d9      	ldrh	r1, [r3, #14]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	89fb      	ldrh	r3, [r7, #14]
 800f252:	1c58      	adds	r0, r3, #1
 800f254:	81f8      	strh	r0, [r7, #14]
 800f256:	4413      	add	r3, r2
 800f258:	b2ca      	uxtb	r2, r1
 800f25a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	89db      	ldrh	r3, [r3, #14]
 800f260:	0a1b      	lsrs	r3, r3, #8
 800f262:	b299      	uxth	r1, r3
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	89fb      	ldrh	r3, [r7, #14]
 800f26a:	1c58      	adds	r0, r3, #1
 800f26c:	81f8      	strh	r0, [r7, #14]
 800f26e:	4413      	add	r3, r2
 800f270:	b2ca      	uxtb	r2, r1
 800f272:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	89fb      	ldrh	r3, [r7, #14]
 800f27a:	18d0      	adds	r0, r2, r3
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f103 0110 	add.w	r1, r3, #16
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	7b1b      	ldrb	r3, [r3, #12]
 800f286:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	461a      	mov	r2, r3
 800f290:	f003 ff29 	bl	80130e6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	7b1b      	ldrb	r3, [r3, #12]
 800f298:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f29c:	b2db      	uxtb	r3, r3
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	89fb      	ldrh	r3, [r7, #14]
 800f2a2:	4413      	add	r3, r2
 800f2a4:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d009      	beq.n	800f2c4 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	89fb      	ldrh	r3, [r7, #14]
 800f2b6:	1c59      	adds	r1, r3, #1
 800f2b8:	81f9      	strh	r1, [r7, #14]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	687a      	ldr	r2, [r7, #4]
 800f2be:	f892 2020 	ldrb.w	r2, [r2, #32]
 800f2c2:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681a      	ldr	r2, [r3, #0]
 800f2c8:	89fb      	ldrh	r3, [r7, #14]
 800f2ca:	18d0      	adds	r0, r2, r3
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	461a      	mov	r2, r3
 800f2da:	f003 ff04 	bl	80130e6 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	89fb      	ldrh	r3, [r7, #14]
 800f2e8:	4413      	add	r3, r2
 800f2ea:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	89fb      	ldrh	r3, [r7, #14]
 800f2f6:	1c58      	adds	r0, r3, #1
 800f2f8:	81f8      	strh	r0, [r7, #14]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	b2ca      	uxtb	r2, r1
 800f2fe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f304:	0a19      	lsrs	r1, r3, #8
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	89fb      	ldrh	r3, [r7, #14]
 800f30c:	1c58      	adds	r0, r3, #1
 800f30e:	81f8      	strh	r0, [r7, #14]
 800f310:	4413      	add	r3, r2
 800f312:	b2ca      	uxtb	r2, r1
 800f314:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f31a:	0c19      	lsrs	r1, r3, #16
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	89fb      	ldrh	r3, [r7, #14]
 800f322:	1c58      	adds	r0, r3, #1
 800f324:	81f8      	strh	r0, [r7, #14]
 800f326:	4413      	add	r3, r2
 800f328:	b2ca      	uxtb	r2, r1
 800f32a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f330:	0e19      	lsrs	r1, r3, #24
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	89fb      	ldrh	r3, [r7, #14]
 800f338:	1c58      	adds	r0, r3, #1
 800f33a:	81f8      	strh	r0, [r7, #14]
 800f33c:	4413      	add	r3, r2
 800f33e:	b2ca      	uxtb	r2, r1
 800f340:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 800f342:	89fb      	ldrh	r3, [r7, #14]
 800f344:	b2da      	uxtb	r2, r3
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800f34a:	2300      	movs	r3, #0
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3710      	adds	r7, #16
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 800f354:	b480      	push	{r7}
 800f356:	b083      	sub	sp, #12
 800f358:	af00      	add	r7, sp, #0
 800f35a:	4603      	mov	r3, r0
 800f35c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800f35e:	79fb      	ldrb	r3, [r7, #7]
 800f360:	2b05      	cmp	r3, #5
 800f362:	d002      	beq.n	800f36a <RegionIsActive+0x16>
 800f364:	2b08      	cmp	r3, #8
 800f366:	d002      	beq.n	800f36e <RegionIsActive+0x1a>
 800f368:	e003      	b.n	800f372 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 800f36a:	2301      	movs	r3, #1
 800f36c:	e002      	b.n	800f374 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 800f36e:	2301      	movs	r3, #1
 800f370:	e000      	b.n	800f374 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800f372:	2300      	movs	r3, #0
        }
    }
}
 800f374:	4618      	mov	r0, r3
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	bc80      	pop	{r7}
 800f37c:	4770      	bx	lr

0800f37e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800f37e:	b580      	push	{r7, lr}
 800f380:	b084      	sub	sp, #16
 800f382:	af00      	add	r7, sp, #0
 800f384:	4603      	mov	r3, r0
 800f386:	6039      	str	r1, [r7, #0]
 800f388:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 800f38a:	2300      	movs	r3, #0
 800f38c:	60bb      	str	r3, [r7, #8]
    switch( region )
 800f38e:	79fb      	ldrb	r3, [r7, #7]
 800f390:	2b05      	cmp	r3, #5
 800f392:	d002      	beq.n	800f39a <RegionGetPhyParam+0x1c>
 800f394:	2b08      	cmp	r3, #8
 800f396:	d006      	beq.n	800f3a6 <RegionGetPhyParam+0x28>
 800f398:	e00b      	b.n	800f3b2 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 800f39a:	6838      	ldr	r0, [r7, #0]
 800f39c:	f001 faba 	bl	8010914 <RegionEU868GetPhyParam>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	60fb      	str	r3, [r7, #12]
 800f3a4:	e007      	b.n	800f3b6 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 800f3a6:	6838      	ldr	r0, [r7, #0]
 800f3a8:	f002 fc8c 	bl	8011cc4 <RegionUS915GetPhyParam>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	60fb      	str	r3, [r7, #12]
 800f3b0:	e001      	b.n	800f3b6 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	60fb      	str	r3, [r7, #12]
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b082      	sub	sp, #8
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	6039      	str	r1, [r7, #0]
 800f3cc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800f3ce:	79fb      	ldrb	r3, [r7, #7]
 800f3d0:	2b05      	cmp	r3, #5
 800f3d2:	d002      	beq.n	800f3da <RegionSetBandTxDone+0x18>
 800f3d4:	2b08      	cmp	r3, #8
 800f3d6:	d004      	beq.n	800f3e2 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 800f3d8:	e007      	b.n	800f3ea <RegionSetBandTxDone+0x28>
        EU868_SET_BAND_TX_DONE( );
 800f3da:	6838      	ldr	r0, [r7, #0]
 800f3dc:	f001 fbe8 	bl	8010bb0 <RegionEU868SetBandTxDone>
 800f3e0:	e003      	b.n	800f3ea <RegionSetBandTxDone+0x28>
        US915_SET_BAND_TX_DONE( );
 800f3e2:	6838      	ldr	r0, [r7, #0]
 800f3e4:	f002 fdd2 	bl	8011f8c <RegionUS915SetBandTxDone>
 800f3e8:	bf00      	nop
        }
    }
}
 800f3ea:	3708      	adds	r7, #8
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	6039      	str	r1, [r7, #0]
 800f3fa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800f3fc:	79fb      	ldrb	r3, [r7, #7]
 800f3fe:	2b05      	cmp	r3, #5
 800f400:	d002      	beq.n	800f408 <RegionInitDefaults+0x18>
 800f402:	2b08      	cmp	r3, #8
 800f404:	d004      	beq.n	800f410 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 800f406:	e007      	b.n	800f418 <RegionInitDefaults+0x28>
        EU868_INIT_DEFAULTS( );
 800f408:	6838      	ldr	r0, [r7, #0]
 800f40a:	f001 fbfd 	bl	8010c08 <RegionEU868InitDefaults>
 800f40e:	e003      	b.n	800f418 <RegionInitDefaults+0x28>
        US915_INIT_DEFAULTS( );
 800f410:	6838      	ldr	r0, [r7, #0]
 800f412:	f002 fde7 	bl	8011fe4 <RegionUS915InitDefaults>
 800f416:	bf00      	nop
        }
    }
}
 800f418:	bf00      	nop
 800f41a:	3708      	adds	r7, #8
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	4603      	mov	r3, r0
 800f428:	6039      	str	r1, [r7, #0]
 800f42a:	71fb      	strb	r3, [r7, #7]
 800f42c:	4613      	mov	r3, r2
 800f42e:	71bb      	strb	r3, [r7, #6]
    switch( region )
 800f430:	79fb      	ldrb	r3, [r7, #7]
 800f432:	2b05      	cmp	r3, #5
 800f434:	d002      	beq.n	800f43c <RegionVerify+0x1c>
 800f436:	2b08      	cmp	r3, #8
 800f438:	d007      	beq.n	800f44a <RegionVerify+0x2a>
 800f43a:	e00d      	b.n	800f458 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 800f43c:	79bb      	ldrb	r3, [r7, #6]
 800f43e:	4619      	mov	r1, r3
 800f440:	6838      	ldr	r0, [r7, #0]
 800f442:	f001 fc7f 	bl	8010d44 <RegionEU868Verify>
 800f446:	4603      	mov	r3, r0
 800f448:	e007      	b.n	800f45a <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 800f44a:	79bb      	ldrb	r3, [r7, #6]
 800f44c:	4619      	mov	r1, r3
 800f44e:	6838      	ldr	r0, [r7, #0]
 800f450:	f002 fefa 	bl	8012248 <RegionUS915Verify>
 800f454:	4603      	mov	r3, r0
 800f456:	e000      	b.n	800f45a <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 800f458:	2300      	movs	r3, #0
        }
    }
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3708      	adds	r7, #8
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}

0800f462 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800f462:	b580      	push	{r7, lr}
 800f464:	b082      	sub	sp, #8
 800f466:	af00      	add	r7, sp, #0
 800f468:	4603      	mov	r3, r0
 800f46a:	6039      	str	r1, [r7, #0]
 800f46c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800f46e:	79fb      	ldrb	r3, [r7, #7]
 800f470:	2b05      	cmp	r3, #5
 800f472:	d002      	beq.n	800f47a <RegionApplyCFList+0x18>
 800f474:	2b08      	cmp	r3, #8
 800f476:	d004      	beq.n	800f482 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 800f478:	e007      	b.n	800f48a <RegionApplyCFList+0x28>
        EU868_APPLY_CF_LIST( );
 800f47a:	6838      	ldr	r0, [r7, #0]
 800f47c:	f001 fcde 	bl	8010e3c <RegionEU868ApplyCFList>
 800f480:	e003      	b.n	800f48a <RegionApplyCFList+0x28>
        US915_APPLY_CF_LIST( );
 800f482:	6838      	ldr	r0, [r7, #0]
 800f484:	f002 ff48 	bl	8012318 <RegionUS915ApplyCFList>
 800f488:	bf00      	nop
        }
    }
}
 800f48a:	bf00      	nop
 800f48c:	3708      	adds	r7, #8
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}

0800f492 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800f492:	b580      	push	{r7, lr}
 800f494:	b082      	sub	sp, #8
 800f496:	af00      	add	r7, sp, #0
 800f498:	4603      	mov	r3, r0
 800f49a:	6039      	str	r1, [r7, #0]
 800f49c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800f49e:	79fb      	ldrb	r3, [r7, #7]
 800f4a0:	2b05      	cmp	r3, #5
 800f4a2:	d002      	beq.n	800f4aa <RegionChanMaskSet+0x18>
 800f4a4:	2b08      	cmp	r3, #8
 800f4a6:	d005      	beq.n	800f4b4 <RegionChanMaskSet+0x22>
 800f4a8:	e009      	b.n	800f4be <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 800f4aa:	6838      	ldr	r0, [r7, #0]
 800f4ac:	f001 fd3a 	bl	8010f24 <RegionEU868ChanMaskSet>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	e005      	b.n	800f4c0 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 800f4b4:	6838      	ldr	r0, [r7, #0]
 800f4b6:	f002 ffa5 	bl	8012404 <RegionUS915ChanMaskSet>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	e000      	b.n	800f4c0 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800f4be:	2300      	movs	r3, #0
        }
    }
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	603b      	str	r3, [r7, #0]
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	71fb      	strb	r3, [r7, #7]
 800f4d4:	460b      	mov	r3, r1
 800f4d6:	71bb      	strb	r3, [r7, #6]
 800f4d8:	4613      	mov	r3, r2
 800f4da:	717b      	strb	r3, [r7, #5]
    switch( region )
 800f4dc:	79fb      	ldrb	r3, [r7, #7]
 800f4de:	2b05      	cmp	r3, #5
 800f4e0:	d002      	beq.n	800f4e8 <RegionComputeRxWindowParameters+0x20>
 800f4e2:	2b08      	cmp	r3, #8
 800f4e4:	d008      	beq.n	800f4f8 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 800f4e6:	e00f      	b.n	800f508 <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800f4e8:	7979      	ldrb	r1, [r7, #5]
 800f4ea:	f997 0006 	ldrsb.w	r0, [r7, #6]
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	683a      	ldr	r2, [r7, #0]
 800f4f2:	f001 fd41 	bl	8010f78 <RegionEU868ComputeRxWindowParameters>
 800f4f6:	e007      	b.n	800f508 <RegionComputeRxWindowParameters+0x40>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800f4f8:	7979      	ldrb	r1, [r7, #5]
 800f4fa:	f997 0006 	ldrsb.w	r0, [r7, #6]
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	683a      	ldr	r2, [r7, #0]
 800f502:	f002 ffe9 	bl	80124d8 <RegionUS915ComputeRxWindowParameters>
 800f506:	bf00      	nop
        }
    }
}
 800f508:	bf00      	nop
 800f50a:	3708      	adds	r7, #8
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b084      	sub	sp, #16
 800f514:	af00      	add	r7, sp, #0
 800f516:	4603      	mov	r3, r0
 800f518:	60b9      	str	r1, [r7, #8]
 800f51a:	607a      	str	r2, [r7, #4]
 800f51c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 800f51e:	7bfb      	ldrb	r3, [r7, #15]
 800f520:	2b05      	cmp	r3, #5
 800f522:	d002      	beq.n	800f52a <RegionRxConfig+0x1a>
 800f524:	2b08      	cmp	r3, #8
 800f526:	d006      	beq.n	800f536 <RegionRxConfig+0x26>
 800f528:	e00b      	b.n	800f542 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 800f52a:	6879      	ldr	r1, [r7, #4]
 800f52c:	68b8      	ldr	r0, [r7, #8]
 800f52e:	f001 fd7d 	bl	801102c <RegionEU868RxConfig>
 800f532:	4603      	mov	r3, r0
 800f534:	e006      	b.n	800f544 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 800f536:	6879      	ldr	r1, [r7, #4]
 800f538:	68b8      	ldr	r0, [r7, #8]
 800f53a:	f003 f817 	bl	801256c <RegionUS915RxConfig>
 800f53e:	4603      	mov	r3, r0
 800f540:	e000      	b.n	800f544 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800f542:	2300      	movs	r3, #0
        }
    }
}
 800f544:	4618      	mov	r0, r3
 800f546:	3710      	adds	r7, #16
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b084      	sub	sp, #16
 800f550:	af00      	add	r7, sp, #0
 800f552:	60b9      	str	r1, [r7, #8]
 800f554:	607a      	str	r2, [r7, #4]
 800f556:	603b      	str	r3, [r7, #0]
 800f558:	4603      	mov	r3, r0
 800f55a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 800f55c:	7bfb      	ldrb	r3, [r7, #15]
 800f55e:	2b05      	cmp	r3, #5
 800f560:	d002      	beq.n	800f568 <RegionTxConfig+0x1c>
 800f562:	2b08      	cmp	r3, #8
 800f564:	d007      	beq.n	800f576 <RegionTxConfig+0x2a>
 800f566:	e00d      	b.n	800f584 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 800f568:	683a      	ldr	r2, [r7, #0]
 800f56a:	6879      	ldr	r1, [r7, #4]
 800f56c:	68b8      	ldr	r0, [r7, #8]
 800f56e:	f001 fe2d 	bl	80111cc <RegionEU868TxConfig>
 800f572:	4603      	mov	r3, r0
 800f574:	e007      	b.n	800f586 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 800f576:	683a      	ldr	r2, [r7, #0]
 800f578:	6879      	ldr	r1, [r7, #4]
 800f57a:	68b8      	ldr	r0, [r7, #8]
 800f57c:	f003 f87a 	bl	8012674 <RegionUS915TxConfig>
 800f580:	4603      	mov	r3, r0
 800f582:	e000      	b.n	800f586 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800f584:	2300      	movs	r3, #0
        }
    }
}
 800f586:	4618      	mov	r0, r3
 800f588:	3710      	adds	r7, #16
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}

0800f58e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800f58e:	b580      	push	{r7, lr}
 800f590:	b086      	sub	sp, #24
 800f592:	af02      	add	r7, sp, #8
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
 800f598:	603b      	str	r3, [r7, #0]
 800f59a:	4603      	mov	r3, r0
 800f59c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 800f59e:	7bfb      	ldrb	r3, [r7, #15]
 800f5a0:	2b05      	cmp	r3, #5
 800f5a2:	d002      	beq.n	800f5aa <RegionLinkAdrReq+0x1c>
 800f5a4:	2b08      	cmp	r3, #8
 800f5a6:	d00a      	beq.n	800f5be <RegionLinkAdrReq+0x30>
 800f5a8:	e013      	b.n	800f5d2 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	9300      	str	r3, [sp, #0]
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	683a      	ldr	r2, [r7, #0]
 800f5b2:	6879      	ldr	r1, [r7, #4]
 800f5b4:	68b8      	ldr	r0, [r7, #8]
 800f5b6:	f001 fed9 	bl	801136c <RegionEU868LinkAdrReq>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	e00a      	b.n	800f5d4 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 800f5be:	69fb      	ldr	r3, [r7, #28]
 800f5c0:	9300      	str	r3, [sp, #0]
 800f5c2:	69bb      	ldr	r3, [r7, #24]
 800f5c4:	683a      	ldr	r2, [r7, #0]
 800f5c6:	6879      	ldr	r1, [r7, #4]
 800f5c8:	68b8      	ldr	r0, [r7, #8]
 800f5ca:	f003 f8ff 	bl	80127cc <RegionUS915LinkAdrReq>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	e000      	b.n	800f5d4 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800f5d2:	2300      	movs	r3, #0
        }
    }
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3710      	adds	r7, #16
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}

0800f5dc <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b082      	sub	sp, #8
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	6039      	str	r1, [r7, #0]
 800f5e6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800f5e8:	79fb      	ldrb	r3, [r7, #7]
 800f5ea:	2b05      	cmp	r3, #5
 800f5ec:	d002      	beq.n	800f5f4 <RegionRxParamSetupReq+0x18>
 800f5ee:	2b08      	cmp	r3, #8
 800f5f0:	d005      	beq.n	800f5fe <RegionRxParamSetupReq+0x22>
 800f5f2:	e009      	b.n	800f608 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 800f5f4:	6838      	ldr	r0, [r7, #0]
 800f5f6:	f001 ffdb 	bl	80115b0 <RegionEU868RxParamSetupReq>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	e005      	b.n	800f60a <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 800f5fe:	6838      	ldr	r0, [r7, #0]
 800f600:	f003 fb12 	bl	8012c28 <RegionUS915RxParamSetupReq>
 800f604:	4603      	mov	r3, r0
 800f606:	e000      	b.n	800f60a <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800f608:	2300      	movs	r3, #0
        }
    }
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3708      	adds	r7, #8
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}

0800f612 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800f612:	b580      	push	{r7, lr}
 800f614:	b082      	sub	sp, #8
 800f616:	af00      	add	r7, sp, #0
 800f618:	4603      	mov	r3, r0
 800f61a:	6039      	str	r1, [r7, #0]
 800f61c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800f61e:	79fb      	ldrb	r3, [r7, #7]
 800f620:	2b05      	cmp	r3, #5
 800f622:	d002      	beq.n	800f62a <RegionNewChannelReq+0x18>
 800f624:	2b08      	cmp	r3, #8
 800f626:	d005      	beq.n	800f634 <RegionNewChannelReq+0x22>
 800f628:	e009      	b.n	800f63e <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 800f62a:	6838      	ldr	r0, [r7, #0]
 800f62c:	f001 fffe 	bl	801162c <RegionEU868NewChannelReq>
 800f630:	4603      	mov	r3, r0
 800f632:	e005      	b.n	800f640 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 800f634:	6838      	ldr	r0, [r7, #0]
 800f636:	f003 fb43 	bl	8012cc0 <RegionUS915NewChannelReq>
 800f63a:	4603      	mov	r3, r0
 800f63c:	e000      	b.n	800f640 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800f63e:	2300      	movs	r3, #0
        }
    }
}
 800f640:	4618      	mov	r0, r3
 800f642:	3708      	adds	r7, #8
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	4603      	mov	r3, r0
 800f650:	6039      	str	r1, [r7, #0]
 800f652:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800f654:	79fb      	ldrb	r3, [r7, #7]
 800f656:	2b05      	cmp	r3, #5
 800f658:	d002      	beq.n	800f660 <RegionTxParamSetupReq+0x18>
 800f65a:	2b08      	cmp	r3, #8
 800f65c:	d005      	beq.n	800f66a <RegionTxParamSetupReq+0x22>
 800f65e:	e009      	b.n	800f674 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 800f660:	6838      	ldr	r0, [r7, #0]
 800f662:	f002 f841 	bl	80116e8 <RegionEU868TxParamSetupReq>
 800f666:	4603      	mov	r3, r0
 800f668:	e005      	b.n	800f676 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 800f66a:	6838      	ldr	r0, [r7, #0]
 800f66c:	f003 fb33 	bl	8012cd6 <RegionUS915TxParamSetupReq>
 800f670:	4603      	mov	r3, r0
 800f672:	e000      	b.n	800f676 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800f674:	2300      	movs	r3, #0
        }
    }
}
 800f676:	4618      	mov	r0, r3
 800f678:	3708      	adds	r7, #8
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}

0800f67e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800f67e:	b580      	push	{r7, lr}
 800f680:	b082      	sub	sp, #8
 800f682:	af00      	add	r7, sp, #0
 800f684:	4603      	mov	r3, r0
 800f686:	6039      	str	r1, [r7, #0]
 800f688:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800f68a:	79fb      	ldrb	r3, [r7, #7]
 800f68c:	2b05      	cmp	r3, #5
 800f68e:	d002      	beq.n	800f696 <RegionDlChannelReq+0x18>
 800f690:	2b08      	cmp	r3, #8
 800f692:	d005      	beq.n	800f6a0 <RegionDlChannelReq+0x22>
 800f694:	e009      	b.n	800f6aa <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 800f696:	6838      	ldr	r0, [r7, #0]
 800f698:	f002 f832 	bl	8011700 <RegionEU868DlChannelReq>
 800f69c:	4603      	mov	r3, r0
 800f69e:	e005      	b.n	800f6ac <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 800f6a0:	6838      	ldr	r0, [r7, #0]
 800f6a2:	f003 fb23 	bl	8012cec <RegionUS915DlChannelReq>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	e000      	b.n	800f6ac <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800f6aa:	2300      	movs	r3, #0
        }
    }
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3708      	adds	r7, #8
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b082      	sub	sp, #8
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	71fb      	strb	r3, [r7, #7]
 800f6be:	460b      	mov	r3, r1
 800f6c0:	71bb      	strb	r3, [r7, #6]
 800f6c2:	4613      	mov	r3, r2
 800f6c4:	717b      	strb	r3, [r7, #5]
    switch( region )
 800f6c6:	79fb      	ldrb	r3, [r7, #7]
 800f6c8:	2b05      	cmp	r3, #5
 800f6ca:	d002      	beq.n	800f6d2 <RegionAlternateDr+0x1e>
 800f6cc:	2b08      	cmp	r3, #8
 800f6ce:	d009      	beq.n	800f6e4 <RegionAlternateDr+0x30>
 800f6d0:	e011      	b.n	800f6f6 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 800f6d2:	797a      	ldrb	r2, [r7, #5]
 800f6d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f6d8:	4611      	mov	r1, r2
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f002 f854 	bl	8011788 <RegionEU868AlternateDr>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	e009      	b.n	800f6f8 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 800f6e4:	797a      	ldrb	r2, [r7, #5]
 800f6e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f6ea:	4611      	mov	r1, r2
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f003 fb09 	bl	8012d04 <RegionUS915AlternateDr>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	e000      	b.n	800f6f8 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800f6f6:	2300      	movs	r3, #0
        }
    }
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	60b9      	str	r1, [r7, #8]
 800f708:	607a      	str	r2, [r7, #4]
 800f70a:	603b      	str	r3, [r7, #0]
 800f70c:	4603      	mov	r3, r0
 800f70e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 800f710:	7bfb      	ldrb	r3, [r7, #15]
 800f712:	2b05      	cmp	r3, #5
 800f714:	d002      	beq.n	800f71c <RegionNextChannel+0x1c>
 800f716:	2b08      	cmp	r3, #8
 800f718:	d008      	beq.n	800f72c <RegionNextChannel+0x2c>
 800f71a:	e00f      	b.n	800f73c <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 800f71c:	69bb      	ldr	r3, [r7, #24]
 800f71e:	683a      	ldr	r2, [r7, #0]
 800f720:	6879      	ldr	r1, [r7, #4]
 800f722:	68b8      	ldr	r0, [r7, #8]
 800f724:	f002 f840 	bl	80117a8 <RegionEU868NextChannel>
 800f728:	4603      	mov	r3, r0
 800f72a:	e008      	b.n	800f73e <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	683a      	ldr	r2, [r7, #0]
 800f730:	6879      	ldr	r1, [r7, #4]
 800f732:	68b8      	ldr	r0, [r7, #8]
 800f734:	f003 fb22 	bl	8012d7c <RegionUS915NextChannel>
 800f738:	4603      	mov	r3, r0
 800f73a:	e000      	b.n	800f73e <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800f73c:	2309      	movs	r3, #9
        }
    }
}
 800f73e:	4618      	mov	r0, r3
 800f740:	3710      	adds	r7, #16
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}

0800f746 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800f746:	b580      	push	{r7, lr}
 800f748:	b082      	sub	sp, #8
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	4603      	mov	r3, r0
 800f74e:	6039      	str	r1, [r7, #0]
 800f750:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800f752:	79fb      	ldrb	r3, [r7, #7]
 800f754:	2b05      	cmp	r3, #5
 800f756:	d002      	beq.n	800f75e <RegionSetContinuousWave+0x18>
 800f758:	2b08      	cmp	r3, #8
 800f75a:	d004      	beq.n	800f766 <RegionSetContinuousWave+0x20>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 800f75c:	e007      	b.n	800f76e <RegionSetContinuousWave+0x28>
        EU868_SET_CONTINUOUS_WAVE( );
 800f75e:	6838      	ldr	r0, [r7, #0]
 800f760:	f002 f99e 	bl	8011aa0 <RegionEU868SetContinuousWave>
 800f764:	e003      	b.n	800f76e <RegionSetContinuousWave+0x28>
        US915_SET_CONTINUOUS_WAVE( );
 800f766:	6838      	ldr	r0, [r7, #0]
 800f768:	f003 fbfe 	bl	8012f68 <RegionUS915SetContinuousWave>
 800f76c:	bf00      	nop
        }
    }
}
 800f76e:	bf00      	nop
 800f770:	3708      	adds	r7, #8
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800f776:	b590      	push	{r4, r7, lr}
 800f778:	b083      	sub	sp, #12
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	4604      	mov	r4, r0
 800f77e:	4608      	mov	r0, r1
 800f780:	4611      	mov	r1, r2
 800f782:	461a      	mov	r2, r3
 800f784:	4623      	mov	r3, r4
 800f786:	71fb      	strb	r3, [r7, #7]
 800f788:	4603      	mov	r3, r0
 800f78a:	71bb      	strb	r3, [r7, #6]
 800f78c:	460b      	mov	r3, r1
 800f78e:	717b      	strb	r3, [r7, #5]
 800f790:	4613      	mov	r3, r2
 800f792:	713b      	strb	r3, [r7, #4]
    switch( region )
 800f794:	79fb      	ldrb	r3, [r7, #7]
 800f796:	2b05      	cmp	r3, #5
 800f798:	d002      	beq.n	800f7a0 <RegionApplyDrOffset+0x2a>
 800f79a:	2b08      	cmp	r3, #8
 800f79c:	d00a      	beq.n	800f7b4 <RegionApplyDrOffset+0x3e>
 800f79e:	e013      	b.n	800f7c8 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 800f7a0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800f7a4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800f7a8:	79bb      	ldrb	r3, [r7, #6]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f002 f9c6 	bl	8011b3c <RegionEU868ApplyDrOffset>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	e00a      	b.n	800f7ca <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 800f7b4:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800f7b8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800f7bc:	79bb      	ldrb	r3, [r7, #6]
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f003 fc28 	bl	8013014 <RegionUS915ApplyDrOffset>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	e000      	b.n	800f7ca <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800f7c8:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	370c      	adds	r7, #12
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd90      	pop	{r4, r7, pc}
	...

0800f7d4 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 800f7da:	4b04      	ldr	r3, [pc, #16]	; (800f7ec <RegionGetVersion+0x18>)
 800f7dc:	607b      	str	r3, [r7, #4]

    return version;
 800f7de:	687b      	ldr	r3, [r7, #4]
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bc80      	pop	{r7}
 800f7e8:	4770      	bx	lr
 800f7ea:	bf00      	nop
 800f7ec:	01000300 	.word	0x01000300

0800f7f0 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b087      	sub	sp, #28
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	60b9      	str	r1, [r7, #8]
 800f7fa:	607a      	str	r2, [r7, #4]
 800f7fc:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d002      	beq.n	800f80a <FindAvailable125kHzChannels+0x1a>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d101      	bne.n	800f80e <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f80a:	2303      	movs	r3, #3
 800f80c:	e021      	b.n	800f852 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2200      	movs	r2, #0
 800f812:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800f814:	2300      	movs	r3, #0
 800f816:	75fb      	strb	r3, [r7, #23]
 800f818:	e017      	b.n	800f84a <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800f81a:	89fa      	ldrh	r2, [r7, #14]
 800f81c:	7dfb      	ldrb	r3, [r7, #23]
 800f81e:	fa42 f303 	asr.w	r3, r2, r3
 800f822:	f003 0301 	and.w	r3, r3, #1
 800f826:	2b00      	cmp	r3, #0
 800f828:	d00c      	beq.n	800f844 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	461a      	mov	r2, r3
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	4413      	add	r3, r2
 800f834:	7dfa      	ldrb	r2, [r7, #23]
 800f836:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	3301      	adds	r3, #1
 800f83e:	b2da      	uxtb	r2, r3
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800f844:	7dfb      	ldrb	r3, [r7, #23]
 800f846:	3301      	adds	r3, #1
 800f848:	75fb      	strb	r3, [r7, #23]
 800f84a:	7dfb      	ldrb	r3, [r7, #23]
 800f84c:	2b07      	cmp	r3, #7
 800f84e:	d9e4      	bls.n	800f81a <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 800f850:	2300      	movs	r3, #0
}
 800f852:	4618      	mov	r0, r3
 800f854:	371c      	adds	r7, #28
 800f856:	46bd      	mov	sp, r7
 800f858:	bc80      	pop	{r7}
 800f85a:	4770      	bx	lr

0800f85c <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800f85c:	b590      	push	{r4, r7, lr}
 800f85e:	b089      	sub	sp, #36	; 0x24
 800f860:	af00      	add	r7, sp, #0
 800f862:	60f8      	str	r0, [r7, #12]
 800f864:	60b9      	str	r1, [r7, #8]
 800f866:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800f868:	2300      	movs	r3, #0
 800f86a:	617b      	str	r3, [r7, #20]
 800f86c:	2300      	movs	r3, #0
 800f86e:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 800f870:	2300      	movs	r3, #0
 800f872:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d005      	beq.n	800f886 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d002      	beq.n	800f886 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d101      	bne.n	800f88a <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f886:	2303      	movs	r3, #3
 800f888:	e056      	b.n	800f938 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800f890:	7f7b      	ldrb	r3, [r7, #29]
 800f892:	085b      	lsrs	r3, r3, #1
 800f894:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 800f896:	7f7b      	ldrb	r3, [r7, #29]
 800f898:	f003 0301 	and.w	r3, r3, #1
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d107      	bne.n	800f8b2 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800f8a2:	7f3b      	ldrb	r3, [r7, #28]
 800f8a4:	005b      	lsls	r3, r3, #1
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	4413      	add	r3, r2
 800f8aa:	881b      	ldrh	r3, [r3, #0]
 800f8ac:	b2db      	uxtb	r3, r3
 800f8ae:	83fb      	strh	r3, [r7, #30]
 800f8b0:	e006      	b.n	800f8c0 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800f8b2:	7f3b      	ldrb	r3, [r7, #28]
 800f8b4:	005b      	lsls	r3, r3, #1
 800f8b6:	68fa      	ldr	r2, [r7, #12]
 800f8b8:	4413      	add	r3, r2
 800f8ba:	881b      	ldrh	r3, [r3, #0]
 800f8bc:	0a1b      	lsrs	r3, r3, #8
 800f8be:	83fb      	strh	r3, [r7, #30]
        }


        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800f8c0:	f107 0213 	add.w	r2, r7, #19
 800f8c4:	f107 0114 	add.w	r1, r7, #20
 800f8c8:	8bfb      	ldrh	r3, [r7, #30]
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7ff ff90 	bl	800f7f0 <FindAvailable125kHzChannels>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b03      	cmp	r3, #3
 800f8d4:	d101      	bne.n	800f8da <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800f8d6:	2303      	movs	r3, #3
 800f8d8:	e02e      	b.n	800f938 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
        }

        if ( availableChannels > 0 )
 800f8da:	7cfb      	ldrb	r3, [r7, #19]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d012      	beq.n	800f906 <RegionBaseUSComputeNext125kHzJoinChannel+0xaa>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800f8e0:	7f7b      	ldrb	r3, [r7, #29]
 800f8e2:	00db      	lsls	r3, r3, #3
 800f8e4:	b2dc      	uxtb	r4, r3
 800f8e6:	7cfb      	ldrb	r3, [r7, #19]
 800f8e8:	3b01      	subs	r3, #1
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	2000      	movs	r0, #0
 800f8ee:	f003 fbe3 	bl	80130b8 <randr>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	f107 0220 	add.w	r2, r7, #32
 800f8f8:	4413      	add	r3, r2
 800f8fa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f8fe:	4423      	add	r3, r4
 800f900:	b2da      	uxtb	r2, r3
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 800f906:	7f7b      	ldrb	r3, [r7, #29]
 800f908:	3301      	adds	r3, #1
 800f90a:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 800f90c:	7f7b      	ldrb	r3, [r7, #29]
 800f90e:	2b07      	cmp	r3, #7
 800f910:	d901      	bls.n	800f916 <RegionBaseUSComputeNext125kHzJoinChannel+0xba>
        {
            startIndex = 0;
 800f912:	2300      	movs	r3, #0
 800f914:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800f916:	7cfb      	ldrb	r3, [r7, #19]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d104      	bne.n	800f926 <RegionBaseUSComputeNext125kHzJoinChannel+0xca>
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	7f7a      	ldrb	r2, [r7, #29]
 800f922:	429a      	cmp	r2, r3
 800f924:	d1b4      	bne.n	800f890 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 800f926:	7cfb      	ldrb	r3, [r7, #19]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d004      	beq.n	800f936 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    {
        *groupsCurrentIndex = startIndex;
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	7f7a      	ldrb	r2, [r7, #29]
 800f930:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 800f932:	2300      	movs	r3, #0
 800f934:	e000      	b.n	800f938 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800f936:	2303      	movs	r3, #3
}
 800f938:	4618      	mov	r0, r3
 800f93a:	3724      	adds	r7, #36	; 0x24
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd90      	pop	{r4, r7, pc}

0800f940 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 800f940:	b480      	push	{r7}
 800f942:	b085      	sub	sp, #20
 800f944:	af00      	add	r7, sp, #0
 800f946:	4603      	mov	r3, r0
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	607a      	str	r2, [r7, #4]
 800f94c:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 800f94e:	7bfb      	ldrb	r3, [r7, #15]
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	fb02 f203 	mul.w	r2, r2, r3
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	4413      	add	r3, r2
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3714      	adds	r7, #20
 800f95e:	46bd      	mov	sp, r7
 800f960:	bc80      	pop	{r7}
 800f962:	4770      	bx	lr

0800f964 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800f964:	b480      	push	{r7}
 800f966:	b087      	sub	sp, #28
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	4608      	mov	r0, r1
 800f96e:	4639      	mov	r1, r7
 800f970:	e881 000c 	stmia.w	r1, {r2, r3}
 800f974:	4603      	mov	r3, r0
 800f976:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	881b      	ldrh	r3, [r3, #0]
 800f97c:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 800f97e:	7afb      	ldrb	r3, [r7, #11]
 800f980:	f083 0301 	eor.w	r3, r3, #1
 800f984:	b2db      	uxtb	r3, r3
 800f986:	2b00      	cmp	r3, #0
 800f988:	d01b      	beq.n	800f9c2 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 800f98a:	f242 7310 	movw	r3, #10000	; 0x2710
 800f98e:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800f996:	d202      	bcs.n	800f99e <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800f998:	2364      	movs	r3, #100	; 0x64
 800f99a:	82bb      	strh	r3, [r7, #20]
 800f99c:	e00b      	b.n	800f9b6 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d803      	bhi.n	800f9b0 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800f9a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f9ac:	82bb      	strh	r3, [r7, #20]
 800f9ae:	e002      	b.n	800f9b6 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800f9b0:	f242 7310 	movw	r3, #10000	; 0x2710
 800f9b4:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800f9b6:	8aba      	ldrh	r2, [r7, #20]
 800f9b8:	8afb      	ldrh	r3, [r7, #22]
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	bf38      	it	cc
 800f9be:	4613      	movcc	r3, r2
 800f9c0:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800f9c2:	8afb      	ldrh	r3, [r7, #22]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d101      	bne.n	800f9cc <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 800f9cc:	8afb      	ldrh	r3, [r7, #22]
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	371c      	adds	r7, #28
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bc80      	pop	{r7}
 800f9d6:	4770      	bx	lr

0800f9d8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b08e      	sub	sp, #56	; 0x38
 800f9dc:	af02      	add	r7, sp, #8
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	4608      	mov	r0, r1
 800f9e2:	4639      	mov	r1, r7
 800f9e4:	e881 000c 	stmia.w	r1, {r2, r3}
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	881b      	ldrh	r3, [r3, #0]
 800f9f0:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800f9f2:	4b4b      	ldr	r3, [pc, #300]	; (800fb20 <SetMaxTimeCredits+0x148>)
 800f9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800f9f6:	463b      	mov	r3, r7
 800f9f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f9fc:	f006 fd84 	bl	8016508 <SysTimeToMs>
 800fa00:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 800fa02:	f107 0314 	add.w	r3, r7, #20
 800fa06:	2200      	movs	r2, #0
 800fa08:	601a      	str	r2, [r3, #0]
 800fa0a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800fa0c:	7af9      	ldrb	r1, [r7, #11]
 800fa0e:	463b      	mov	r3, r7
 800fa10:	cb0c      	ldmia	r3, {r2, r3}
 800fa12:	68f8      	ldr	r0, [r7, #12]
 800fa14:	f7ff ffa6 	bl	800f964 <GetDutyCycle>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 800fa1c:	7afb      	ldrb	r3, [r7, #11]
 800fa1e:	f083 0301 	eor.w	r3, r3, #1
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d062      	beq.n	800faee <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800fa28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa2a:	2b64      	cmp	r3, #100	; 0x64
 800fa2c:	d105      	bne.n	800fa3a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800fa2e:	4b3c      	ldr	r3, [pc, #240]	; (800fb20 <SetMaxTimeCredits+0x148>)
 800fa30:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa36:	609a      	str	r2, [r3, #8]
 800fa38:	e00b      	b.n	800fa52 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800fa3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fa40:	d105      	bne.n	800fa4e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800fa42:	4b38      	ldr	r3, [pc, #224]	; (800fb24 <SetMaxTimeCredits+0x14c>)
 800fa44:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa4a:	609a      	str	r2, [r3, #8]
 800fa4c:	e001      	b.n	800fa52 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800fa4e:	4b36      	ldr	r3, [pc, #216]	; (800fb28 <SetMaxTimeCredits+0x150>)
 800fa50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	689a      	ldr	r2, [r3, #8]
 800fa56:	f107 031c 	add.w	r3, r7, #28
 800fa5a:	4611      	mov	r1, r2
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f006 fd7b 	bl	8016558 <SysTimeFromMs>
 800fa62:	f107 0014 	add.w	r0, r7, #20
 800fa66:	6a3b      	ldr	r3, [r7, #32]
 800fa68:	9300      	str	r3, [sp, #0]
 800fa6a:	69fb      	ldr	r3, [r7, #28]
 800fa6c:	463a      	mov	r2, r7
 800fa6e:	ca06      	ldmia	r2, {r1, r2}
 800fa70:	f006 fc8c 	bl	801638c <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800fa74:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fa78:	f083 0301 	eor.w	r3, r3, #1
 800fa7c:	b2db      	uxtb	r3, r3
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d006      	beq.n	800fa90 <SetMaxTimeCredits+0xb8>
 800fa82:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fa86:	f083 0301 	eor.w	r3, r3, #1
 800fa8a:	b2db      	uxtb	r3, r3
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d108      	bne.n	800faa2 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800fa94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d103      	bne.n	800faa2 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 800fa9a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 800fa9c:	4a23      	ldr	r2, [pc, #140]	; (800fb2c <SetMaxTimeCredits+0x154>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d92f      	bls.n	800fb02 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800faa6:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	4a21      	ldr	r2, [pc, #132]	; (800fb30 <SetMaxTimeCredits+0x158>)
 800faac:	4293      	cmp	r3, r2
 800faae:	d928      	bls.n	800fb02 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800fab6:	3b30      	subs	r3, #48	; 0x30
 800fab8:	4a1e      	ldr	r2, [pc, #120]	; (800fb34 <SetMaxTimeCredits+0x15c>)
 800faba:	fba2 2303 	umull	r2, r3, r2, r3
 800fabe:	0c1b      	lsrs	r3, r3, #16
 800fac0:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	4a1c      	ldr	r2, [pc, #112]	; (800fb38 <SetMaxTimeCredits+0x160>)
 800fac6:	fb02 f303 	mul.w	r3, r2, r3
 800faca:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800fad2:	3330      	adds	r3, #48	; 0x30
 800fad4:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 800fad6:	2300      	movs	r3, #0
 800fad8:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800fada:	f107 0314 	add.w	r3, r7, #20
 800fade:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fae2:	f006 fd11 	bl	8016508 <SysTimeToMs>
 800fae6:	4602      	mov	r2, r0
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	609a      	str	r2, [r3, #8]
 800faec:	e009      	b.n	800fb02 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 800faee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800faf2:	f083 0301 	eor.w	r3, r3, #1
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d002      	beq.n	800fb02 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb00:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d102      	bne.n	800fb10 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb0e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb14:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 800fb16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3730      	adds	r7, #48	; 0x30
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	001b7740 	.word	0x001b7740
 800fb24:	0112a880 	.word	0x0112a880
 800fb28:	02932e00 	.word	0x02932e00
 800fb2c:	0001517f 	.word	0x0001517f
 800fb30:	0001ec2f 	.word	0x0001ec2f
 800fb34:	c22e4507 	.word	0xc22e4507
 800fb38:	00015180 	.word	0x00015180

0800fb3c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b086      	sub	sp, #24
 800fb40:	af02      	add	r7, sp, #8
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	4608      	mov	r0, r1
 800fb46:	4611      	mov	r1, r2
 800fb48:	461a      	mov	r2, r3
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	70fb      	strb	r3, [r7, #3]
 800fb4e:	460b      	mov	r3, r1
 800fb50:	70bb      	strb	r3, [r7, #2]
 800fb52:	4613      	mov	r3, r2
 800fb54:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800fb56:	78f9      	ldrb	r1, [r7, #3]
 800fb58:	787b      	ldrb	r3, [r7, #1]
 800fb5a:	9301      	str	r3, [sp, #4]
 800fb5c:	78bb      	ldrb	r3, [r7, #2]
 800fb5e:	9300      	str	r3, [sp, #0]
 800fb60:	f107 0318 	add.w	r3, r7, #24
 800fb64:	cb0c      	ldmia	r3, {r2, r3}
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f7ff ff36 	bl	800f9d8 <SetMaxTimeCredits>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 800fb70:	78fb      	ldrb	r3, [r7, #3]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d00a      	beq.n	800fb8c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f006 fe7a 	bl	8016874 <UTIL_TIMER_GetElapsedTime>
 800fb80:	4602      	mov	r2, r0
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	441a      	add	r2, r3
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	68da      	ldr	r2, [r3, #12]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	691b      	ldr	r3, [r3, #16]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d903      	bls.n	800fba0 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	691a      	ldr	r2, [r3, #16]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6a3a      	ldr	r2, [r7, #32]
 800fba4:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 800fba6:	89fb      	ldrh	r3, [r7, #14]
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b085      	sub	sp, #20
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	460a      	mov	r2, r1
 800fbba:	80fb      	strh	r3, [r7, #6]
 800fbbc:	4613      	mov	r3, r2
 800fbbe:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	73bb      	strb	r3, [r7, #14]
 800fbc8:	e011      	b.n	800fbee <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800fbca:	88fa      	ldrh	r2, [r7, #6]
 800fbcc:	7bbb      	ldrb	r3, [r7, #14]
 800fbce:	2101      	movs	r1, #1
 800fbd0:	fa01 f303 	lsl.w	r3, r1, r3
 800fbd4:	401a      	ands	r2, r3
 800fbd6:	7bbb      	ldrb	r3, [r7, #14]
 800fbd8:	2101      	movs	r1, #1
 800fbda:	fa01 f303 	lsl.w	r3, r1, r3
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d102      	bne.n	800fbe8 <CountChannels+0x38>
        {
            nbActiveBits++;
 800fbe2:	7bfb      	ldrb	r3, [r7, #15]
 800fbe4:	3301      	adds	r3, #1
 800fbe6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 800fbe8:	7bbb      	ldrb	r3, [r7, #14]
 800fbea:	3301      	adds	r3, #1
 800fbec:	73bb      	strb	r3, [r7, #14]
 800fbee:	7bba      	ldrb	r2, [r7, #14]
 800fbf0:	797b      	ldrb	r3, [r7, #5]
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d3e9      	bcc.n	800fbca <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 800fbf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3714      	adds	r7, #20
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bc80      	pop	{r7}
 800fc00:	4770      	bx	lr

0800fc02 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b084      	sub	sp, #16
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6039      	str	r1, [r7, #0]
 800fc0a:	4611      	mov	r1, r2
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	4603      	mov	r3, r0
 800fc10:	71fb      	strb	r3, [r7, #7]
 800fc12:	460b      	mov	r3, r1
 800fc14:	71bb      	strb	r3, [r7, #6]
 800fc16:	4613      	mov	r3, r2
 800fc18:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800fc1a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800fc1e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800fc22:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f000 f85d 	bl	800fce6 <RegionCommonValueInRange>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d101      	bne.n	800fc36 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 800fc32:	2300      	movs	r3, #0
 800fc34:	e053      	b.n	800fcde <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800fc36:	2300      	movs	r3, #0
 800fc38:	73fb      	strb	r3, [r7, #15]
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	73bb      	strb	r3, [r7, #14]
 800fc3e:	e049      	b.n	800fcd4 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800fc40:	2300      	movs	r3, #0
 800fc42:	737b      	strb	r3, [r7, #13]
 800fc44:	e03d      	b.n	800fcc2 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800fc46:	7bbb      	ldrb	r3, [r7, #14]
 800fc48:	005b      	lsls	r3, r3, #1
 800fc4a:	683a      	ldr	r2, [r7, #0]
 800fc4c:	4413      	add	r3, r2
 800fc4e:	881b      	ldrh	r3, [r3, #0]
 800fc50:	461a      	mov	r2, r3
 800fc52:	7b7b      	ldrb	r3, [r7, #13]
 800fc54:	fa42 f303 	asr.w	r3, r2, r3
 800fc58:	f003 0301 	and.w	r3, r3, #1
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d02d      	beq.n	800fcbc <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800fc60:	7bfa      	ldrb	r2, [r7, #15]
 800fc62:	7b7b      	ldrb	r3, [r7, #13]
 800fc64:	4413      	add	r3, r2
 800fc66:	461a      	mov	r2, r3
 800fc68:	4613      	mov	r3, r2
 800fc6a:	005b      	lsls	r3, r3, #1
 800fc6c:	4413      	add	r3, r2
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	461a      	mov	r2, r3
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	4413      	add	r3, r2
 800fc76:	7a1b      	ldrb	r3, [r3, #8]
 800fc78:	f343 0303 	sbfx	r3, r3, #0, #4
 800fc7c:	b25b      	sxtb	r3, r3
 800fc7e:	f003 030f 	and.w	r3, r3, #15
 800fc82:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800fc84:	7bfa      	ldrb	r2, [r7, #15]
 800fc86:	7b7b      	ldrb	r3, [r7, #13]
 800fc88:	4413      	add	r3, r2
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	005b      	lsls	r3, r3, #1
 800fc90:	4413      	add	r3, r2
 800fc92:	009b      	lsls	r3, r3, #2
 800fc94:	461a      	mov	r2, r3
 800fc96:	69fb      	ldr	r3, [r7, #28]
 800fc98:	4413      	add	r3, r2
 800fc9a:	7a1b      	ldrb	r3, [r3, #8]
 800fc9c:	f343 1303 	sbfx	r3, r3, #4, #4
 800fca0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800fca2:	f003 030f 	and.w	r3, r3, #15
 800fca6:	b25a      	sxtb	r2, r3
 800fca8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fcac:	4618      	mov	r0, r3
 800fcae:	f000 f81a 	bl	800fce6 <RegionCommonValueInRange>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	d101      	bne.n	800fcbc <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 800fcb8:	2301      	movs	r3, #1
 800fcba:	e010      	b.n	800fcde <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 800fcbc:	7b7b      	ldrb	r3, [r7, #13]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	737b      	strb	r3, [r7, #13]
 800fcc2:	7b7b      	ldrb	r3, [r7, #13]
 800fcc4:	2b0f      	cmp	r3, #15
 800fcc6:	d9be      	bls.n	800fc46 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800fcc8:	7bfb      	ldrb	r3, [r7, #15]
 800fcca:	3310      	adds	r3, #16
 800fccc:	73fb      	strb	r3, [r7, #15]
 800fcce:	7bbb      	ldrb	r3, [r7, #14]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	73bb      	strb	r3, [r7, #14]
 800fcd4:	7bfa      	ldrb	r2, [r7, #15]
 800fcd6:	79fb      	ldrb	r3, [r7, #7]
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d3b1      	bcc.n	800fc40 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 800fcdc:	2300      	movs	r3, #0
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	3710      	adds	r7, #16
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}

0800fce6 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 800fce6:	b480      	push	{r7}
 800fce8:	b083      	sub	sp, #12
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	4603      	mov	r3, r0
 800fcee:	71fb      	strb	r3, [r7, #7]
 800fcf0:	460b      	mov	r3, r1
 800fcf2:	71bb      	strb	r3, [r7, #6]
 800fcf4:	4613      	mov	r3, r2
 800fcf6:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 800fcf8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800fcfc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	db07      	blt.n	800fd14 <RegionCommonValueInRange+0x2e>
 800fd04:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800fd08:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	dc01      	bgt.n	800fd14 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 800fd10:	2301      	movs	r3, #1
 800fd12:	e000      	b.n	800fd16 <RegionCommonValueInRange+0x30>
    }
    return 0;
 800fd14:	2300      	movs	r3, #0
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	370c      	adds	r7, #12
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bc80      	pop	{r7}
 800fd1e:	4770      	bx	lr

0800fd20 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800fd20:	b480      	push	{r7}
 800fd22:	b085      	sub	sp, #20
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	460b      	mov	r3, r1
 800fd2a:	70fb      	strb	r3, [r7, #3]
 800fd2c:	4613      	mov	r3, r2
 800fd2e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 800fd30:	78fb      	ldrb	r3, [r7, #3]
 800fd32:	091b      	lsrs	r3, r3, #4
 800fd34:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800fd36:	78bb      	ldrb	r3, [r7, #2]
 800fd38:	091b      	lsrs	r3, r3, #4
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	7bfa      	ldrb	r2, [r7, #15]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d803      	bhi.n	800fd4a <RegionCommonChanDisable+0x2a>
 800fd42:	78fa      	ldrb	r2, [r7, #3]
 800fd44:	78bb      	ldrb	r3, [r7, #2]
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d301      	bcc.n	800fd4e <RegionCommonChanDisable+0x2e>
    {
        return false;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	e017      	b.n	800fd7e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800fd4e:	7bfb      	ldrb	r3, [r7, #15]
 800fd50:	005b      	lsls	r3, r3, #1
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	4413      	add	r3, r2
 800fd56:	881b      	ldrh	r3, [r3, #0]
 800fd58:	b21a      	sxth	r2, r3
 800fd5a:	78fb      	ldrb	r3, [r7, #3]
 800fd5c:	f003 030f 	and.w	r3, r3, #15
 800fd60:	2101      	movs	r1, #1
 800fd62:	fa01 f303 	lsl.w	r3, r1, r3
 800fd66:	b21b      	sxth	r3, r3
 800fd68:	43db      	mvns	r3, r3
 800fd6a:	b21b      	sxth	r3, r3
 800fd6c:	4013      	ands	r3, r2
 800fd6e:	b219      	sxth	r1, r3
 800fd70:	7bfb      	ldrb	r3, [r7, #15]
 800fd72:	005b      	lsls	r3, r3, #1
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	4413      	add	r3, r2
 800fd78:	b28a      	uxth	r2, r1
 800fd7a:	801a      	strh	r2, [r3, #0]

    return true;
 800fd7c:	2301      	movs	r3, #1
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3714      	adds	r7, #20
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bc80      	pop	{r7}
 800fd86:	4770      	bx	lr

0800fd88 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	460b      	mov	r3, r1
 800fd92:	70fb      	strb	r3, [r7, #3]
 800fd94:	4613      	mov	r3, r2
 800fd96:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d101      	bne.n	800fda6 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 800fda2:	2300      	movs	r3, #0
 800fda4:	e018      	b.n	800fdd8 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800fda6:	78fb      	ldrb	r3, [r7, #3]
 800fda8:	73bb      	strb	r3, [r7, #14]
 800fdaa:	e010      	b.n	800fdce <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800fdac:	7bbb      	ldrb	r3, [r7, #14]
 800fdae:	005b      	lsls	r3, r3, #1
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	4413      	add	r3, r2
 800fdb4:	881b      	ldrh	r3, [r3, #0]
 800fdb6:	2110      	movs	r1, #16
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7ff fef9 	bl	800fbb0 <CountChannels>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	7bfb      	ldrb	r3, [r7, #15]
 800fdc4:	4413      	add	r3, r2
 800fdc6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800fdc8:	7bbb      	ldrb	r3, [r7, #14]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	73bb      	strb	r3, [r7, #14]
 800fdce:	7bba      	ldrb	r2, [r7, #14]
 800fdd0:	78bb      	ldrb	r3, [r7, #2]
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d3ea      	bcc.n	800fdac <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 800fdd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3710      	adds	r7, #16
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800fde0:	b480      	push	{r7}
 800fde2:	b087      	sub	sp, #28
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	60b9      	str	r1, [r7, #8]
 800fdea:	4613      	mov	r3, r2
 800fdec:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d016      	beq.n	800fe22 <RegionCommonChanMaskCopy+0x42>
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d013      	beq.n	800fe22 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	75fb      	strb	r3, [r7, #23]
 800fdfe:	e00c      	b.n	800fe1a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800fe00:	7dfb      	ldrb	r3, [r7, #23]
 800fe02:	005b      	lsls	r3, r3, #1
 800fe04:	68ba      	ldr	r2, [r7, #8]
 800fe06:	441a      	add	r2, r3
 800fe08:	7dfb      	ldrb	r3, [r7, #23]
 800fe0a:	005b      	lsls	r3, r3, #1
 800fe0c:	68f9      	ldr	r1, [r7, #12]
 800fe0e:	440b      	add	r3, r1
 800fe10:	8812      	ldrh	r2, [r2, #0]
 800fe12:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 800fe14:	7dfb      	ldrb	r3, [r7, #23]
 800fe16:	3301      	adds	r3, #1
 800fe18:	75fb      	strb	r3, [r7, #23]
 800fe1a:	7dfa      	ldrb	r2, [r7, #23]
 800fe1c:	79fb      	ldrb	r3, [r7, #7]
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	d3ee      	bcc.n	800fe00 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 800fe22:	bf00      	nop
 800fe24:	371c      	adds	r7, #28
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bc80      	pop	{r7}
 800fe2a:	4770      	bx	lr

0800fe2c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800fe2c:	b082      	sub	sp, #8
 800fe2e:	b580      	push	{r7, lr}
 800fe30:	b086      	sub	sp, #24
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	60f8      	str	r0, [r7, #12]
 800fe36:	60b9      	str	r1, [r7, #8]
 800fe38:	627b      	str	r3, [r7, #36]	; 0x24
 800fe3a:	4613      	mov	r3, r2
 800fe3c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800fe3e:	79f9      	ldrb	r1, [r7, #7]
 800fe40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe44:	cb0c      	ldmia	r3, {r2, r3}
 800fe46:	68f8      	ldr	r0, [r7, #12]
 800fe48:	f7ff fd8c 	bl	800f964 <GetDutyCycle>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	68da      	ldr	r2, [r3, #12]
 800fe54:	8afb      	ldrh	r3, [r7, #22]
 800fe56:	68b9      	ldr	r1, [r7, #8]
 800fe58:	fb01 f303 	mul.w	r3, r1, r3
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d909      	bls.n	800fe74 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	68da      	ldr	r2, [r3, #12]
 800fe64:	8afb      	ldrh	r3, [r7, #22]
 800fe66:	68b9      	ldr	r1, [r7, #8]
 800fe68:	fb01 f303 	mul.w	r3, r1, r3
 800fe6c:	1ad2      	subs	r2, r2, r3
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800fe72:	e002      	b.n	800fe7a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2200      	movs	r2, #0
 800fe78:	60da      	str	r2, [r3, #12]
}
 800fe7a:	bf00      	nop
 800fe7c:	3718      	adds	r7, #24
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fe84:	b002      	add	sp, #8
 800fe86:	4770      	bx	lr

0800fe88 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800fe88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe8a:	b08f      	sub	sp, #60	; 0x3c
 800fe8c:	af04      	add	r7, sp, #16
 800fe8e:	6039      	str	r1, [r7, #0]
 800fe90:	4611      	mov	r1, r2
 800fe92:	461a      	mov	r2, r3
 800fe94:	4603      	mov	r3, r0
 800fe96:	71fb      	strb	r3, [r7, #7]
 800fe98:	460b      	mov	r3, r1
 800fe9a:	71bb      	strb	r3, [r7, #6]
 800fe9c:	4613      	mov	r3, r2
 800fe9e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800fea0:	f04f 33ff 	mov.w	r3, #4294967295
 800fea4:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800fea6:	f006 fcd3 	bl	8016850 <UTIL_TIMER_GetCurrentTime>
 800feaa:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 800feac:	2300      	movs	r3, #0
 800feae:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 800feb0:	2301      	movs	r3, #1
 800feb2:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 800feb4:	2300      	movs	r3, #0
 800feb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 800feba:	2300      	movs	r3, #0
 800febc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800fec0:	e0ba      	b.n	8010038 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800fec2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fec6:	4613      	mov	r3, r2
 800fec8:	005b      	lsls	r3, r3, #1
 800feca:	4413      	add	r3, r2
 800fecc:	00db      	lsls	r3, r3, #3
 800fece:	461a      	mov	r2, r3
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	189c      	adds	r4, r3, r2
 800fed4:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 800fed8:	797a      	ldrb	r2, [r7, #5]
 800feda:	79fd      	ldrb	r5, [r7, #7]
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	9302      	str	r3, [sp, #8]
 800fee0:	46ec      	mov	ip, sp
 800fee2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fee6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800feea:	e88c 0003 	stmia.w	ip, {r0, r1}
 800feee:	4633      	mov	r3, r6
 800fef0:	4629      	mov	r1, r5
 800fef2:	4620      	mov	r0, r4
 800fef4:	f7ff fe22 	bl	800fb3c <UpdateTimeCredits>
 800fef8:	4603      	mov	r3, r0
 800fefa:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 800fefc:	8afa      	ldrh	r2, [r7, #22]
 800fefe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff00:	fb02 f303 	mul.w	r3, r2, r3
 800ff04:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800ff06:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ff0a:	4613      	mov	r3, r2
 800ff0c:	005b      	lsls	r3, r3, #1
 800ff0e:	4413      	add	r3, r2
 800ff10:	00db      	lsls	r3, r3, #3
 800ff12:	461a      	mov	r2, r3
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	4413      	add	r3, r2
 800ff18:	68db      	ldr	r3, [r3, #12]
 800ff1a:	69ba      	ldr	r2, [r7, #24]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d308      	bcc.n	800ff32 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800ff20:	797b      	ldrb	r3, [r7, #5]
 800ff22:	f083 0301 	eor.w	r3, r3, #1
 800ff26:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d013      	beq.n	800ff54 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800ff2c:	79fb      	ldrb	r3, [r7, #7]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d010      	beq.n	800ff54 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 800ff32:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ff36:	4613      	mov	r3, r2
 800ff38:	005b      	lsls	r3, r3, #1
 800ff3a:	4413      	add	r3, r2
 800ff3c:	00db      	lsls	r3, r3, #3
 800ff3e:	461a      	mov	r2, r3
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	4413      	add	r3, r2
 800ff44:	2201      	movs	r2, #1
 800ff46:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800ff48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ff52:	e06c      	b.n	801002e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800ff54:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ff58:	4613      	mov	r3, r2
 800ff5a:	005b      	lsls	r3, r3, #1
 800ff5c:	4413      	add	r3, r2
 800ff5e:	00db      	lsls	r3, r3, #3
 800ff60:	461a      	mov	r2, r3
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	4413      	add	r3, r2
 800ff66:	2200      	movs	r2, #0
 800ff68:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800ff6a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ff6e:	4613      	mov	r3, r2
 800ff70:	005b      	lsls	r3, r3, #1
 800ff72:	4413      	add	r3, r2
 800ff74:	00db      	lsls	r3, r3, #3
 800ff76:	461a      	mov	r2, r3
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	691b      	ldr	r3, [r3, #16]
 800ff7e:	69ba      	ldr	r2, [r7, #24]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d215      	bcs.n	800ffb0 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800ff84:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ff88:	4613      	mov	r3, r2
 800ff8a:	005b      	lsls	r3, r3, #1
 800ff8c:	4413      	add	r3, r2
 800ff8e:	00db      	lsls	r3, r3, #3
 800ff90:	461a      	mov	r2, r3
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	4413      	add	r3, r2
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	69ba      	ldr	r2, [r7, #24]
 800ff9a:	1ad3      	subs	r3, r2, r3
 800ff9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	bf28      	it	cs
 800ffa2:	4613      	movcs	r3, r2
 800ffa4:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800ffa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ffaa:	3301      	adds	r3, #1
 800ffac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800ffb0:	79fb      	ldrb	r3, [r7, #7]
 800ffb2:	f083 0301 	eor.w	r3, r3, #1
 800ffb6:	b2db      	uxtb	r3, r3
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d038      	beq.n	801002e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	60fb      	str	r3, [r7, #12]
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800ffc4:	8afb      	ldrh	r3, [r7, #22]
 800ffc6:	2b64      	cmp	r3, #100	; 0x64
 800ffc8:	d103      	bne.n	800ffd2 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800ffca:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ffce:	60fb      	str	r3, [r7, #12]
 800ffd0:	e009      	b.n	800ffe6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800ffd2:	8afb      	ldrh	r3, [r7, #22]
 800ffd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ffd8:	d103      	bne.n	800ffe2 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800ffda:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800ffde:	60fb      	str	r3, [r7, #12]
 800ffe0:	e001      	b.n	800ffe6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800ffe2:	4b1e      	ldr	r3, [pc, #120]	; (801005c <RegionCommonUpdateBandTimeOff+0x1d4>)
 800ffe4:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800ffe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffe8:	4a1c      	ldr	r2, [pc, #112]	; (801005c <RegionCommonUpdateBandTimeOff+0x1d4>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d90e      	bls.n	801000c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800ffee:	68fa      	ldr	r2, [r7, #12]
 800fff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fff2:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800fff6:	3b30      	subs	r3, #48	; 0x30
 800fff8:	4919      	ldr	r1, [pc, #100]	; (8010060 <RegionCommonUpdateBandTimeOff+0x1d8>)
 800fffa:	fba1 1303 	umull	r1, r3, r1, r3
 800fffe:	0c1b      	lsrs	r3, r3, #16
 8010000:	3301      	adds	r3, #1
 8010002:	4918      	ldr	r1, [pc, #96]	; (8010064 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8010004:	fb01 f303 	mul.w	r3, r1, r3
 8010008:	4413      	add	r3, r2
 801000a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801000c:	f107 000c 	add.w	r0, r7, #12
 8010010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010016:	f107 020c 	add.w	r2, r7, #12
 801001a:	ca06      	ldmia	r2, {r1, r2}
 801001c:	f006 f9b6 	bl	801638c <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8010020:	f107 030c 	add.w	r3, r7, #12
 8010024:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010028:	f006 fa6e 	bl	8016508 <SysTimeToMs>
 801002c:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801002e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010032:	3301      	adds	r3, #1
 8010034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8010038:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801003c:	79bb      	ldrb	r3, [r7, #6]
 801003e:	429a      	cmp	r2, r3
 8010040:	f4ff af3f 	bcc.w	800fec2 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8010044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010048:	2b00      	cmp	r3, #0
 801004a:	d102      	bne.n	8010052 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801004c:	f04f 33ff 	mov.w	r3, #4294967295
 8010050:	e000      	b.n	8010054 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8010052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010054:	4618      	mov	r0, r3
 8010056:	372c      	adds	r7, #44	; 0x2c
 8010058:	46bd      	mov	sp, r7
 801005a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801005c:	0001ec30 	.word	0x0001ec30
 8010060:	c22e4507 	.word	0xc22e4507
 8010064:	00015180 	.word	0x00015180

08010068 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8010068:	b480      	push	{r7}
 801006a:	b085      	sub	sp, #20
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8010072:	2300      	movs	r3, #0
 8010074:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	2b03      	cmp	r3, #3
 801007c:	d13f      	bne.n	80100fe <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	3301      	adds	r3, #1
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	b25a      	sxtb	r2, r3
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010090:	f003 030f 	and.w	r3, r3, #15
 8010094:	b25a      	sxtb	r2, r3
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	091b      	lsrs	r3, r3, #4
 80100a4:	b2db      	uxtb	r3, r3
 80100a6:	b25a      	sxtb	r2, r3
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	3302      	adds	r3, #2
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	b29a      	uxth	r2, r3
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	889b      	ldrh	r3, [r3, #4]
 80100bc:	b21a      	sxth	r2, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	3303      	adds	r3, #3
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	021b      	lsls	r3, r3, #8
 80100c6:	b21b      	sxth	r3, r3
 80100c8:	4313      	orrs	r3, r2
 80100ca:	b21b      	sxth	r3, r3
 80100cc:	b29a      	uxth	r2, r3
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	791a      	ldrb	r2, [r3, #4]
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	091b      	lsrs	r3, r3, #4
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	f003 0307 	and.w	r3, r3, #7
 80100e6:	b2da      	uxtb	r2, r3
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	f003 030f 	and.w	r3, r3, #15
 80100f4:	b2da      	uxtb	r2, r3
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80100fa:	2305      	movs	r3, #5
 80100fc:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80100fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010100:	4618      	mov	r0, r3
 8010102:	3714      	adds	r7, #20
 8010104:	46bd      	mov	sp, r7
 8010106:	bc80      	pop	{r7}
 8010108:	4770      	bx	lr

0801010a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801010a:	b5b0      	push	{r4, r5, r7, lr}
 801010c:	b088      	sub	sp, #32
 801010e:	af02      	add	r7, sp, #8
 8010110:	60f8      	str	r0, [r7, #12]
 8010112:	60b9      	str	r1, [r7, #8]
 8010114:	607a      	str	r2, [r7, #4]
 8010116:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	791b      	ldrb	r3, [r3, #4]
 801011c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	799b      	ldrb	r3, [r3, #6]
 8010122:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	79db      	ldrb	r3, [r3, #7]
 8010128:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	7a1b      	ldrb	r3, [r3, #8]
 801012e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	795b      	ldrb	r3, [r3, #5]
 8010134:	f083 0301 	eor.w	r3, r3, #1
 8010138:	b2db      	uxtb	r3, r3
 801013a:	2b00      	cmp	r3, #0
 801013c:	d008      	beq.n	8010150 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	7adb      	ldrb	r3, [r3, #11]
 8010142:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	7a5b      	ldrb	r3, [r3, #9]
 8010148:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	7a9b      	ldrb	r3, [r3, #10]
 801014e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8010150:	7dfb      	ldrb	r3, [r7, #23]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d03a      	beq.n	80101cc <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	7b18      	ldrb	r0, [r3, #12]
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	6919      	ldr	r1, [r3, #16]
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801016a:	68fa      	ldr	r2, [r7, #12]
 801016c:	6992      	ldr	r2, [r2, #24]
 801016e:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8010172:	9201      	str	r2, [sp, #4]
 8010174:	9300      	str	r3, [sp, #0]
 8010176:	462b      	mov	r3, r5
 8010178:	4622      	mov	r2, r4
 801017a:	f7ff fd42 	bl	800fc02 <RegionCommonChanVerifyDr>
 801017e:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8010180:	f083 0301 	eor.w	r3, r3, #1
 8010184:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8010186:	2b00      	cmp	r3, #0
 8010188:	d003      	beq.n	8010192 <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 801018a:	7dfb      	ldrb	r3, [r7, #23]
 801018c:	f023 0302 	bic.w	r3, r3, #2
 8010190:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801019e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7ff fd9f 	bl	800fce6 <RegionCommonValueInRange>
 80101a8:	4603      	mov	r3, r0
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d10e      	bne.n	80101cc <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80101b4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80101b8:	429a      	cmp	r2, r3
 80101ba:	da03      	bge.n	80101c4 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	7f5b      	ldrb	r3, [r3, #29]
 80101c0:	757b      	strb	r3, [r7, #21]
 80101c2:	e003      	b.n	80101cc <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80101c4:	7dfb      	ldrb	r3, [r7, #23]
 80101c6:	f023 0304 	bic.w	r3, r3, #4
 80101ca:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80101cc:	7dfb      	ldrb	r3, [r7, #23]
 80101ce:	2b07      	cmp	r3, #7
 80101d0:	d105      	bne.n	80101de <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 80101d2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d101      	bne.n	80101de <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 80101da:	2301      	movs	r3, #1
 80101dc:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	7dba      	ldrb	r2, [r7, #22]
 80101e2:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	7d7a      	ldrb	r2, [r7, #21]
 80101e8:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80101ea:	7d3a      	ldrb	r2, [r7, #20]
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	701a      	strb	r2, [r3, #0]

    return status;
 80101f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3718      	adds	r7, #24
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080101fc <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80101fc:	b480      	push	{r7}
 80101fe:	b083      	sub	sp, #12
 8010200:	af00      	add	r7, sp, #0
 8010202:	4603      	mov	r3, r0
 8010204:	6039      	str	r1, [r7, #0]
 8010206:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8010208:	79fb      	ldrb	r3, [r7, #7]
 801020a:	4a06      	ldr	r2, [pc, #24]	; (8010224 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801020c:	fa02 f303 	lsl.w	r3, r2, r3
 8010210:	461a      	mov	r2, r3
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8010218:	4618      	mov	r0, r3
 801021a:	370c      	adds	r7, #12
 801021c:	46bd      	mov	sp, r7
 801021e:	bc80      	pop	{r7}
 8010220:	4770      	bx	lr
 8010222:	bf00      	nop
 8010224:	000f4240 	.word	0x000f4240

08010228 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
 801022e:	4603      	mov	r3, r0
 8010230:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8010232:	79fb      	ldrb	r3, [r7, #7]
 8010234:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8010238:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801023c:	4618      	mov	r0, r3
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	bc80      	pop	{r7}
 8010244:	4770      	bx	lr
	...

08010248 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8010248:	b480      	push	{r7}
 801024a:	b085      	sub	sp, #20
 801024c:	af00      	add	r7, sp, #0
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	607a      	str	r2, [r7, #4]
 8010252:	603b      	str	r3, [r7, #0]
 8010254:	460b      	mov	r3, r1
 8010256:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8010258:	7afa      	ldrb	r2, [r7, #11]
 801025a:	7afb      	ldrb	r3, [r7, #11]
 801025c:	3b04      	subs	r3, #4
 801025e:	4619      	mov	r1, r3
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	fb03 f101 	mul.w	r1, r3, r1
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801026c:	fb00 f303 	mul.w	r3, r0, r3
 8010270:	440b      	add	r3, r1
 8010272:	005b      	lsls	r3, r3, #1
 8010274:	2b00      	cmp	r3, #0
 8010276:	d013      	beq.n	80102a0 <RegionCommonComputeRxWindowParameters+0x58>
 8010278:	7afb      	ldrb	r3, [r7, #11]
 801027a:	3b04      	subs	r3, #4
 801027c:	4619      	mov	r1, r3
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	fb03 f101 	mul.w	r1, r3, r1
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801028a:	fb00 f303 	mul.w	r3, r0, r3
 801028e:	440b      	add	r3, r1
 8010290:	0059      	lsls	r1, r3, #1
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	440b      	add	r3, r1
 8010296:	1e59      	subs	r1, r3, #1
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	fbb1 f3f3 	udiv	r3, r1, r3
 801029e:	e00f      	b.n	80102c0 <RegionCommonComputeRxWindowParameters+0x78>
 80102a0:	7afb      	ldrb	r3, [r7, #11]
 80102a2:	3b04      	subs	r3, #4
 80102a4:	4619      	mov	r1, r3
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	fb03 f101 	mul.w	r1, r3, r1
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80102b2:	fb00 f303 	mul.w	r3, r0, r3
 80102b6:	440b      	add	r3, r1
 80102b8:	0059      	lsls	r1, r3, #1
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80102c0:	429a      	cmp	r2, r3
 80102c2:	bf38      	it	cc
 80102c4:	461a      	movcc	r2, r3
 80102c6:	69bb      	ldr	r3, [r7, #24]
 80102c8:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	009b      	lsls	r3, r3, #2
 80102ce:	4619      	mov	r1, r3
 80102d0:	69bb      	ldr	r3, [r7, #24]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	68fa      	ldr	r2, [r7, #12]
 80102d6:	fb02 f303 	mul.w	r3, r2, r3
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d007      	beq.n	80102ee <RegionCommonComputeRxWindowParameters+0xa6>
 80102de:	69bb      	ldr	r3, [r7, #24]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	68fa      	ldr	r2, [r7, #12]
 80102e4:	fb02 f303 	mul.w	r3, r2, r3
 80102e8:	3301      	adds	r3, #1
 80102ea:	085b      	lsrs	r3, r3, #1
 80102ec:	e005      	b.n	80102fa <RegionCommonComputeRxWindowParameters+0xb2>
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	68fa      	ldr	r2, [r7, #12]
 80102f4:	fb02 f303 	mul.w	r3, r2, r3
 80102f8:	085b      	lsrs	r3, r3, #1
 80102fa:	1acb      	subs	r3, r1, r3
 80102fc:	683a      	ldr	r2, [r7, #0]
 80102fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010302:	fb01 f202 	mul.w	r2, r1, r2
 8010306:	1a9b      	subs	r3, r3, r2
 8010308:	2b00      	cmp	r3, #0
 801030a:	dd27      	ble.n	801035c <RegionCommonComputeRxWindowParameters+0x114>
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	009b      	lsls	r3, r3, #2
 8010310:	4619      	mov	r1, r3
 8010312:	69bb      	ldr	r3, [r7, #24]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	68fa      	ldr	r2, [r7, #12]
 8010318:	fb02 f303 	mul.w	r3, r2, r3
 801031c:	2b00      	cmp	r3, #0
 801031e:	d007      	beq.n	8010330 <RegionCommonComputeRxWindowParameters+0xe8>
 8010320:	69bb      	ldr	r3, [r7, #24]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	68fa      	ldr	r2, [r7, #12]
 8010326:	fb02 f303 	mul.w	r3, r2, r3
 801032a:	3301      	adds	r3, #1
 801032c:	085b      	lsrs	r3, r3, #1
 801032e:	e005      	b.n	801033c <RegionCommonComputeRxWindowParameters+0xf4>
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	68fa      	ldr	r2, [r7, #12]
 8010336:	fb02 f303 	mul.w	r3, r2, r3
 801033a:	085b      	lsrs	r3, r3, #1
 801033c:	1acb      	subs	r3, r1, r3
 801033e:	683a      	ldr	r2, [r7, #0]
 8010340:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010344:	fb01 f202 	mul.w	r2, r1, r2
 8010348:	1a9b      	subs	r3, r3, r2
 801034a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801034e:	4a19      	ldr	r2, [pc, #100]	; (80103b4 <RegionCommonComputeRxWindowParameters+0x16c>)
 8010350:	fb82 1203 	smull	r1, r2, r2, r3
 8010354:	1192      	asrs	r2, r2, #6
 8010356:	17db      	asrs	r3, r3, #31
 8010358:	1ad3      	subs	r3, r2, r3
 801035a:	e024      	b.n	80103a6 <RegionCommonComputeRxWindowParameters+0x15e>
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	4619      	mov	r1, r3
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	68fa      	ldr	r2, [r7, #12]
 8010368:	fb02 f303 	mul.w	r3, r2, r3
 801036c:	2b00      	cmp	r3, #0
 801036e:	d007      	beq.n	8010380 <RegionCommonComputeRxWindowParameters+0x138>
 8010370:	69bb      	ldr	r3, [r7, #24]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	68fa      	ldr	r2, [r7, #12]
 8010376:	fb02 f303 	mul.w	r3, r2, r3
 801037a:	3301      	adds	r3, #1
 801037c:	085b      	lsrs	r3, r3, #1
 801037e:	e005      	b.n	801038c <RegionCommonComputeRxWindowParameters+0x144>
 8010380:	69bb      	ldr	r3, [r7, #24]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	68fa      	ldr	r2, [r7, #12]
 8010386:	fb02 f303 	mul.w	r3, r2, r3
 801038a:	085b      	lsrs	r3, r3, #1
 801038c:	1acb      	subs	r3, r1, r3
 801038e:	683a      	ldr	r2, [r7, #0]
 8010390:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010394:	fb01 f202 	mul.w	r2, r1, r2
 8010398:	1a9b      	subs	r3, r3, r2
 801039a:	4a06      	ldr	r2, [pc, #24]	; (80103b4 <RegionCommonComputeRxWindowParameters+0x16c>)
 801039c:	fb82 1203 	smull	r1, r2, r2, r3
 80103a0:	1192      	asrs	r2, r2, #6
 80103a2:	17db      	asrs	r3, r3, #31
 80103a4:	1ad3      	subs	r3, r2, r3
 80103a6:	69fa      	ldr	r2, [r7, #28]
 80103a8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80103aa:	bf00      	nop
 80103ac:	3714      	adds	r7, #20
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bc80      	pop	{r7}
 80103b2:	4770      	bx	lr
 80103b4:	10624dd3 	.word	0x10624dd3

080103b8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b086      	sub	sp, #24
 80103bc:	af00      	add	r7, sp, #0
 80103be:	4603      	mov	r3, r0
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	607a      	str	r2, [r7, #4]
 80103c4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80103c6:	2300      	movs	r3, #0
 80103c8:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80103ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103ce:	005b      	lsls	r3, r3, #1
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7f0 fa47 	bl	8000864 <__aeabi_ui2f>
 80103d6:	4603      	mov	r3, r0
 80103d8:	4619      	mov	r1, r3
 80103da:	68b8      	ldr	r0, [r7, #8]
 80103dc:	f7f0 f990 	bl	8000700 <__aeabi_fsub>
 80103e0:	4603      	mov	r3, r0
 80103e2:	6879      	ldr	r1, [r7, #4]
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7f0 f98b 	bl	8000700 <__aeabi_fsub>
 80103ea:	4603      	mov	r3, r0
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7f0 f87b 	bl	80004e8 <__aeabi_f2d>
 80103f2:	4602      	mov	r2, r0
 80103f4:	460b      	mov	r3, r1
 80103f6:	4610      	mov	r0, r2
 80103f8:	4619      	mov	r1, r3
 80103fa:	f007 fae5 	bl	80179c8 <floor>
 80103fe:	4602      	mov	r2, r0
 8010400:	460b      	mov	r3, r1
 8010402:	4610      	mov	r0, r2
 8010404:	4619      	mov	r1, r3
 8010406:	f7f0 f94f 	bl	80006a8 <__aeabi_d2iz>
 801040a:	4603      	mov	r3, r0
 801040c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801040e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010412:	4618      	mov	r0, r3
 8010414:	3718      	adds	r7, #24
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}

0801041a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801041a:	b590      	push	{r4, r7, lr}
 801041c:	b087      	sub	sp, #28
 801041e:	af00      	add	r7, sp, #0
 8010420:	60f8      	str	r0, [r7, #12]
 8010422:	60b9      	str	r1, [r7, #8]
 8010424:	607a      	str	r2, [r7, #4]
 8010426:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8010428:	2300      	movs	r3, #0
 801042a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801042c:	2300      	movs	r3, #0
 801042e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8010430:	2300      	movs	r3, #0
 8010432:	757b      	strb	r3, [r7, #21]
 8010434:	2300      	movs	r3, #0
 8010436:	753b      	strb	r3, [r7, #20]
 8010438:	e09c      	b.n	8010574 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801043a:	2300      	movs	r3, #0
 801043c:	74fb      	strb	r3, [r7, #19]
 801043e:	e08f      	b.n	8010560 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	685a      	ldr	r2, [r3, #4]
 8010444:	7d3b      	ldrb	r3, [r7, #20]
 8010446:	005b      	lsls	r3, r3, #1
 8010448:	4413      	add	r3, r2
 801044a:	881b      	ldrh	r3, [r3, #0]
 801044c:	461a      	mov	r2, r3
 801044e:	7cfb      	ldrb	r3, [r7, #19]
 8010450:	fa42 f303 	asr.w	r3, r2, r3
 8010454:	f003 0301 	and.w	r3, r3, #1
 8010458:	2b00      	cmp	r3, #0
 801045a:	d07e      	beq.n	801055a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	689a      	ldr	r2, [r3, #8]
 8010460:	7d79      	ldrb	r1, [r7, #21]
 8010462:	7cfb      	ldrb	r3, [r7, #19]
 8010464:	440b      	add	r3, r1
 8010466:	4619      	mov	r1, r3
 8010468:	460b      	mov	r3, r1
 801046a:	005b      	lsls	r3, r3, #1
 801046c:	440b      	add	r3, r1
 801046e:	009b      	lsls	r3, r3, #2
 8010470:	4413      	add	r3, r2
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d06b      	beq.n	8010550 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	f083 0301 	eor.w	r3, r3, #1
 8010480:	b2db      	uxtb	r3, r3
 8010482:	2b00      	cmp	r3, #0
 8010484:	d011      	beq.n	80104aa <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801048a:	2b00      	cmp	r3, #0
 801048c:	d00d      	beq.n	80104aa <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	695a      	ldr	r2, [r3, #20]
 8010492:	7d3b      	ldrb	r3, [r7, #20]
 8010494:	005b      	lsls	r3, r3, #1
 8010496:	4413      	add	r3, r2
 8010498:	881b      	ldrh	r3, [r3, #0]
 801049a:	461a      	mov	r2, r3
 801049c:	7cfb      	ldrb	r3, [r7, #19]
 801049e:	fa42 f303 	asr.w	r3, r2, r3
 80104a2:	f003 0301 	and.w	r3, r3, #1
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d054      	beq.n	8010554 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	785b      	ldrb	r3, [r3, #1]
 80104ae:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	689a      	ldr	r2, [r3, #8]
 80104b4:	7d79      	ldrb	r1, [r7, #21]
 80104b6:	7cfb      	ldrb	r3, [r7, #19]
 80104b8:	440b      	add	r3, r1
 80104ba:	4619      	mov	r1, r3
 80104bc:	460b      	mov	r3, r1
 80104be:	005b      	lsls	r3, r3, #1
 80104c0:	440b      	add	r3, r1
 80104c2:	009b      	lsls	r3, r3, #2
 80104c4:	4413      	add	r3, r2
 80104c6:	7a1b      	ldrb	r3, [r3, #8]
 80104c8:	f343 0303 	sbfx	r3, r3, #0, #4
 80104cc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80104ce:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	689a      	ldr	r2, [r3, #8]
 80104d4:	7d79      	ldrb	r1, [r7, #21]
 80104d6:	7cfb      	ldrb	r3, [r7, #19]
 80104d8:	440b      	add	r3, r1
 80104da:	4619      	mov	r1, r3
 80104dc:	460b      	mov	r3, r1
 80104de:	005b      	lsls	r3, r3, #1
 80104e0:	440b      	add	r3, r1
 80104e2:	009b      	lsls	r3, r3, #2
 80104e4:	4413      	add	r3, r2
 80104e6:	7a1b      	ldrb	r3, [r3, #8]
 80104e8:	f343 1303 	sbfx	r3, r3, #4, #4
 80104ec:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80104ee:	461a      	mov	r2, r3
 80104f0:	4621      	mov	r1, r4
 80104f2:	f7ff fbf8 	bl	800fce6 <RegionCommonValueInRange>
 80104f6:	4603      	mov	r3, r0
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d02d      	beq.n	8010558 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	68da      	ldr	r2, [r3, #12]
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	6899      	ldr	r1, [r3, #8]
 8010504:	7d78      	ldrb	r0, [r7, #21]
 8010506:	7cfb      	ldrb	r3, [r7, #19]
 8010508:	4403      	add	r3, r0
 801050a:	4618      	mov	r0, r3
 801050c:	4603      	mov	r3, r0
 801050e:	005b      	lsls	r3, r3, #1
 8010510:	4403      	add	r3, r0
 8010512:	009b      	lsls	r3, r3, #2
 8010514:	440b      	add	r3, r1
 8010516:	7a5b      	ldrb	r3, [r3, #9]
 8010518:	4619      	mov	r1, r3
 801051a:	460b      	mov	r3, r1
 801051c:	005b      	lsls	r3, r3, #1
 801051e:	440b      	add	r3, r1
 8010520:	00db      	lsls	r3, r3, #3
 8010522:	4413      	add	r3, r2
 8010524:	7d1b      	ldrb	r3, [r3, #20]
 8010526:	f083 0301 	eor.w	r3, r3, #1
 801052a:	b2db      	uxtb	r3, r3
 801052c:	2b00      	cmp	r3, #0
 801052e:	d003      	beq.n	8010538 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8010530:	7dbb      	ldrb	r3, [r7, #22]
 8010532:	3301      	adds	r3, #1
 8010534:	75bb      	strb	r3, [r7, #22]
                    continue;
 8010536:	e010      	b.n	801055a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8010538:	7dfb      	ldrb	r3, [r7, #23]
 801053a:	1c5a      	adds	r2, r3, #1
 801053c:	75fa      	strb	r2, [r7, #23]
 801053e:	461a      	mov	r2, r3
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	4413      	add	r3, r2
 8010544:	7d79      	ldrb	r1, [r7, #21]
 8010546:	7cfa      	ldrb	r2, [r7, #19]
 8010548:	440a      	add	r2, r1
 801054a:	b2d2      	uxtb	r2, r2
 801054c:	701a      	strb	r2, [r3, #0]
 801054e:	e004      	b.n	801055a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8010550:	bf00      	nop
 8010552:	e002      	b.n	801055a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8010554:	bf00      	nop
 8010556:	e000      	b.n	801055a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8010558:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801055a:	7cfb      	ldrb	r3, [r7, #19]
 801055c:	3301      	adds	r3, #1
 801055e:	74fb      	strb	r3, [r7, #19]
 8010560:	7cfb      	ldrb	r3, [r7, #19]
 8010562:	2b0f      	cmp	r3, #15
 8010564:	f67f af6c 	bls.w	8010440 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8010568:	7d7b      	ldrb	r3, [r7, #21]
 801056a:	3310      	adds	r3, #16
 801056c:	757b      	strb	r3, [r7, #21]
 801056e:	7d3b      	ldrb	r3, [r7, #20]
 8010570:	3301      	adds	r3, #1
 8010572:	753b      	strb	r3, [r7, #20]
 8010574:	7d7b      	ldrb	r3, [r7, #21]
 8010576:	b29a      	uxth	r2, r3
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	8a1b      	ldrh	r3, [r3, #16]
 801057c:	429a      	cmp	r2, r3
 801057e:	f4ff af5c 	bcc.w	801043a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	7dfa      	ldrb	r2, [r7, #23]
 8010586:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	7dba      	ldrb	r2, [r7, #22]
 801058c:	701a      	strb	r2, [r3, #0]
}
 801058e:	bf00      	nop
 8010590:	371c      	adds	r7, #28
 8010592:	46bd      	mov	sp, r7
 8010594:	bd90      	pop	{r4, r7, pc}

08010596 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8010596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010598:	b08b      	sub	sp, #44	; 0x2c
 801059a:	af04      	add	r7, sp, #16
 801059c:	60f8      	str	r0, [r7, #12]
 801059e:	60b9      	str	r1, [r7, #8]
 80105a0:	607a      	str	r2, [r7, #4]
 80105a2:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	685b      	ldr	r3, [r3, #4]
 80105a8:	4618      	mov	r0, r3
 80105aa:	f006 f963 	bl	8016874 <UTIL_TIMER_GetElapsedTime>
 80105ae:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681a      	ldr	r2, [r3, #0]
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	1ad2      	subs	r2, r2, r3
 80105b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ba:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80105bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105be:	2201      	movs	r2, #1
 80105c0:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	2200      	movs	r2, #0
 80105c6:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	685b      	ldr	r3, [r3, #4]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d004      	beq.n	80105da <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80105d4:	697a      	ldr	r2, [r7, #20]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d32b      	bcc.n	8010632 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	2200      	movs	r2, #0
 80105de:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	69db      	ldr	r3, [r3, #28]
 80105e4:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80105ea:	68dd      	ldr	r5, [r3, #12]
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	7a5e      	ldrb	r6, [r3, #9]
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	f893 c008 	ldrb.w	ip, [r3, #8]
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	7d1b      	ldrb	r3, [r3, #20]
 80105fa:	68fa      	ldr	r2, [r7, #12]
 80105fc:	6992      	ldr	r2, [r2, #24]
 80105fe:	9203      	str	r2, [sp, #12]
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	f10d 0e04 	add.w	lr, sp, #4
 8010606:	320c      	adds	r2, #12
 8010608:	e892 0003 	ldmia.w	r2, {r0, r1}
 801060c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8010610:	9300      	str	r3, [sp, #0]
 8010612:	4663      	mov	r3, ip
 8010614:	4632      	mov	r2, r6
 8010616:	4629      	mov	r1, r5
 8010618:	4620      	mov	r0, r4
 801061a:	f7ff fc35 	bl	800fe88 <RegionCommonUpdateBandTimeOff>
 801061e:	4602      	mov	r2, r0
 8010620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010622:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	69d8      	ldr	r0, [r3, #28]
 8010628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801062a:	683a      	ldr	r2, [r7, #0]
 801062c:	6879      	ldr	r1, [r7, #4]
 801062e:	f7ff fef4 	bl	801041a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d004      	beq.n	8010644 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801063a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801063c:	2200      	movs	r2, #0
 801063e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8010640:	2300      	movs	r3, #0
 8010642:	e006      	b.n	8010652 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8010644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d001      	beq.n	8010650 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801064c:	230b      	movs	r3, #11
 801064e:	e000      	b.n	8010652 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8010650:	230c      	movs	r3, #12
    }
}
 8010652:	4618      	mov	r0, r3
 8010654:	371c      	adds	r7, #28
 8010656:	46bd      	mov	sp, r7
 8010658:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801065a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801065a:	b5b0      	push	{r4, r5, r7, lr}
 801065c:	b086      	sub	sp, #24
 801065e:	af02      	add	r7, sp, #8
 8010660:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	781b      	ldrb	r3, [r3, #0]
 8010666:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f993 2000 	ldrsb.w	r2, [r3]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8010674:	429a      	cmp	r2, r3
 8010676:	d103      	bne.n	8010680 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801067e:	e026      	b.n	80106ce <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8010680:	7bfb      	ldrb	r3, [r7, #15]
 8010682:	3b01      	subs	r3, #1
 8010684:	b2db      	uxtb	r3, r3
 8010686:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801068e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010692:	429a      	cmp	r2, r3
 8010694:	d019      	beq.n	80106ca <RegionCommonGetNextLowerTxDr+0x70>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	78d8      	ldrb	r0, [r3, #3]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6859      	ldr	r1, [r3, #4]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80106aa:	687a      	ldr	r2, [r7, #4]
 80106ac:	6892      	ldr	r2, [r2, #8]
 80106ae:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80106b2:	9201      	str	r2, [sp, #4]
 80106b4:	9300      	str	r3, [sp, #0]
 80106b6:	462b      	mov	r3, r5
 80106b8:	4622      	mov	r2, r4
 80106ba:	f7ff faa2 	bl	800fc02 <RegionCommonChanVerifyDr>
 80106be:	4603      	mov	r3, r0
 80106c0:	f083 0301 	eor.w	r3, r3, #1
 80106c4:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d1da      	bne.n	8010680 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80106ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3710      	adds	r7, #16
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bdb0      	pop	{r4, r5, r7, pc}

080106d6 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80106d6:	b480      	push	{r7}
 80106d8:	b083      	sub	sp, #12
 80106da:	af00      	add	r7, sp, #0
 80106dc:	4603      	mov	r3, r0
 80106de:	460a      	mov	r2, r1
 80106e0:	71fb      	strb	r3, [r7, #7]
 80106e2:	4613      	mov	r3, r2
 80106e4:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80106e6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80106ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80106ee:	4293      	cmp	r3, r2
 80106f0:	bfb8      	it	lt
 80106f2:	4613      	movlt	r3, r2
 80106f4:	b25b      	sxtb	r3, r3
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	370c      	adds	r7, #12
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bc80      	pop	{r7}
 80106fe:	4770      	bx	lr

08010700 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8010700:	b480      	push	{r7}
 8010702:	b083      	sub	sp, #12
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	009b      	lsls	r3, r3, #2
 801070e:	683a      	ldr	r2, [r7, #0]
 8010710:	4413      	add	r3, r2
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	4a07      	ldr	r2, [pc, #28]	; (8010734 <RegionCommonGetBandwidth+0x34>)
 8010716:	4293      	cmp	r3, r2
 8010718:	d004      	beq.n	8010724 <RegionCommonGetBandwidth+0x24>
 801071a:	4a07      	ldr	r2, [pc, #28]	; (8010738 <RegionCommonGetBandwidth+0x38>)
 801071c:	4293      	cmp	r3, r2
 801071e:	d003      	beq.n	8010728 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8010720:	2300      	movs	r3, #0
 8010722:	e002      	b.n	801072a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8010724:	2301      	movs	r3, #1
 8010726:	e000      	b.n	801072a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8010728:	2302      	movs	r3, #2
    }
}
 801072a:	4618      	mov	r0, r3
 801072c:	370c      	adds	r7, #12
 801072e:	46bd      	mov	sp, r7
 8010730:	bc80      	pop	{r7}
 8010732:	4770      	bx	lr
 8010734:	0003d090 	.word	0x0003d090
 8010738:	0007a120 	.word	0x0007a120

0801073c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801073c:	b4b0      	push	{r4, r5, r7}
 801073e:	b089      	sub	sp, #36	; 0x24
 8010740:	af00      	add	r7, sp, #0
 8010742:	4603      	mov	r3, r0
 8010744:	6039      	str	r1, [r7, #0]
 8010746:	71fb      	strb	r3, [r7, #7]
 8010748:	4613      	mov	r3, r2
 801074a:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 801074c:	4b07      	ldr	r3, [pc, #28]	; (801076c <RegionCommonRxConfigPrint+0x30>)
 801074e:	f107 0408 	add.w	r4, r7, #8
 8010752:	461d      	mov	r5, r3
 8010754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010758:	e895 0003 	ldmia.w	r5, {r0, r1}
 801075c:	e884 0003 	stmia.w	r4, {r0, r1}
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8010760:	bf00      	nop
 8010762:	3724      	adds	r7, #36	; 0x24
 8010764:	46bd      	mov	sp, r7
 8010766:	bcb0      	pop	{r4, r5, r7}
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	08017eac 	.word	0x08017eac

08010770 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	460b      	mov	r3, r1
 801077a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
}
 801077c:	bf00      	nop
 801077e:	370c      	adds	r7, #12
 8010780:	46bd      	mov	sp, r7
 8010782:	bc80      	pop	{r7}
 8010784:	4770      	bx	lr
	...

08010788 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8010792:	4b2d      	ldr	r3, [pc, #180]	; (8010848 <VerifyRfFreq+0xc0>)
 8010794:	6a1b      	ldr	r3, [r3, #32]
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	4798      	blx	r3
 801079a:	4603      	mov	r3, r0
 801079c:	f083 0301 	eor.w	r3, r3, #1
 80107a0:	b2db      	uxtb	r3, r3
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d001      	beq.n	80107aa <VerifyRfFreq+0x22>
    {
        return false;
 80107a6:	2300      	movs	r3, #0
 80107a8:	e04a      	b.n	8010840 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	4a27      	ldr	r2, [pc, #156]	; (801084c <VerifyRfFreq+0xc4>)
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d307      	bcc.n	80107c2 <VerifyRfFreq+0x3a>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	4a26      	ldr	r2, [pc, #152]	; (8010850 <VerifyRfFreq+0xc8>)
 80107b6:	4293      	cmp	r3, r2
 80107b8:	d803      	bhi.n	80107c2 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	2202      	movs	r2, #2
 80107be:	701a      	strb	r2, [r3, #0]
 80107c0:	e03d      	b.n	801083e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	4a22      	ldr	r2, [pc, #136]	; (8010850 <VerifyRfFreq+0xc8>)
 80107c6:	4293      	cmp	r3, r2
 80107c8:	d907      	bls.n	80107da <VerifyRfFreq+0x52>
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	4a21      	ldr	r2, [pc, #132]	; (8010854 <VerifyRfFreq+0xcc>)
 80107ce:	4293      	cmp	r3, r2
 80107d0:	d803      	bhi.n	80107da <VerifyRfFreq+0x52>
    {
        *band = 0;
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	2200      	movs	r2, #0
 80107d6:	701a      	strb	r2, [r3, #0]
 80107d8:	e031      	b.n	801083e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	4a1d      	ldr	r2, [pc, #116]	; (8010854 <VerifyRfFreq+0xcc>)
 80107de:	4293      	cmp	r3, r2
 80107e0:	d907      	bls.n	80107f2 <VerifyRfFreq+0x6a>
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	4a1c      	ldr	r2, [pc, #112]	; (8010858 <VerifyRfFreq+0xd0>)
 80107e6:	4293      	cmp	r3, r2
 80107e8:	d803      	bhi.n	80107f2 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	2201      	movs	r2, #1
 80107ee:	701a      	strb	r2, [r3, #0]
 80107f0:	e025      	b.n	801083e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	4a19      	ldr	r2, [pc, #100]	; (801085c <VerifyRfFreq+0xd4>)
 80107f6:	4293      	cmp	r3, r2
 80107f8:	d907      	bls.n	801080a <VerifyRfFreq+0x82>
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	4a18      	ldr	r2, [pc, #96]	; (8010860 <VerifyRfFreq+0xd8>)
 80107fe:	4293      	cmp	r3, r2
 8010800:	d803      	bhi.n	801080a <VerifyRfFreq+0x82>
    {
        *band = 5;
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	2205      	movs	r2, #5
 8010806:	701a      	strb	r2, [r3, #0]
 8010808:	e019      	b.n	801083e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	4a15      	ldr	r2, [pc, #84]	; (8010864 <VerifyRfFreq+0xdc>)
 801080e:	4293      	cmp	r3, r2
 8010810:	d907      	bls.n	8010822 <VerifyRfFreq+0x9a>
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	4a14      	ldr	r2, [pc, #80]	; (8010868 <VerifyRfFreq+0xe0>)
 8010816:	4293      	cmp	r3, r2
 8010818:	d803      	bhi.n	8010822 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	2203      	movs	r2, #3
 801081e:	701a      	strb	r2, [r3, #0]
 8010820:	e00d      	b.n	801083e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	4a11      	ldr	r2, [pc, #68]	; (801086c <VerifyRfFreq+0xe4>)
 8010826:	4293      	cmp	r3, r2
 8010828:	d307      	bcc.n	801083a <VerifyRfFreq+0xb2>
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	4a10      	ldr	r2, [pc, #64]	; (8010870 <VerifyRfFreq+0xe8>)
 801082e:	4293      	cmp	r3, r2
 8010830:	d803      	bhi.n	801083a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	2204      	movs	r2, #4
 8010836:	701a      	strb	r2, [r3, #0]
 8010838:	e001      	b.n	801083e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801083a:	2300      	movs	r3, #0
 801083c:	e000      	b.n	8010840 <VerifyRfFreq+0xb8>
    }
    return true;
 801083e:	2301      	movs	r3, #1
}
 8010840:	4618      	mov	r0, r3
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	080183e0 	.word	0x080183e0
 801084c:	337055c0 	.word	0x337055c0
 8010850:	338eda3f 	.word	0x338eda3f
 8010854:	33bca100 	.word	0x33bca100
 8010858:	33c5c8c0 	.word	0x33c5c8c0
 801085c:	33c74f5f 	.word	0x33c74f5f
 8010860:	33cef080 	.word	0x33cef080
 8010864:	33d1fdbf 	.word	0x33d1fdbf
 8010868:	33d5ce50 	.word	0x33d5ce50
 801086c:	33d691a0 	.word	0x33d691a0
 8010870:	33db2580 	.word	0x33db2580

08010874 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8010874:	b590      	push	{r4, r7, lr}
 8010876:	b08b      	sub	sp, #44	; 0x2c
 8010878:	af04      	add	r7, sp, #16
 801087a:	4603      	mov	r3, r0
 801087c:	460a      	mov	r2, r1
 801087e:	71fb      	strb	r3, [r7, #7]
 8010880:	4613      	mov	r3, r2
 8010882:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8010884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010888:	4a1f      	ldr	r2, [pc, #124]	; (8010908 <GetTimeOnAir+0x94>)
 801088a:	5cd3      	ldrb	r3, [r2, r3]
 801088c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010892:	491e      	ldr	r1, [pc, #120]	; (801090c <GetTimeOnAir+0x98>)
 8010894:	4618      	mov	r0, r3
 8010896:	f7ff ff33 	bl	8010700 <RegionCommonGetBandwidth>
 801089a:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801089c:	2300      	movs	r3, #0
 801089e:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80108a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80108a4:	2b07      	cmp	r3, #7
 80108a6:	d118      	bne.n	80108da <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80108a8:	4b19      	ldr	r3, [pc, #100]	; (8010910 <GetTimeOnAir+0x9c>)
 80108aa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80108ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80108b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80108b4:	fb02 f303 	mul.w	r3, r2, r3
 80108b8:	4619      	mov	r1, r3
 80108ba:	88bb      	ldrh	r3, [r7, #4]
 80108bc:	b2db      	uxtb	r3, r3
 80108be:	2201      	movs	r2, #1
 80108c0:	9203      	str	r2, [sp, #12]
 80108c2:	9302      	str	r3, [sp, #8]
 80108c4:	2300      	movs	r3, #0
 80108c6:	9301      	str	r3, [sp, #4]
 80108c8:	2305      	movs	r3, #5
 80108ca:	9300      	str	r3, [sp, #0]
 80108cc:	2300      	movs	r3, #0
 80108ce:	460a      	mov	r2, r1
 80108d0:	68f9      	ldr	r1, [r7, #12]
 80108d2:	2000      	movs	r0, #0
 80108d4:	47a0      	blx	r4
 80108d6:	6178      	str	r0, [r7, #20]
 80108d8:	e011      	b.n	80108fe <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80108da:	4b0d      	ldr	r3, [pc, #52]	; (8010910 <GetTimeOnAir+0x9c>)
 80108dc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80108de:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80108e2:	88bb      	ldrh	r3, [r7, #4]
 80108e4:	b2db      	uxtb	r3, r3
 80108e6:	2101      	movs	r1, #1
 80108e8:	9103      	str	r1, [sp, #12]
 80108ea:	9302      	str	r3, [sp, #8]
 80108ec:	2300      	movs	r3, #0
 80108ee:	9301      	str	r3, [sp, #4]
 80108f0:	2308      	movs	r3, #8
 80108f2:	9300      	str	r3, [sp, #0]
 80108f4:	2301      	movs	r3, #1
 80108f6:	68f9      	ldr	r1, [r7, #12]
 80108f8:	2001      	movs	r0, #1
 80108fa:	47a0      	blx	r4
 80108fc:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80108fe:	697b      	ldr	r3, [r7, #20]
}
 8010900:	4618      	mov	r0, r3
 8010902:	371c      	adds	r7, #28
 8010904:	46bd      	mov	sp, r7
 8010906:	bd90      	pop	{r4, r7, pc}
 8010908:	08018324 	.word	0x08018324
 801090c:	0801832c 	.word	0x0801832c
 8010910:	080183e0 	.word	0x080183e0

08010914 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b088      	sub	sp, #32
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801091c:	2300      	movs	r3, #0
 801091e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	3b01      	subs	r3, #1
 8010926:	2b38      	cmp	r3, #56	; 0x38
 8010928:	f200 8128 	bhi.w	8010b7c <RegionEU868GetPhyParam+0x268>
 801092c:	a201      	add	r2, pc, #4	; (adr r2, 8010934 <RegionEU868GetPhyParam+0x20>)
 801092e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010932:	bf00      	nop
 8010934:	08010a19 	.word	0x08010a19
 8010938:	08010a1f 	.word	0x08010a1f
 801093c:	08010b7d 	.word	0x08010b7d
 8010940:	08010b7d 	.word	0x08010b7d
 8010944:	08010b7d 	.word	0x08010b7d
 8010948:	08010a25 	.word	0x08010a25
 801094c:	08010b7d 	.word	0x08010b7d
 8010950:	08010a5f 	.word	0x08010a5f
 8010954:	08010b7d 	.word	0x08010b7d
 8010958:	08010a65 	.word	0x08010a65
 801095c:	08010a6b 	.word	0x08010a6b
 8010960:	08010a71 	.word	0x08010a71
 8010964:	08010a77 	.word	0x08010a77
 8010968:	08010a87 	.word	0x08010a87
 801096c:	08010a97 	.word	0x08010a97
 8010970:	08010a9d 	.word	0x08010a9d
 8010974:	08010aa5 	.word	0x08010aa5
 8010978:	08010aad 	.word	0x08010aad
 801097c:	08010ab5 	.word	0x08010ab5
 8010980:	08010abd 	.word	0x08010abd
 8010984:	08010ac5 	.word	0x08010ac5
 8010988:	08010acd 	.word	0x08010acd
 801098c:	08010ae1 	.word	0x08010ae1
 8010990:	08010ae7 	.word	0x08010ae7
 8010994:	08010aed 	.word	0x08010aed
 8010998:	08010af3 	.word	0x08010af3
 801099c:	08010aff 	.word	0x08010aff
 80109a0:	08010b0b 	.word	0x08010b0b
 80109a4:	08010b11 	.word	0x08010b11
 80109a8:	08010b19 	.word	0x08010b19
 80109ac:	08010b1f 	.word	0x08010b1f
 80109b0:	08010b25 	.word	0x08010b25
 80109b4:	08010b2d 	.word	0x08010b2d
 80109b8:	08010a2b 	.word	0x08010a2b
 80109bc:	08010b7d 	.word	0x08010b7d
 80109c0:	08010b7d 	.word	0x08010b7d
 80109c4:	08010b7d 	.word	0x08010b7d
 80109c8:	08010b7d 	.word	0x08010b7d
 80109cc:	08010b7d 	.word	0x08010b7d
 80109d0:	08010b7d 	.word	0x08010b7d
 80109d4:	08010b7d 	.word	0x08010b7d
 80109d8:	08010b7d 	.word	0x08010b7d
 80109dc:	08010b7d 	.word	0x08010b7d
 80109e0:	08010b7d 	.word	0x08010b7d
 80109e4:	08010b7d 	.word	0x08010b7d
 80109e8:	08010b7d 	.word	0x08010b7d
 80109ec:	08010b7d 	.word	0x08010b7d
 80109f0:	08010b33 	.word	0x08010b33
 80109f4:	08010b39 	.word	0x08010b39
 80109f8:	08010b47 	.word	0x08010b47
 80109fc:	08010b7d 	.word	0x08010b7d
 8010a00:	08010b7d 	.word	0x08010b7d
 8010a04:	08010b4d 	.word	0x08010b4d
 8010a08:	08010b53 	.word	0x08010b53
 8010a0c:	08010b7d 	.word	0x08010b7d
 8010a10:	08010b59 	.word	0x08010b59
 8010a14:	08010b69 	.word	0x08010b69
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	61bb      	str	r3, [r7, #24]
            break;
 8010a1c:	e0af      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	61bb      	str	r3, [r7, #24]
            break;
 8010a22:	e0ac      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8010a24:	2300      	movs	r3, #0
 8010a26:	61bb      	str	r3, [r7, #24]
            break;
 8010a28:	e0a9      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010a30:	733b      	strb	r3, [r7, #12]
 8010a32:	2307      	movs	r3, #7
 8010a34:	737b      	strb	r3, [r7, #13]
 8010a36:	2300      	movs	r3, #0
 8010a38:	73bb      	strb	r3, [r7, #14]
 8010a3a:	2310      	movs	r3, #16
 8010a3c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8010a3e:	4b54      	ldr	r3, [pc, #336]	; (8010b90 <RegionEU868GetPhyParam+0x27c>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010a46:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8010a48:	4b51      	ldr	r3, [pc, #324]	; (8010b90 <RegionEU868GetPhyParam+0x27c>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010a4c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8010a4e:	f107 030c 	add.w	r3, r7, #12
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7ff fe01 	bl	801065a <RegionCommonGetNextLowerTxDr>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	61bb      	str	r3, [r7, #24]
            break;
 8010a5c:	e08f      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	61bb      	str	r3, [r7, #24]
            break;
 8010a62:	e08c      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8010a64:	2300      	movs	r3, #0
 8010a66:	61bb      	str	r3, [r7, #24]
            break;
 8010a68:	e089      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8010a6a:	2340      	movs	r3, #64	; 0x40
 8010a6c:	61bb      	str	r3, [r7, #24]
            break;
 8010a6e:	e086      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8010a70:	2320      	movs	r3, #32
 8010a72:	61bb      	str	r3, [r7, #24]
            break;
 8010a74:	e083      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	4b45      	ldr	r3, [pc, #276]	; (8010b94 <RegionEU868GetPhyParam+0x280>)
 8010a80:	5c9b      	ldrb	r3, [r3, r2]
 8010a82:	61bb      	str	r3, [r7, #24]
            break;
 8010a84:	e07b      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	4b42      	ldr	r3, [pc, #264]	; (8010b98 <RegionEU868GetPhyParam+0x284>)
 8010a90:	5c9b      	ldrb	r3, [r3, r2]
 8010a92:	61bb      	str	r3, [r7, #24]
            break;
 8010a94:	e073      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8010a96:	2301      	movs	r3, #1
 8010a98:	61bb      	str	r3, [r7, #24]
            break;
 8010a9a:	e070      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8010a9c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8010aa0:	61bb      	str	r3, [r7, #24]
            break;
 8010aa2:	e06c      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8010aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010aa8:	61bb      	str	r3, [r7, #24]
            break;
 8010aaa:	e068      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8010aac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010ab0:	61bb      	str	r3, [r7, #24]
            break;
 8010ab2:	e064      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8010ab4:	f241 3388 	movw	r3, #5000	; 0x1388
 8010ab8:	61bb      	str	r3, [r7, #24]
            break;
 8010aba:	e060      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8010abc:	f241 7370 	movw	r3, #6000	; 0x1770
 8010ac0:	61bb      	str	r3, [r7, #24]
            break;
 8010ac2:	e05c      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8010ac4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010ac8:	61bb      	str	r3, [r7, #24]
            break;
 8010aca:	e058      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8010acc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010ad0:	4832      	ldr	r0, [pc, #200]	; (8010b9c <RegionEU868GetPhyParam+0x288>)
 8010ad2:	f002 faf1 	bl	80130b8 <randr>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8010adc:	61bb      	str	r3, [r7, #24]
            break;
 8010ade:	e04e      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	61bb      	str	r3, [r7, #24]
            break;
 8010ae4:	e04b      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8010ae6:	4b2e      	ldr	r3, [pc, #184]	; (8010ba0 <RegionEU868GetPhyParam+0x28c>)
 8010ae8:	61bb      	str	r3, [r7, #24]
            break;
 8010aea:	e048      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8010aec:	2300      	movs	r3, #0
 8010aee:	61bb      	str	r3, [r7, #24]
            break;
 8010af0:	e045      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8010af2:	4b27      	ldr	r3, [pc, #156]	; (8010b90 <RegionEU868GetPhyParam+0x27c>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8010afa:	61bb      	str	r3, [r7, #24]
            break;
 8010afc:	e03f      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8010afe:	4b24      	ldr	r3, [pc, #144]	; (8010b90 <RegionEU868GetPhyParam+0x27c>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8010b06:	61bb      	str	r3, [r7, #24]
            break;
 8010b08:	e039      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8010b0a:	2310      	movs	r3, #16
 8010b0c:	61bb      	str	r3, [r7, #24]
            break;
 8010b0e:	e036      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8010b10:	4b1f      	ldr	r3, [pc, #124]	; (8010b90 <RegionEU868GetPhyParam+0x27c>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	61bb      	str	r3, [r7, #24]
            break;
 8010b16:	e032      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	61bb      	str	r3, [r7, #24]
            break;
 8010b1c:	e02f      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	61bb      	str	r3, [r7, #24]
            break;
 8010b22:	e02c      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8010b24:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8010b28:	61bb      	str	r3, [r7, #24]
            break;
 8010b2a:	e028      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8010b2c:	4b1d      	ldr	r3, [pc, #116]	; (8010ba4 <RegionEU868GetPhyParam+0x290>)
 8010b2e:	61bb      	str	r3, [r7, #24]
            break;
 8010b30:	e025      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8010b32:	4b1b      	ldr	r3, [pc, #108]	; (8010ba0 <RegionEU868GetPhyParam+0x28c>)
 8010b34:	61bb      	str	r3, [r7, #24]
            break;
 8010b36:	e022      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8010b38:	2311      	movs	r3, #17
 8010b3a:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8010b3c:	2302      	movs	r3, #2
 8010b3e:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8010b40:	2300      	movs	r3, #0
 8010b42:	76bb      	strb	r3, [r7, #26]
            break;
 8010b44:	e01b      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8010b46:	2303      	movs	r3, #3
 8010b48:	61bb      	str	r3, [r7, #24]
            break;
 8010b4a:	e018      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8010b4c:	4b14      	ldr	r3, [pc, #80]	; (8010ba0 <RegionEU868GetPhyParam+0x28c>)
 8010b4e:	61bb      	str	r3, [r7, #24]
            break;
 8010b50:	e015      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8010b52:	2303      	movs	r3, #3
 8010b54:	61bb      	str	r3, [r7, #24]
            break;
 8010b56:	e012      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010b5e:	461a      	mov	r2, r3
 8010b60:	4b11      	ldr	r3, [pc, #68]	; (8010ba8 <RegionEU868GetPhyParam+0x294>)
 8010b62:	5c9b      	ldrb	r3, [r3, r2]
 8010b64:	61bb      	str	r3, [r7, #24]
            break;
 8010b66:	e00a      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010b6e:	490f      	ldr	r1, [pc, #60]	; (8010bac <RegionEU868GetPhyParam+0x298>)
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7ff fdc5 	bl	8010700 <RegionCommonGetBandwidth>
 8010b76:	4603      	mov	r3, r0
 8010b78:	61bb      	str	r3, [r7, #24]
            break;
 8010b7a:	e000      	b.n	8010b7e <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8010b7c:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8010b7e:	69bb      	ldr	r3, [r7, #24]
 8010b80:	61fb      	str	r3, [r7, #28]
 8010b82:	2300      	movs	r3, #0
 8010b84:	69fb      	ldr	r3, [r7, #28]
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3720      	adds	r7, #32
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	20000f5c 	.word	0x20000f5c
 8010b94:	0801834c 	.word	0x0801834c
 8010b98:	08018354 	.word	0x08018354
 8010b9c:	fffffc18 	.word	0xfffffc18
 8010ba0:	33d3e608 	.word	0x33d3e608
 8010ba4:	4009999a 	.word	0x4009999a
 8010ba8:	08018324 	.word	0x08018324
 8010bac:	0801832c 	.word	0x0801832c

08010bb0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8010bb0:	b590      	push	{r4, r7, lr}
 8010bb2:	b085      	sub	sp, #20
 8010bb4:	af02      	add	r7, sp, #8
 8010bb6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8010bb8:	4b11      	ldr	r3, [pc, #68]	; (8010c00 <RegionEU868SetBandTxDone+0x50>)
 8010bba:	681a      	ldr	r2, [r3, #0]
 8010bbc:	4b11      	ldr	r3, [pc, #68]	; (8010c04 <RegionEU868SetBandTxDone+0x54>)
 8010bbe:	6819      	ldr	r1, [r3, #0]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	005b      	lsls	r3, r3, #1
 8010bca:	4403      	add	r3, r0
 8010bcc:	009b      	lsls	r3, r3, #2
 8010bce:	440b      	add	r3, r1
 8010bd0:	3309      	adds	r3, #9
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	4619      	mov	r1, r3
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	005b      	lsls	r3, r3, #1
 8010bda:	440b      	add	r3, r1
 8010bdc:	00db      	lsls	r3, r3, #3
 8010bde:	18d0      	adds	r0, r2, r3
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6899      	ldr	r1, [r3, #8]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	785c      	ldrb	r4, [r3, #1]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	691a      	ldr	r2, [r3, #16]
 8010bec:	9200      	str	r2, [sp, #0]
 8010bee:	68db      	ldr	r3, [r3, #12]
 8010bf0:	4622      	mov	r2, r4
 8010bf2:	f7ff f91b 	bl	800fe2c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 8010bf6:	bf00      	nop
 8010bf8:	370c      	adds	r7, #12
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd90      	pop	{r4, r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	20000f58 	.word	0x20000f58
 8010c04:	20000f5c 	.word	0x20000f5c

08010c08 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b0b0      	sub	sp, #192	; 0xc0
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8010c10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010c14:	2290      	movs	r2, #144	; 0x90
 8010c16:	2100      	movs	r1, #0
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f005 ff05 	bl	8016a28 <memset>
 8010c1e:	2364      	movs	r3, #100	; 0x64
 8010c20:	863b      	strh	r3, [r7, #48]	; 0x30
 8010c22:	2364      	movs	r3, #100	; 0x64
 8010c24:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8010c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010c2c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8010c30:	230a      	movs	r3, #10
 8010c32:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8010c36:	2364      	movs	r3, #100	; 0x64
 8010c38:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8010c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010c40:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	7a1b      	ldrb	r3, [r3, #8]
 8010c48:	2b02      	cmp	r3, #2
 8010c4a:	d05e      	beq.n	8010d0a <RegionEU868InitDefaults+0x102>
 8010c4c:	2b02      	cmp	r3, #2
 8010c4e:	dc6b      	bgt.n	8010d28 <RegionEU868InitDefaults+0x120>
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d002      	beq.n	8010c5a <RegionEU868InitDefaults+0x52>
 8010c54:	2b01      	cmp	r3, #1
 8010c56:	d03f      	beq.n	8010cd8 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8010c58:	e066      	b.n	8010d28 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d063      	beq.n	8010d2a <RegionEU868InitDefaults+0x122>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d05f      	beq.n	8010d2a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	4a30      	ldr	r2, [pc, #192]	; (8010d30 <RegionEU868InitDefaults+0x128>)
 8010c70:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	4a2f      	ldr	r2, [pc, #188]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010c78:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8010c7a:	4b2d      	ldr	r3, [pc, #180]	; (8010d30 <RegionEU868InitDefaults+0x128>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010c84:	2290      	movs	r2, #144	; 0x90
 8010c86:	4619      	mov	r1, r3
 8010c88:	f002 fa2d 	bl	80130e6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8010c8c:	4b29      	ldr	r3, [pc, #164]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4a29      	ldr	r2, [pc, #164]	; (8010d38 <RegionEU868InitDefaults+0x130>)
 8010c92:	ca07      	ldmia	r2, {r0, r1, r2}
 8010c94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8010c98:	4b26      	ldr	r3, [pc, #152]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	4a27      	ldr	r2, [pc, #156]	; (8010d3c <RegionEU868InitDefaults+0x134>)
 8010c9e:	330c      	adds	r3, #12
 8010ca0:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ca2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8010ca6:	4b23      	ldr	r3, [pc, #140]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	4a25      	ldr	r2, [pc, #148]	; (8010d40 <RegionEU868InitDefaults+0x138>)
 8010cac:	3318      	adds	r3, #24
 8010cae:	ca07      	ldmia	r2, {r0, r1, r2}
 8010cb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8010cb4:	4b1f      	ldr	r3, [pc, #124]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	2207      	movs	r2, #7
 8010cba:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010cbe:	4b1d      	ldr	r3, [pc, #116]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8010cc6:	4b1b      	ldr	r3, [pc, #108]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8010cce:	2201      	movs	r2, #1
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	f7ff f885 	bl	800fde0 <RegionCommonChanMaskCopy>
 8010cd6:	e028      	b.n	8010d2a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8010cd8:	4b16      	ldr	r3, [pc, #88]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8010ce0:	4b14      	ldr	r3, [pc, #80]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8010ce8:	4b12      	ldr	r3, [pc, #72]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	2200      	movs	r2, #0
 8010cee:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010cf0:	4b10      	ldr	r3, [pc, #64]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8010cf8:	4b0e      	ldr	r3, [pc, #56]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8010d00:	2201      	movs	r2, #1
 8010d02:	4619      	mov	r1, r3
 8010d04:	f7ff f86c 	bl	800fde0 <RegionCommonChanMaskCopy>
            break;
 8010d08:	e00f      	b.n	8010d2a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8010d0a:	4b0a      	ldr	r3, [pc, #40]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8010d12:	4b08      	ldr	r3, [pc, #32]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8010d1a:	4b06      	ldr	r3, [pc, #24]	; (8010d34 <RegionEU868InitDefaults+0x12c>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	430a      	orrs	r2, r1
 8010d20:	b292      	uxth	r2, r2
 8010d22:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8010d26:	e000      	b.n	8010d2a <RegionEU868InitDefaults+0x122>
            break;
 8010d28:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8010d2a:	37c0      	adds	r7, #192	; 0xc0
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}
 8010d30:	20000f58 	.word	0x20000f58
 8010d34:	20000f5c 	.word	0x20000f5c
 8010d38:	08017ec4 	.word	0x08017ec4
 8010d3c:	08017ed0 	.word	0x08017ed0
 8010d40:	08017edc 	.word	0x08017edc

08010d44 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8010d50:	78fb      	ldrb	r3, [r7, #3]
 8010d52:	2b0f      	cmp	r3, #15
 8010d54:	d86c      	bhi.n	8010e30 <RegionEU868Verify+0xec>
 8010d56:	a201      	add	r2, pc, #4	; (adr r2, 8010d5c <RegionEU868Verify+0x18>)
 8010d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d5c:	08010d9d 	.word	0x08010d9d
 8010d60:	08010e31 	.word	0x08010e31
 8010d64:	08010e31 	.word	0x08010e31
 8010d68:	08010e31 	.word	0x08010e31
 8010d6c:	08010e31 	.word	0x08010e31
 8010d70:	08010db5 	.word	0x08010db5
 8010d74:	08010dd3 	.word	0x08010dd3
 8010d78:	08010df1 	.word	0x08010df1
 8010d7c:	08010e31 	.word	0x08010e31
 8010d80:	08010e0f 	.word	0x08010e0f
 8010d84:	08010e0f 	.word	0x08010e0f
 8010d88:	08010e31 	.word	0x08010e31
 8010d8c:	08010e31 	.word	0x08010e31
 8010d90:	08010e31 	.word	0x08010e31
 8010d94:	08010e31 	.word	0x08010e31
 8010d98:	08010e2d 	.word	0x08010e2d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	f107 020f 	add.w	r2, r7, #15
 8010da8:	4611      	mov	r1, r2
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7ff fcec 	bl	8010788 <VerifyRfFreq>
 8010db0:	4603      	mov	r3, r0
 8010db2:	e03e      	b.n	8010e32 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f993 3000 	ldrsb.w	r3, [r3]
 8010dba:	2207      	movs	r2, #7
 8010dbc:	2100      	movs	r1, #0
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7fe ff91 	bl	800fce6 <RegionCommonValueInRange>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	bf14      	ite	ne
 8010dca:	2301      	movne	r3, #1
 8010dcc:	2300      	moveq	r3, #0
 8010dce:	b2db      	uxtb	r3, r3
 8010dd0:	e02f      	b.n	8010e32 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f993 3000 	ldrsb.w	r3, [r3]
 8010dd8:	2205      	movs	r2, #5
 8010dda:	2100      	movs	r1, #0
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f7fe ff82 	bl	800fce6 <RegionCommonValueInRange>
 8010de2:	4603      	mov	r3, r0
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	bf14      	ite	ne
 8010de8:	2301      	movne	r3, #1
 8010dea:	2300      	moveq	r3, #0
 8010dec:	b2db      	uxtb	r3, r3
 8010dee:	e020      	b.n	8010e32 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f993 3000 	ldrsb.w	r3, [r3]
 8010df6:	2207      	movs	r2, #7
 8010df8:	2100      	movs	r1, #0
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7fe ff73 	bl	800fce6 <RegionCommonValueInRange>
 8010e00:	4603      	mov	r3, r0
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	bf14      	ite	ne
 8010e06:	2301      	movne	r3, #1
 8010e08:	2300      	moveq	r3, #0
 8010e0a:	b2db      	uxtb	r3, r3
 8010e0c:	e011      	b.n	8010e32 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f993 3000 	ldrsb.w	r3, [r3]
 8010e14:	2207      	movs	r2, #7
 8010e16:	2100      	movs	r1, #0
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fe ff64 	bl	800fce6 <RegionCommonValueInRange>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	bf14      	ite	ne
 8010e24:	2301      	movne	r3, #1
 8010e26:	2300      	moveq	r3, #0
 8010e28:	b2db      	uxtb	r3, r3
 8010e2a:	e002      	b.n	8010e32 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	e000      	b.n	8010e32 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8010e30:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3710      	adds	r7, #16
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop

08010e3c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b08a      	sub	sp, #40	; 0x28
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8010e44:	2350      	movs	r3, #80	; 0x50
 8010e46:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	791b      	ldrb	r3, [r3, #4]
 8010e4e:	2b10      	cmp	r3, #16
 8010e50:	d162      	bne.n	8010f18 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	330f      	adds	r3, #15
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d15e      	bne.n	8010f1c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8010e5e:	2300      	movs	r3, #0
 8010e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e64:	2303      	movs	r3, #3
 8010e66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010e6a:	e050      	b.n	8010f0e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8010e6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010e70:	2b07      	cmp	r3, #7
 8010e72:	d824      	bhi.n	8010ebe <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681a      	ldr	r2, [r3, #0]
 8010e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e7c:	4413      	add	r3, r2
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8010e82:	69ba      	ldr	r2, [r7, #24]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	6819      	ldr	r1, [r3, #0]
 8010e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e8c:	3301      	adds	r3, #1
 8010e8e:	440b      	add	r3, r1
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	021b      	lsls	r3, r3, #8
 8010e94:	4313      	orrs	r3, r2
 8010e96:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8010e98:	69ba      	ldr	r2, [r7, #24]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6819      	ldr	r1, [r3, #0]
 8010e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ea2:	3302      	adds	r3, #2
 8010ea4:	440b      	add	r3, r1
 8010ea6:	781b      	ldrb	r3, [r3, #0]
 8010ea8:	041b      	lsls	r3, r3, #16
 8010eaa:	4313      	orrs	r3, r2
 8010eac:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	2264      	movs	r2, #100	; 0x64
 8010eb2:	fb02 f303 	mul.w	r3, r2, r3
 8010eb6:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	61fb      	str	r3, [r7, #28]
 8010ebc:	e006      	b.n	8010ecc <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8010ecc:	69bb      	ldr	r3, [r7, #24]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d00b      	beq.n	8010eea <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8010ed2:	f107 0318 	add.w	r3, r7, #24
 8010ed6:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8010ed8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010edc:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8010ede:	f107 0310 	add.w	r3, r7, #16
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f000 fd10 	bl	8011908 <RegionEU868ChannelAdd>
 8010ee8:	e007      	b.n	8010efa <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8010eea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010eee:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8010ef0:	f107 030c 	add.w	r3, r7, #12
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f000 fda9 	bl	8011a4c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8010efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010efe:	3303      	adds	r3, #3
 8010f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f08:	3301      	adds	r3, #1
 8010f0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010f0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f12:	2b0f      	cmp	r3, #15
 8010f14:	d9aa      	bls.n	8010e6c <RegionEU868ApplyCFList+0x30>
 8010f16:	e002      	b.n	8010f1e <RegionEU868ApplyCFList+0xe2>
        return;
 8010f18:	bf00      	nop
 8010f1a:	e000      	b.n	8010f1e <RegionEU868ApplyCFList+0xe2>
        return;
 8010f1c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8010f1e:	3728      	adds	r7, #40	; 0x28
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	791b      	ldrb	r3, [r3, #4]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d002      	beq.n	8010f3a <RegionEU868ChanMaskSet+0x16>
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	d00b      	beq.n	8010f50 <RegionEU868ChanMaskSet+0x2c>
 8010f38:	e015      	b.n	8010f66 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010f3a:	4b0e      	ldr	r3, [pc, #56]	; (8010f74 <RegionEU868ChanMaskSet+0x50>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	2201      	movs	r2, #1
 8010f48:	4619      	mov	r1, r3
 8010f4a:	f7fe ff49 	bl	800fde0 <RegionCommonChanMaskCopy>
            break;
 8010f4e:	e00c      	b.n	8010f6a <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010f50:	4b08      	ldr	r3, [pc, #32]	; (8010f74 <RegionEU868ChanMaskSet+0x50>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	4619      	mov	r1, r3
 8010f60:	f7fe ff3e 	bl	800fde0 <RegionCommonChanMaskCopy>
            break;
 8010f64:	e001      	b.n	8010f6a <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8010f66:	2300      	movs	r3, #0
 8010f68:	e000      	b.n	8010f6c <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8010f6a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3708      	adds	r7, #8
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	20000f5c 	.word	0x20000f5c

08010f78 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b088      	sub	sp, #32
 8010f7c:	af02      	add	r7, sp, #8
 8010f7e:	60ba      	str	r2, [r7, #8]
 8010f80:	607b      	str	r3, [r7, #4]
 8010f82:	4603      	mov	r3, r0
 8010f84:	73fb      	strb	r3, [r7, #15]
 8010f86:	460b      	mov	r3, r1
 8010f88:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8010f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f92:	2b07      	cmp	r3, #7
 8010f94:	bfa8      	it	ge
 8010f96:	2307      	movge	r3, #7
 8010f98:	b25a      	sxtb	r2, r3
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010fa4:	491e      	ldr	r1, [pc, #120]	; (8011020 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7ff fbaa 	bl	8010700 <RegionCommonGetBandwidth>
 8010fac:	4603      	mov	r3, r0
 8010fae:	b2da      	uxtb	r2, r3
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010fba:	2b07      	cmp	r3, #7
 8010fbc:	d10a      	bne.n	8010fd4 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	4b17      	ldr	r3, [pc, #92]	; (8011024 <RegionEU868ComputeRxWindowParameters+0xac>)
 8010fc8:	5c9b      	ldrb	r3, [r3, r2]
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7ff f92c 	bl	8010228 <RegionCommonComputeSymbolTimeFsk>
 8010fd0:	6178      	str	r0, [r7, #20]
 8010fd2:	e011      	b.n	8010ff8 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010fda:	461a      	mov	r2, r3
 8010fdc:	4b11      	ldr	r3, [pc, #68]	; (8011024 <RegionEU868ComputeRxWindowParameters+0xac>)
 8010fde:	5c9a      	ldrb	r2, [r3, r2]
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	4b0d      	ldr	r3, [pc, #52]	; (8011020 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8010fea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010fee:	4619      	mov	r1, r3
 8010ff0:	4610      	mov	r0, r2
 8010ff2:	f7ff f903 	bl	80101fc <RegionCommonComputeSymbolTimeLoRa>
 8010ff6:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8010ff8:	4b0b      	ldr	r3, [pc, #44]	; (8011028 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8010ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ffc:	4798      	blx	r3
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	3308      	adds	r3, #8
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	320c      	adds	r2, #12
 8011006:	7bb9      	ldrb	r1, [r7, #14]
 8011008:	9201      	str	r2, [sp, #4]
 801100a:	9300      	str	r3, [sp, #0]
 801100c:	4603      	mov	r3, r0
 801100e:	68ba      	ldr	r2, [r7, #8]
 8011010:	6978      	ldr	r0, [r7, #20]
 8011012:	f7ff f919 	bl	8010248 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8011016:	bf00      	nop
 8011018:	3718      	adds	r7, #24
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	0801832c 	.word	0x0801832c
 8011024:	08018324 	.word	0x08018324
 8011028:	080183e0 	.word	0x080183e0

0801102c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801102c:	b5b0      	push	{r4, r5, r7, lr}
 801102e:	b090      	sub	sp, #64	; 0x40
 8011030:	af0a      	add	r7, sp, #40	; 0x28
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	785b      	ldrb	r3, [r3, #1]
 801103a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801103c:	2300      	movs	r3, #0
 801103e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8011040:	2300      	movs	r3, #0
 8011042:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	685b      	ldr	r3, [r3, #4]
 8011048:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801104a:	4b5a      	ldr	r3, [pc, #360]	; (80111b4 <RegionEU868RxConfig+0x188>)
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	4798      	blx	r3
 8011050:	4603      	mov	r3, r0
 8011052:	2b00      	cmp	r3, #0
 8011054:	d001      	beq.n	801105a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8011056:	2300      	movs	r3, #0
 8011058:	e0a8      	b.n	80111ac <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	7cdb      	ldrb	r3, [r3, #19]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d126      	bne.n	80110b0 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8011062:	4b55      	ldr	r3, [pc, #340]	; (80111b8 <RegionEU868RxConfig+0x18c>)
 8011064:	681a      	ldr	r2, [r3, #0]
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	4619      	mov	r1, r3
 801106c:	460b      	mov	r3, r1
 801106e:	005b      	lsls	r3, r3, #1
 8011070:	440b      	add	r3, r1
 8011072:	009b      	lsls	r3, r3, #2
 8011074:	4413      	add	r3, r2
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801107a:	4b4f      	ldr	r3, [pc, #316]	; (80111b8 <RegionEU868RxConfig+0x18c>)
 801107c:	681a      	ldr	r2, [r3, #0]
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	4619      	mov	r1, r3
 8011084:	460b      	mov	r3, r1
 8011086:	005b      	lsls	r3, r3, #1
 8011088:	440b      	add	r3, r1
 801108a:	009b      	lsls	r3, r3, #2
 801108c:	4413      	add	r3, r2
 801108e:	3304      	adds	r3, #4
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d00c      	beq.n	80110b0 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8011096:	4b48      	ldr	r3, [pc, #288]	; (80111b8 <RegionEU868RxConfig+0x18c>)
 8011098:	681a      	ldr	r2, [r3, #0]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	4619      	mov	r1, r3
 80110a0:	460b      	mov	r3, r1
 80110a2:	005b      	lsls	r3, r3, #1
 80110a4:	440b      	add	r3, r1
 80110a6:	009b      	lsls	r3, r3, #2
 80110a8:	4413      	add	r3, r2
 80110aa:	3304      	adds	r3, #4
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80110b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110b4:	4a41      	ldr	r2, [pc, #260]	; (80111bc <RegionEU868RxConfig+0x190>)
 80110b6:	5cd3      	ldrb	r3, [r2, r3]
 80110b8:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80110ba:	4b3e      	ldr	r3, [pc, #248]	; (80111b4 <RegionEU868RxConfig+0x188>)
 80110bc:	68db      	ldr	r3, [r3, #12]
 80110be:	6938      	ldr	r0, [r7, #16]
 80110c0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80110c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110c6:	2b07      	cmp	r3, #7
 80110c8:	d128      	bne.n	801111c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80110ca:	2300      	movs	r3, #0
 80110cc:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80110ce:	4b39      	ldr	r3, [pc, #228]	; (80111b4 <RegionEU868RxConfig+0x188>)
 80110d0:	699c      	ldr	r4, [r3, #24]
 80110d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80110d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80110da:	fb02 f303 	mul.w	r3, r2, r3
 80110de:	4619      	mov	r1, r3
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	689b      	ldr	r3, [r3, #8]
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	687a      	ldr	r2, [r7, #4]
 80110e8:	7c92      	ldrb	r2, [r2, #18]
 80110ea:	7df8      	ldrb	r0, [r7, #23]
 80110ec:	9209      	str	r2, [sp, #36]	; 0x24
 80110ee:	2200      	movs	r2, #0
 80110f0:	9208      	str	r2, [sp, #32]
 80110f2:	2200      	movs	r2, #0
 80110f4:	9207      	str	r2, [sp, #28]
 80110f6:	2200      	movs	r2, #0
 80110f8:	9206      	str	r2, [sp, #24]
 80110fa:	2201      	movs	r2, #1
 80110fc:	9205      	str	r2, [sp, #20]
 80110fe:	2200      	movs	r2, #0
 8011100:	9204      	str	r2, [sp, #16]
 8011102:	2200      	movs	r2, #0
 8011104:	9203      	str	r2, [sp, #12]
 8011106:	9302      	str	r3, [sp, #8]
 8011108:	2305      	movs	r3, #5
 801110a:	9301      	str	r3, [sp, #4]
 801110c:	4b2c      	ldr	r3, [pc, #176]	; (80111c0 <RegionEU868RxConfig+0x194>)
 801110e:	9300      	str	r3, [sp, #0]
 8011110:	2300      	movs	r3, #0
 8011112:	460a      	mov	r2, r1
 8011114:	f24c 3150 	movw	r1, #50000	; 0xc350
 8011118:	47a0      	blx	r4
 801111a:	e024      	b.n	8011166 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801111c:	2301      	movs	r3, #1
 801111e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8011120:	4b24      	ldr	r3, [pc, #144]	; (80111b4 <RegionEU868RxConfig+0x188>)
 8011122:	699c      	ldr	r4, [r3, #24]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	789b      	ldrb	r3, [r3, #2]
 8011128:	461d      	mov	r5, r3
 801112a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	689b      	ldr	r3, [r3, #8]
 8011132:	b29b      	uxth	r3, r3
 8011134:	687a      	ldr	r2, [r7, #4]
 8011136:	7c92      	ldrb	r2, [r2, #18]
 8011138:	7df8      	ldrb	r0, [r7, #23]
 801113a:	9209      	str	r2, [sp, #36]	; 0x24
 801113c:	2201      	movs	r2, #1
 801113e:	9208      	str	r2, [sp, #32]
 8011140:	2200      	movs	r2, #0
 8011142:	9207      	str	r2, [sp, #28]
 8011144:	2200      	movs	r2, #0
 8011146:	9206      	str	r2, [sp, #24]
 8011148:	2200      	movs	r2, #0
 801114a:	9205      	str	r2, [sp, #20]
 801114c:	2200      	movs	r2, #0
 801114e:	9204      	str	r2, [sp, #16]
 8011150:	2200      	movs	r2, #0
 8011152:	9203      	str	r2, [sp, #12]
 8011154:	9302      	str	r3, [sp, #8]
 8011156:	2308      	movs	r3, #8
 8011158:	9301      	str	r3, [sp, #4]
 801115a:	2300      	movs	r3, #0
 801115c:	9300      	str	r3, [sp, #0]
 801115e:	2301      	movs	r3, #1
 8011160:	460a      	mov	r2, r1
 8011162:	4629      	mov	r1, r5
 8011164:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	7c5b      	ldrb	r3, [r3, #17]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d005      	beq.n	801117a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011172:	4a14      	ldr	r2, [pc, #80]	; (80111c4 <RegionEU868RxConfig+0x198>)
 8011174:	5cd3      	ldrb	r3, [r2, r3]
 8011176:	75bb      	strb	r3, [r7, #22]
 8011178:	e004      	b.n	8011184 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801117e:	4a12      	ldr	r2, [pc, #72]	; (80111c8 <RegionEU868RxConfig+0x19c>)
 8011180:	5cd3      	ldrb	r3, [r2, r3]
 8011182:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8011184:	4b0b      	ldr	r3, [pc, #44]	; (80111b4 <RegionEU868RxConfig+0x188>)
 8011186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011188:	7dba      	ldrb	r2, [r7, #22]
 801118a:	320d      	adds	r2, #13
 801118c:	b2d1      	uxtb	r1, r2
 801118e:	7dfa      	ldrb	r2, [r7, #23]
 8011190:	4610      	mov	r0, r2
 8011192:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	7cdb      	ldrb	r3, [r3, #19]
 8011198:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801119c:	6939      	ldr	r1, [r7, #16]
 801119e:	4618      	mov	r0, r3
 80111a0:	f7ff facc 	bl	801073c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	7bfa      	ldrb	r2, [r7, #15]
 80111a8:	701a      	strb	r2, [r3, #0]
    return true;
 80111aa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	3718      	adds	r7, #24
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bdb0      	pop	{r4, r5, r7, pc}
 80111b4:	080183e0 	.word	0x080183e0
 80111b8:	20000f5c 	.word	0x20000f5c
 80111bc:	08018324 	.word	0x08018324
 80111c0:	00014585 	.word	0x00014585
 80111c4:	08018354 	.word	0x08018354
 80111c8:	0801834c 	.word	0x0801834c

080111cc <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80111cc:	b590      	push	{r4, r7, lr}
 80111ce:	b093      	sub	sp, #76	; 0x4c
 80111d0:	af0a      	add	r7, sp, #40	; 0x28
 80111d2:	60f8      	str	r0, [r7, #12]
 80111d4:	60b9      	str	r1, [r7, #8]
 80111d6:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80111de:	461a      	mov	r2, r3
 80111e0:	4b5d      	ldr	r3, [pc, #372]	; (8011358 <RegionEU868TxConfig+0x18c>)
 80111e2:	5c9b      	ldrb	r3, [r3, r2]
 80111e4:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80111ec:	4b5b      	ldr	r3, [pc, #364]	; (801135c <RegionEU868TxConfig+0x190>)
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	4b5b      	ldr	r3, [pc, #364]	; (8011360 <RegionEU868TxConfig+0x194>)
 80111f2:	6819      	ldr	r1, [r3, #0]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	461c      	mov	r4, r3
 80111fa:	4623      	mov	r3, r4
 80111fc:	005b      	lsls	r3, r3, #1
 80111fe:	4423      	add	r3, r4
 8011200:	009b      	lsls	r3, r3, #2
 8011202:	440b      	add	r3, r1
 8011204:	3309      	adds	r3, #9
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	4619      	mov	r1, r3
 801120a:	460b      	mov	r3, r1
 801120c:	005b      	lsls	r3, r3, #1
 801120e:	440b      	add	r3, r1
 8011210:	00db      	lsls	r3, r3, #3
 8011212:	4413      	add	r3, r2
 8011214:	3302      	adds	r3, #2
 8011216:	f993 3000 	ldrsb.w	r3, [r3]
 801121a:	4619      	mov	r1, r3
 801121c:	f7ff fa5b 	bl	80106d6 <RegionCommonLimitTxPower>
 8011220:	4603      	mov	r3, r0
 8011222:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801122a:	494e      	ldr	r1, [pc, #312]	; (8011364 <RegionEU868TxConfig+0x198>)
 801122c:	4618      	mov	r0, r3
 801122e:	f7ff fa67 	bl	8010700 <RegionCommonGetBandwidth>
 8011232:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8011234:	2300      	movs	r3, #0
 8011236:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	6859      	ldr	r1, [r3, #4]
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	689a      	ldr	r2, [r3, #8]
 8011240:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011244:	4618      	mov	r0, r3
 8011246:	f7ff f8b7 	bl	80103b8 <RegionCommonComputeTxPower>
 801124a:	4603      	mov	r3, r0
 801124c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801124e:	4b46      	ldr	r3, [pc, #280]	; (8011368 <RegionEU868TxConfig+0x19c>)
 8011250:	68da      	ldr	r2, [r3, #12]
 8011252:	4b43      	ldr	r3, [pc, #268]	; (8011360 <RegionEU868TxConfig+0x194>)
 8011254:	6819      	ldr	r1, [r3, #0]
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	781b      	ldrb	r3, [r3, #0]
 801125a:	4618      	mov	r0, r3
 801125c:	4603      	mov	r3, r0
 801125e:	005b      	lsls	r3, r3, #1
 8011260:	4403      	add	r3, r0
 8011262:	009b      	lsls	r3, r3, #2
 8011264:	440b      	add	r3, r1
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	4618      	mov	r0, r3
 801126a:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011272:	2b07      	cmp	r3, #7
 8011274:	d124      	bne.n	80112c0 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8011276:	2300      	movs	r3, #0
 8011278:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801127a:	4b3b      	ldr	r3, [pc, #236]	; (8011368 <RegionEU868TxConfig+0x19c>)
 801127c:	69dc      	ldr	r4, [r3, #28]
 801127e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011282:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011286:	fb02 f303 	mul.w	r3, r2, r3
 801128a:	461a      	mov	r2, r3
 801128c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8011290:	7ff8      	ldrb	r0, [r7, #31]
 8011292:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8011296:	9308      	str	r3, [sp, #32]
 8011298:	2300      	movs	r3, #0
 801129a:	9307      	str	r3, [sp, #28]
 801129c:	2300      	movs	r3, #0
 801129e:	9306      	str	r3, [sp, #24]
 80112a0:	2300      	movs	r3, #0
 80112a2:	9305      	str	r3, [sp, #20]
 80112a4:	2301      	movs	r3, #1
 80112a6:	9304      	str	r3, [sp, #16]
 80112a8:	2300      	movs	r3, #0
 80112aa:	9303      	str	r3, [sp, #12]
 80112ac:	2305      	movs	r3, #5
 80112ae:	9302      	str	r3, [sp, #8]
 80112b0:	2300      	movs	r3, #0
 80112b2:	9301      	str	r3, [sp, #4]
 80112b4:	9200      	str	r2, [sp, #0]
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80112bc:	47a0      	blx	r4
 80112be:	e01d      	b.n	80112fc <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80112c0:	2301      	movs	r3, #1
 80112c2:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80112c4:	4b28      	ldr	r3, [pc, #160]	; (8011368 <RegionEU868TxConfig+0x19c>)
 80112c6:	69dc      	ldr	r4, [r3, #28]
 80112c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80112cc:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80112d0:	7ff8      	ldrb	r0, [r7, #31]
 80112d2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80112d6:	9208      	str	r2, [sp, #32]
 80112d8:	2200      	movs	r2, #0
 80112da:	9207      	str	r2, [sp, #28]
 80112dc:	2200      	movs	r2, #0
 80112de:	9206      	str	r2, [sp, #24]
 80112e0:	2200      	movs	r2, #0
 80112e2:	9205      	str	r2, [sp, #20]
 80112e4:	2201      	movs	r2, #1
 80112e6:	9204      	str	r2, [sp, #16]
 80112e8:	2200      	movs	r2, #0
 80112ea:	9203      	str	r2, [sp, #12]
 80112ec:	2208      	movs	r2, #8
 80112ee:	9202      	str	r2, [sp, #8]
 80112f0:	2201      	movs	r2, #1
 80112f2:	9201      	str	r2, [sp, #4]
 80112f4:	9300      	str	r3, [sp, #0]
 80112f6:	69bb      	ldr	r3, [r7, #24]
 80112f8:	2200      	movs	r2, #0
 80112fa:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80112fc:	4b18      	ldr	r3, [pc, #96]	; (8011360 <RegionEU868TxConfig+0x194>)
 80112fe:	681a      	ldr	r2, [r3, #0]
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	4619      	mov	r1, r3
 8011306:	460b      	mov	r3, r1
 8011308:	005b      	lsls	r3, r3, #1
 801130a:	440b      	add	r3, r1
 801130c:	009b      	lsls	r3, r3, #2
 801130e:	4413      	add	r3, r2
 8011310:	681a      	ldr	r2, [r3, #0]
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011318:	4619      	mov	r1, r3
 801131a:	4610      	mov	r0, r2
 801131c:	f7ff fa28 	bl	8010770 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	899b      	ldrh	r3, [r3, #12]
 801132a:	4619      	mov	r1, r3
 801132c:	4610      	mov	r0, r2
 801132e:	f7ff faa1 	bl	8010874 <GetTimeOnAir>
 8011332:	4602      	mov	r2, r0
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8011338:	4b0b      	ldr	r3, [pc, #44]	; (8011368 <RegionEU868TxConfig+0x19c>)
 801133a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801133c:	68fa      	ldr	r2, [r7, #12]
 801133e:	8992      	ldrh	r2, [r2, #12]
 8011340:	b2d1      	uxtb	r1, r2
 8011342:	7ffa      	ldrb	r2, [r7, #31]
 8011344:	4610      	mov	r0, r2
 8011346:	4798      	blx	r3

    *txPower = txPowerLimited;
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	7f7a      	ldrb	r2, [r7, #29]
 801134c:	701a      	strb	r2, [r3, #0]
    return true;
 801134e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8011350:	4618      	mov	r0, r3
 8011352:	3724      	adds	r7, #36	; 0x24
 8011354:	46bd      	mov	sp, r7
 8011356:	bd90      	pop	{r4, r7, pc}
 8011358:	08018324 	.word	0x08018324
 801135c:	20000f58 	.word	0x20000f58
 8011360:	20000f5c 	.word	0x20000f5c
 8011364:	0801832c 	.word	0x0801832c
 8011368:	080183e0 	.word	0x080183e0

0801136c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801136c:	b590      	push	{r4, r7, lr}
 801136e:	b093      	sub	sp, #76	; 0x4c
 8011370:	af00      	add	r7, sp, #0
 8011372:	60f8      	str	r0, [r7, #12]
 8011374:	60b9      	str	r1, [r7, #8]
 8011376:	607a      	str	r2, [r7, #4]
 8011378:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801137a:	2307      	movs	r3, #7
 801137c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8011380:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011384:	2200      	movs	r2, #0
 8011386:	601a      	str	r2, [r3, #0]
 8011388:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801138a:	2300      	movs	r3, #0
 801138c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8011390:	2300      	movs	r3, #0
 8011392:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8011396:	2300      	movs	r3, #0
 8011398:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801139a:	e085      	b.n	80114a8 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	685a      	ldr	r2, [r3, #4]
 80113a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80113a4:	4413      	add	r3, r2
 80113a6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80113aa:	4611      	mov	r1, r2
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7fe fe5b 	bl	8010068 <RegionCommonParseLinkAdrReq>
 80113b2:	4603      	mov	r3, r0
 80113b4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80113b8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d07b      	beq.n	80114b8 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80113c0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80113c4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80113c8:	4413      	add	r3, r2
 80113ca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80113ce:	2307      	movs	r3, #7
 80113d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80113d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80113d8:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80113da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d109      	bne.n	80113f6 <RegionEU868LinkAdrReq+0x8a>
 80113e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d106      	bne.n	80113f6 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80113e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80113ec:	f023 0301 	bic.w	r3, r3, #1
 80113f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80113f4:	e058      	b.n	80114a8 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80113f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d003      	beq.n	8011406 <RegionEU868LinkAdrReq+0x9a>
 80113fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011402:	2b05      	cmp	r3, #5
 8011404:	d903      	bls.n	801140e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8011406:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801140a:	2b06      	cmp	r3, #6
 801140c:	d906      	bls.n	801141c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801140e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011412:	f023 0301 	bic.w	r3, r3, #1
 8011416:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801141a:	e045      	b.n	80114a8 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801141c:	2300      	movs	r3, #0
 801141e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8011422:	e03d      	b.n	80114a0 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8011424:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011428:	2b06      	cmp	r3, #6
 801142a:	d118      	bne.n	801145e <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801142c:	4b5f      	ldr	r3, [pc, #380]	; (80115ac <RegionEU868LinkAdrReq+0x240>)
 801142e:	6819      	ldr	r1, [r3, #0]
 8011430:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8011434:	4613      	mov	r3, r2
 8011436:	005b      	lsls	r3, r3, #1
 8011438:	4413      	add	r3, r2
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	440b      	add	r3, r1
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d028      	beq.n	8011496 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8011444:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8011448:	2201      	movs	r2, #1
 801144a:	fa02 f303 	lsl.w	r3, r2, r3
 801144e:	b21a      	sxth	r2, r3
 8011450:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011452:	b21b      	sxth	r3, r3
 8011454:	4313      	orrs	r3, r2
 8011456:	b21b      	sxth	r3, r3
 8011458:	b29b      	uxth	r3, r3
 801145a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801145c:	e01b      	b.n	8011496 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801145e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011460:	461a      	mov	r2, r3
 8011462:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8011466:	fa42 f303 	asr.w	r3, r2, r3
 801146a:	f003 0301 	and.w	r3, r3, #1
 801146e:	2b00      	cmp	r3, #0
 8011470:	d011      	beq.n	8011496 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8011472:	4b4e      	ldr	r3, [pc, #312]	; (80115ac <RegionEU868LinkAdrReq+0x240>)
 8011474:	6819      	ldr	r1, [r3, #0]
 8011476:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801147a:	4613      	mov	r3, r2
 801147c:	005b      	lsls	r3, r3, #1
 801147e:	4413      	add	r3, r2
 8011480:	009b      	lsls	r3, r3, #2
 8011482:	440b      	add	r3, r1
 8011484:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8011486:	2b00      	cmp	r3, #0
 8011488:	d105      	bne.n	8011496 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801148a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801148e:	f023 0301 	bic.w	r3, r3, #1
 8011492:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8011496:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801149a:	3301      	adds	r3, #1
 801149c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80114a0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80114a4:	2b0f      	cmp	r3, #15
 80114a6:	d9bd      	bls.n	8011424 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	7a1b      	ldrb	r3, [r3, #8]
 80114ac:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80114b0:	429a      	cmp	r2, r3
 80114b2:	f4ff af73 	bcc.w	801139c <RegionEU868LinkAdrReq+0x30>
 80114b6:	e000      	b.n	80114ba <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80114b8:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80114ba:	2302      	movs	r3, #2
 80114bc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	7a5b      	ldrb	r3, [r3, #9]
 80114c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80114c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7ff fa21 	bl	8010914 <RegionEU868GetPhyParam>
 80114d2:	4603      	mov	r3, r0
 80114d4:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80114d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80114da:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	7a9b      	ldrb	r3, [r3, #10]
 80114e0:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80114e2:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80114e6:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80114e8:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80114ec:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80114ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80114f2:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80114fa:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011502:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	7b5b      	ldrb	r3, [r3, #13]
 8011508:	b25b      	sxtb	r3, r3
 801150a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801150c:	2310      	movs	r3, #16
 801150e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8011510:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8011514:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8011516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011518:	b25b      	sxtb	r3, r3
 801151a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801151e:	2307      	movs	r3, #7
 8011520:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8011524:	4b21      	ldr	r3, [pc, #132]	; (80115ac <RegionEU868LinkAdrReq+0x240>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801152a:	2307      	movs	r3, #7
 801152c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8011530:	2300      	movs	r3, #0
 8011532:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801153c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8011540:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011544:	1c9a      	adds	r2, r3, #2
 8011546:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801154a:	1c59      	adds	r1, r3, #1
 801154c:	f107 0010 	add.w	r0, r7, #16
 8011550:	4623      	mov	r3, r4
 8011552:	f7fe fdda 	bl	801010a <RegionCommonLinkAdrReqVerifyParams>
 8011556:	4603      	mov	r3, r0
 8011558:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801155c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011560:	2b07      	cmp	r3, #7
 8011562:	d10d      	bne.n	8011580 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8011564:	4b11      	ldr	r3, [pc, #68]	; (80115ac <RegionEU868LinkAdrReq+0x240>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801156c:	220c      	movs	r2, #12
 801156e:	2100      	movs	r1, #0
 8011570:	4618      	mov	r0, r3
 8011572:	f001 fdf3 	bl	801315c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8011576:	4b0d      	ldr	r3, [pc, #52]	; (80115ac <RegionEU868LinkAdrReq+0x240>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801157c:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8011580:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8011588:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8011590:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8011598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801159a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801159e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80115a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	374c      	adds	r7, #76	; 0x4c
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd90      	pop	{r4, r7, pc}
 80115ac:	20000f5c 	.word	0x20000f5c

080115b0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b084      	sub	sp, #16
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80115b8:	2307      	movs	r3, #7
 80115ba:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80115bc:	2300      	movs	r3, #0
 80115be:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	f107 020e 	add.w	r2, r7, #14
 80115c8:	4611      	mov	r1, r2
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7ff f8dc 	bl	8010788 <VerifyRfFreq>
 80115d0:	4603      	mov	r3, r0
 80115d2:	f083 0301 	eor.w	r3, r3, #1
 80115d6:	b2db      	uxtb	r3, r3
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d003      	beq.n	80115e4 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80115dc:	7bfb      	ldrb	r3, [r7, #15]
 80115de:	f023 0301 	bic.w	r3, r3, #1
 80115e2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f993 3000 	ldrsb.w	r3, [r3]
 80115ea:	2207      	movs	r2, #7
 80115ec:	2100      	movs	r1, #0
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7fe fb79 	bl	800fce6 <RegionCommonValueInRange>
 80115f4:	4603      	mov	r3, r0
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d103      	bne.n	8011602 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80115fa:	7bfb      	ldrb	r3, [r7, #15]
 80115fc:	f023 0302 	bic.w	r3, r3, #2
 8011600:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011608:	2205      	movs	r2, #5
 801160a:	2100      	movs	r1, #0
 801160c:	4618      	mov	r0, r3
 801160e:	f7fe fb6a 	bl	800fce6 <RegionCommonValueInRange>
 8011612:	4603      	mov	r3, r0
 8011614:	2b00      	cmp	r3, #0
 8011616:	d103      	bne.n	8011620 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8011618:	7bfb      	ldrb	r3, [r7, #15]
 801161a:	f023 0304 	bic.w	r3, r3, #4
 801161e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8011620:	7bfb      	ldrb	r3, [r7, #15]
}
 8011622:	4618      	mov	r0, r3
 8011624:	3710      	adds	r7, #16
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
	...

0801162c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b086      	sub	sp, #24
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8011634:	2303      	movs	r3, #3
 8011636:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d114      	bne.n	801166c <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011648:	b2db      	uxtb	r3, r3
 801164a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801164c:	f107 0308 	add.w	r3, r7, #8
 8011650:	4618      	mov	r0, r3
 8011652:	f000 f9fb 	bl	8011a4c <RegionEU868ChannelsRemove>
 8011656:	4603      	mov	r3, r0
 8011658:	f083 0301 	eor.w	r3, r3, #1
 801165c:	b2db      	uxtb	r3, r3
 801165e:	2b00      	cmp	r3, #0
 8011660:	d03b      	beq.n	80116da <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8011662:	7dfb      	ldrb	r3, [r7, #23]
 8011664:	f023 0303 	bic.w	r3, r3, #3
 8011668:	75fb      	strb	r3, [r7, #23]
 801166a:	e036      	b.n	80116da <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011678:	b2db      	uxtb	r3, r3
 801167a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801167c:	f107 030c 	add.w	r3, r7, #12
 8011680:	4618      	mov	r0, r3
 8011682:	f000 f941 	bl	8011908 <RegionEU868ChannelAdd>
 8011686:	4603      	mov	r3, r0
 8011688:	2b06      	cmp	r3, #6
 801168a:	d820      	bhi.n	80116ce <RegionEU868NewChannelReq+0xa2>
 801168c:	a201      	add	r2, pc, #4	; (adr r2, 8011694 <RegionEU868NewChannelReq+0x68>)
 801168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011692:	bf00      	nop
 8011694:	080116d9 	.word	0x080116d9
 8011698:	080116cf 	.word	0x080116cf
 801169c:	080116cf 	.word	0x080116cf
 80116a0:	080116cf 	.word	0x080116cf
 80116a4:	080116b1 	.word	0x080116b1
 80116a8:	080116bb 	.word	0x080116bb
 80116ac:	080116c5 	.word	0x080116c5
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80116b0:	7dfb      	ldrb	r3, [r7, #23]
 80116b2:	f023 0301 	bic.w	r3, r3, #1
 80116b6:	75fb      	strb	r3, [r7, #23]
                break;
 80116b8:	e00f      	b.n	80116da <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80116ba:	7dfb      	ldrb	r3, [r7, #23]
 80116bc:	f023 0302 	bic.w	r3, r3, #2
 80116c0:	75fb      	strb	r3, [r7, #23]
                break;
 80116c2:	e00a      	b.n	80116da <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80116c4:	7dfb      	ldrb	r3, [r7, #23]
 80116c6:	f023 0303 	bic.w	r3, r3, #3
 80116ca:	75fb      	strb	r3, [r7, #23]
                break;
 80116cc:	e005      	b.n	80116da <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80116ce:	7dfb      	ldrb	r3, [r7, #23]
 80116d0:	f023 0303 	bic.w	r3, r3, #3
 80116d4:	75fb      	strb	r3, [r7, #23]
                break;
 80116d6:	e000      	b.n	80116da <RegionEU868NewChannelReq+0xae>
                break;
 80116d8:	bf00      	nop
            }
        }
    }

    return status;
 80116da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3718      	adds	r7, #24
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop

080116e8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80116e8:	b480      	push	{r7}
 80116ea:	b083      	sub	sp, #12
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80116f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80116f4:	4618      	mov	r0, r3
 80116f6:	370c      	adds	r7, #12
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bc80      	pop	{r7}
 80116fc:	4770      	bx	lr
	...

08011700 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b084      	sub	sp, #16
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8011708:	2303      	movs	r3, #3
 801170a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801170c:	2300      	movs	r3, #0
 801170e:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	f107 020e 	add.w	r2, r7, #14
 8011718:	4611      	mov	r1, r2
 801171a:	4618      	mov	r0, r3
 801171c:	f7ff f834 	bl	8010788 <VerifyRfFreq>
 8011720:	4603      	mov	r3, r0
 8011722:	f083 0301 	eor.w	r3, r3, #1
 8011726:	b2db      	uxtb	r3, r3
 8011728:	2b00      	cmp	r3, #0
 801172a:	d003      	beq.n	8011734 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 801172c:	7bfb      	ldrb	r3, [r7, #15]
 801172e:	f023 0301 	bic.w	r3, r3, #1
 8011732:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8011734:	4b13      	ldr	r3, [pc, #76]	; (8011784 <RegionEU868DlChannelReq+0x84>)
 8011736:	681a      	ldr	r2, [r3, #0]
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	4619      	mov	r1, r3
 801173e:	460b      	mov	r3, r1
 8011740:	005b      	lsls	r3, r3, #1
 8011742:	440b      	add	r3, r1
 8011744:	009b      	lsls	r3, r3, #2
 8011746:	4413      	add	r3, r2
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d103      	bne.n	8011756 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 801174e:	7bfb      	ldrb	r3, [r7, #15]
 8011750:	f023 0302 	bic.w	r3, r3, #2
 8011754:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8011756:	7bfb      	ldrb	r3, [r7, #15]
 8011758:	2b03      	cmp	r3, #3
 801175a:	d10d      	bne.n	8011778 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801175c:	4b09      	ldr	r3, [pc, #36]	; (8011784 <RegionEU868DlChannelReq+0x84>)
 801175e:	6819      	ldr	r1, [r3, #0]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	781b      	ldrb	r3, [r3, #0]
 8011764:	4618      	mov	r0, r3
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	685a      	ldr	r2, [r3, #4]
 801176a:	4603      	mov	r3, r0
 801176c:	005b      	lsls	r3, r3, #1
 801176e:	4403      	add	r3, r0
 8011770:	009b      	lsls	r3, r3, #2
 8011772:	440b      	add	r3, r1
 8011774:	3304      	adds	r3, #4
 8011776:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8011778:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801177c:	4618      	mov	r0, r3
 801177e:	3710      	adds	r7, #16
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}
 8011784:	20000f5c 	.word	0x20000f5c

08011788 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8011788:	b480      	push	{r7}
 801178a:	b083      	sub	sp, #12
 801178c:	af00      	add	r7, sp, #0
 801178e:	4603      	mov	r3, r0
 8011790:	460a      	mov	r2, r1
 8011792:	71fb      	strb	r3, [r7, #7]
 8011794:	4613      	mov	r3, r2
 8011796:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8011798:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801179c:	4618      	mov	r0, r3
 801179e:	370c      	adds	r7, #12
 80117a0:	46bd      	mov	sp, r7
 80117a2:	bc80      	pop	{r7}
 80117a4:	4770      	bx	lr
	...

080117a8 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b09a      	sub	sp, #104	; 0x68
 80117ac:	af02      	add	r7, sp, #8
 80117ae:	60f8      	str	r0, [r7, #12]
 80117b0:	60b9      	str	r1, [r7, #8]
 80117b2:	607a      	str	r2, [r7, #4]
 80117b4:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80117b6:	2300      	movs	r3, #0
 80117b8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80117bc:	2300      	movs	r3, #0
 80117be:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80117c2:	2300      	movs	r3, #0
 80117c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80117ca:	2200      	movs	r2, #0
 80117cc:	601a      	str	r2, [r3, #0]
 80117ce:	605a      	str	r2, [r3, #4]
 80117d0:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80117d2:	230c      	movs	r3, #12
 80117d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80117d8:	2307      	movs	r3, #7
 80117da:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80117dc:	4b48      	ldr	r3, [pc, #288]	; (8011900 <RegionEU868NextChannel+0x158>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80117e4:	2201      	movs	r2, #1
 80117e6:	2100      	movs	r1, #0
 80117e8:	4618      	mov	r0, r3
 80117ea:	f7fe facd 	bl	800fd88 <RegionCommonCountChannels>
 80117ee:	4603      	mov	r3, r0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d10a      	bne.n	801180a <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80117f4:	4b42      	ldr	r3, [pc, #264]	; (8011900 <RegionEU868NextChannel+0x158>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80117fc:	4b40      	ldr	r3, [pc, #256]	; (8011900 <RegionEU868NextChannel+0x158>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f042 0207 	orr.w	r2, r2, #7
 8011804:	b292      	uxth	r2, r2
 8011806:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	7a5b      	ldrb	r3, [r3, #9]
 801180e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011816:	b2db      	uxtb	r3, r3
 8011818:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801181a:	4b39      	ldr	r3, [pc, #228]	; (8011900 <RegionEU868NextChannel+0x158>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8011822:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8011824:	4b36      	ldr	r3, [pc, #216]	; (8011900 <RegionEU868NextChannel+0x158>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801182a:	4b36      	ldr	r3, [pc, #216]	; (8011904 <RegionEU868NextChannel+0x15c>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8011830:	2310      	movs	r3, #16
 8011832:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8011834:	f107 0312 	add.w	r3, r7, #18
 8011838:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	7a9b      	ldrb	r3, [r3, #10]
 801184a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801184e:	2306      	movs	r3, #6
 8011850:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8011854:	68fa      	ldr	r2, [r7, #12]
 8011856:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801185a:	320c      	adds	r2, #12
 801185c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011860:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	7d1b      	ldrb	r3, [r3, #20]
 8011868:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	8adb      	ldrh	r3, [r3, #22]
 8011876:	4619      	mov	r1, r3
 8011878:	4610      	mov	r0, r2
 801187a:	f7fe fffb 	bl	8010874 <GetTimeOnAir>
 801187e:	4603      	mov	r3, r0
 8011880:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8011882:	f107 0314 	add.w	r3, r7, #20
 8011886:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8011888:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 801188c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011890:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	9301      	str	r3, [sp, #4]
 8011898:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 801189c:	9300      	str	r3, [sp, #0]
 801189e:	460b      	mov	r3, r1
 80118a0:	6839      	ldr	r1, [r7, #0]
 80118a2:	f7fe fe78 	bl	8010596 <RegionCommonIdentifyChannels>
 80118a6:	4603      	mov	r3, r0
 80118a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80118ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d10f      	bne.n	80118d4 <RegionEU868NextChannel+0x12c>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80118b4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80118b8:	3b01      	subs	r3, #1
 80118ba:	4619      	mov	r1, r3
 80118bc:	2000      	movs	r0, #0
 80118be:	f001 fbfb 	bl	80130b8 <randr>
 80118c2:	4603      	mov	r3, r0
 80118c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80118c8:	4413      	add	r3, r2
 80118ca:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	701a      	strb	r2, [r3, #0]
 80118d2:	e00e      	b.n	80118f2 <RegionEU868NextChannel+0x14a>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80118d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80118d8:	2b0c      	cmp	r3, #12
 80118da:	d10a      	bne.n	80118f2 <RegionEU868NextChannel+0x14a>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80118dc:	4b08      	ldr	r3, [pc, #32]	; (8011900 <RegionEU868NextChannel+0x158>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80118e4:	4b06      	ldr	r3, [pc, #24]	; (8011900 <RegionEU868NextChannel+0x158>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	f042 0207 	orr.w	r2, r2, #7
 80118ec:	b292      	uxth	r2, r2
 80118ee:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 80118f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3760      	adds	r7, #96	; 0x60
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	20000f5c 	.word	0x20000f5c
 8011904:	20000f58 	.word	0x20000f58

08011908 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8011910:	2300      	movs	r3, #0
 8011912:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8011914:	2300      	movs	r3, #0
 8011916:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8011918:	2300      	movs	r3, #0
 801191a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	791b      	ldrb	r3, [r3, #4]
 8011920:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8011922:	7b7b      	ldrb	r3, [r7, #13]
 8011924:	2b02      	cmp	r3, #2
 8011926:	d801      	bhi.n	801192c <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011928:	2306      	movs	r3, #6
 801192a:	e089      	b.n	8011a40 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801192c:	7b7b      	ldrb	r3, [r7, #13]
 801192e:	2b0f      	cmp	r3, #15
 8011930:	d901      	bls.n	8011936 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011932:	2303      	movs	r3, #3
 8011934:	e084      	b.n	8011a40 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	7a1b      	ldrb	r3, [r3, #8]
 801193c:	f343 0303 	sbfx	r3, r3, #0, #4
 8011940:	b25b      	sxtb	r3, r3
 8011942:	2207      	movs	r2, #7
 8011944:	2100      	movs	r1, #0
 8011946:	4618      	mov	r0, r3
 8011948:	f7fe f9cd 	bl	800fce6 <RegionCommonValueInRange>
 801194c:	4603      	mov	r3, r0
 801194e:	2b00      	cmp	r3, #0
 8011950:	d101      	bne.n	8011956 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8011952:	2301      	movs	r3, #1
 8011954:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	7a1b      	ldrb	r3, [r3, #8]
 801195c:	f343 1303 	sbfx	r3, r3, #4, #4
 8011960:	b25b      	sxtb	r3, r3
 8011962:	2207      	movs	r2, #7
 8011964:	2100      	movs	r1, #0
 8011966:	4618      	mov	r0, r3
 8011968:	f7fe f9bd 	bl	800fce6 <RegionCommonValueInRange>
 801196c:	4603      	mov	r3, r0
 801196e:	2b00      	cmp	r3, #0
 8011970:	d101      	bne.n	8011976 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8011972:	2301      	movs	r3, #1
 8011974:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	7a1b      	ldrb	r3, [r3, #8]
 801197c:	f343 0303 	sbfx	r3, r3, #0, #4
 8011980:	b25a      	sxtb	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	7a1b      	ldrb	r3, [r3, #8]
 8011988:	f343 1303 	sbfx	r3, r3, #4, #4
 801198c:	b25b      	sxtb	r3, r3
 801198e:	429a      	cmp	r2, r3
 8011990:	dd01      	ble.n	8011996 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8011992:	2301      	movs	r3, #1
 8011994:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8011996:	7bbb      	ldrb	r3, [r7, #14]
 8011998:	f083 0301 	eor.w	r3, r3, #1
 801199c:	b2db      	uxtb	r3, r3
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d010      	beq.n	80119c4 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	f107 020c 	add.w	r2, r7, #12
 80119ac:	4611      	mov	r1, r2
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7fe feea 	bl	8010788 <VerifyRfFreq>
 80119b4:	4603      	mov	r3, r0
 80119b6:	f083 0301 	eor.w	r3, r3, #1
 80119ba:	b2db      	uxtb	r3, r3
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d001      	beq.n	80119c4 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80119c0:	2301      	movs	r3, #1
 80119c2:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80119c4:	7bfb      	ldrb	r3, [r7, #15]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d004      	beq.n	80119d4 <RegionEU868ChannelAdd+0xcc>
 80119ca:	7bbb      	ldrb	r3, [r7, #14]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d001      	beq.n	80119d4 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80119d0:	2306      	movs	r3, #6
 80119d2:	e035      	b.n	8011a40 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80119d4:	7bfb      	ldrb	r3, [r7, #15]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d001      	beq.n	80119de <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80119da:	2305      	movs	r3, #5
 80119dc:	e030      	b.n	8011a40 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80119de:	7bbb      	ldrb	r3, [r7, #14]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d001      	beq.n	80119e8 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80119e4:	2304      	movs	r3, #4
 80119e6:	e02b      	b.n	8011a40 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80119e8:	4b17      	ldr	r3, [pc, #92]	; (8011a48 <RegionEU868ChannelAdd+0x140>)
 80119ea:	6819      	ldr	r1, [r3, #0]
 80119ec:	7b7a      	ldrb	r2, [r7, #13]
 80119ee:	4613      	mov	r3, r2
 80119f0:	005b      	lsls	r3, r3, #1
 80119f2:	4413      	add	r3, r2
 80119f4:	009b      	lsls	r3, r3, #2
 80119f6:	18c8      	adds	r0, r1, r3
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	220c      	movs	r2, #12
 80119fe:	4619      	mov	r1, r3
 8011a00:	f001 fb71 	bl	80130e6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8011a04:	4b10      	ldr	r3, [pc, #64]	; (8011a48 <RegionEU868ChannelAdd+0x140>)
 8011a06:	6819      	ldr	r1, [r3, #0]
 8011a08:	7b7a      	ldrb	r2, [r7, #13]
 8011a0a:	7b38      	ldrb	r0, [r7, #12]
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	005b      	lsls	r3, r3, #1
 8011a10:	4413      	add	r3, r2
 8011a12:	009b      	lsls	r3, r3, #2
 8011a14:	440b      	add	r3, r1
 8011a16:	3309      	adds	r3, #9
 8011a18:	4602      	mov	r2, r0
 8011a1a:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8011a1c:	4b0a      	ldr	r3, [pc, #40]	; (8011a48 <RegionEU868ChannelAdd+0x140>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8011a24:	b21a      	sxth	r2, r3
 8011a26:	7b7b      	ldrb	r3, [r7, #13]
 8011a28:	2101      	movs	r1, #1
 8011a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8011a2e:	b21b      	sxth	r3, r3
 8011a30:	4313      	orrs	r3, r2
 8011a32:	b21a      	sxth	r2, r3
 8011a34:	4b04      	ldr	r3, [pc, #16]	; (8011a48 <RegionEU868ChannelAdd+0x140>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	b292      	uxth	r2, r2
 8011a3a:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8011a3e:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3710      	adds	r7, #16
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	20000f5c 	.word	0x20000f5c

08011a4c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b086      	sub	sp, #24
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8011a5a:	7dfb      	ldrb	r3, [r7, #23]
 8011a5c:	2b02      	cmp	r3, #2
 8011a5e:	d801      	bhi.n	8011a64 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8011a60:	2300      	movs	r3, #0
 8011a62:	e016      	b.n	8011a92 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8011a64:	4b0d      	ldr	r3, [pc, #52]	; (8011a9c <RegionEU868ChannelsRemove+0x50>)
 8011a66:	6819      	ldr	r1, [r3, #0]
 8011a68:	7dfa      	ldrb	r2, [r7, #23]
 8011a6a:	4613      	mov	r3, r2
 8011a6c:	005b      	lsls	r3, r3, #1
 8011a6e:	4413      	add	r3, r2
 8011a70:	009b      	lsls	r3, r3, #2
 8011a72:	440b      	add	r3, r1
 8011a74:	461a      	mov	r2, r3
 8011a76:	2300      	movs	r3, #0
 8011a78:	6013      	str	r3, [r2, #0]
 8011a7a:	6053      	str	r3, [r2, #4]
 8011a7c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8011a7e:	4b07      	ldr	r3, [pc, #28]	; (8011a9c <RegionEU868ChannelsRemove+0x50>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8011a86:	7df9      	ldrb	r1, [r7, #23]
 8011a88:	2210      	movs	r2, #16
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7fe f948 	bl	800fd20 <RegionCommonChanDisable>
 8011a90:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3718      	adds	r7, #24
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	20000f5c 	.word	0x20000f5c

08011aa0 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8011aa0:	b590      	push	{r4, r7, lr}
 8011aa2:	b085      	sub	sp, #20
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8011aae:	4b20      	ldr	r3, [pc, #128]	; (8011b30 <RegionEU868SetContinuousWave+0x90>)
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	4b20      	ldr	r3, [pc, #128]	; (8011b34 <RegionEU868SetContinuousWave+0x94>)
 8011ab4:	6819      	ldr	r1, [r3, #0]
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	781b      	ldrb	r3, [r3, #0]
 8011aba:	461c      	mov	r4, r3
 8011abc:	4623      	mov	r3, r4
 8011abe:	005b      	lsls	r3, r3, #1
 8011ac0:	4423      	add	r3, r4
 8011ac2:	009b      	lsls	r3, r3, #2
 8011ac4:	440b      	add	r3, r1
 8011ac6:	3309      	adds	r3, #9
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	4619      	mov	r1, r3
 8011acc:	460b      	mov	r3, r1
 8011ace:	005b      	lsls	r3, r3, #1
 8011ad0:	440b      	add	r3, r1
 8011ad2:	00db      	lsls	r3, r3, #3
 8011ad4:	4413      	add	r3, r2
 8011ad6:	3302      	adds	r3, #2
 8011ad8:	f993 3000 	ldrsb.w	r3, [r3]
 8011adc:	4619      	mov	r1, r3
 8011ade:	f7fe fdfa 	bl	80106d6 <RegionCommonLimitTxPower>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8011aea:	4b12      	ldr	r3, [pc, #72]	; (8011b34 <RegionEU868SetContinuousWave+0x94>)
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	781b      	ldrb	r3, [r3, #0]
 8011af2:	4619      	mov	r1, r3
 8011af4:	460b      	mov	r3, r1
 8011af6:	005b      	lsls	r3, r3, #1
 8011af8:	440b      	add	r3, r1
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	4413      	add	r3, r2
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6859      	ldr	r1, [r3, #4]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	689a      	ldr	r2, [r3, #8]
 8011b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7fe fc52 	bl	80103b8 <RegionCommonComputeTxPower>
 8011b14:	4603      	mov	r3, r0
 8011b16:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8011b18:	4b07      	ldr	r3, [pc, #28]	; (8011b38 <RegionEU868SetContinuousWave+0x98>)
 8011b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b1c:	687a      	ldr	r2, [r7, #4]
 8011b1e:	8992      	ldrh	r2, [r2, #12]
 8011b20:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8011b24:	68b8      	ldr	r0, [r7, #8]
 8011b26:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8011b28:	bf00      	nop
 8011b2a:	3714      	adds	r7, #20
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd90      	pop	{r4, r7, pc}
 8011b30:	20000f58 	.word	0x20000f58
 8011b34:	20000f5c 	.word	0x20000f5c
 8011b38:	080183e0 	.word	0x080183e0

08011b3c <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8011b3c:	b480      	push	{r7}
 8011b3e:	b085      	sub	sp, #20
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	4603      	mov	r3, r0
 8011b44:	71fb      	strb	r3, [r7, #7]
 8011b46:	460b      	mov	r3, r1
 8011b48:	71bb      	strb	r3, [r7, #6]
 8011b4a:	4613      	mov	r3, r2
 8011b4c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8011b4e:	79ba      	ldrb	r2, [r7, #6]
 8011b50:	797b      	ldrb	r3, [r7, #5]
 8011b52:	1ad3      	subs	r3, r2, r3
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8011b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	da01      	bge.n	8011b64 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8011b60:	2300      	movs	r3, #0
 8011b62:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8011b64:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3714      	adds	r7, #20
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bc80      	pop	{r7}
 8011b6e:	4770      	bx	lr

08011b70 <LimitTxPower>:
 */
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b084      	sub	sp, #16
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	603b      	str	r3, [r7, #0]
 8011b78:	4603      	mov	r3, r0
 8011b7a:	71fb      	strb	r3, [r7, #7]
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	71bb      	strb	r3, [r7, #6]
 8011b80:	4613      	mov	r3, r2
 8011b82:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8011b84:	79fb      	ldrb	r3, [r7, #7]
 8011b86:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8011b88:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8011b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b90:	4611      	mov	r1, r2
 8011b92:	4618      	mov	r0, r3
 8011b94:	f7fe fd9f 	bl	80106d6 <RegionCommonLimitTxPower>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8011b9c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8011ba0:	2b04      	cmp	r3, #4
 8011ba2:	d106      	bne.n	8011bb2 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8011ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ba8:	2b02      	cmp	r3, #2
 8011baa:	bfb8      	it	lt
 8011bac:	2302      	movlt	r3, #2
 8011bae:	73fb      	strb	r3, [r7, #15]
 8011bb0:	e00d      	b.n	8011bce <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8011bb2:	2204      	movs	r2, #4
 8011bb4:	2100      	movs	r1, #0
 8011bb6:	6838      	ldr	r0, [r7, #0]
 8011bb8:	f7fe f8e6 	bl	800fd88 <RegionCommonCountChannels>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	2b31      	cmp	r3, #49	; 0x31
 8011bc0:	d805      	bhi.n	8011bce <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8011bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011bc6:	2b05      	cmp	r3, #5
 8011bc8:	bfb8      	it	lt
 8011bca:	2305      	movlt	r3, #5
 8011bcc:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8011bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3710      	adds	r7, #16
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
	...

08011bdc <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8011be4:	4b18      	ldr	r3, [pc, #96]	; (8011c48 <VerifyRfFreq+0x6c>)
 8011be6:	6a1b      	ldr	r3, [r3, #32]
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	4798      	blx	r3
 8011bec:	4603      	mov	r3, r0
 8011bee:	f083 0301 	eor.w	r3, r3, #1
 8011bf2:	b2db      	uxtb	r3, r3
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d001      	beq.n	8011bfc <VerifyRfFreq+0x20>
    {
        return false;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	e021      	b.n	8011c40 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	4a13      	ldr	r2, [pc, #76]	; (8011c4c <VerifyRfFreq+0x70>)
 8011c00:	4293      	cmp	r3, r2
 8011c02:	d910      	bls.n	8011c26 <VerifyRfFreq+0x4a>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	4a12      	ldr	r2, [pc, #72]	; (8011c50 <VerifyRfFreq+0x74>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d80c      	bhi.n	8011c26 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8011c0c:	687a      	ldr	r2, [r7, #4]
 8011c0e:	4b11      	ldr	r3, [pc, #68]	; (8011c54 <VerifyRfFreq+0x78>)
 8011c10:	4413      	add	r3, r2
 8011c12:	4a11      	ldr	r2, [pc, #68]	; (8011c58 <VerifyRfFreq+0x7c>)
 8011c14:	fba2 1203 	umull	r1, r2, r2, r3
 8011c18:	0c92      	lsrs	r2, r2, #18
 8011c1a:	4910      	ldr	r1, [pc, #64]	; (8011c5c <VerifyRfFreq+0x80>)
 8011c1c:	fb01 f202 	mul.w	r2, r1, r2
 8011c20:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8011c22:	2a00      	cmp	r2, #0
 8011c24:	d001      	beq.n	8011c2a <VerifyRfFreq+0x4e>
    {
        return false;
 8011c26:	2300      	movs	r3, #0
 8011c28:	e00a      	b.n	8011c40 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	4a0c      	ldr	r2, [pc, #48]	; (8011c60 <VerifyRfFreq+0x84>)
 8011c2e:	4293      	cmp	r3, r2
 8011c30:	d903      	bls.n	8011c3a <VerifyRfFreq+0x5e>
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	4a06      	ldr	r2, [pc, #24]	; (8011c50 <VerifyRfFreq+0x74>)
 8011c36:	4293      	cmp	r3, r2
 8011c38:	d901      	bls.n	8011c3e <VerifyRfFreq+0x62>
    {
        return false;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	e000      	b.n	8011c40 <VerifyRfFreq+0x64>
    }
    return true;
 8011c3e:	2301      	movs	r3, #1
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3708      	adds	r7, #8
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}
 8011c48:	080183e0 	.word	0x080183e0
 8011c4c:	3708709f 	.word	0x3708709f
 8011c50:	374886e0 	.word	0x374886e0
 8011c54:	c8f78f60 	.word	0xc8f78f60
 8011c58:	6fd91d85 	.word	0x6fd91d85
 8011c5c:	000927c0 	.word	0x000927c0
 8011c60:	35c8015f 	.word	0x35c8015f

08011c64 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8011c64:	b590      	push	{r4, r7, lr}
 8011c66:	b089      	sub	sp, #36	; 0x24
 8011c68:	af04      	add	r7, sp, #16
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	460a      	mov	r2, r1
 8011c6e:	71fb      	strb	r3, [r7, #7]
 8011c70:	4613      	mov	r3, r2
 8011c72:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8011c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c78:	4a0f      	ldr	r2, [pc, #60]	; (8011cb8 <GetTimeOnAir+0x54>)
 8011c7a:	5cd3      	ldrb	r3, [r2, r3]
 8011c7c:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8011c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c82:	490e      	ldr	r1, [pc, #56]	; (8011cbc <GetTimeOnAir+0x58>)
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fe fd3b 	bl	8010700 <RegionCommonGetBandwidth>
 8011c8a:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8011c8c:	4b0c      	ldr	r3, [pc, #48]	; (8011cc0 <GetTimeOnAir+0x5c>)
 8011c8e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011c90:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8011c94:	88bb      	ldrh	r3, [r7, #4]
 8011c96:	b2db      	uxtb	r3, r3
 8011c98:	2101      	movs	r1, #1
 8011c9a:	9103      	str	r1, [sp, #12]
 8011c9c:	9302      	str	r3, [sp, #8]
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	9301      	str	r3, [sp, #4]
 8011ca2:	2308      	movs	r3, #8
 8011ca4:	9300      	str	r3, [sp, #0]
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	68b9      	ldr	r1, [r7, #8]
 8011caa:	2001      	movs	r0, #1
 8011cac:	47a0      	blx	r4
 8011cae:	4603      	mov	r3, r0
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3714      	adds	r7, #20
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd90      	pop	{r4, r7, pc}
 8011cb8:	0801835c 	.word	0x0801835c
 8011cbc:	0801836c 	.word	0x0801836c
 8011cc0:	080183e0 	.word	0x080183e0

08011cc4 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b088      	sub	sp, #32
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8011ccc:	2300      	movs	r3, #0
 8011cce:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	3b01      	subs	r3, #1
 8011cd6:	2b38      	cmp	r3, #56	; 0x38
 8011cd8:	f200 813c 	bhi.w	8011f54 <RegionUS915GetPhyParam+0x290>
 8011cdc:	a201      	add	r2, pc, #4	; (adr r2, 8011ce4 <RegionUS915GetPhyParam+0x20>)
 8011cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ce2:	bf00      	nop
 8011ce4:	08011dc9 	.word	0x08011dc9
 8011ce8:	08011dcf 	.word	0x08011dcf
 8011cec:	08011f55 	.word	0x08011f55
 8011cf0:	08011f55 	.word	0x08011f55
 8011cf4:	08011f55 	.word	0x08011f55
 8011cf8:	08011dd5 	.word	0x08011dd5
 8011cfc:	08011f55 	.word	0x08011f55
 8011d00:	08011e0f 	.word	0x08011e0f
 8011d04:	08011f55 	.word	0x08011f55
 8011d08:	08011e15 	.word	0x08011e15
 8011d0c:	08011e1b 	.word	0x08011e1b
 8011d10:	08011e21 	.word	0x08011e21
 8011d14:	08011e27 	.word	0x08011e27
 8011d18:	08011e37 	.word	0x08011e37
 8011d1c:	08011e47 	.word	0x08011e47
 8011d20:	08011e4d 	.word	0x08011e4d
 8011d24:	08011e55 	.word	0x08011e55
 8011d28:	08011e5d 	.word	0x08011e5d
 8011d2c:	08011e65 	.word	0x08011e65
 8011d30:	08011e6d 	.word	0x08011e6d
 8011d34:	08011e75 	.word	0x08011e75
 8011d38:	08011e7d 	.word	0x08011e7d
 8011d3c:	08011e91 	.word	0x08011e91
 8011d40:	08011e97 	.word	0x08011e97
 8011d44:	08011e9d 	.word	0x08011e9d
 8011d48:	08011ea3 	.word	0x08011ea3
 8011d4c:	08011eaf 	.word	0x08011eaf
 8011d50:	08011ebb 	.word	0x08011ebb
 8011d54:	08011ec1 	.word	0x08011ec1
 8011d58:	08011ec9 	.word	0x08011ec9
 8011d5c:	08011ecf 	.word	0x08011ecf
 8011d60:	08011ed5 	.word	0x08011ed5
 8011d64:	08011edb 	.word	0x08011edb
 8011d68:	08011ddb 	.word	0x08011ddb
 8011d6c:	08011f55 	.word	0x08011f55
 8011d70:	08011f55 	.word	0x08011f55
 8011d74:	08011f55 	.word	0x08011f55
 8011d78:	08011f55 	.word	0x08011f55
 8011d7c:	08011f55 	.word	0x08011f55
 8011d80:	08011f55 	.word	0x08011f55
 8011d84:	08011f55 	.word	0x08011f55
 8011d88:	08011f55 	.word	0x08011f55
 8011d8c:	08011f55 	.word	0x08011f55
 8011d90:	08011f55 	.word	0x08011f55
 8011d94:	08011f55 	.word	0x08011f55
 8011d98:	08011f55 	.word	0x08011f55
 8011d9c:	08011f55 	.word	0x08011f55
 8011da0:	08011ee3 	.word	0x08011ee3
 8011da4:	08011ef7 	.word	0x08011ef7
 8011da8:	08011f05 	.word	0x08011f05
 8011dac:	08011f0b 	.word	0x08011f0b
 8011db0:	08011f55 	.word	0x08011f55
 8011db4:	08011f11 	.word	0x08011f11
 8011db8:	08011f25 	.word	0x08011f25
 8011dbc:	08011f2b 	.word	0x08011f2b
 8011dc0:	08011f31 	.word	0x08011f31
 8011dc4:	08011f41 	.word	0x08011f41
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8011dc8:	2308      	movs	r3, #8
 8011dca:	61bb      	str	r3, [r7, #24]
            break;
 8011dcc:	e0c3      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	61bb      	str	r3, [r7, #24]
            break;
 8011dd2:	e0c0      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	61bb      	str	r3, [r7, #24]
            break;
 8011dd8:	e0bd      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8011de0:	733b      	strb	r3, [r7, #12]
 8011de2:	2304      	movs	r3, #4
 8011de4:	737b      	strb	r3, [r7, #13]
 8011de6:	2300      	movs	r3, #0
 8011de8:	73bb      	strb	r3, [r7, #14]
 8011dea:	2348      	movs	r3, #72	; 0x48
 8011dec:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8011dee:	4b5e      	ldr	r3, [pc, #376]	; (8011f68 <RegionUS915GetPhyParam+0x2a4>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8011df6:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8011df8:	4b5b      	ldr	r3, [pc, #364]	; (8011f68 <RegionUS915GetPhyParam+0x2a4>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8011dfc:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8011dfe:	f107 030c 	add.w	r3, r7, #12
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7fe fc29 	bl	801065a <RegionCommonGetNextLowerTxDr>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	61bb      	str	r3, [r7, #24]
            break;
 8011e0c:	e0a3      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	61bb      	str	r3, [r7, #24]
            break;
 8011e12:	e0a0      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8011e14:	2300      	movs	r3, #0
 8011e16:	61bb      	str	r3, [r7, #24]
            break;
 8011e18:	e09d      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8011e1a:	2340      	movs	r3, #64	; 0x40
 8011e1c:	61bb      	str	r3, [r7, #24]
            break;
 8011e1e:	e09a      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8011e20:	2320      	movs	r3, #32
 8011e22:	61bb      	str	r3, [r7, #24]
            break;
 8011e24:	e097      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011e2c:	461a      	mov	r2, r3
 8011e2e:	4b4f      	ldr	r3, [pc, #316]	; (8011f6c <RegionUS915GetPhyParam+0x2a8>)
 8011e30:	5c9b      	ldrb	r3, [r3, r2]
 8011e32:	61bb      	str	r3, [r7, #24]
            break;
 8011e34:	e08f      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011e3c:	461a      	mov	r2, r3
 8011e3e:	4b4c      	ldr	r3, [pc, #304]	; (8011f70 <RegionUS915GetPhyParam+0x2ac>)
 8011e40:	5c9b      	ldrb	r3, [r3, r2]
 8011e42:	61bb      	str	r3, [r7, #24]
            break;
 8011e44:	e087      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8011e46:	2300      	movs	r3, #0
 8011e48:	61bb      	str	r3, [r7, #24]
            break;
 8011e4a:	e084      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8011e4c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011e50:	61bb      	str	r3, [r7, #24]
            break;
 8011e52:	e080      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8011e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011e58:	61bb      	str	r3, [r7, #24]
            break;
 8011e5a:	e07c      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8011e5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8011e60:	61bb      	str	r3, [r7, #24]
            break;
 8011e62:	e078      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8011e64:	f241 3388 	movw	r3, #5000	; 0x1388
 8011e68:	61bb      	str	r3, [r7, #24]
            break;
 8011e6a:	e074      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8011e6c:	f241 7370 	movw	r3, #6000	; 0x1770
 8011e70:	61bb      	str	r3, [r7, #24]
            break;
 8011e72:	e070      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8011e74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011e78:	61bb      	str	r3, [r7, #24]
            break;
 8011e7a:	e06c      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8011e7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011e80:	483c      	ldr	r0, [pc, #240]	; (8011f74 <RegionUS915GetPhyParam+0x2b0>)
 8011e82:	f001 f919 	bl	80130b8 <randr>
 8011e86:	4603      	mov	r3, r0
 8011e88:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8011e8c:	61bb      	str	r3, [r7, #24]
            break;
 8011e8e:	e062      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8011e90:	2300      	movs	r3, #0
 8011e92:	61bb      	str	r3, [r7, #24]
            break;
 8011e94:	e05f      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8011e96:	4b38      	ldr	r3, [pc, #224]	; (8011f78 <RegionUS915GetPhyParam+0x2b4>)
 8011e98:	61bb      	str	r3, [r7, #24]
            break;
 8011e9a:	e05c      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8011e9c:	2308      	movs	r3, #8
 8011e9e:	61bb      	str	r3, [r7, #24]
            break;
 8011ea0:	e059      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8011ea2:	4b31      	ldr	r3, [pc, #196]	; (8011f68 <RegionUS915GetPhyParam+0x2a4>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8011eaa:	61bb      	str	r3, [r7, #24]
            break;
 8011eac:	e053      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8011eae:	4b2e      	ldr	r3, [pc, #184]	; (8011f68 <RegionUS915GetPhyParam+0x2a4>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8011eb6:	61bb      	str	r3, [r7, #24]
            break;
 8011eb8:	e04d      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8011eba:	2348      	movs	r3, #72	; 0x48
 8011ebc:	61bb      	str	r3, [r7, #24]
            break;
 8011ebe:	e04a      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8011ec0:	4b29      	ldr	r3, [pc, #164]	; (8011f68 <RegionUS915GetPhyParam+0x2a4>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	61bb      	str	r3, [r7, #24]
            break;
 8011ec6:	e046      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	61bb      	str	r3, [r7, #24]
            break;
 8011ecc:	e043      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	61bb      	str	r3, [r7, #24]
            break;
 8011ed2:	e040      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8011ed4:	4b29      	ldr	r3, [pc, #164]	; (8011f7c <RegionUS915GetPhyParam+0x2b8>)
 8011ed6:	61bb      	str	r3, [r7, #24]
            break;
 8011ed8:	e03d      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8011eda:	f04f 0300 	mov.w	r3, #0
 8011ede:	61bb      	str	r3, [r7, #24]
            break;
 8011ee0:	e039      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	791b      	ldrb	r3, [r3, #4]
 8011ee6:	4a26      	ldr	r2, [pc, #152]	; (8011f80 <RegionUS915GetPhyParam+0x2bc>)
 8011ee8:	4923      	ldr	r1, [pc, #140]	; (8011f78 <RegionUS915GetPhyParam+0x2b4>)
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7fd fd28 	bl	800f940 <RegionBaseUSCalcDownlinkFrequency>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8011ef4:	e02f      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8011ef6:	2317      	movs	r3, #23
 8011ef8:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8011efa:	2305      	movs	r3, #5
 8011efc:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8011efe:	2303      	movs	r3, #3
 8011f00:	76bb      	strb	r3, [r7, #26]
            break;
 8011f02:	e028      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8011f04:	2308      	movs	r3, #8
 8011f06:	61bb      	str	r3, [r7, #24]
            break;
 8011f08:	e025      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8011f0a:	2308      	movs	r3, #8
 8011f0c:	61bb      	str	r3, [r7, #24]
            break;
 8011f0e:	e022      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	791b      	ldrb	r3, [r3, #4]
 8011f14:	4a1a      	ldr	r2, [pc, #104]	; (8011f80 <RegionUS915GetPhyParam+0x2bc>)
 8011f16:	4918      	ldr	r1, [pc, #96]	; (8011f78 <RegionUS915GetPhyParam+0x2b4>)
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f7fd fd11 	bl	800f940 <RegionBaseUSCalcDownlinkFrequency>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8011f22:	e018      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8011f24:	2308      	movs	r3, #8
 8011f26:	61bb      	str	r3, [r7, #24]
            break;
 8011f28:	e015      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8011f2a:	2308      	movs	r3, #8
 8011f2c:	61bb      	str	r3, [r7, #24]
            break;
 8011f2e:	e012      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011f36:	461a      	mov	r2, r3
 8011f38:	4b12      	ldr	r3, [pc, #72]	; (8011f84 <RegionUS915GetPhyParam+0x2c0>)
 8011f3a:	5c9b      	ldrb	r3, [r3, r2]
 8011f3c:	61bb      	str	r3, [r7, #24]
            break;
 8011f3e:	e00a      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011f46:	4910      	ldr	r1, [pc, #64]	; (8011f88 <RegionUS915GetPhyParam+0x2c4>)
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f7fe fbd9 	bl	8010700 <RegionCommonGetBandwidth>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	61bb      	str	r3, [r7, #24]
            break;
 8011f52:	e000      	b.n	8011f56 <RegionUS915GetPhyParam+0x292>
        }
        default:
        {
            break;
 8011f54:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8011f56:	69bb      	ldr	r3, [r7, #24]
 8011f58:	61fb      	str	r3, [r7, #28]
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	69fb      	ldr	r3, [r7, #28]
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3720      	adds	r7, #32
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	20000f64 	.word	0x20000f64
 8011f6c:	080183c0 	.word	0x080183c0
 8011f70:	080183d0 	.word	0x080183d0
 8011f74:	fffffc18 	.word	0xfffffc18
 8011f78:	370870a0 	.word	0x370870a0
 8011f7c:	4200999a 	.word	0x4200999a
 8011f80:	000927c0 	.word	0x000927c0
 8011f84:	0801835c 	.word	0x0801835c
 8011f88:	0801836c 	.word	0x0801836c

08011f8c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8011f8c:	b590      	push	{r4, r7, lr}
 8011f8e:	b085      	sub	sp, #20
 8011f90:	af02      	add	r7, sp, #8
 8011f92:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8011f94:	4b11      	ldr	r3, [pc, #68]	; (8011fdc <RegionUS915SetBandTxDone+0x50>)
 8011f96:	681a      	ldr	r2, [r3, #0]
 8011f98:	4b11      	ldr	r3, [pc, #68]	; (8011fe0 <RegionUS915SetBandTxDone+0x54>)
 8011f9a:	6819      	ldr	r1, [r3, #0]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	005b      	lsls	r3, r3, #1
 8011fa6:	4403      	add	r3, r0
 8011fa8:	009b      	lsls	r3, r3, #2
 8011faa:	440b      	add	r3, r1
 8011fac:	3309      	adds	r3, #9
 8011fae:	781b      	ldrb	r3, [r3, #0]
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	460b      	mov	r3, r1
 8011fb4:	005b      	lsls	r3, r3, #1
 8011fb6:	440b      	add	r3, r1
 8011fb8:	00db      	lsls	r3, r3, #3
 8011fba:	18d0      	adds	r0, r2, r3
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6899      	ldr	r1, [r3, #8]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	785c      	ldrb	r4, [r3, #1]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	691a      	ldr	r2, [r3, #16]
 8011fc8:	9200      	str	r2, [sp, #0]
 8011fca:	68db      	ldr	r3, [r3, #12]
 8011fcc:	4622      	mov	r2, r4
 8011fce:	f7fd ff2d 	bl	800fe2c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 8011fd2:	bf00      	nop
 8011fd4:	370c      	adds	r7, #12
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd90      	pop	{r4, r7, pc}
 8011fda:	bf00      	nop
 8011fdc:	20000f60 	.word	0x20000f60
 8011fe0:	20000f64 	.word	0x20000f64

08011fe4 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b08a      	sub	sp, #40	; 0x28
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8011fec:	2301      	movs	r3, #1
 8011fee:	81bb      	strh	r3, [r7, #12]
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	73bb      	strb	r3, [r7, #14]
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	613b      	str	r3, [r7, #16]
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	617b      	str	r3, [r7, #20]
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	61bb      	str	r3, [r7, #24]
 8012000:	2300      	movs	r3, #0
 8012002:	61fb      	str	r3, [r7, #28]
 8012004:	2300      	movs	r3, #0
 8012006:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	7a1b      	ldrb	r3, [r3, #8]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d007      	beq.n	8012022 <RegionUS915InitDefaults+0x3e>
 8012012:	2b00      	cmp	r3, #0
 8012014:	f2c0 8106 	blt.w	8012224 <RegionUS915InitDefaults+0x240>
 8012018:	3b01      	subs	r3, #1
 801201a:	2b01      	cmp	r3, #1
 801201c:	f200 8102 	bhi.w	8012224 <RegionUS915InitDefaults+0x240>
 8012020:	e0ce      	b.n	80121c0 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	2b00      	cmp	r3, #0
 8012028:	f000 80fe 	beq.w	8012228 <RegionUS915InitDefaults+0x244>
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	685b      	ldr	r3, [r3, #4]
 8012030:	2b00      	cmp	r3, #0
 8012032:	f000 80f9 	beq.w	8012228 <RegionUS915InitDefaults+0x244>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	4a7d      	ldr	r2, [pc, #500]	; (8012230 <RegionUS915InitDefaults+0x24c>)
 801203c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	685b      	ldr	r3, [r3, #4]
 8012042:	4a7c      	ldr	r2, [pc, #496]	; (8012234 <RegionUS915InitDefaults+0x250>)
 8012044:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8012046:	4b7a      	ldr	r3, [pc, #488]	; (8012230 <RegionUS915InitDefaults+0x24c>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	2200      	movs	r2, #0
 801204c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8012050:	4b77      	ldr	r3, [pc, #476]	; (8012230 <RegionUS915InitDefaults+0x24c>)
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	2200      	movs	r2, #0
 8012056:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801205a:	4b75      	ldr	r3, [pc, #468]	; (8012230 <RegionUS915InitDefaults+0x24c>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	4618      	mov	r0, r3
 8012060:	f107 030c 	add.w	r3, r7, #12
 8012064:	2218      	movs	r2, #24
 8012066:	4619      	mov	r1, r3
 8012068:	f001 f83d 	bl	80130e6 <memcpy1>

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801206c:	2300      	movs	r3, #0
 801206e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012072:	e02e      	b.n	80120d2 <RegionUS915InitDefaults+0xee>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8012074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012078:	4a6f      	ldr	r2, [pc, #444]	; (8012238 <RegionUS915InitDefaults+0x254>)
 801207a:	fb02 f203 	mul.w	r2, r2, r3
 801207e:	4b6f      	ldr	r3, [pc, #444]	; (801223c <RegionUS915InitDefaults+0x258>)
 8012080:	4413      	add	r3, r2
 8012082:	4a6c      	ldr	r2, [pc, #432]	; (8012234 <RegionUS915InitDefaults+0x250>)
 8012084:	6811      	ldr	r1, [r2, #0]
 8012086:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801208a:	4618      	mov	r0, r3
 801208c:	4613      	mov	r3, r2
 801208e:	005b      	lsls	r3, r3, #1
 8012090:	4413      	add	r3, r2
 8012092:	009b      	lsls	r3, r3, #2
 8012094:	440b      	add	r3, r1
 8012096:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8012098:	4b66      	ldr	r3, [pc, #408]	; (8012234 <RegionUS915InitDefaults+0x250>)
 801209a:	6819      	ldr	r1, [r3, #0]
 801209c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80120a0:	4613      	mov	r3, r2
 80120a2:	005b      	lsls	r3, r3, #1
 80120a4:	4413      	add	r3, r2
 80120a6:	009b      	lsls	r3, r3, #2
 80120a8:	440b      	add	r3, r1
 80120aa:	3308      	adds	r3, #8
 80120ac:	2230      	movs	r2, #48	; 0x30
 80120ae:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80120b0:	4b60      	ldr	r3, [pc, #384]	; (8012234 <RegionUS915InitDefaults+0x250>)
 80120b2:	6819      	ldr	r1, [r3, #0]
 80120b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80120b8:	4613      	mov	r3, r2
 80120ba:	005b      	lsls	r3, r3, #1
 80120bc:	4413      	add	r3, r2
 80120be:	009b      	lsls	r3, r3, #2
 80120c0:	440b      	add	r3, r1
 80120c2:	3309      	adds	r3, #9
 80120c4:	2200      	movs	r2, #0
 80120c6:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80120c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120cc:	3301      	adds	r3, #1
 80120ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80120d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120d6:	2b3f      	cmp	r3, #63	; 0x3f
 80120d8:	d9cc      	bls.n	8012074 <RegionUS915InitDefaults+0x90>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80120da:	2340      	movs	r3, #64	; 0x40
 80120dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80120e0:	e02f      	b.n	8012142 <RegionUS915InitDefaults+0x15e>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80120e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80120e6:	3b40      	subs	r3, #64	; 0x40
 80120e8:	4a55      	ldr	r2, [pc, #340]	; (8012240 <RegionUS915InitDefaults+0x25c>)
 80120ea:	fb02 f203 	mul.w	r2, r2, r3
 80120ee:	4b55      	ldr	r3, [pc, #340]	; (8012244 <RegionUS915InitDefaults+0x260>)
 80120f0:	4413      	add	r3, r2
 80120f2:	4a50      	ldr	r2, [pc, #320]	; (8012234 <RegionUS915InitDefaults+0x250>)
 80120f4:	6811      	ldr	r1, [r2, #0]
 80120f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80120fa:	4618      	mov	r0, r3
 80120fc:	4613      	mov	r3, r2
 80120fe:	005b      	lsls	r3, r3, #1
 8012100:	4413      	add	r3, r2
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	440b      	add	r3, r1
 8012106:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8012108:	4b4a      	ldr	r3, [pc, #296]	; (8012234 <RegionUS915InitDefaults+0x250>)
 801210a:	6819      	ldr	r1, [r3, #0]
 801210c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8012110:	4613      	mov	r3, r2
 8012112:	005b      	lsls	r3, r3, #1
 8012114:	4413      	add	r3, r2
 8012116:	009b      	lsls	r3, r3, #2
 8012118:	440b      	add	r3, r1
 801211a:	3308      	adds	r3, #8
 801211c:	2244      	movs	r2, #68	; 0x44
 801211e:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8012120:	4b44      	ldr	r3, [pc, #272]	; (8012234 <RegionUS915InitDefaults+0x250>)
 8012122:	6819      	ldr	r1, [r3, #0]
 8012124:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8012128:	4613      	mov	r3, r2
 801212a:	005b      	lsls	r3, r3, #1
 801212c:	4413      	add	r3, r2
 801212e:	009b      	lsls	r3, r3, #2
 8012130:	440b      	add	r3, r1
 8012132:	3309      	adds	r3, #9
 8012134:	2200      	movs	r2, #0
 8012136:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8012138:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801213c:	3301      	adds	r3, #1
 801213e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012142:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012146:	2b47      	cmp	r3, #71	; 0x47
 8012148:	d9cb      	bls.n	80120e2 <RegionUS915InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0x0000;
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0x0000;
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x0001;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801214a:	4b3a      	ldr	r3, [pc, #232]	; (8012234 <RegionUS915InitDefaults+0x250>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012152:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8012156:	4b37      	ldr	r3, [pc, #220]	; (8012234 <RegionUS915InitDefaults+0x250>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801215e:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8012162:	4b34      	ldr	r3, [pc, #208]	; (8012234 <RegionUS915InitDefaults+0x250>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801216a:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801216e:	4b31      	ldr	r3, [pc, #196]	; (8012234 <RegionUS915InitDefaults+0x250>)
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012176:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801217a:	4b2e      	ldr	r3, [pc, #184]	; (8012234 <RegionUS915InitDefaults+0x250>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	22ff      	movs	r2, #255	; 0xff
 8012180:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8012184:	4b2b      	ldr	r3, [pc, #172]	; (8012234 <RegionUS915InitDefaults+0x250>)
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	2200      	movs	r2, #0
 801218a:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */
            /* ST_WORKAROUND_END */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801218e:	4b29      	ldr	r3, [pc, #164]	; (8012234 <RegionUS915InitDefaults+0x250>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8012196:	4b27      	ldr	r3, [pc, #156]	; (8012234 <RegionUS915InitDefaults+0x250>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801219e:	2206      	movs	r2, #6
 80121a0:	4619      	mov	r1, r3
 80121a2:	f7fd fe1d 	bl	800fde0 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80121a6:	4b22      	ldr	r3, [pc, #136]	; (8012230 <RegionUS915InitDefaults+0x24c>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	f103 0090 	add.w	r0, r3, #144	; 0x90
 80121ae:	4b21      	ldr	r3, [pc, #132]	; (8012234 <RegionUS915InitDefaults+0x250>)
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80121b6:	2206      	movs	r2, #6
 80121b8:	4619      	mov	r1, r3
 80121ba:	f7fd fe11 	bl	800fde0 <RegionCommonChanMaskCopy>
            break;
 80121be:	e034      	b.n	801222a <RegionUS915InitDefaults+0x246>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80121c0:	4b1c      	ldr	r3, [pc, #112]	; (8012234 <RegionUS915InitDefaults+0x250>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80121c8:	4b1a      	ldr	r3, [pc, #104]	; (8012234 <RegionUS915InitDefaults+0x250>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80121d0:	2206      	movs	r2, #6
 80121d2:	4619      	mov	r1, r3
 80121d4:	f7fd fe04 	bl	800fde0 <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80121d8:	2300      	movs	r3, #0
 80121da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80121de:	e01c      	b.n	801221a <RegionUS915InitDefaults+0x236>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80121e0:	4b13      	ldr	r3, [pc, #76]	; (8012230 <RegionUS915InitDefaults+0x24c>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80121e8:	3248      	adds	r2, #72	; 0x48
 80121ea:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80121ee:	4b11      	ldr	r3, [pc, #68]	; (8012234 <RegionUS915InitDefaults+0x250>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80121f6:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80121fa:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80121fe:	4b0c      	ldr	r3, [pc, #48]	; (8012230 <RegionUS915InitDefaults+0x24c>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8012206:	4001      	ands	r1, r0
 8012208:	b289      	uxth	r1, r1
 801220a:	3248      	adds	r2, #72	; 0x48
 801220c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8012210:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012214:	3301      	adds	r3, #1
 8012216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801221a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801221e:	2b05      	cmp	r3, #5
 8012220:	d9de      	bls.n	80121e0 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 8012222:	e002      	b.n	801222a <RegionUS915InitDefaults+0x246>
        }
        default:
        {
            break;
 8012224:	bf00      	nop
 8012226:	e000      	b.n	801222a <RegionUS915InitDefaults+0x246>
                return;
 8012228:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801222a:	3728      	adds	r7, #40	; 0x28
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}
 8012230:	20000f60 	.word	0x20000f60
 8012234:	20000f64 	.word	0x20000f64
 8012238:	00030d40 	.word	0x00030d40
 801223c:	35c80160 	.word	0x35c80160
 8012240:	00186a00 	.word	0x00186a00
 8012244:	35d2afc0 	.word	0x35d2afc0

08012248 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	460b      	mov	r3, r1
 8012252:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8012254:	78fb      	ldrb	r3, [r7, #3]
 8012256:	2b0f      	cmp	r3, #15
 8012258:	d858      	bhi.n	801230c <RegionUS915Verify+0xc4>
 801225a:	a201      	add	r2, pc, #4	; (adr r2, 8012260 <RegionUS915Verify+0x18>)
 801225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012260:	080122a1 	.word	0x080122a1
 8012264:	0801230d 	.word	0x0801230d
 8012268:	0801230d 	.word	0x0801230d
 801226c:	0801230d 	.word	0x0801230d
 8012270:	0801230d 	.word	0x0801230d
 8012274:	080122af 	.word	0x080122af
 8012278:	080122af 	.word	0x080122af
 801227c:	080122cd 	.word	0x080122cd
 8012280:	0801230d 	.word	0x0801230d
 8012284:	080122eb 	.word	0x080122eb
 8012288:	080122eb 	.word	0x080122eb
 801228c:	0801230d 	.word	0x0801230d
 8012290:	0801230d 	.word	0x0801230d
 8012294:	0801230d 	.word	0x0801230d
 8012298:	0801230d 	.word	0x0801230d
 801229c:	08012309 	.word	0x08012309
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7ff fc99 	bl	8011bdc <VerifyRfFreq>
 80122aa:	4603      	mov	r3, r0
 80122ac:	e02f      	b.n	801230e <RegionUS915Verify+0xc6>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f993 3000 	ldrsb.w	r3, [r3]
 80122b4:	2204      	movs	r2, #4
 80122b6:	2100      	movs	r1, #0
 80122b8:	4618      	mov	r0, r3
 80122ba:	f7fd fd14 	bl	800fce6 <RegionCommonValueInRange>
 80122be:	4603      	mov	r3, r0
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	bf14      	ite	ne
 80122c4:	2301      	movne	r3, #1
 80122c6:	2300      	moveq	r3, #0
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	e020      	b.n	801230e <RegionUS915Verify+0xc6>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f993 3000 	ldrsb.w	r3, [r3]
 80122d2:	220d      	movs	r2, #13
 80122d4:	2108      	movs	r1, #8
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7fd fd05 	bl	800fce6 <RegionCommonValueInRange>
 80122dc:	4603      	mov	r3, r0
 80122de:	2b00      	cmp	r3, #0
 80122e0:	bf14      	ite	ne
 80122e2:	2301      	movne	r3, #1
 80122e4:	2300      	moveq	r3, #0
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	e011      	b.n	801230e <RegionUS915Verify+0xc6>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f993 3000 	ldrsb.w	r3, [r3]
 80122f0:	220e      	movs	r2, #14
 80122f2:	2100      	movs	r1, #0
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7fd fcf6 	bl	800fce6 <RegionCommonValueInRange>
 80122fa:	4603      	mov	r3, r0
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	bf14      	ite	ne
 8012300:	2301      	movne	r3, #1
 8012302:	2300      	moveq	r3, #0
 8012304:	b2db      	uxtb	r3, r3
 8012306:	e002      	b.n	801230e <RegionUS915Verify+0xc6>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 8012308:	2300      	movs	r3, #0
 801230a:	e000      	b.n	801230e <RegionUS915Verify+0xc6>
        }
        default:
            return false;
 801230c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801230e:	4618      	mov	r0, r3
 8012310:	3708      	adds	r7, #8
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop

08012318 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8012318:	b480      	push	{r7}
 801231a:	b085      	sub	sp, #20
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	791b      	ldrb	r3, [r3, #4]
 8012324:	2b10      	cmp	r3, #16
 8012326:	d162      	bne.n	80123ee <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	330f      	adds	r3, #15
 801232e:	781b      	ldrb	r3, [r3, #0]
 8012330:	2b01      	cmp	r3, #1
 8012332:	d15e      	bne.n	80123f2 <RegionUS915ApplyCFList+0xda>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8012334:	2300      	movs	r3, #0
 8012336:	73fb      	strb	r3, [r7, #15]
 8012338:	2300      	movs	r3, #0
 801233a:	73bb      	strb	r3, [r7, #14]
 801233c:	e053      	b.n	80123e6 <RegionUS915ApplyCFList+0xce>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681a      	ldr	r2, [r3, #0]
 8012342:	7bbb      	ldrb	r3, [r7, #14]
 8012344:	4413      	add	r3, r2
 8012346:	7819      	ldrb	r1, [r3, #0]
 8012348:	4b2c      	ldr	r3, [pc, #176]	; (80123fc <RegionUS915ApplyCFList+0xe4>)
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	7bfa      	ldrb	r2, [r7, #15]
 801234e:	b289      	uxth	r1, r1
 8012350:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8012354:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8012358:	4b28      	ldr	r3, [pc, #160]	; (80123fc <RegionUS915ApplyCFList+0xe4>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	7bfa      	ldrb	r2, [r7, #15]
 801235e:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8012362:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	7bbb      	ldrb	r3, [r7, #14]
 801236c:	3301      	adds	r3, #1
 801236e:	4413      	add	r3, r2
 8012370:	781b      	ldrb	r3, [r3, #0]
 8012372:	b29b      	uxth	r3, r3
 8012374:	021b      	lsls	r3, r3, #8
 8012376:	b299      	uxth	r1, r3
 8012378:	4b20      	ldr	r3, [pc, #128]	; (80123fc <RegionUS915ApplyCFList+0xe4>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	7bfa      	ldrb	r2, [r7, #15]
 801237e:	4301      	orrs	r1, r0
 8012380:	b289      	uxth	r1, r1
 8012382:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8012386:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801238a:	7bfb      	ldrb	r3, [r7, #15]
 801238c:	2b04      	cmp	r3, #4
 801238e:	d10f      	bne.n	80123b0 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8012390:	4b1a      	ldr	r3, [pc, #104]	; (80123fc <RegionUS915ApplyCFList+0xe4>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	7bfa      	ldrb	r2, [r7, #15]
 8012396:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801239a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801239e:	4b17      	ldr	r3, [pc, #92]	; (80123fc <RegionUS915ApplyCFList+0xe4>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	7bfa      	ldrb	r2, [r7, #15]
 80123a4:	b2c9      	uxtb	r1, r1
 80123a6:	b289      	uxth	r1, r1
 80123a8:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80123ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 80123b0:	4b13      	ldr	r3, [pc, #76]	; (8012400 <RegionUS915ApplyCFList+0xe8>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	7bfa      	ldrb	r2, [r7, #15]
 80123b6:	3248      	adds	r2, #72	; 0x48
 80123b8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80123bc:	4b0f      	ldr	r3, [pc, #60]	; (80123fc <RegionUS915ApplyCFList+0xe4>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	7bfa      	ldrb	r2, [r7, #15]
 80123c2:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80123c6:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80123ca:	4b0d      	ldr	r3, [pc, #52]	; (8012400 <RegionUS915ApplyCFList+0xe8>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	7bfa      	ldrb	r2, [r7, #15]
 80123d0:	4001      	ands	r1, r0
 80123d2:	b289      	uxth	r1, r1
 80123d4:	3248      	adds	r2, #72	; 0x48
 80123d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80123da:	7bfb      	ldrb	r3, [r7, #15]
 80123dc:	3301      	adds	r3, #1
 80123de:	73fb      	strb	r3, [r7, #15]
 80123e0:	7bbb      	ldrb	r3, [r7, #14]
 80123e2:	3302      	adds	r3, #2
 80123e4:	73bb      	strb	r3, [r7, #14]
 80123e6:	7bfb      	ldrb	r3, [r7, #15]
 80123e8:	2b04      	cmp	r3, #4
 80123ea:	d9a8      	bls.n	801233e <RegionUS915ApplyCFList+0x26>
 80123ec:	e002      	b.n	80123f4 <RegionUS915ApplyCFList+0xdc>
        return;
 80123ee:	bf00      	nop
 80123f0:	e000      	b.n	80123f4 <RegionUS915ApplyCFList+0xdc>
        return;
 80123f2:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 80123f4:	3714      	adds	r7, #20
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bc80      	pop	{r7}
 80123fa:	4770      	bx	lr
 80123fc:	20000f64 	.word	0x20000f64
 8012400:	20000f60 	.word	0x20000f60

08012404 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b084      	sub	sp, #16
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	2204      	movs	r2, #4
 8012412:	2100      	movs	r1, #0
 8012414:	4618      	mov	r0, r3
 8012416:	f7fd fcb7 	bl	800fd88 <RegionCommonCountChannels>
 801241a:	4603      	mov	r3, r0
 801241c:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801241e:	7bbb      	ldrb	r3, [r7, #14]
 8012420:	2b01      	cmp	r3, #1
 8012422:	d804      	bhi.n	801242e <RegionUS915ChanMaskSet+0x2a>
 8012424:	7bbb      	ldrb	r3, [r7, #14]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d001      	beq.n	801242e <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801242a:	2300      	movs	r3, #0
 801242c:	e04c      	b.n	80124c8 <RegionUS915ChanMaskSet+0xc4>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	791b      	ldrb	r3, [r3, #4]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d002      	beq.n	801243c <RegionUS915ChanMaskSet+0x38>
 8012436:	2b01      	cmp	r3, #1
 8012438:	d038      	beq.n	80124ac <RegionUS915ChanMaskSet+0xa8>
 801243a:	e042      	b.n	80124c2 <RegionUS915ChanMaskSet+0xbe>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801243c:	4b24      	ldr	r3, [pc, #144]	; (80124d0 <RegionUS915ChanMaskSet+0xcc>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	2206      	movs	r2, #6
 801244a:	4619      	mov	r1, r3
 801244c:	f7fd fcc8 	bl	800fde0 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8012450:	4b1f      	ldr	r3, [pc, #124]	; (80124d0 <RegionUS915ChanMaskSet+0xcc>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 8012458:	4b1d      	ldr	r3, [pc, #116]	; (80124d0 <RegionUS915ChanMaskSet+0xcc>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	b2d2      	uxtb	r2, r2
 801245e:	b292      	uxth	r2, r2
 8012460:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8012464:	4b1a      	ldr	r3, [pc, #104]	; (80124d0 <RegionUS915ChanMaskSet+0xcc>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	2200      	movs	r2, #0
 801246a:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801246e:	2300      	movs	r3, #0
 8012470:	73fb      	strb	r3, [r7, #15]
 8012472:	e017      	b.n	80124a4 <RegionUS915ChanMaskSet+0xa0>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8012474:	4b17      	ldr	r3, [pc, #92]	; (80124d4 <RegionUS915ChanMaskSet+0xd0>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	7bfa      	ldrb	r2, [r7, #15]
 801247a:	3248      	adds	r2, #72	; 0x48
 801247c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012480:	4b13      	ldr	r3, [pc, #76]	; (80124d0 <RegionUS915ChanMaskSet+0xcc>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	7bfa      	ldrb	r2, [r7, #15]
 8012486:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801248a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801248e:	4b11      	ldr	r3, [pc, #68]	; (80124d4 <RegionUS915ChanMaskSet+0xd0>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	7bfa      	ldrb	r2, [r7, #15]
 8012494:	4001      	ands	r1, r0
 8012496:	b289      	uxth	r1, r1
 8012498:	3248      	adds	r2, #72	; 0x48
 801249a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801249e:	7bfb      	ldrb	r3, [r7, #15]
 80124a0:	3301      	adds	r3, #1
 80124a2:	73fb      	strb	r3, [r7, #15]
 80124a4:	7bfb      	ldrb	r3, [r7, #15]
 80124a6:	2b05      	cmp	r3, #5
 80124a8:	d9e4      	bls.n	8012474 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 80124aa:	e00c      	b.n	80124c6 <RegionUS915ChanMaskSet+0xc2>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80124ac:	4b08      	ldr	r3, [pc, #32]	; (80124d0 <RegionUS915ChanMaskSet+0xcc>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	2206      	movs	r2, #6
 80124ba:	4619      	mov	r1, r3
 80124bc:	f7fd fc90 	bl	800fde0 <RegionCommonChanMaskCopy>
            break;
 80124c0:	e001      	b.n	80124c6 <RegionUS915ChanMaskSet+0xc2>
        }
        default:
            return false;
 80124c2:	2300      	movs	r3, #0
 80124c4:	e000      	b.n	80124c8 <RegionUS915ChanMaskSet+0xc4>
    }
    return true;
 80124c6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3710      	adds	r7, #16
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	20000f64 	.word	0x20000f64
 80124d4:	20000f60 	.word	0x20000f60

080124d8 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b088      	sub	sp, #32
 80124dc:	af02      	add	r7, sp, #8
 80124de:	60ba      	str	r2, [r7, #8]
 80124e0:	607b      	str	r3, [r7, #4]
 80124e2:	4603      	mov	r3, r0
 80124e4:	73fb      	strb	r3, [r7, #15]
 80124e6:	460b      	mov	r3, r1
 80124e8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 80124ea:	2300      	movs	r3, #0
 80124ec:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80124ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124f2:	2b0d      	cmp	r3, #13
 80124f4:	bfa8      	it	ge
 80124f6:	230d      	movge	r3, #13
 80124f8:	b25a      	sxtb	r2, r3
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012504:	4916      	ldr	r1, [pc, #88]	; (8012560 <RegionUS915ComputeRxWindowParameters+0x88>)
 8012506:	4618      	mov	r0, r3
 8012508:	f7fe f8fa 	bl	8010700 <RegionCommonGetBandwidth>
 801250c:	4603      	mov	r3, r0
 801250e:	b2da      	uxtb	r2, r3
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801251a:	461a      	mov	r2, r3
 801251c:	4b11      	ldr	r3, [pc, #68]	; (8012564 <RegionUS915ComputeRxWindowParameters+0x8c>)
 801251e:	5c9a      	ldrb	r2, [r3, r2]
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012526:	4619      	mov	r1, r3
 8012528:	4b0d      	ldr	r3, [pc, #52]	; (8012560 <RegionUS915ComputeRxWindowParameters+0x88>)
 801252a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801252e:	4619      	mov	r1, r3
 8012530:	4610      	mov	r0, r2
 8012532:	f7fd fe63 	bl	80101fc <RegionCommonComputeSymbolTimeLoRa>
 8012536:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8012538:	4b0b      	ldr	r3, [pc, #44]	; (8012568 <RegionUS915ComputeRxWindowParameters+0x90>)
 801253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801253c:	4798      	blx	r3
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	3308      	adds	r3, #8
 8012542:	687a      	ldr	r2, [r7, #4]
 8012544:	320c      	adds	r2, #12
 8012546:	7bb9      	ldrb	r1, [r7, #14]
 8012548:	9201      	str	r2, [sp, #4]
 801254a:	9300      	str	r3, [sp, #0]
 801254c:	4603      	mov	r3, r0
 801254e:	68ba      	ldr	r2, [r7, #8]
 8012550:	6978      	ldr	r0, [r7, #20]
 8012552:	f7fd fe79 	bl	8010248 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8012556:	bf00      	nop
 8012558:	3718      	adds	r7, #24
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}
 801255e:	bf00      	nop
 8012560:	0801836c 	.word	0x0801836c
 8012564:	0801835c 	.word	0x0801835c
 8012568:	080183e0 	.word	0x080183e0

0801256c <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801256c:	b590      	push	{r4, r7, lr}
 801256e:	b091      	sub	sp, #68	; 0x44
 8012570:	af0a      	add	r7, sp, #40	; 0x28
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	785b      	ldrb	r3, [r3, #1]
 801257a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801257c:	2300      	movs	r3, #0
 801257e:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8012580:	2300      	movs	r3, #0
 8012582:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	685b      	ldr	r3, [r3, #4]
 8012588:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801258a:	4b34      	ldr	r3, [pc, #208]	; (801265c <RegionUS915RxConfig+0xf0>)
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	4798      	blx	r3
 8012590:	4603      	mov	r3, r0
 8012592:	2b00      	cmp	r3, #0
 8012594:	d001      	beq.n	801259a <RegionUS915RxConfig+0x2e>
    {
        return false;
 8012596:	2300      	movs	r3, #0
 8012598:	e05c      	b.n	8012654 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	7cdb      	ldrb	r3, [r3, #19]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d109      	bne.n	80125b6 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	f003 0307 	and.w	r3, r3, #7
 80125aa:	4a2d      	ldr	r2, [pc, #180]	; (8012660 <RegionUS915RxConfig+0xf4>)
 80125ac:	fb02 f203 	mul.w	r2, r2, r3
 80125b0:	4b2c      	ldr	r3, [pc, #176]	; (8012664 <RegionUS915RxConfig+0xf8>)
 80125b2:	4413      	add	r3, r2
 80125b4:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 80125b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125ba:	4a2b      	ldr	r2, [pc, #172]	; (8012668 <RegionUS915RxConfig+0xfc>)
 80125bc:	5cd3      	ldrb	r3, [r2, r3]
 80125be:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80125c0:	4b26      	ldr	r3, [pc, #152]	; (801265c <RegionUS915RxConfig+0xf0>)
 80125c2:	68db      	ldr	r3, [r3, #12]
 80125c4:	6938      	ldr	r0, [r7, #16]
 80125c6:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80125c8:	4b24      	ldr	r3, [pc, #144]	; (801265c <RegionUS915RxConfig+0xf0>)
 80125ca:	699c      	ldr	r4, [r3, #24]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	789b      	ldrb	r3, [r3, #2]
 80125d0:	4618      	mov	r0, r3
 80125d2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	689b      	ldr	r3, [r3, #8]
 80125da:	b29b      	uxth	r3, r3
 80125dc:	687a      	ldr	r2, [r7, #4]
 80125de:	7c92      	ldrb	r2, [r2, #18]
 80125e0:	9209      	str	r2, [sp, #36]	; 0x24
 80125e2:	2201      	movs	r2, #1
 80125e4:	9208      	str	r2, [sp, #32]
 80125e6:	2200      	movs	r2, #0
 80125e8:	9207      	str	r2, [sp, #28]
 80125ea:	2200      	movs	r2, #0
 80125ec:	9206      	str	r2, [sp, #24]
 80125ee:	2200      	movs	r2, #0
 80125f0:	9205      	str	r2, [sp, #20]
 80125f2:	2200      	movs	r2, #0
 80125f4:	9204      	str	r2, [sp, #16]
 80125f6:	2200      	movs	r2, #0
 80125f8:	9203      	str	r2, [sp, #12]
 80125fa:	9302      	str	r3, [sp, #8]
 80125fc:	2308      	movs	r3, #8
 80125fe:	9301      	str	r3, [sp, #4]
 8012600:	2300      	movs	r3, #0
 8012602:	9300      	str	r3, [sp, #0]
 8012604:	2301      	movs	r3, #1
 8012606:	460a      	mov	r2, r1
 8012608:	4601      	mov	r1, r0
 801260a:	2001      	movs	r0, #1
 801260c:	47a0      	blx	r4

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	7c5b      	ldrb	r3, [r3, #17]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d005      	beq.n	8012622 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8012616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801261a:	4a14      	ldr	r2, [pc, #80]	; (801266c <RegionUS915RxConfig+0x100>)
 801261c:	5cd3      	ldrb	r3, [r2, r3]
 801261e:	75fb      	strb	r3, [r7, #23]
 8012620:	e004      	b.n	801262c <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8012622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012626:	4a12      	ldr	r2, [pc, #72]	; (8012670 <RegionUS915RxConfig+0x104>)
 8012628:	5cd3      	ldrb	r3, [r2, r3]
 801262a:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801262c:	4b0b      	ldr	r3, [pc, #44]	; (801265c <RegionUS915RxConfig+0xf0>)
 801262e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012630:	7dfa      	ldrb	r2, [r7, #23]
 8012632:	320d      	adds	r2, #13
 8012634:	b2d2      	uxtb	r2, r2
 8012636:	4611      	mov	r1, r2
 8012638:	2001      	movs	r0, #1
 801263a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	7cdb      	ldrb	r3, [r3, #19]
 8012640:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8012644:	6939      	ldr	r1, [r7, #16]
 8012646:	4618      	mov	r0, r3
 8012648:	f7fe f878 	bl	801073c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	7bfa      	ldrb	r2, [r7, #15]
 8012650:	701a      	strb	r2, [r3, #0]
    return true;
 8012652:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8012654:	4618      	mov	r0, r3
 8012656:	371c      	adds	r7, #28
 8012658:	46bd      	mov	sp, r7
 801265a:	bd90      	pop	{r4, r7, pc}
 801265c:	080183e0 	.word	0x080183e0
 8012660:	000927c0 	.word	0x000927c0
 8012664:	370870a0 	.word	0x370870a0
 8012668:	0801835c 	.word	0x0801835c
 801266c:	080183d0 	.word	0x080183d0
 8012670:	080183c0 	.word	0x080183c0

08012674 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8012674:	b590      	push	{r4, r7, lr}
 8012676:	b093      	sub	sp, #76	; 0x4c
 8012678:	af0a      	add	r7, sp, #40	; 0x28
 801267a:	60f8      	str	r0, [r7, #12]
 801267c:	60b9      	str	r1, [r7, #8]
 801267e:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012686:	461a      	mov	r2, r3
 8012688:	4b4a      	ldr	r3, [pc, #296]	; (80127b4 <RegionUS915TxConfig+0x140>)
 801268a:	5c9b      	ldrb	r3, [r3, r2]
 801268c:	77fb      	strb	r3, [r7, #31]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8012694:	4b48      	ldr	r3, [pc, #288]	; (80127b8 <RegionUS915TxConfig+0x144>)
 8012696:	681a      	ldr	r2, [r3, #0]
 8012698:	4b48      	ldr	r3, [pc, #288]	; (80127bc <RegionUS915TxConfig+0x148>)
 801269a:	6819      	ldr	r1, [r3, #0]
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	461c      	mov	r4, r3
 80126a2:	4623      	mov	r3, r4
 80126a4:	005b      	lsls	r3, r3, #1
 80126a6:	4423      	add	r3, r4
 80126a8:	009b      	lsls	r3, r3, #2
 80126aa:	440b      	add	r3, r1
 80126ac:	3309      	adds	r3, #9
 80126ae:	781b      	ldrb	r3, [r3, #0]
 80126b0:	4619      	mov	r1, r3
 80126b2:	460b      	mov	r3, r1
 80126b4:	005b      	lsls	r3, r3, #1
 80126b6:	440b      	add	r3, r1
 80126b8:	00db      	lsls	r3, r3, #3
 80126ba:	4413      	add	r3, r2
 80126bc:	3302      	adds	r3, #2
 80126be:	f993 1000 	ldrsb.w	r1, [r3]
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80126c8:	4b3c      	ldr	r3, [pc, #240]	; (80127bc <RegionUS915TxConfig+0x148>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80126d0:	f7ff fa4e 	bl	8011b70 <LimitTxPower>
 80126d4:	4603      	mov	r3, r0
 80126d6:	77bb      	strb	r3, [r7, #30]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80126de:	4938      	ldr	r1, [pc, #224]	; (80127c0 <RegionUS915TxConfig+0x14c>)
 80126e0:	4618      	mov	r0, r3
 80126e2:	f7fe f80d 	bl	8010700 <RegionCommonGetBandwidth>
 80126e6:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80126e8:	2300      	movs	r3, #0
 80126ea:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 80126ec:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80126f0:	f04f 0200 	mov.w	r2, #0
 80126f4:	4933      	ldr	r1, [pc, #204]	; (80127c4 <RegionUS915TxConfig+0x150>)
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7fd fe5e 	bl	80103b8 <RegionCommonComputeTxPower>
 80126fc:	4603      	mov	r3, r0
 80126fe:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8012700:	4b31      	ldr	r3, [pc, #196]	; (80127c8 <RegionUS915TxConfig+0x154>)
 8012702:	68da      	ldr	r2, [r3, #12]
 8012704:	4b2d      	ldr	r3, [pc, #180]	; (80127bc <RegionUS915TxConfig+0x148>)
 8012706:	6819      	ldr	r1, [r3, #0]
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	781b      	ldrb	r3, [r3, #0]
 801270c:	4618      	mov	r0, r3
 801270e:	4603      	mov	r3, r0
 8012710:	005b      	lsls	r3, r3, #1
 8012712:	4403      	add	r3, r0
 8012714:	009b      	lsls	r3, r3, #2
 8012716:	440b      	add	r3, r1
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	4618      	mov	r0, r3
 801271c:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801271e:	4b2a      	ldr	r3, [pc, #168]	; (80127c8 <RegionUS915TxConfig+0x154>)
 8012720:	69dc      	ldr	r4, [r3, #28]
 8012722:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012726:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801272a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801272e:	9208      	str	r2, [sp, #32]
 8012730:	2200      	movs	r2, #0
 8012732:	9207      	str	r2, [sp, #28]
 8012734:	2200      	movs	r2, #0
 8012736:	9206      	str	r2, [sp, #24]
 8012738:	2200      	movs	r2, #0
 801273a:	9205      	str	r2, [sp, #20]
 801273c:	2201      	movs	r2, #1
 801273e:	9204      	str	r2, [sp, #16]
 8012740:	2200      	movs	r2, #0
 8012742:	9203      	str	r2, [sp, #12]
 8012744:	2208      	movs	r2, #8
 8012746:	9202      	str	r2, [sp, #8]
 8012748:	2201      	movs	r2, #1
 801274a:	9201      	str	r2, [sp, #4]
 801274c:	9300      	str	r3, [sp, #0]
 801274e:	69bb      	ldr	r3, [r7, #24]
 8012750:	2200      	movs	r2, #0
 8012752:	2001      	movs	r0, #1
 8012754:	47a0      	blx	r4
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8012756:	4b19      	ldr	r3, [pc, #100]	; (80127bc <RegionUS915TxConfig+0x148>)
 8012758:	681a      	ldr	r2, [r3, #0]
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	4619      	mov	r1, r3
 8012760:	460b      	mov	r3, r1
 8012762:	005b      	lsls	r3, r3, #1
 8012764:	440b      	add	r3, r1
 8012766:	009b      	lsls	r3, r3, #2
 8012768:	4413      	add	r3, r2
 801276a:	681a      	ldr	r2, [r3, #0]
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012772:	4619      	mov	r1, r3
 8012774:	4610      	mov	r0, r2
 8012776:	f7fd fffb 	bl	8010770 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801277a:	4b13      	ldr	r3, [pc, #76]	; (80127c8 <RegionUS915TxConfig+0x154>)
 801277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801277e:	68fa      	ldr	r2, [r7, #12]
 8012780:	8992      	ldrh	r2, [r2, #12]
 8012782:	b2d2      	uxtb	r2, r2
 8012784:	4611      	mov	r1, r2
 8012786:	2001      	movs	r0, #1
 8012788:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	899b      	ldrh	r3, [r3, #12]
 8012794:	4619      	mov	r1, r3
 8012796:	4610      	mov	r0, r2
 8012798:	f7ff fa64 	bl	8011c64 <GetTimeOnAir>
 801279c:	4602      	mov	r2, r0
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80127a2:	68bb      	ldr	r3, [r7, #8]
 80127a4:	7fba      	ldrb	r2, [r7, #30]
 80127a6:	701a      	strb	r2, [r3, #0]
    return true;
 80127a8:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3724      	adds	r7, #36	; 0x24
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd90      	pop	{r4, r7, pc}
 80127b2:	bf00      	nop
 80127b4:	0801835c 	.word	0x0801835c
 80127b8:	20000f60 	.word	0x20000f60
 80127bc:	20000f64 	.word	0x20000f64
 80127c0:	0801836c 	.word	0x0801836c
 80127c4:	41f00000 	.word	0x41f00000
 80127c8:	080183e0 	.word	0x080183e0

080127cc <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80127cc:	b590      	push	{r4, r7, lr}
 80127ce:	b097      	sub	sp, #92	; 0x5c
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	60f8      	str	r0, [r7, #12]
 80127d4:	60b9      	str	r1, [r7, #8]
 80127d6:	607a      	str	r2, [r7, #4]
 80127d8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80127da:	2307      	movs	r3, #7
 80127dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80127e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80127e4:	2200      	movs	r2, #0
 80127e6:	601a      	str	r2, [r3, #0]
 80127e8:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80127ea:	2300      	movs	r3, #0
 80127ec:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 80127f0:	2300      	movs	r3, #0
 80127f2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 80127f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80127fa:	2200      	movs	r2, #0
 80127fc:	601a      	str	r2, [r3, #0]
 80127fe:	605a      	str	r2, [r3, #4]
 8012800:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8012802:	4b9c      	ldr	r3, [pc, #624]	; (8012a74 <RegionUS915LinkAdrReq+0x2a8>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801280a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801280e:	2206      	movs	r2, #6
 8012810:	4618      	mov	r0, r3
 8012812:	f7fd fae5 	bl	800fde0 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8012816:	e124      	b.n	8012a62 <RegionUS915LinkAdrReq+0x296>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	685a      	ldr	r2, [r3, #4]
 801281c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012820:	4413      	add	r3, r2
 8012822:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012826:	4611      	mov	r1, r2
 8012828:	4618      	mov	r0, r3
 801282a:	f7fd fc1d 	bl	8010068 <RegionCommonParseLinkAdrReq>
 801282e:	4603      	mov	r3, r0
 8012830:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 8012834:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8012838:	2b00      	cmp	r3, #0
 801283a:	f000 811d 	beq.w	8012a78 <RegionUS915LinkAdrReq+0x2ac>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801283e:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8012842:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8012846:	4413      	add	r3, r2
 8012848:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801284c:	2307      	movs	r3, #7
 801284e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8012852:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012856:	2b06      	cmp	r3, #6
 8012858:	d116      	bne.n	8012888 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801285a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801285e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 8012862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012866:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 801286a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801286e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 8012872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012876:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801287a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801287e:	b2db      	uxtb	r3, r3
 8012880:	b29b      	uxth	r3, r3
 8012882:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8012886:	e0ec      	b.n	8012a62 <RegionUS915LinkAdrReq+0x296>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8012888:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801288c:	2b07      	cmp	r3, #7
 801288e:	d112      	bne.n	80128b6 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8012890:	2300      	movs	r3, #0
 8012892:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 8012896:	2300      	movs	r3, #0
 8012898:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 801289c:	2300      	movs	r3, #0
 801289e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 80128a2:	2300      	movs	r3, #0
 80128a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80128a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80128ac:	b2db      	uxtb	r3, r3
 80128ae:	b29b      	uxth	r3, r3
 80128b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80128b4:	e0d5      	b.n	8012a62 <RegionUS915LinkAdrReq+0x296>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 80128b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80128ba:	2b05      	cmp	r3, #5
 80128bc:	f040 80c7 	bne.w	8012a4e <RegionUS915LinkAdrReq+0x282>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 80128c0:	2301      	movs	r3, #1
 80128c2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 80128c6:	2300      	movs	r3, #0
 80128c8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 80128cc:	2300      	movs	r3, #0
 80128ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80128d2:	e0b6      	b.n	8012a42 <RegionUS915LinkAdrReq+0x276>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80128d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80128d8:	b2da      	uxtb	r2, r3
 80128da:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80128de:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80128e2:	fa01 f303 	lsl.w	r3, r1, r3
 80128e6:	4013      	ands	r3, r2
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d051      	beq.n	8012990 <RegionUS915LinkAdrReq+0x1c4>
                {
                    if( ( i % 2 ) == 0 )
 80128ec:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80128f0:	f003 0301 	and.w	r3, r3, #1
 80128f4:	b2db      	uxtb	r3, r3
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d122      	bne.n	8012940 <RegionUS915LinkAdrReq+0x174>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 80128fa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80128fe:	005b      	lsls	r3, r3, #1
 8012900:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012904:	4413      	add	r3, r2
 8012906:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801290a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801290e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8012912:	b292      	uxth	r2, r2
 8012914:	005b      	lsls	r3, r3, #1
 8012916:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801291a:	440b      	add	r3, r1
 801291c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8012920:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8012924:	b21a      	sxth	r2, r3
 8012926:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801292a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801292e:	fa01 f303 	lsl.w	r3, r1, r3
 8012932:	b21b      	sxth	r3, r3
 8012934:	4313      	orrs	r3, r2
 8012936:	b21b      	sxth	r3, r3
 8012938:	b29b      	uxth	r3, r3
 801293a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801293e:	e07b      	b.n	8012a38 <RegionUS915LinkAdrReq+0x26c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8012940:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8012944:	005b      	lsls	r3, r3, #1
 8012946:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801294a:	4413      	add	r3, r2
 801294c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8012950:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8012954:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8012958:	b292      	uxth	r2, r2
 801295a:	005b      	lsls	r3, r3, #1
 801295c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012960:	440b      	add	r3, r1
 8012962:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8012966:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801296a:	b21a      	sxth	r2, r3
 801296c:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8012970:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8012974:	fa01 f303 	lsl.w	r3, r1, r3
 8012978:	b21b      	sxth	r3, r3
 801297a:	4313      	orrs	r3, r2
 801297c:	b21b      	sxth	r3, r3
 801297e:	b29b      	uxth	r3, r3
 8012980:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8012984:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8012988:	3301      	adds	r3, #1
 801298a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801298e:	e053      	b.n	8012a38 <RegionUS915LinkAdrReq+0x26c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8012990:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8012994:	f003 0301 	and.w	r3, r3, #1
 8012998:	b2db      	uxtb	r3, r3
 801299a:	2b00      	cmp	r3, #0
 801299c:	d124      	bne.n	80129e8 <RegionUS915LinkAdrReq+0x21c>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801299e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80129a2:	005b      	lsls	r3, r3, #1
 80129a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80129a8:	4413      	add	r3, r2
 80129aa:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80129ae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80129b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80129b6:	b292      	uxth	r2, r2
 80129b8:	005b      	lsls	r3, r3, #1
 80129ba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80129be:	440b      	add	r3, r1
 80129c0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 80129c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80129c8:	b21a      	sxth	r2, r3
 80129ca:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80129ce:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80129d2:	fa01 f303 	lsl.w	r3, r1, r3
 80129d6:	b21b      	sxth	r3, r3
 80129d8:	43db      	mvns	r3, r3
 80129da:	b21b      	sxth	r3, r3
 80129dc:	4013      	ands	r3, r2
 80129de:	b21b      	sxth	r3, r3
 80129e0:	b29b      	uxth	r3, r3
 80129e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80129e6:	e027      	b.n	8012a38 <RegionUS915LinkAdrReq+0x26c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 80129e8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80129ec:	005b      	lsls	r3, r3, #1
 80129ee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80129f2:	4413      	add	r3, r2
 80129f4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80129f8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80129fc:	b2d2      	uxtb	r2, r2
 80129fe:	b292      	uxth	r2, r2
 8012a00:	005b      	lsls	r3, r3, #1
 8012a02:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012a06:	440b      	add	r3, r1
 8012a08:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8012a0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8012a10:	b21a      	sxth	r2, r3
 8012a12:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8012a16:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8012a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8012a1e:	b21b      	sxth	r3, r3
 8012a20:	43db      	mvns	r3, r3
 8012a22:	b21b      	sxth	r3, r3
 8012a24:	4013      	ands	r3, r2
 8012a26:	b21b      	sxth	r3, r3
 8012a28:	b29b      	uxth	r3, r3
 8012a2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8012a2e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8012a32:	3301      	adds	r3, #1
 8012a34:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8012a38:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8012a42:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8012a46:	2b07      	cmp	r3, #7
 8012a48:	f67f af44 	bls.w	80128d4 <RegionUS915LinkAdrReq+0x108>
 8012a4c:	e009      	b.n	8012a62 <RegionUS915LinkAdrReq+0x296>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8012a4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012a52:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8012a56:	005b      	lsls	r3, r3, #1
 8012a58:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012a5c:	440b      	add	r3, r1
 8012a5e:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	7a1b      	ldrb	r3, [r3, #8]
 8012a66:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	f4ff aed4 	bcc.w	8012818 <RegionUS915LinkAdrReq+0x4c>
 8012a70:	e003      	b.n	8012a7a <RegionUS915LinkAdrReq+0x2ae>
 8012a72:	bf00      	nop
 8012a74:	20000f64 	.word	0x20000f64
            break; // break loop, since no more request has been found
 8012a78:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8012a7a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8012a7e:	2b03      	cmp	r3, #3
 8012a80:	dc0f      	bgt.n	8012aa2 <RegionUS915LinkAdrReq+0x2d6>
 8012a82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012a86:	2204      	movs	r2, #4
 8012a88:	2100      	movs	r1, #0
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f7fd f97c 	bl	800fd88 <RegionCommonCountChannels>
 8012a90:	4603      	mov	r3, r0
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	d805      	bhi.n	8012aa2 <RegionUS915LinkAdrReq+0x2d6>
    {
        status &= 0xFE; // Channel mask KO
 8012a96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a9a:	f023 0301 	bic.w	r3, r3, #1
 8012a9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012aa2:	2302      	movs	r3, #2
 8012aa4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	7a5b      	ldrb	r3, [r3, #9]
 8012aac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8012ab0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f7ff f905 	bl	8011cc4 <RegionUS915GetPhyParam>
 8012aba:	4603      	mov	r3, r0
 8012abc:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 8012abe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ac2:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	7a9b      	ldrb	r3, [r3, #10]
 8012ac8:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8012aca:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8012ace:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8012ad0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8012ad4:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8012ad6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012ada:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8012ae2:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012aea:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	7b5b      	ldrb	r3, [r3, #13]
 8012af0:	b25b      	sxtb	r3, r3
 8012af2:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8012af4:	2348      	movs	r3, #72	; 0x48
 8012af6:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8012afa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012afe:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8012b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b02:	b25b      	sxtb	r3, r3
 8012b04:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8012b08:	2304      	movs	r3, #4
 8012b0a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8012b0e:	4b44      	ldr	r3, [pc, #272]	; (8012c20 <RegionUS915LinkAdrReq+0x454>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8012b14:	230e      	movs	r3, #14
 8012b16:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8012b26:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8012b2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012b2e:	1c9a      	adds	r2, r3, #2
 8012b30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012b34:	1c59      	adds	r1, r3, #1
 8012b36:	f107 0014 	add.w	r0, r7, #20
 8012b3a:	4623      	mov	r3, r4
 8012b3c:	f7fd fae5 	bl	801010a <RegionCommonLinkAdrReqVerifyParams>
 8012b40:	4603      	mov	r3, r0
 8012b42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8012b46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b4a:	2b07      	cmp	r3, #7
 8012b4c:	d151      	bne.n	8012bf2 <RegionUS915LinkAdrReq+0x426>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8012b4e:	4b34      	ldr	r3, [pc, #208]	; (8012c20 <RegionUS915LinkAdrReq+0x454>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8012b56:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8012b5a:	2206      	movs	r2, #6
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f7fd f93f 	bl	800fde0 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8012b62:	4b30      	ldr	r3, [pc, #192]	; (8012c24 <RegionUS915LinkAdrReq+0x458>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
 8012b6a:	4b2d      	ldr	r3, [pc, #180]	; (8012c20 <RegionUS915LinkAdrReq+0x454>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8012b72:	4b2c      	ldr	r3, [pc, #176]	; (8012c24 <RegionUS915LinkAdrReq+0x458>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	400a      	ands	r2, r1
 8012b78:	b292      	uxth	r2, r2
 8012b7a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8012b7e:	4b29      	ldr	r3, [pc, #164]	; (8012c24 <RegionUS915LinkAdrReq+0x458>)
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	f8b3 1092 	ldrh.w	r1, [r3, #146]	; 0x92
 8012b86:	4b26      	ldr	r3, [pc, #152]	; (8012c20 <RegionUS915LinkAdrReq+0x454>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 8012b8e:	4b25      	ldr	r3, [pc, #148]	; (8012c24 <RegionUS915LinkAdrReq+0x458>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	400a      	ands	r2, r1
 8012b94:	b292      	uxth	r2, r2
 8012b96:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8012b9a:	4b22      	ldr	r3, [pc, #136]	; (8012c24 <RegionUS915LinkAdrReq+0x458>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	f8b3 1094 	ldrh.w	r1, [r3, #148]	; 0x94
 8012ba2:	4b1f      	ldr	r3, [pc, #124]	; (8012c20 <RegionUS915LinkAdrReq+0x454>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 8012baa:	4b1e      	ldr	r3, [pc, #120]	; (8012c24 <RegionUS915LinkAdrReq+0x458>)
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	400a      	ands	r2, r1
 8012bb0:	b292      	uxth	r2, r2
 8012bb2:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8012bb6:	4b1b      	ldr	r3, [pc, #108]	; (8012c24 <RegionUS915LinkAdrReq+0x458>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	f8b3 1096 	ldrh.w	r1, [r3, #150]	; 0x96
 8012bbe:	4b18      	ldr	r3, [pc, #96]	; (8012c20 <RegionUS915LinkAdrReq+0x454>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 8012bc6:	4b17      	ldr	r3, [pc, #92]	; (8012c24 <RegionUS915LinkAdrReq+0x458>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	400a      	ands	r2, r1
 8012bcc:	b292      	uxth	r2, r2
 8012bce:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8012bd2:	4b13      	ldr	r3, [pc, #76]	; (8012c20 <RegionUS915LinkAdrReq+0x454>)
 8012bd4:	681a      	ldr	r2, [r3, #0]
 8012bd6:	4b13      	ldr	r3, [pc, #76]	; (8012c24 <RegionUS915LinkAdrReq+0x458>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8012bde:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8012be2:	4b0f      	ldr	r3, [pc, #60]	; (8012c20 <RegionUS915LinkAdrReq+0x454>)
 8012be4:	681a      	ldr	r2, [r3, #0]
 8012be6:	4b0f      	ldr	r3, [pc, #60]	; (8012c24 <RegionUS915LinkAdrReq+0x458>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8012bee:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8012bf2:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8012bfa:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8012c02:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8012c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c0c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8012c10:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8012c12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8012c16:	4618      	mov	r0, r3
 8012c18:	375c      	adds	r7, #92	; 0x5c
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd90      	pop	{r4, r7, pc}
 8012c1e:	bf00      	nop
 8012c20:	20000f64 	.word	0x20000f64
 8012c24:	20000f60 	.word	0x20000f60

08012c28 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b084      	sub	sp, #16
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8012c30:	2307      	movs	r3, #7
 8012c32:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7fe ffcf 	bl	8011bdc <VerifyRfFreq>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	f083 0301 	eor.w	r3, r3, #1
 8012c44:	b2db      	uxtb	r3, r3
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d003      	beq.n	8012c52 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8012c4a:	7bfb      	ldrb	r3, [r7, #15]
 8012c4c:	f023 0301 	bic.w	r3, r3, #1
 8012c50:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	f993 3000 	ldrsb.w	r3, [r3]
 8012c58:	220d      	movs	r2, #13
 8012c5a:	2108      	movs	r1, #8
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f7fd f842 	bl	800fce6 <RegionCommonValueInRange>
 8012c62:	4603      	mov	r3, r0
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d103      	bne.n	8012c70 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8012c68:	7bfb      	ldrb	r3, [r7, #15]
 8012c6a:	f023 0302 	bic.w	r3, r3, #2
 8012c6e:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f993 3000 	ldrsb.w	r3, [r3]
 8012c76:	2207      	movs	r2, #7
 8012c78:	2105      	movs	r1, #5
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7fd f833 	bl	800fce6 <RegionCommonValueInRange>
 8012c80:	4603      	mov	r3, r0
 8012c82:	2b01      	cmp	r3, #1
 8012c84:	d004      	beq.n	8012c90 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8012c8c:	2b0d      	cmp	r3, #13
 8012c8e:	dd03      	ble.n	8012c98 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8012c90:	7bfb      	ldrb	r3, [r7, #15]
 8012c92:	f023 0302 	bic.w	r3, r3, #2
 8012c96:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012c9e:	2203      	movs	r2, #3
 8012ca0:	2100      	movs	r1, #0
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7fd f81f 	bl	800fce6 <RegionCommonValueInRange>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d103      	bne.n	8012cb6 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8012cae:	7bfb      	ldrb	r3, [r7, #15]
 8012cb0:	f023 0304 	bic.w	r3, r3, #4
 8012cb4:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8012cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cb8:	4618      	mov	r0, r3
 8012cba:	3710      	adds	r7, #16
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bd80      	pop	{r7, pc}

08012cc0 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8012cc0:	b480      	push	{r7}
 8012cc2:	b083      	sub	sp, #12
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8012cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	370c      	adds	r7, #12
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bc80      	pop	{r7}
 8012cd4:	4770      	bx	lr

08012cd6 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8012cd6:	b480      	push	{r7}
 8012cd8:	b083      	sub	sp, #12
 8012cda:	af00      	add	r7, sp, #0
 8012cdc:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8012cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	370c      	adds	r7, #12
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bc80      	pop	{r7}
 8012cea:	4770      	bx	lr

08012cec <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8012cec:	b480      	push	{r7}
 8012cee:	b083      	sub	sp, #12
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8012cf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	370c      	adds	r7, #12
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bc80      	pop	{r7}
 8012d00:	4770      	bx	lr
	...

08012d04 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8012d04:	b480      	push	{r7}
 8012d06:	b083      	sub	sp, #12
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	460a      	mov	r2, r1
 8012d0e:	71fb      	strb	r3, [r7, #7]
 8012d10:	4613      	mov	r3, r2
 8012d12:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8012d14:	79bb      	ldrb	r3, [r7, #6]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d108      	bne.n	8012d2c <RegionUS915AlternateDr+0x28>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8012d1a:	4b16      	ldr	r3, [pc, #88]	; (8012d74 <RegionUS915AlternateDr+0x70>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8012d22:	3201      	adds	r2, #1
 8012d24:	b2d2      	uxtb	r2, r2
 8012d26:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8012d2a:	e007      	b.n	8012d3c <RegionUS915AlternateDr+0x38>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8012d2c:	4b11      	ldr	r3, [pc, #68]	; (8012d74 <RegionUS915AlternateDr+0x70>)
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8012d34:	3a01      	subs	r2, #1
 8012d36:	b2d2      	uxtb	r2, r2
 8012d38:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8012d3c:	4b0d      	ldr	r3, [pc, #52]	; (8012d74 <RegionUS915AlternateDr+0x70>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8012d44:	4b0c      	ldr	r3, [pc, #48]	; (8012d78 <RegionUS915AlternateDr+0x74>)
 8012d46:	fba3 1302 	umull	r1, r3, r3, r2
 8012d4a:	0859      	lsrs	r1, r3, #1
 8012d4c:	460b      	mov	r3, r1
 8012d4e:	00db      	lsls	r3, r3, #3
 8012d50:	440b      	add	r3, r1
 8012d52:	1ad3      	subs	r3, r2, r3
 8012d54:	b2db      	uxtb	r3, r3
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d102      	bne.n	8012d60 <RegionUS915AlternateDr+0x5c>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8012d5a:	2304      	movs	r3, #4
 8012d5c:	71fb      	strb	r3, [r7, #7]
 8012d5e:	e001      	b.n	8012d64 <RegionUS915AlternateDr+0x60>
    }
    else
    {
        currentDr = DR_0;
 8012d60:	2300      	movs	r3, #0
 8012d62:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8012d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	370c      	adds	r7, #12
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bc80      	pop	{r7}
 8012d70:	4770      	bx	lr
 8012d72:	bf00      	nop
 8012d74:	20000f60 	.word	0x20000f60
 8012d78:	38e38e39 	.word	0x38e38e39

08012d7c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b0a8      	sub	sp, #160	; 0xa0
 8012d80:	af02      	add	r7, sp, #8
 8012d82:	60f8      	str	r0, [r7, #12]
 8012d84:	60b9      	str	r1, [r7, #8]
 8012d86:	607a      	str	r2, [r7, #4]
 8012d88:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8012d90:	2300      	movs	r3, #0
 8012d92:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8012d96:	2300      	movs	r3, #0
 8012d98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012d9e:	2244      	movs	r2, #68	; 0x44
 8012da0:	2100      	movs	r1, #0
 8012da2:	4618      	mov	r0, r3
 8012da4:	f003 fe40 	bl	8016a28 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8012da8:	230c      	movs	r3, #12
 8012daa:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8012dae:	4b6c      	ldr	r3, [pc, #432]	; (8012f60 <RegionUS915NextChannel+0x1e4>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	3390      	adds	r3, #144	; 0x90
 8012db4:	2204      	movs	r2, #4
 8012db6:	2100      	movs	r1, #0
 8012db8:	4618      	mov	r0, r3
 8012dba:	f7fc ffe5 	bl	800fd88 <RegionCommonCountChannels>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d110      	bne.n	8012de6 <RegionUS915NextChannel+0x6a>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8012dc4:	4b66      	ldr	r3, [pc, #408]	; (8012f60 <RegionUS915NextChannel+0x1e4>)
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8012dcc:	4b65      	ldr	r3, [pc, #404]	; (8012f64 <RegionUS915NextChannel+0x1e8>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8012dd4:	2204      	movs	r2, #4
 8012dd6:	4619      	mov	r1, r3
 8012dd8:	f7fd f802 	bl	800fde0 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8012ddc:	4b60      	ldr	r3, [pc, #384]	; (8012f60 <RegionUS915NextChannel+0x1e4>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	2200      	movs	r2, #0
 8012de2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8012dec:	2b03      	cmp	r3, #3
 8012dee:	dd0e      	ble.n	8012e0e <RegionUS915NextChannel+0x92>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8012df0:	4b5b      	ldr	r3, [pc, #364]	; (8012f60 <RegionUS915NextChannel+0x1e4>)
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8012df8:	b2db      	uxtb	r3, r3
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d107      	bne.n	8012e0e <RegionUS915NextChannel+0x92>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8012dfe:	4b59      	ldr	r3, [pc, #356]	; (8012f64 <RegionUS915NextChannel+0x1e8>)
 8012e00:	681a      	ldr	r2, [r3, #0]
 8012e02:	4b57      	ldr	r3, [pc, #348]	; (8012f60 <RegionUS915NextChannel+0x1e4>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8012e0a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	7a5b      	ldrb	r3, [r3, #9]
 8012e12:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8012e1a:	b2db      	uxtb	r3, r3
 8012e1c:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8012e1e:	4b50      	ldr	r3, [pc, #320]	; (8012f60 <RegionUS915NextChannel+0x1e4>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	3390      	adds	r3, #144	; 0x90
 8012e24:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8012e26:	4b4f      	ldr	r3, [pc, #316]	; (8012f64 <RegionUS915NextChannel+0x1e8>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8012e2c:	4b4c      	ldr	r3, [pc, #304]	; (8012f60 <RegionUS915NextChannel+0x1e4>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8012e32:	2348      	movs	r3, #72	; 0x48
 8012e34:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 8012e36:	2300      	movs	r3, #0
 8012e38:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	685b      	ldr	r3, [r3, #4]
 8012e44:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	7a9b      	ldrb	r3, [r3, #10]
 8012e4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8012e4e:	2301      	movs	r3, #1
 8012e50:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8012e54:	68fa      	ldr	r2, [r7, #12]
 8012e56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012e5a:	320c      	adds	r2, #12
 8012e5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e60:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	7d1b      	ldrb	r3, [r3, #20]
 8012e68:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	8adb      	ldrh	r3, [r3, #22]
 8012e76:	4619      	mov	r1, r3
 8012e78:	4610      	mov	r0, r2
 8012e7a:	f7fe fef3 	bl	8011c64 <GetTimeOnAir>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8012e82:	f107 0314 	add.w	r3, r7, #20
 8012e86:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8012e88:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8012e8c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012e90:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	9301      	str	r3, [sp, #4]
 8012e98:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012e9c:	9300      	str	r3, [sp, #0]
 8012e9e:	460b      	mov	r3, r1
 8012ea0:	6839      	ldr	r1, [r7, #0]
 8012ea2:	f7fd fb78 	bl	8010596 <RegionCommonIdentifyChannels>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8012eac:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d14e      	bne.n	8012f52 <RegionUS915NextChannel+0x1d6>
    {
        if( nextChanParams->Joined == true )
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	7a5b      	ldrb	r3, [r3, #9]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d00f      	beq.n	8012edc <RegionUS915NextChannel+0x160>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8012ebc:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8012ec0:	3b01      	subs	r3, #1
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	2000      	movs	r0, #0
 8012ec6:	f000 f8f7 	bl	80130b8 <randr>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8012ed0:	4413      	add	r3, r2
 8012ed2:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	701a      	strb	r2, [r3, #0]
 8012eda:	e030      	b.n	8012f3e <RegionUS915NextChannel+0x1c2>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d10f      	bne.n	8012f06 <RegionUS915NextChannel+0x18a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8012ee6:	4b1e      	ldr	r3, [pc, #120]	; (8012f60 <RegionUS915NextChannel+0x1e4>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	f103 0090 	add.w	r0, r3, #144	; 0x90
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8012eee:	4b1c      	ldr	r3, [pc, #112]	; (8012f60 <RegionUS915NextChannel+0x1e4>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8012ef2:	339c      	adds	r3, #156	; 0x9c
 8012ef4:	68ba      	ldr	r2, [r7, #8]
 8012ef6:	4619      	mov	r1, r3
 8012ef8:	f7fc fcb0 	bl	800f85c <RegionBaseUSComputeNext125kHzJoinChannel>
 8012efc:	4603      	mov	r3, r0
 8012efe:	2b03      	cmp	r3, #3
 8012f00:	d11d      	bne.n	8012f3e <RegionUS915NextChannel+0x1c2>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f02:	2303      	movs	r3, #3
 8012f04:	e027      	b.n	8012f56 <RegionUS915NextChannel+0x1da>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8012f06:	2300      	movs	r3, #0
 8012f08:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8012f0c:	e004      	b.n	8012f18 <RegionUS915NextChannel+0x19c>
                {
                    i++;
 8012f0e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8012f12:	3301      	adds	r3, #1
 8012f14:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8012f18:	4b11      	ldr	r3, [pc, #68]	; (8012f60 <RegionUS915NextChannel+0x1e4>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8012f20:	b2da      	uxtb	r2, r3
 8012f22:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8012f26:	fa42 f303 	asr.w	r3, r2, r3
 8012f2a:	f003 0301 	and.w	r3, r3, #1
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d0ed      	beq.n	8012f0e <RegionUS915NextChannel+0x192>
                }
                *channel = 64 + i;
 8012f32:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8012f36:	3340      	adds	r3, #64	; 0x40
 8012f38:	b2da      	uxtb	r2, r3
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8012f3e:	4b08      	ldr	r3, [pc, #32]	; (8012f60 <RegionUS915NextChannel+0x1e4>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	781b      	ldrb	r3, [r3, #0]
 8012f4a:	2248      	movs	r2, #72	; 0x48
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	f7fc fee7 	bl	800fd20 <RegionCommonChanDisable>
    }
    return status;
 8012f52:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8012f56:	4618      	mov	r0, r3
 8012f58:	3798      	adds	r7, #152	; 0x98
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	bd80      	pop	{r7, pc}
 8012f5e:	bf00      	nop
 8012f60:	20000f60 	.word	0x20000f60
 8012f64:	20000f64 	.word	0x20000f64

08012f68 <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8012f68:	b590      	push	{r4, r7, lr}
 8012f6a:	b085      	sub	sp, #20
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8012f76:	4b23      	ldr	r3, [pc, #140]	; (8013004 <RegionUS915SetContinuousWave+0x9c>)
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	4b23      	ldr	r3, [pc, #140]	; (8013008 <RegionUS915SetContinuousWave+0xa0>)
 8012f7c:	6819      	ldr	r1, [r3, #0]
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	781b      	ldrb	r3, [r3, #0]
 8012f82:	461c      	mov	r4, r3
 8012f84:	4623      	mov	r3, r4
 8012f86:	005b      	lsls	r3, r3, #1
 8012f88:	4423      	add	r3, r4
 8012f8a:	009b      	lsls	r3, r3, #2
 8012f8c:	440b      	add	r3, r1
 8012f8e:	3309      	adds	r3, #9
 8012f90:	781b      	ldrb	r3, [r3, #0]
 8012f92:	4619      	mov	r1, r3
 8012f94:	460b      	mov	r3, r1
 8012f96:	005b      	lsls	r3, r3, #1
 8012f98:	440b      	add	r3, r1
 8012f9a:	00db      	lsls	r3, r3, #3
 8012f9c:	4413      	add	r3, r2
 8012f9e:	3302      	adds	r3, #2
 8012fa0:	f993 1000 	ldrsb.w	r1, [r3]
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8012faa:	4b17      	ldr	r3, [pc, #92]	; (8013008 <RegionUS915SetContinuousWave+0xa0>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8012fb2:	f7fe fddd 	bl	8011b70 <LimitTxPower>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8012fba:	2300      	movs	r3, #0
 8012fbc:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8012fbe:	4b12      	ldr	r3, [pc, #72]	; (8013008 <RegionUS915SetContinuousWave+0xa0>)
 8012fc0:	681a      	ldr	r2, [r3, #0]
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	4619      	mov	r1, r3
 8012fc8:	460b      	mov	r3, r1
 8012fca:	005b      	lsls	r3, r3, #1
 8012fcc:	440b      	add	r3, r1
 8012fce:	009b      	lsls	r3, r3, #2
 8012fd0:	4413      	add	r3, r2
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8012fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012fda:	f04f 0200 	mov.w	r2, #0
 8012fde:	490b      	ldr	r1, [pc, #44]	; (801300c <RegionUS915SetContinuousWave+0xa4>)
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7fd f9e9 	bl	80103b8 <RegionCommonComputeTxPower>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8012fea:	4b09      	ldr	r3, [pc, #36]	; (8013010 <RegionUS915SetContinuousWave+0xa8>)
 8012fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fee:	687a      	ldr	r2, [r7, #4]
 8012ff0:	8992      	ldrh	r2, [r2, #12]
 8012ff2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8012ff6:	68b8      	ldr	r0, [r7, #8]
 8012ff8:	4798      	blx	r3
#endif /* REGION_US915 */
}
 8012ffa:	bf00      	nop
 8012ffc:	3714      	adds	r7, #20
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd90      	pop	{r4, r7, pc}
 8013002:	bf00      	nop
 8013004:	20000f60 	.word	0x20000f60
 8013008:	20000f64 	.word	0x20000f64
 801300c:	41f00000 	.word	0x41f00000
 8013010:	080183e0 	.word	0x080183e0

08013014 <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8013014:	b480      	push	{r7}
 8013016:	b085      	sub	sp, #20
 8013018:	af00      	add	r7, sp, #0
 801301a:	4603      	mov	r3, r0
 801301c:	71fb      	strb	r3, [r7, #7]
 801301e:	460b      	mov	r3, r1
 8013020:	71bb      	strb	r3, [r7, #6]
 8013022:	4613      	mov	r3, r2
 8013024:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8013026:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801302a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801302e:	4909      	ldr	r1, [pc, #36]	; (8013054 <RegionUS915ApplyDrOffset+0x40>)
 8013030:	0092      	lsls	r2, r2, #2
 8013032:	440a      	add	r2, r1
 8013034:	4413      	add	r3, r2
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801303a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801303e:	2b00      	cmp	r3, #0
 8013040:	da01      	bge.n	8013046 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8013042:	2300      	movs	r3, #0
 8013044:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8013046:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8013048:	4618      	mov	r0, r3
 801304a:	3714      	adds	r7, #20
 801304c:	46bd      	mov	sp, r7
 801304e:	bc80      	pop	{r7}
 8013050:	4770      	bx	lr
 8013052:	bf00      	nop
 8013054:	080183ac 	.word	0x080183ac

08013058 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8013058:	b480      	push	{r7}
 801305a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801305c:	4b0d      	ldr	r3, [pc, #52]	; (8013094 <rand1+0x3c>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	4a0d      	ldr	r2, [pc, #52]	; (8013098 <rand1+0x40>)
 8013062:	fb02 f303 	mul.w	r3, r2, r3
 8013066:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801306a:	3339      	adds	r3, #57	; 0x39
 801306c:	4a09      	ldr	r2, [pc, #36]	; (8013094 <rand1+0x3c>)
 801306e:	6013      	str	r3, [r2, #0]
 8013070:	4b08      	ldr	r3, [pc, #32]	; (8013094 <rand1+0x3c>)
 8013072:	681a      	ldr	r2, [r3, #0]
 8013074:	2303      	movs	r3, #3
 8013076:	fba3 1302 	umull	r1, r3, r3, r2
 801307a:	1ad1      	subs	r1, r2, r3
 801307c:	0849      	lsrs	r1, r1, #1
 801307e:	440b      	add	r3, r1
 8013080:	0f99      	lsrs	r1, r3, #30
 8013082:	460b      	mov	r3, r1
 8013084:	07db      	lsls	r3, r3, #31
 8013086:	1a5b      	subs	r3, r3, r1
 8013088:	1ad1      	subs	r1, r2, r3
 801308a:	460b      	mov	r3, r1
}
 801308c:	4618      	mov	r0, r3
 801308e:	46bd      	mov	sp, r7
 8013090:	bc80      	pop	{r7}
 8013092:	4770      	bx	lr
 8013094:	200000e8 	.word	0x200000e8
 8013098:	41c64e6d 	.word	0x41c64e6d

0801309c <srand1>:

void srand1( uint32_t seed )
{
 801309c:	b480      	push	{r7}
 801309e:	b083      	sub	sp, #12
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
    next = seed;
 80130a4:	4a03      	ldr	r2, [pc, #12]	; (80130b4 <srand1+0x18>)
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	6013      	str	r3, [r2, #0]
}
 80130aa:	bf00      	nop
 80130ac:	370c      	adds	r7, #12
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bc80      	pop	{r7}
 80130b2:	4770      	bx	lr
 80130b4:	200000e8 	.word	0x200000e8

080130b8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b082      	sub	sp, #8
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80130c2:	f7ff ffc9 	bl	8013058 <rand1>
 80130c6:	4602      	mov	r2, r0
 80130c8:	6839      	ldr	r1, [r7, #0]
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	1acb      	subs	r3, r1, r3
 80130ce:	3301      	adds	r3, #1
 80130d0:	fb92 f1f3 	sdiv	r1, r2, r3
 80130d4:	fb03 f301 	mul.w	r3, r3, r1
 80130d8:	1ad2      	subs	r2, r2, r3
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	4413      	add	r3, r2
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3708      	adds	r7, #8
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}

080130e6 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80130e6:	b480      	push	{r7}
 80130e8:	b085      	sub	sp, #20
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	60f8      	str	r0, [r7, #12]
 80130ee:	60b9      	str	r1, [r7, #8]
 80130f0:	4613      	mov	r3, r2
 80130f2:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80130f4:	e007      	b.n	8013106 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80130f6:	68ba      	ldr	r2, [r7, #8]
 80130f8:	1c53      	adds	r3, r2, #1
 80130fa:	60bb      	str	r3, [r7, #8]
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	1c59      	adds	r1, r3, #1
 8013100:	60f9      	str	r1, [r7, #12]
 8013102:	7812      	ldrb	r2, [r2, #0]
 8013104:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8013106:	88fb      	ldrh	r3, [r7, #6]
 8013108:	1e5a      	subs	r2, r3, #1
 801310a:	80fa      	strh	r2, [r7, #6]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d1f2      	bne.n	80130f6 <memcpy1+0x10>
    }
}
 8013110:	bf00      	nop
 8013112:	bf00      	nop
 8013114:	3714      	adds	r7, #20
 8013116:	46bd      	mov	sp, r7
 8013118:	bc80      	pop	{r7}
 801311a:	4770      	bx	lr

0801311c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801311c:	b480      	push	{r7}
 801311e:	b085      	sub	sp, #20
 8013120:	af00      	add	r7, sp, #0
 8013122:	60f8      	str	r0, [r7, #12]
 8013124:	60b9      	str	r1, [r7, #8]
 8013126:	4613      	mov	r3, r2
 8013128:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801312a:	88fb      	ldrh	r3, [r7, #6]
 801312c:	3b01      	subs	r3, #1
 801312e:	68fa      	ldr	r2, [r7, #12]
 8013130:	4413      	add	r3, r2
 8013132:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8013134:	e007      	b.n	8013146 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8013136:	68ba      	ldr	r2, [r7, #8]
 8013138:	1c53      	adds	r3, r2, #1
 801313a:	60bb      	str	r3, [r7, #8]
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	1e59      	subs	r1, r3, #1
 8013140:	60f9      	str	r1, [r7, #12]
 8013142:	7812      	ldrb	r2, [r2, #0]
 8013144:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8013146:	88fb      	ldrh	r3, [r7, #6]
 8013148:	1e5a      	subs	r2, r3, #1
 801314a:	80fa      	strh	r2, [r7, #6]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d1f2      	bne.n	8013136 <memcpyr+0x1a>
    }
}
 8013150:	bf00      	nop
 8013152:	bf00      	nop
 8013154:	3714      	adds	r7, #20
 8013156:	46bd      	mov	sp, r7
 8013158:	bc80      	pop	{r7}
 801315a:	4770      	bx	lr

0801315c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801315c:	b480      	push	{r7}
 801315e:	b083      	sub	sp, #12
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
 8013164:	460b      	mov	r3, r1
 8013166:	70fb      	strb	r3, [r7, #3]
 8013168:	4613      	mov	r3, r2
 801316a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801316c:	e004      	b.n	8013178 <memset1+0x1c>
    {
        *dst++ = value;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	1c5a      	adds	r2, r3, #1
 8013172:	607a      	str	r2, [r7, #4]
 8013174:	78fa      	ldrb	r2, [r7, #3]
 8013176:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8013178:	883b      	ldrh	r3, [r7, #0]
 801317a:	1e5a      	subs	r2, r3, #1
 801317c:	803a      	strh	r2, [r7, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d1f5      	bne.n	801316e <memset1+0x12>
    }
}
 8013182:	bf00      	nop
 8013184:	bf00      	nop
 8013186:	370c      	adds	r7, #12
 8013188:	46bd      	mov	sp, r7
 801318a:	bc80      	pop	{r7}
 801318c:	4770      	bx	lr
	...

08013190 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8013190:	b480      	push	{r7}
 8013192:	b087      	sub	sp, #28
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	460b      	mov	r3, r1
 801319a:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 801319c:	4b1a      	ldr	r3, [pc, #104]	; (8013208 <Crc32+0x78>)
 801319e:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80131a0:	f04f 33ff 	mov.w	r3, #4294967295
 80131a4:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d101      	bne.n	80131b0 <Crc32+0x20>
    {
        return 0;
 80131ac:	2300      	movs	r3, #0
 80131ae:	e026      	b.n	80131fe <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 80131b0:	2300      	movs	r3, #0
 80131b2:	827b      	strh	r3, [r7, #18]
 80131b4:	e01d      	b.n	80131f2 <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 80131b6:	8a7b      	ldrh	r3, [r7, #18]
 80131b8:	687a      	ldr	r2, [r7, #4]
 80131ba:	4413      	add	r3, r2
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	461a      	mov	r2, r3
 80131c0:	697b      	ldr	r3, [r7, #20]
 80131c2:	4053      	eors	r3, r2
 80131c4:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80131c6:	2300      	movs	r3, #0
 80131c8:	823b      	strh	r3, [r7, #16]
 80131ca:	e00c      	b.n	80131e6 <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	085a      	lsrs	r2, r3, #1
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	f003 0301 	and.w	r3, r3, #1
 80131d6:	4259      	negs	r1, r3
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	400b      	ands	r3, r1
 80131dc:	4053      	eors	r3, r2
 80131de:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80131e0:	8a3b      	ldrh	r3, [r7, #16]
 80131e2:	3301      	adds	r3, #1
 80131e4:	823b      	strh	r3, [r7, #16]
 80131e6:	8a3b      	ldrh	r3, [r7, #16]
 80131e8:	2b07      	cmp	r3, #7
 80131ea:	d9ef      	bls.n	80131cc <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 80131ec:	8a7b      	ldrh	r3, [r7, #18]
 80131ee:	3301      	adds	r3, #1
 80131f0:	827b      	strh	r3, [r7, #18]
 80131f2:	8a7a      	ldrh	r2, [r7, #18]
 80131f4:	887b      	ldrh	r3, [r7, #2]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d3dd      	bcc.n	80131b6 <Crc32+0x26>
        }
    }

    return ~crc;
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	43db      	mvns	r3, r3
}
 80131fe:	4618      	mov	r0, r3
 8013200:	371c      	adds	r7, #28
 8013202:	46bd      	mov	sp, r7
 8013204:	bc80      	pop	{r7}
 8013206:	4770      	bx	lr
 8013208:	edb88320 	.word	0xedb88320

0801320c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b084      	sub	sp, #16
 8013210:	af02      	add	r7, sp, #8
 8013212:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8013214:	4a21      	ldr	r2, [pc, #132]	; (801329c <RadioInit+0x90>)
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801321a:	4b21      	ldr	r3, [pc, #132]	; (80132a0 <RadioInit+0x94>)
 801321c:	2200      	movs	r2, #0
 801321e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8013220:	4b1f      	ldr	r3, [pc, #124]	; (80132a0 <RadioInit+0x94>)
 8013222:	2200      	movs	r2, #0
 8013224:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8013226:	4b1e      	ldr	r3, [pc, #120]	; (80132a0 <RadioInit+0x94>)
 8013228:	2200      	movs	r2, #0
 801322a:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 801322c:	481d      	ldr	r0, [pc, #116]	; (80132a4 <RadioInit+0x98>)
 801322e:	f001 fe7b 	bl	8014f28 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8013232:	2000      	movs	r0, #0
 8013234:	f001 f818 	bl	8014268 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8013238:	f002 f90c 	bl	8015454 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801323c:	2100      	movs	r1, #0
 801323e:	2000      	movs	r0, #0
 8013240:	f002 fc62 	bl	8015b08 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8013244:	2204      	movs	r2, #4
 8013246:	2100      	movs	r1, #0
 8013248:	2001      	movs	r0, #1
 801324a:	f002 fa8d 	bl	8015768 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801324e:	2300      	movs	r3, #0
 8013250:	2200      	movs	r2, #0
 8013252:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013256:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801325a:	f002 f9c1 	bl	80155e0 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801325e:	f000 fe95 	bl	8013f8c <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8013262:	2300      	movs	r3, #0
 8013264:	9300      	str	r3, [sp, #0]
 8013266:	4b10      	ldr	r3, [pc, #64]	; (80132a8 <RadioInit+0x9c>)
 8013268:	2200      	movs	r2, #0
 801326a:	f04f 31ff 	mov.w	r1, #4294967295
 801326e:	480f      	ldr	r0, [pc, #60]	; (80132ac <RadioInit+0xa0>)
 8013270:	f003 f9b0 	bl	80165d4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8013274:	2300      	movs	r3, #0
 8013276:	9300      	str	r3, [sp, #0]
 8013278:	4b0d      	ldr	r3, [pc, #52]	; (80132b0 <RadioInit+0xa4>)
 801327a:	2200      	movs	r2, #0
 801327c:	f04f 31ff 	mov.w	r1, #4294967295
 8013280:	480c      	ldr	r0, [pc, #48]	; (80132b4 <RadioInit+0xa8>)
 8013282:	f003 f9a7 	bl	80165d4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8013286:	4809      	ldr	r0, [pc, #36]	; (80132ac <RadioInit+0xa0>)
 8013288:	f003 fa48 	bl	801671c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801328c:	4809      	ldr	r0, [pc, #36]	; (80132b4 <RadioInit+0xa8>)
 801328e:	f003 fa45 	bl	801671c <UTIL_TIMER_Stop>
}
 8013292:	bf00      	nop
 8013294:	3708      	adds	r7, #8
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}
 801329a:	bf00      	nop
 801329c:	20001068 	.word	0x20001068
 80132a0:	20001234 	.word	0x20001234
 80132a4:	0801434d 	.word	0x0801434d
 80132a8:	080142d5 	.word	0x080142d5
 80132ac:	2000128c 	.word	0x2000128c
 80132b0:	080142e9 	.word	0x080142e9
 80132b4:	200012a4 	.word	0x200012a4

080132b8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80132bc:	f001 fe76 	bl	8014fac <SUBGRF_GetOperatingMode>
 80132c0:	4603      	mov	r3, r0
 80132c2:	2b07      	cmp	r3, #7
 80132c4:	d00a      	beq.n	80132dc <RadioGetStatus+0x24>
 80132c6:	2b07      	cmp	r3, #7
 80132c8:	dc0a      	bgt.n	80132e0 <RadioGetStatus+0x28>
 80132ca:	2b04      	cmp	r3, #4
 80132cc:	d002      	beq.n	80132d4 <RadioGetStatus+0x1c>
 80132ce:	2b05      	cmp	r3, #5
 80132d0:	d002      	beq.n	80132d8 <RadioGetStatus+0x20>
 80132d2:	e005      	b.n	80132e0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80132d4:	2302      	movs	r3, #2
 80132d6:	e004      	b.n	80132e2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80132d8:	2301      	movs	r3, #1
 80132da:	e002      	b.n	80132e2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80132dc:	2303      	movs	r3, #3
 80132de:	e000      	b.n	80132e2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80132e0:	2300      	movs	r3, #0
    }
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	bd80      	pop	{r7, pc}
	...

080132e8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b082      	sub	sp, #8
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	4603      	mov	r3, r0
 80132f0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80132f2:	4a25      	ldr	r2, [pc, #148]	; (8013388 <RadioSetModem+0xa0>)
 80132f4:	79fb      	ldrb	r3, [r7, #7]
 80132f6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 80132f8:	79fb      	ldrb	r3, [r7, #7]
 80132fa:	4618      	mov	r0, r3
 80132fc:	f002 ffc9 	bl	8016292 <RFW_SetRadioModem>
    switch( modem )
 8013300:	79fb      	ldrb	r3, [r7, #7]
 8013302:	3b01      	subs	r3, #1
 8013304:	2b03      	cmp	r3, #3
 8013306:	d80b      	bhi.n	8013320 <RadioSetModem+0x38>
 8013308:	a201      	add	r2, pc, #4	; (adr r2, 8013310 <RadioSetModem+0x28>)
 801330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801330e:	bf00      	nop
 8013310:	0801332f 	.word	0x0801332f
 8013314:	08013355 	.word	0x08013355
 8013318:	08013363 	.word	0x08013363
 801331c:	08013371 	.word	0x08013371
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8013320:	2000      	movs	r0, #0
 8013322:	f002 f9fb 	bl	801571c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8013326:	4b18      	ldr	r3, [pc, #96]	; (8013388 <RadioSetModem+0xa0>)
 8013328:	2200      	movs	r2, #0
 801332a:	735a      	strb	r2, [r3, #13]
        break;
 801332c:	e028      	b.n	8013380 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801332e:	2001      	movs	r0, #1
 8013330:	f002 f9f4 	bl	801571c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8013334:	4b14      	ldr	r3, [pc, #80]	; (8013388 <RadioSetModem+0xa0>)
 8013336:	7b5a      	ldrb	r2, [r3, #13]
 8013338:	4b13      	ldr	r3, [pc, #76]	; (8013388 <RadioSetModem+0xa0>)
 801333a:	7b1b      	ldrb	r3, [r3, #12]
 801333c:	429a      	cmp	r2, r3
 801333e:	d01e      	beq.n	801337e <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8013340:	4b11      	ldr	r3, [pc, #68]	; (8013388 <RadioSetModem+0xa0>)
 8013342:	7b1a      	ldrb	r2, [r3, #12]
 8013344:	4b10      	ldr	r3, [pc, #64]	; (8013388 <RadioSetModem+0xa0>)
 8013346:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8013348:	4b0f      	ldr	r3, [pc, #60]	; (8013388 <RadioSetModem+0xa0>)
 801334a:	7b5b      	ldrb	r3, [r3, #13]
 801334c:	4618      	mov	r0, r3
 801334e:	f000 ff8b 	bl	8014268 <RadioSetPublicNetwork>
        }
        break;
 8013352:	e014      	b.n	801337e <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8013354:	2002      	movs	r0, #2
 8013356:	f002 f9e1 	bl	801571c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801335a:	4b0b      	ldr	r3, [pc, #44]	; (8013388 <RadioSetModem+0xa0>)
 801335c:	2200      	movs	r2, #0
 801335e:	735a      	strb	r2, [r3, #13]
        break;
 8013360:	e00e      	b.n	8013380 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8013362:	2002      	movs	r0, #2
 8013364:	f002 f9da 	bl	801571c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8013368:	4b07      	ldr	r3, [pc, #28]	; (8013388 <RadioSetModem+0xa0>)
 801336a:	2200      	movs	r2, #0
 801336c:	735a      	strb	r2, [r3, #13]
        break;
 801336e:	e007      	b.n	8013380 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8013370:	2000      	movs	r0, #0
 8013372:	f002 f9d3 	bl	801571c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8013376:	4b04      	ldr	r3, [pc, #16]	; (8013388 <RadioSetModem+0xa0>)
 8013378:	2200      	movs	r2, #0
 801337a:	735a      	strb	r2, [r3, #13]
        break;
 801337c:	e000      	b.n	8013380 <RadioSetModem+0x98>
        break;
 801337e:	bf00      	nop
    }
}
 8013380:	bf00      	nop
 8013382:	3708      	adds	r7, #8
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}
 8013388:	20001234 	.word	0x20001234

0801338c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b082      	sub	sp, #8
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f002 f97f 	bl	8015698 <SUBGRF_SetRfFrequency>
}
 801339a:	bf00      	nop
 801339c:	3708      	adds	r7, #8
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}

080133a2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80133a2:	b580      	push	{r7, lr}
 80133a4:	b090      	sub	sp, #64	; 0x40
 80133a6:	af0a      	add	r7, sp, #40	; 0x28
 80133a8:	60f8      	str	r0, [r7, #12]
 80133aa:	60b9      	str	r1, [r7, #8]
 80133ac:	603b      	str	r3, [r7, #0]
 80133ae:	4613      	mov	r3, r2
 80133b0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80133b2:	2301      	movs	r3, #1
 80133b4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80133b6:	2300      	movs	r3, #0
 80133b8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80133ba:	2300      	movs	r3, #0
 80133bc:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80133be:	f000 fdf8 	bl	8013fb2 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 80133c2:	2000      	movs	r0, #0
 80133c4:	f7ff ff90 	bl	80132e8 <RadioSetModem>

    RadioSetChannel( freq );
 80133c8:	68f8      	ldr	r0, [r7, #12]
 80133ca:	f7ff ffdf 	bl	801338c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80133ce:	2301      	movs	r3, #1
 80133d0:	9309      	str	r3, [sp, #36]	; 0x24
 80133d2:	2300      	movs	r3, #0
 80133d4:	9308      	str	r3, [sp, #32]
 80133d6:	2300      	movs	r3, #0
 80133d8:	9307      	str	r3, [sp, #28]
 80133da:	2300      	movs	r3, #0
 80133dc:	9306      	str	r3, [sp, #24]
 80133de:	2300      	movs	r3, #0
 80133e0:	9305      	str	r3, [sp, #20]
 80133e2:	2300      	movs	r3, #0
 80133e4:	9304      	str	r3, [sp, #16]
 80133e6:	2300      	movs	r3, #0
 80133e8:	9303      	str	r3, [sp, #12]
 80133ea:	2300      	movs	r3, #0
 80133ec:	9302      	str	r3, [sp, #8]
 80133ee:	2303      	movs	r3, #3
 80133f0:	9301      	str	r3, [sp, #4]
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	9300      	str	r3, [sp, #0]
 80133f6:	2300      	movs	r3, #0
 80133f8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80133fc:	68b9      	ldr	r1, [r7, #8]
 80133fe:	2000      	movs	r0, #0
 8013400:	f000 f840 	bl	8013484 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8013404:	2000      	movs	r0, #0
 8013406:	f000 fddb 	bl	8013fc0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801340a:	f000 ff5b 	bl	80142c4 <RadioGetWakeupTime>
 801340e:	4603      	mov	r3, r0
 8013410:	4618      	mov	r0, r3
 8013412:	f7ee f825 	bl	8001460 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8013416:	f003 fa1b 	bl	8016850 <UTIL_TIMER_GetCurrentTime>
 801341a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801341c:	e00d      	b.n	801343a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801341e:	2000      	movs	r0, #0
 8013420:	f000 fea0 	bl	8014164 <RadioRssi>
 8013424:	4603      	mov	r3, r0
 8013426:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8013428:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801342c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013430:	429a      	cmp	r2, r3
 8013432:	dd02      	ble.n	801343a <RadioIsChannelFree+0x98>
        {
            status = false;
 8013434:	2300      	movs	r3, #0
 8013436:	75fb      	strb	r3, [r7, #23]
            break;
 8013438:	e006      	b.n	8013448 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801343a:	6938      	ldr	r0, [r7, #16]
 801343c:	f003 fa1a 	bl	8016874 <UTIL_TIMER_GetElapsedTime>
 8013440:	4602      	mov	r2, r0
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	4293      	cmp	r3, r2
 8013446:	d8ea      	bhi.n	801341e <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8013448:	f000 fdb3 	bl	8013fb2 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 801344c:	7dfb      	ldrb	r3, [r7, #23]
}
 801344e:	4618      	mov	r0, r3
 8013450:	3718      	adds	r7, #24
 8013452:	46bd      	mov	sp, r7
 8013454:	bd80      	pop	{r7, pc}

08013456 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8013456:	b580      	push	{r7, lr}
 8013458:	b082      	sub	sp, #8
 801345a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801345c:	2300      	movs	r3, #0
 801345e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8013460:	2001      	movs	r0, #1
 8013462:	f7ff ff41 	bl	80132e8 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8013466:	2300      	movs	r3, #0
 8013468:	2200      	movs	r2, #0
 801346a:	2100      	movs	r1, #0
 801346c:	2000      	movs	r0, #0
 801346e:	f002 f8b7 	bl	80155e0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8013472:	f001 fe6c 	bl	801514e <SUBGRF_GetRandom>
 8013476:	6078      	str	r0, [r7, #4]

    return rnd;
 8013478:	687b      	ldr	r3, [r7, #4]
}
 801347a:	4618      	mov	r0, r3
 801347c:	3708      	adds	r7, #8
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
	...

08013484 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b08a      	sub	sp, #40	; 0x28
 8013488:	af00      	add	r7, sp, #0
 801348a:	60b9      	str	r1, [r7, #8]
 801348c:	607a      	str	r2, [r7, #4]
 801348e:	461a      	mov	r2, r3
 8013490:	4603      	mov	r3, r0
 8013492:	73fb      	strb	r3, [r7, #15]
 8013494:	4613      	mov	r3, r2
 8013496:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8013498:	4abd      	ldr	r2, [pc, #756]	; (8013790 <RadioSetRxConfig+0x30c>)
 801349a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801349e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80134a0:	f002 feb5 	bl	801620e <RFW_DeInit>
    if( rxContinuous == true )
 80134a4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d001      	beq.n	80134b0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80134ac:	2300      	movs	r3, #0
 80134ae:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80134b0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d004      	beq.n	80134c2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80134b8:	4ab6      	ldr	r2, [pc, #728]	; (8013794 <RadioSetRxConfig+0x310>)
 80134ba:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80134be:	7013      	strb	r3, [r2, #0]
 80134c0:	e002      	b.n	80134c8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80134c2:	4bb4      	ldr	r3, [pc, #720]	; (8013794 <RadioSetRxConfig+0x310>)
 80134c4:	22ff      	movs	r2, #255	; 0xff
 80134c6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80134c8:	7bfb      	ldrb	r3, [r7, #15]
 80134ca:	2b04      	cmp	r3, #4
 80134cc:	d009      	beq.n	80134e2 <RadioSetRxConfig+0x5e>
 80134ce:	2b04      	cmp	r3, #4
 80134d0:	f300 81da 	bgt.w	8013888 <RadioSetRxConfig+0x404>
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	f000 80bf 	beq.w	8013658 <RadioSetRxConfig+0x1d4>
 80134da:	2b01      	cmp	r3, #1
 80134dc:	f000 812c 	beq.w	8013738 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80134e0:	e1d2      	b.n	8013888 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80134e2:	2001      	movs	r0, #1
 80134e4:	f001 ff78 	bl	80153d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80134e8:	4ba9      	ldr	r3, [pc, #676]	; (8013790 <RadioSetRxConfig+0x30c>)
 80134ea:	2200      	movs	r2, #0
 80134ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80134f0:	4aa7      	ldr	r2, [pc, #668]	; (8013790 <RadioSetRxConfig+0x30c>)
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80134f6:	4ba6      	ldr	r3, [pc, #664]	; (8013790 <RadioSetRxConfig+0x30c>)
 80134f8:	2209      	movs	r2, #9
 80134fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80134fe:	4ba4      	ldr	r3, [pc, #656]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013500:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013504:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8013506:	68b8      	ldr	r0, [r7, #8]
 8013508:	f002 fdb2 	bl	8016070 <SUBGRF_GetFskBandwidthRegValue>
 801350c:	4603      	mov	r3, r0
 801350e:	461a      	mov	r2, r3
 8013510:	4b9f      	ldr	r3, [pc, #636]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8013516:	4b9e      	ldr	r3, [pc, #632]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013518:	2200      	movs	r2, #0
 801351a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801351c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801351e:	00db      	lsls	r3, r3, #3
 8013520:	b29a      	uxth	r2, r3
 8013522:	4b9b      	ldr	r3, [pc, #620]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013524:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8013526:	4b9a      	ldr	r3, [pc, #616]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013528:	2200      	movs	r2, #0
 801352a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801352c:	4b98      	ldr	r3, [pc, #608]	; (8013790 <RadioSetRxConfig+0x30c>)
 801352e:	2210      	movs	r2, #16
 8013530:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8013532:	4b97      	ldr	r3, [pc, #604]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013534:	2200      	movs	r2, #0
 8013536:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8013538:	4b95      	ldr	r3, [pc, #596]	; (8013790 <RadioSetRxConfig+0x30c>)
 801353a:	2200      	movs	r2, #0
 801353c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801353e:	4b95      	ldr	r3, [pc, #596]	; (8013794 <RadioSetRxConfig+0x310>)
 8013540:	781a      	ldrb	r2, [r3, #0]
 8013542:	4b93      	ldr	r3, [pc, #588]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013544:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8013546:	4b92      	ldr	r3, [pc, #584]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013548:	2201      	movs	r2, #1
 801354a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801354c:	4b90      	ldr	r3, [pc, #576]	; (8013790 <RadioSetRxConfig+0x30c>)
 801354e:	2200      	movs	r2, #0
 8013550:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8013552:	2004      	movs	r0, #4
 8013554:	f7ff fec8 	bl	80132e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013558:	488f      	ldr	r0, [pc, #572]	; (8013798 <RadioSetRxConfig+0x314>)
 801355a:	f002 f96b 	bl	8015834 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801355e:	488f      	ldr	r0, [pc, #572]	; (801379c <RadioSetRxConfig+0x318>)
 8013560:	f002 fa34 	bl	80159cc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8013564:	4a8e      	ldr	r2, [pc, #568]	; (80137a0 <RadioSetRxConfig+0x31c>)
 8013566:	f107 031c 	add.w	r3, r7, #28
 801356a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801356e:	e883 0003 	stmia.w	r3, {r0, r1}
 8013572:	f107 031c 	add.w	r3, r7, #28
 8013576:	4618      	mov	r0, r3
 8013578:	f001 fd67 	bl	801504a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801357c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013580:	f001 fdb2 	bl	80150e8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8013584:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8013588:	f000 fe0b 	bl	80141a2 <RadioRead>
 801358c:	4603      	mov	r3, r0
 801358e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8013592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013596:	f023 0310 	bic.w	r3, r3, #16
 801359a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 801359e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135a2:	4619      	mov	r1, r3
 80135a4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80135a8:	f000 fde9 	bl	801417e <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 80135ac:	2104      	movs	r1, #4
 80135ae:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80135b2:	f000 fde4 	bl	801417e <RadioWrite>
            modReg= RadioRead(0x89b);
 80135b6:	f640 009b 	movw	r0, #2203	; 0x89b
 80135ba:	f000 fdf2 	bl	80141a2 <RadioRead>
 80135be:	4603      	mov	r3, r0
 80135c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80135c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135c8:	f023 031c 	bic.w	r3, r3, #28
 80135cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 80135d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135d4:	f043 0308 	orr.w	r3, r3, #8
 80135d8:	b2db      	uxtb	r3, r3
 80135da:	4619      	mov	r1, r3
 80135dc:	f640 009b 	movw	r0, #2203	; 0x89b
 80135e0:	f000 fdcd 	bl	801417e <RadioWrite>
            modReg= RadioRead(0x6d1);
 80135e4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80135e8:	f000 fddb 	bl	80141a2 <RadioRead>
 80135ec:	4603      	mov	r3, r0
 80135ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80135f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135f6:	f023 0318 	bic.w	r3, r3, #24
 80135fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 80135fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013602:	f043 0318 	orr.w	r3, r3, #24
 8013606:	b2db      	uxtb	r3, r3
 8013608:	4619      	mov	r1, r3
 801360a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801360e:	f000 fdb6 	bl	801417e <RadioWrite>
            modReg= RadioRead(0x6ac);
 8013612:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8013616:	f000 fdc4 	bl	80141a2 <RadioRead>
 801361a:	4603      	mov	r3, r0
 801361c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8013620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 801362c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013630:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8013634:	b2db      	uxtb	r3, r3
 8013636:	4619      	mov	r1, r3
 8013638:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801363c:	f000 fd9f 	bl	801417e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8013640:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013642:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8013646:	fb02 f303 	mul.w	r3, r2, r3
 801364a:	461a      	mov	r2, r3
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013652:	4a4f      	ldr	r2, [pc, #316]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013654:	6093      	str	r3, [r2, #8]
            break;
 8013656:	e118      	b.n	801388a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8013658:	2000      	movs	r0, #0
 801365a:	f001 febd 	bl	80153d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801365e:	4b4c      	ldr	r3, [pc, #304]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013660:	2200      	movs	r2, #0
 8013662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8013666:	4a4a      	ldr	r2, [pc, #296]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801366c:	4b48      	ldr	r3, [pc, #288]	; (8013790 <RadioSetRxConfig+0x30c>)
 801366e:	220b      	movs	r2, #11
 8013670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8013674:	68b8      	ldr	r0, [r7, #8]
 8013676:	f002 fcfb 	bl	8016070 <SUBGRF_GetFskBandwidthRegValue>
 801367a:	4603      	mov	r3, r0
 801367c:	461a      	mov	r2, r3
 801367e:	4b44      	ldr	r3, [pc, #272]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8013684:	4b42      	ldr	r3, [pc, #264]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013686:	2200      	movs	r2, #0
 8013688:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801368a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801368c:	00db      	lsls	r3, r3, #3
 801368e:	b29a      	uxth	r2, r3
 8013690:	4b3f      	ldr	r3, [pc, #252]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013692:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8013694:	4b3e      	ldr	r3, [pc, #248]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013696:	2204      	movs	r2, #4
 8013698:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801369a:	4b3d      	ldr	r3, [pc, #244]	; (8013790 <RadioSetRxConfig+0x30c>)
 801369c:	2218      	movs	r2, #24
 801369e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80136a0:	4b3b      	ldr	r3, [pc, #236]	; (8013790 <RadioSetRxConfig+0x30c>)
 80136a2:	2200      	movs	r2, #0
 80136a4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80136a6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80136aa:	f083 0301 	eor.w	r3, r3, #1
 80136ae:	b2db      	uxtb	r3, r3
 80136b0:	461a      	mov	r2, r3
 80136b2:	4b37      	ldr	r3, [pc, #220]	; (8013790 <RadioSetRxConfig+0x30c>)
 80136b4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80136b6:	4b37      	ldr	r3, [pc, #220]	; (8013794 <RadioSetRxConfig+0x310>)
 80136b8:	781a      	ldrb	r2, [r3, #0]
 80136ba:	4b35      	ldr	r3, [pc, #212]	; (8013790 <RadioSetRxConfig+0x30c>)
 80136bc:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80136be:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d003      	beq.n	80136ce <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80136c6:	4b32      	ldr	r3, [pc, #200]	; (8013790 <RadioSetRxConfig+0x30c>)
 80136c8:	22f2      	movs	r2, #242	; 0xf2
 80136ca:	75da      	strb	r2, [r3, #23]
 80136cc:	e002      	b.n	80136d4 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80136ce:	4b30      	ldr	r3, [pc, #192]	; (8013790 <RadioSetRxConfig+0x30c>)
 80136d0:	2201      	movs	r2, #1
 80136d2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80136d4:	4b2e      	ldr	r3, [pc, #184]	; (8013790 <RadioSetRxConfig+0x30c>)
 80136d6:	2201      	movs	r2, #1
 80136d8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80136da:	f000 fc6a 	bl	8013fb2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80136de:	4b2c      	ldr	r3, [pc, #176]	; (8013790 <RadioSetRxConfig+0x30c>)
 80136e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	bf14      	ite	ne
 80136e8:	2301      	movne	r3, #1
 80136ea:	2300      	moveq	r3, #0
 80136ec:	b2db      	uxtb	r3, r3
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7ff fdfa 	bl	80132e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80136f4:	4828      	ldr	r0, [pc, #160]	; (8013798 <RadioSetRxConfig+0x314>)
 80136f6:	f002 f89d 	bl	8015834 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80136fa:	4828      	ldr	r0, [pc, #160]	; (801379c <RadioSetRxConfig+0x318>)
 80136fc:	f002 f966 	bl	80159cc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8013700:	4a28      	ldr	r2, [pc, #160]	; (80137a4 <RadioSetRxConfig+0x320>)
 8013702:	f107 0314 	add.w	r3, r7, #20
 8013706:	e892 0003 	ldmia.w	r2, {r0, r1}
 801370a:	e883 0003 	stmia.w	r3, {r0, r1}
 801370e:	f107 0314 	add.w	r3, r7, #20
 8013712:	4618      	mov	r0, r3
 8013714:	f001 fc99 	bl	801504a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8013718:	f240 10ff 	movw	r0, #511	; 0x1ff
 801371c:	f001 fce4 	bl	80150e8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8013720:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013722:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8013726:	fb02 f303 	mul.w	r3, r2, r3
 801372a:	461a      	mov	r2, r3
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013732:	4a17      	ldr	r2, [pc, #92]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013734:	6093      	str	r3, [r2, #8]
            break;
 8013736:	e0a8      	b.n	801388a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8013738:	2000      	movs	r0, #0
 801373a:	f001 fe4d 	bl	80153d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801373e:	4b14      	ldr	r3, [pc, #80]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013740:	2201      	movs	r2, #1
 8013742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	b2da      	uxtb	r2, r3
 801374a:	4b11      	ldr	r3, [pc, #68]	; (8013790 <RadioSetRxConfig+0x30c>)
 801374c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8013750:	4a15      	ldr	r2, [pc, #84]	; (80137a8 <RadioSetRxConfig+0x324>)
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	4413      	add	r3, r2
 8013756:	781a      	ldrb	r2, [r3, #0]
 8013758:	4b0d      	ldr	r3, [pc, #52]	; (8013790 <RadioSetRxConfig+0x30c>)
 801375a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801375e:	4a0c      	ldr	r2, [pc, #48]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013760:	7bbb      	ldrb	r3, [r7, #14]
 8013762:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d105      	bne.n	8013778 <RadioSetRxConfig+0x2f4>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	2b0b      	cmp	r3, #11
 8013770:	d008      	beq.n	8013784 <RadioSetRxConfig+0x300>
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	2b0c      	cmp	r3, #12
 8013776:	d005      	beq.n	8013784 <RadioSetRxConfig+0x300>
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	2b01      	cmp	r3, #1
 801377c:	d116      	bne.n	80137ac <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2b0c      	cmp	r3, #12
 8013782:	d113      	bne.n	80137ac <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8013784:	4b02      	ldr	r3, [pc, #8]	; (8013790 <RadioSetRxConfig+0x30c>)
 8013786:	2201      	movs	r2, #1
 8013788:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801378c:	e012      	b.n	80137b4 <RadioSetRxConfig+0x330>
 801378e:	bf00      	nop
 8013790:	20001234 	.word	0x20001234
 8013794:	200000ec 	.word	0x200000ec
 8013798:	2000126c 	.word	0x2000126c
 801379c:	20001242 	.word	0x20001242
 80137a0:	08017ee8 	.word	0x08017ee8
 80137a4:	08017ef0 	.word	0x08017ef0
 80137a8:	08018464 	.word	0x08018464
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80137ac:	4b39      	ldr	r3, [pc, #228]	; (8013894 <RadioSetRxConfig+0x410>)
 80137ae:	2200      	movs	r2, #0
 80137b0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80137b4:	4b37      	ldr	r3, [pc, #220]	; (8013894 <RadioSetRxConfig+0x410>)
 80137b6:	2201      	movs	r2, #1
 80137b8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80137ba:	4b36      	ldr	r3, [pc, #216]	; (8013894 <RadioSetRxConfig+0x410>)
 80137bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80137c0:	2b05      	cmp	r3, #5
 80137c2:	d004      	beq.n	80137ce <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80137c4:	4b33      	ldr	r3, [pc, #204]	; (8013894 <RadioSetRxConfig+0x410>)
 80137c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80137ca:	2b06      	cmp	r3, #6
 80137cc:	d10a      	bne.n	80137e4 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 80137ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80137d0:	2b0b      	cmp	r3, #11
 80137d2:	d803      	bhi.n	80137dc <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80137d4:	4b2f      	ldr	r3, [pc, #188]	; (8013894 <RadioSetRxConfig+0x410>)
 80137d6:	220c      	movs	r2, #12
 80137d8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80137da:	e006      	b.n	80137ea <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80137dc:	4a2d      	ldr	r2, [pc, #180]	; (8013894 <RadioSetRxConfig+0x410>)
 80137de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80137e0:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80137e2:	e002      	b.n	80137ea <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80137e4:	4a2b      	ldr	r2, [pc, #172]	; (8013894 <RadioSetRxConfig+0x410>)
 80137e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80137e8:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80137ea:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80137ee:	4b29      	ldr	r3, [pc, #164]	; (8013894 <RadioSetRxConfig+0x410>)
 80137f0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80137f2:	4b29      	ldr	r3, [pc, #164]	; (8013898 <RadioSetRxConfig+0x414>)
 80137f4:	781a      	ldrb	r2, [r3, #0]
 80137f6:	4b27      	ldr	r3, [pc, #156]	; (8013894 <RadioSetRxConfig+0x410>)
 80137f8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80137fa:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80137fe:	4b25      	ldr	r3, [pc, #148]	; (8013894 <RadioSetRxConfig+0x410>)
 8013800:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8013804:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8013808:	4b22      	ldr	r3, [pc, #136]	; (8013894 <RadioSetRxConfig+0x410>)
 801380a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801380e:	f000 fbd0 	bl	8013fb2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8013812:	4b20      	ldr	r3, [pc, #128]	; (8013894 <RadioSetRxConfig+0x410>)
 8013814:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013818:	2b00      	cmp	r3, #0
 801381a:	bf14      	ite	ne
 801381c:	2301      	movne	r3, #1
 801381e:	2300      	moveq	r3, #0
 8013820:	b2db      	uxtb	r3, r3
 8013822:	4618      	mov	r0, r3
 8013824:	f7ff fd60 	bl	80132e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013828:	481c      	ldr	r0, [pc, #112]	; (801389c <RadioSetRxConfig+0x418>)
 801382a:	f002 f803 	bl	8015834 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801382e:	481c      	ldr	r0, [pc, #112]	; (80138a0 <RadioSetRxConfig+0x41c>)
 8013830:	f002 f8cc 	bl	80159cc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8013834:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013836:	b2db      	uxtb	r3, r3
 8013838:	4618      	mov	r0, r3
 801383a:	f001 fddc 	bl	80153f6 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801383e:	4b15      	ldr	r3, [pc, #84]	; (8013894 <RadioSetRxConfig+0x410>)
 8013840:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013844:	2b01      	cmp	r3, #1
 8013846:	d10d      	bne.n	8013864 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8013848:	f240 7036 	movw	r0, #1846	; 0x736
 801384c:	f002 fa1a 	bl	8015c84 <SUBGRF_ReadRegister>
 8013850:	4603      	mov	r3, r0
 8013852:	f023 0304 	bic.w	r3, r3, #4
 8013856:	b2db      	uxtb	r3, r3
 8013858:	4619      	mov	r1, r3
 801385a:	f240 7036 	movw	r0, #1846	; 0x736
 801385e:	f002 f9fd 	bl	8015c5c <SUBGRF_WriteRegister>
 8013862:	e00c      	b.n	801387e <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8013864:	f240 7036 	movw	r0, #1846	; 0x736
 8013868:	f002 fa0c 	bl	8015c84 <SUBGRF_ReadRegister>
 801386c:	4603      	mov	r3, r0
 801386e:	f043 0304 	orr.w	r3, r3, #4
 8013872:	b2db      	uxtb	r3, r3
 8013874:	4619      	mov	r1, r3
 8013876:	f240 7036 	movw	r0, #1846	; 0x736
 801387a:	f002 f9ef 	bl	8015c5c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801387e:	4b05      	ldr	r3, [pc, #20]	; (8013894 <RadioSetRxConfig+0x410>)
 8013880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013884:	609a      	str	r2, [r3, #8]
            break;
 8013886:	e000      	b.n	801388a <RadioSetRxConfig+0x406>
            break;
 8013888:	bf00      	nop
    }
}
 801388a:	bf00      	nop
 801388c:	3728      	adds	r7, #40	; 0x28
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}
 8013892:	bf00      	nop
 8013894:	20001234 	.word	0x20001234
 8013898:	200000ec 	.word	0x200000ec
 801389c:	2000126c 	.word	0x2000126c
 80138a0:	20001242 	.word	0x20001242

080138a4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b086      	sub	sp, #24
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	60ba      	str	r2, [r7, #8]
 80138ac:	607b      	str	r3, [r7, #4]
 80138ae:	4603      	mov	r3, r0
 80138b0:	73fb      	strb	r3, [r7, #15]
 80138b2:	460b      	mov	r3, r1
 80138b4:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80138b6:	f002 fcaa 	bl	801620e <RFW_DeInit>
    switch( modem )
 80138ba:	7bfb      	ldrb	r3, [r7, #15]
 80138bc:	2b03      	cmp	r3, #3
 80138be:	f000 80d7 	beq.w	8013a70 <RadioSetTxConfig+0x1cc>
 80138c2:	2b03      	cmp	r3, #3
 80138c4:	f300 80e6 	bgt.w	8013a94 <RadioSetTxConfig+0x1f0>
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d002      	beq.n	80138d2 <RadioSetTxConfig+0x2e>
 80138cc:	2b01      	cmp	r3, #1
 80138ce:	d061      	beq.n	8013994 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 80138d0:	e0e0      	b.n	8013a94 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80138d2:	4b7c      	ldr	r3, [pc, #496]	; (8013ac4 <RadioSetTxConfig+0x220>)
 80138d4:	2200      	movs	r2, #0
 80138d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80138da:	4a7a      	ldr	r2, [pc, #488]	; (8013ac4 <RadioSetTxConfig+0x220>)
 80138dc:	6a3b      	ldr	r3, [r7, #32]
 80138de:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80138e0:	4b78      	ldr	r3, [pc, #480]	; (8013ac4 <RadioSetTxConfig+0x220>)
 80138e2:	220b      	movs	r2, #11
 80138e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f002 fbc1 	bl	8016070 <SUBGRF_GetFskBandwidthRegValue>
 80138ee:	4603      	mov	r3, r0
 80138f0:	461a      	mov	r2, r3
 80138f2:	4b74      	ldr	r3, [pc, #464]	; (8013ac4 <RadioSetTxConfig+0x220>)
 80138f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80138f8:	4a72      	ldr	r2, [pc, #456]	; (8013ac4 <RadioSetTxConfig+0x220>)
 80138fa:	68bb      	ldr	r3, [r7, #8]
 80138fc:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80138fe:	4b71      	ldr	r3, [pc, #452]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013900:	2200      	movs	r2, #0
 8013902:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8013904:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013906:	00db      	lsls	r3, r3, #3
 8013908:	b29a      	uxth	r2, r3
 801390a:	4b6e      	ldr	r3, [pc, #440]	; (8013ac4 <RadioSetTxConfig+0x220>)
 801390c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801390e:	4b6d      	ldr	r3, [pc, #436]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013910:	2204      	movs	r2, #4
 8013912:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8013914:	4b6b      	ldr	r3, [pc, #428]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013916:	2218      	movs	r2, #24
 8013918:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801391a:	4b6a      	ldr	r3, [pc, #424]	; (8013ac4 <RadioSetTxConfig+0x220>)
 801391c:	2200      	movs	r2, #0
 801391e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8013920:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013924:	f083 0301 	eor.w	r3, r3, #1
 8013928:	b2db      	uxtb	r3, r3
 801392a:	461a      	mov	r2, r3
 801392c:	4b65      	ldr	r3, [pc, #404]	; (8013ac4 <RadioSetTxConfig+0x220>)
 801392e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8013930:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8013934:	2b00      	cmp	r3, #0
 8013936:	d003      	beq.n	8013940 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8013938:	4b62      	ldr	r3, [pc, #392]	; (8013ac4 <RadioSetTxConfig+0x220>)
 801393a:	22f2      	movs	r2, #242	; 0xf2
 801393c:	75da      	strb	r2, [r3, #23]
 801393e:	e002      	b.n	8013946 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8013940:	4b60      	ldr	r3, [pc, #384]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013942:	2201      	movs	r2, #1
 8013944:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8013946:	4b5f      	ldr	r3, [pc, #380]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013948:	2201      	movs	r2, #1
 801394a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801394c:	f000 fb31 	bl	8013fb2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8013950:	4b5c      	ldr	r3, [pc, #368]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013952:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013956:	2b00      	cmp	r3, #0
 8013958:	bf14      	ite	ne
 801395a:	2301      	movne	r3, #1
 801395c:	2300      	moveq	r3, #0
 801395e:	b2db      	uxtb	r3, r3
 8013960:	4618      	mov	r0, r3
 8013962:	f7ff fcc1 	bl	80132e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013966:	4858      	ldr	r0, [pc, #352]	; (8013ac8 <RadioSetTxConfig+0x224>)
 8013968:	f001 ff64 	bl	8015834 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801396c:	4857      	ldr	r0, [pc, #348]	; (8013acc <RadioSetTxConfig+0x228>)
 801396e:	f002 f82d 	bl	80159cc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8013972:	4a57      	ldr	r2, [pc, #348]	; (8013ad0 <RadioSetTxConfig+0x22c>)
 8013974:	f107 0310 	add.w	r3, r7, #16
 8013978:	e892 0003 	ldmia.w	r2, {r0, r1}
 801397c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013980:	f107 0310 	add.w	r3, r7, #16
 8013984:	4618      	mov	r0, r3
 8013986:	f001 fb60 	bl	801504a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801398a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801398e:	f001 fbab 	bl	80150e8 <SUBGRF_SetWhiteningSeed>
            break;
 8013992:	e080      	b.n	8013a96 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8013994:	4b4b      	ldr	r3, [pc, #300]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013996:	2201      	movs	r2, #1
 8013998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801399c:	6a3b      	ldr	r3, [r7, #32]
 801399e:	b2da      	uxtb	r2, r3
 80139a0:	4b48      	ldr	r3, [pc, #288]	; (8013ac4 <RadioSetTxConfig+0x220>)
 80139a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80139a6:	4a4b      	ldr	r2, [pc, #300]	; (8013ad4 <RadioSetTxConfig+0x230>)
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	4413      	add	r3, r2
 80139ac:	781a      	ldrb	r2, [r3, #0]
 80139ae:	4b45      	ldr	r3, [pc, #276]	; (8013ac4 <RadioSetTxConfig+0x220>)
 80139b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80139b4:	4a43      	ldr	r2, [pc, #268]	; (8013ac4 <RadioSetTxConfig+0x220>)
 80139b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80139ba:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d105      	bne.n	80139d0 <RadioSetTxConfig+0x12c>
 80139c4:	6a3b      	ldr	r3, [r7, #32]
 80139c6:	2b0b      	cmp	r3, #11
 80139c8:	d008      	beq.n	80139dc <RadioSetTxConfig+0x138>
 80139ca:	6a3b      	ldr	r3, [r7, #32]
 80139cc:	2b0c      	cmp	r3, #12
 80139ce:	d005      	beq.n	80139dc <RadioSetTxConfig+0x138>
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	d107      	bne.n	80139e6 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80139d6:	6a3b      	ldr	r3, [r7, #32]
 80139d8:	2b0c      	cmp	r3, #12
 80139da:	d104      	bne.n	80139e6 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80139dc:	4b39      	ldr	r3, [pc, #228]	; (8013ac4 <RadioSetTxConfig+0x220>)
 80139de:	2201      	movs	r2, #1
 80139e0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80139e4:	e003      	b.n	80139ee <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80139e6:	4b37      	ldr	r3, [pc, #220]	; (8013ac4 <RadioSetTxConfig+0x220>)
 80139e8:	2200      	movs	r2, #0
 80139ea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80139ee:	4b35      	ldr	r3, [pc, #212]	; (8013ac4 <RadioSetTxConfig+0x220>)
 80139f0:	2201      	movs	r2, #1
 80139f2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80139f4:	4b33      	ldr	r3, [pc, #204]	; (8013ac4 <RadioSetTxConfig+0x220>)
 80139f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80139fa:	2b05      	cmp	r3, #5
 80139fc:	d004      	beq.n	8013a08 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80139fe:	4b31      	ldr	r3, [pc, #196]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013a00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8013a04:	2b06      	cmp	r3, #6
 8013a06:	d10a      	bne.n	8013a1e <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8013a08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a0a:	2b0b      	cmp	r3, #11
 8013a0c:	d803      	bhi.n	8013a16 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8013a0e:	4b2d      	ldr	r3, [pc, #180]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013a10:	220c      	movs	r2, #12
 8013a12:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8013a14:	e006      	b.n	8013a24 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013a16:	4a2b      	ldr	r2, [pc, #172]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013a18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a1a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8013a1c:	e002      	b.n	8013a24 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013a1e:	4a29      	ldr	r2, [pc, #164]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013a20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a22:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8013a24:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013a28:	4b26      	ldr	r3, [pc, #152]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013a2a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8013a2c:	4b2a      	ldr	r3, [pc, #168]	; (8013ad8 <RadioSetTxConfig+0x234>)
 8013a2e:	781a      	ldrb	r2, [r3, #0]
 8013a30:	4b24      	ldr	r3, [pc, #144]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013a32:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8013a34:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8013a38:	4b22      	ldr	r3, [pc, #136]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013a3a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8013a3e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8013a42:	4b20      	ldr	r3, [pc, #128]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013a44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8013a48:	f000 fab3 	bl	8013fb2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8013a4c:	4b1d      	ldr	r3, [pc, #116]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013a4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	bf14      	ite	ne
 8013a56:	2301      	movne	r3, #1
 8013a58:	2300      	moveq	r3, #0
 8013a5a:	b2db      	uxtb	r3, r3
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f7ff fc43 	bl	80132e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013a62:	4819      	ldr	r0, [pc, #100]	; (8013ac8 <RadioSetTxConfig+0x224>)
 8013a64:	f001 fee6 	bl	8015834 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013a68:	4818      	ldr	r0, [pc, #96]	; (8013acc <RadioSetTxConfig+0x228>)
 8013a6a:	f001 ffaf 	bl	80159cc <SUBGRF_SetPacketParams>
            break;
 8013a6e:	e012      	b.n	8013a96 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8013a70:	2003      	movs	r0, #3
 8013a72:	f7ff fc39 	bl	80132e8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8013a76:	4b13      	ldr	r3, [pc, #76]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013a78:	2202      	movs	r2, #2
 8013a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8013a7e:	4a11      	ldr	r2, [pc, #68]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013a80:	6a3b      	ldr	r3, [r7, #32]
 8013a82:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8013a84:	4b0f      	ldr	r3, [pc, #60]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013a86:	2216      	movs	r2, #22
 8013a88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013a8c:	480e      	ldr	r0, [pc, #56]	; (8013ac8 <RadioSetTxConfig+0x224>)
 8013a8e:	f001 fed1 	bl	8015834 <SUBGRF_SetModulationParams>
            break;
 8013a92:	e000      	b.n	8013a96 <RadioSetTxConfig+0x1f2>
            break;
 8013a94:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8013a96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f002 f9fa 	bl	8015e94 <SUBGRF_SetRfTxPower>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	461a      	mov	r2, r3
 8013aa4:	4b07      	ldr	r3, [pc, #28]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013aa6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8013aaa:	4b06      	ldr	r3, [pc, #24]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013aac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f002 fbc0 	bl	8016236 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8013ab6:	4a03      	ldr	r2, [pc, #12]	; (8013ac4 <RadioSetTxConfig+0x220>)
 8013ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013aba:	6053      	str	r3, [r2, #4]
}
 8013abc:	bf00      	nop
 8013abe:	3718      	adds	r7, #24
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}
 8013ac4:	20001234 	.word	0x20001234
 8013ac8:	2000126c 	.word	0x2000126c
 8013acc:	20001242 	.word	0x20001242
 8013ad0:	08017ef0 	.word	0x08017ef0
 8013ad4:	08018464 	.word	0x08018464
 8013ad8:	200000ec 	.word	0x200000ec

08013adc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8013adc:	b480      	push	{r7}
 8013ade:	b083      	sub	sp, #12
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
    return true;
 8013ae4:	2301      	movs	r3, #1
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	370c      	adds	r7, #12
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bc80      	pop	{r7}
 8013aee:	4770      	bx	lr

08013af0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8013af0:	b480      	push	{r7}
 8013af2:	b085      	sub	sp, #20
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	4603      	mov	r3, r0
 8013af8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8013afa:	2300      	movs	r3, #0
 8013afc:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8013afe:	79fb      	ldrb	r3, [r7, #7]
 8013b00:	2b0a      	cmp	r3, #10
 8013b02:	d83e      	bhi.n	8013b82 <RadioGetLoRaBandwidthInHz+0x92>
 8013b04:	a201      	add	r2, pc, #4	; (adr r2, 8013b0c <RadioGetLoRaBandwidthInHz+0x1c>)
 8013b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b0a:	bf00      	nop
 8013b0c:	08013b39 	.word	0x08013b39
 8013b10:	08013b49 	.word	0x08013b49
 8013b14:	08013b59 	.word	0x08013b59
 8013b18:	08013b69 	.word	0x08013b69
 8013b1c:	08013b71 	.word	0x08013b71
 8013b20:	08013b77 	.word	0x08013b77
 8013b24:	08013b7d 	.word	0x08013b7d
 8013b28:	08013b83 	.word	0x08013b83
 8013b2c:	08013b41 	.word	0x08013b41
 8013b30:	08013b51 	.word	0x08013b51
 8013b34:	08013b61 	.word	0x08013b61
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8013b38:	f641 6384 	movw	r3, #7812	; 0x1e84
 8013b3c:	60fb      	str	r3, [r7, #12]
        break;
 8013b3e:	e020      	b.n	8013b82 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8013b40:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8013b44:	60fb      	str	r3, [r7, #12]
        break;
 8013b46:	e01c      	b.n	8013b82 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8013b48:	f643 5309 	movw	r3, #15625	; 0x3d09
 8013b4c:	60fb      	str	r3, [r7, #12]
        break;
 8013b4e:	e018      	b.n	8013b82 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8013b50:	f245 1361 	movw	r3, #20833	; 0x5161
 8013b54:	60fb      	str	r3, [r7, #12]
        break;
 8013b56:	e014      	b.n	8013b82 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8013b58:	f647 2312 	movw	r3, #31250	; 0x7a12
 8013b5c:	60fb      	str	r3, [r7, #12]
        break;
 8013b5e:	e010      	b.n	8013b82 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8013b60:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8013b64:	60fb      	str	r3, [r7, #12]
        break;
 8013b66:	e00c      	b.n	8013b82 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8013b68:	f24f 4324 	movw	r3, #62500	; 0xf424
 8013b6c:	60fb      	str	r3, [r7, #12]
        break;
 8013b6e:	e008      	b.n	8013b82 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8013b70:	4b07      	ldr	r3, [pc, #28]	; (8013b90 <RadioGetLoRaBandwidthInHz+0xa0>)
 8013b72:	60fb      	str	r3, [r7, #12]
        break;
 8013b74:	e005      	b.n	8013b82 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8013b76:	4b07      	ldr	r3, [pc, #28]	; (8013b94 <RadioGetLoRaBandwidthInHz+0xa4>)
 8013b78:	60fb      	str	r3, [r7, #12]
        break;
 8013b7a:	e002      	b.n	8013b82 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8013b7c:	4b06      	ldr	r3, [pc, #24]	; (8013b98 <RadioGetLoRaBandwidthInHz+0xa8>)
 8013b7e:	60fb      	str	r3, [r7, #12]
        break;
 8013b80:	bf00      	nop
    }

    return bandwidthInHz;
 8013b82:	68fb      	ldr	r3, [r7, #12]
}
 8013b84:	4618      	mov	r0, r3
 8013b86:	3714      	adds	r7, #20
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bc80      	pop	{r7}
 8013b8c:	4770      	bx	lr
 8013b8e:	bf00      	nop
 8013b90:	0001e848 	.word	0x0001e848
 8013b94:	0003d090 	.word	0x0003d090
 8013b98:	0007a120 	.word	0x0007a120

08013b9c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b083      	sub	sp, #12
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	4608      	mov	r0, r1
 8013ba6:	4611      	mov	r1, r2
 8013ba8:	461a      	mov	r2, r3
 8013baa:	4603      	mov	r3, r0
 8013bac:	70fb      	strb	r3, [r7, #3]
 8013bae:	460b      	mov	r3, r1
 8013bb0:	803b      	strh	r3, [r7, #0]
 8013bb2:	4613      	mov	r3, r2
 8013bb4:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8013bb6:	883b      	ldrh	r3, [r7, #0]
 8013bb8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8013bba:	78ba      	ldrb	r2, [r7, #2]
 8013bbc:	f082 0201 	eor.w	r2, r2, #1
 8013bc0:	b2d2      	uxtb	r2, r2
 8013bc2:	2a00      	cmp	r2, #0
 8013bc4:	d001      	beq.n	8013bca <RadioGetGfskTimeOnAirNumerator+0x2e>
 8013bc6:	2208      	movs	r2, #8
 8013bc8:	e000      	b.n	8013bcc <RadioGetGfskTimeOnAirNumerator+0x30>
 8013bca:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8013bcc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8013bce:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8013bd2:	7c3b      	ldrb	r3, [r7, #16]
 8013bd4:	7d39      	ldrb	r1, [r7, #20]
 8013bd6:	2900      	cmp	r1, #0
 8013bd8:	d001      	beq.n	8013bde <RadioGetGfskTimeOnAirNumerator+0x42>
 8013bda:	2102      	movs	r1, #2
 8013bdc:	e000      	b.n	8013be0 <RadioGetGfskTimeOnAirNumerator+0x44>
 8013bde:	2100      	movs	r1, #0
 8013be0:	440b      	add	r3, r1
 8013be2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8013be4:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	370c      	adds	r7, #12
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bc80      	pop	{r7}
 8013bee:	4770      	bx	lr

08013bf0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8013bf0:	b480      	push	{r7}
 8013bf2:	b08b      	sub	sp, #44	; 0x2c
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	60f8      	str	r0, [r7, #12]
 8013bf8:	60b9      	str	r1, [r7, #8]
 8013bfa:	4611      	mov	r1, r2
 8013bfc:	461a      	mov	r2, r3
 8013bfe:	460b      	mov	r3, r1
 8013c00:	71fb      	strb	r3, [r7, #7]
 8013c02:	4613      	mov	r3, r2
 8013c04:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8013c06:	79fb      	ldrb	r3, [r7, #7]
 8013c08:	3304      	adds	r3, #4
 8013c0a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8013c12:	68bb      	ldr	r3, [r7, #8]
 8013c14:	2b05      	cmp	r3, #5
 8013c16:	d002      	beq.n	8013c1e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	2b06      	cmp	r3, #6
 8013c1c:	d104      	bne.n	8013c28 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8013c1e:	88bb      	ldrh	r3, [r7, #4]
 8013c20:	2b0b      	cmp	r3, #11
 8013c22:	d801      	bhi.n	8013c28 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8013c24:	230c      	movs	r3, #12
 8013c26:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d105      	bne.n	8013c3a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8013c2e:	68bb      	ldr	r3, [r7, #8]
 8013c30:	2b0b      	cmp	r3, #11
 8013c32:	d008      	beq.n	8013c46 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	2b0c      	cmp	r3, #12
 8013c38:	d005      	beq.n	8013c46 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	2b01      	cmp	r3, #1
 8013c3e:	d105      	bne.n	8013c4c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	2b0c      	cmp	r3, #12
 8013c44:	d102      	bne.n	8013c4c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8013c46:	2301      	movs	r3, #1
 8013c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8013c4c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013c50:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8013c52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013c56:	2a00      	cmp	r2, #0
 8013c58:	d001      	beq.n	8013c5e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8013c5a:	2210      	movs	r2, #16
 8013c5c:	e000      	b.n	8013c60 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8013c5e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8013c60:	4413      	add	r3, r2
 8013c62:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8013c68:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8013c6a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8013c6e:	2a00      	cmp	r2, #0
 8013c70:	d001      	beq.n	8013c76 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8013c72:	2200      	movs	r2, #0
 8013c74:	e000      	b.n	8013c78 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8013c76:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8013c78:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8013c7a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	2b06      	cmp	r3, #6
 8013c80:	d803      	bhi.n	8013c8a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	009b      	lsls	r3, r3, #2
 8013c86:	623b      	str	r3, [r7, #32]
 8013c88:	e00e      	b.n	8013ca8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8013c8a:	69fb      	ldr	r3, [r7, #28]
 8013c8c:	3308      	adds	r3, #8
 8013c8e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8013c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d004      	beq.n	8013ca2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	3b02      	subs	r3, #2
 8013c9c:	009b      	lsls	r3, r3, #2
 8013c9e:	623b      	str	r3, [r7, #32]
 8013ca0:	e002      	b.n	8013ca8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	009b      	lsls	r3, r3, #2
 8013ca6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8013ca8:	69fb      	ldr	r3, [r7, #28]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	da01      	bge.n	8013cb2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8013cae:	2300      	movs	r3, #0
 8013cb0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8013cb2:	69fa      	ldr	r2, [r7, #28]
 8013cb4:	6a3b      	ldr	r3, [r7, #32]
 8013cb6:	4413      	add	r3, r2
 8013cb8:	1e5a      	subs	r2, r3, #1
 8013cba:	6a3b      	ldr	r3, [r7, #32]
 8013cbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8013cc0:	697a      	ldr	r2, [r7, #20]
 8013cc2:	fb02 f203 	mul.w	r2, r2, r3
 8013cc6:	88bb      	ldrh	r3, [r7, #4]
 8013cc8:	4413      	add	r3, r2
    int32_t intermediate =
 8013cca:	330c      	adds	r3, #12
 8013ccc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8013cce:	68bb      	ldr	r3, [r7, #8]
 8013cd0:	2b06      	cmp	r3, #6
 8013cd2:	d802      	bhi.n	8013cda <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8013cd4:	69bb      	ldr	r3, [r7, #24]
 8013cd6:	3302      	adds	r3, #2
 8013cd8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8013cda:	69bb      	ldr	r3, [r7, #24]
 8013cdc:	009b      	lsls	r3, r3, #2
 8013cde:	1c5a      	adds	r2, r3, #1
 8013ce0:	68bb      	ldr	r3, [r7, #8]
 8013ce2:	3b02      	subs	r3, #2
 8013ce4:	fa02 f303 	lsl.w	r3, r2, r3
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	372c      	adds	r7, #44	; 0x2c
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bc80      	pop	{r7}
 8013cf0:	4770      	bx	lr
	...

08013cf4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b08a      	sub	sp, #40	; 0x28
 8013cf8:	af04      	add	r7, sp, #16
 8013cfa:	60b9      	str	r1, [r7, #8]
 8013cfc:	607a      	str	r2, [r7, #4]
 8013cfe:	461a      	mov	r2, r3
 8013d00:	4603      	mov	r3, r0
 8013d02:	73fb      	strb	r3, [r7, #15]
 8013d04:	4613      	mov	r3, r2
 8013d06:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8013d08:	2300      	movs	r3, #0
 8013d0a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8013d10:	7bfb      	ldrb	r3, [r7, #15]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d002      	beq.n	8013d1c <RadioTimeOnAir+0x28>
 8013d16:	2b01      	cmp	r3, #1
 8013d18:	d017      	beq.n	8013d4a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8013d1a:	e035      	b.n	8013d88 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8013d1c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8013d20:	8c3a      	ldrh	r2, [r7, #32]
 8013d22:	7bb9      	ldrb	r1, [r7, #14]
 8013d24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013d28:	9301      	str	r3, [sp, #4]
 8013d2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013d2e:	9300      	str	r3, [sp, #0]
 8013d30:	4603      	mov	r3, r0
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f7ff ff32 	bl	8013b9c <RadioGetGfskTimeOnAirNumerator>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013d3e:	fb02 f303 	mul.w	r3, r2, r3
 8013d42:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	613b      	str	r3, [r7, #16]
        break;
 8013d48:	e01e      	b.n	8013d88 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8013d4a:	8c39      	ldrh	r1, [r7, #32]
 8013d4c:	7bba      	ldrb	r2, [r7, #14]
 8013d4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013d52:	9302      	str	r3, [sp, #8]
 8013d54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013d58:	9301      	str	r3, [sp, #4]
 8013d5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013d5e:	9300      	str	r3, [sp, #0]
 8013d60:	460b      	mov	r3, r1
 8013d62:	6879      	ldr	r1, [r7, #4]
 8013d64:	68b8      	ldr	r0, [r7, #8]
 8013d66:	f7ff ff43 	bl	8013bf0 <RadioGetLoRaTimeOnAirNumerator>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013d70:	fb02 f303 	mul.w	r3, r2, r3
 8013d74:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8013d76:	4a0a      	ldr	r2, [pc, #40]	; (8013da0 <RadioTimeOnAir+0xac>)
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	4413      	add	r3, r2
 8013d7c:	781b      	ldrb	r3, [r3, #0]
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7ff feb6 	bl	8013af0 <RadioGetLoRaBandwidthInHz>
 8013d84:	6138      	str	r0, [r7, #16]
        break;
 8013d86:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8013d88:	697a      	ldr	r2, [r7, #20]
 8013d8a:	693b      	ldr	r3, [r7, #16]
 8013d8c:	4413      	add	r3, r2
 8013d8e:	1e5a      	subs	r2, r3, #1
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3718      	adds	r7, #24
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}
 8013d9e:	bf00      	nop
 8013da0:	08018464 	.word	0x08018464

08013da4 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b084      	sub	sp, #16
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	460b      	mov	r3, r1
 8013dae:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8013db0:	2300      	movs	r3, #0
 8013db2:	2200      	movs	r2, #0
 8013db4:	f240 2101 	movw	r1, #513	; 0x201
 8013db8:	f240 2001 	movw	r0, #513	; 0x201
 8013dbc:	f001 fc10 	bl	80155e0 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8013dc0:	4b6e      	ldr	r3, [pc, #440]	; (8013f7c <RadioSend+0x1d8>)
 8013dc2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8013dc6:	2101      	movs	r1, #1
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f002 f83b 	bl	8015e44 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8013dce:	4b6b      	ldr	r3, [pc, #428]	; (8013f7c <RadioSend+0x1d8>)
 8013dd0:	781b      	ldrb	r3, [r3, #0]
 8013dd2:	2b01      	cmp	r3, #1
 8013dd4:	d112      	bne.n	8013dfc <RadioSend+0x58>
 8013dd6:	4b69      	ldr	r3, [pc, #420]	; (8013f7c <RadioSend+0x1d8>)
 8013dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013ddc:	2b06      	cmp	r3, #6
 8013dde:	d10d      	bne.n	8013dfc <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8013de0:	f640 0089 	movw	r0, #2185	; 0x889
 8013de4:	f001 ff4e 	bl	8015c84 <SUBGRF_ReadRegister>
 8013de8:	4603      	mov	r3, r0
 8013dea:	f023 0304 	bic.w	r3, r3, #4
 8013dee:	b2db      	uxtb	r3, r3
 8013df0:	4619      	mov	r1, r3
 8013df2:	f640 0089 	movw	r0, #2185	; 0x889
 8013df6:	f001 ff31 	bl	8015c5c <SUBGRF_WriteRegister>
 8013dfa:	e00c      	b.n	8013e16 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8013dfc:	f640 0089 	movw	r0, #2185	; 0x889
 8013e00:	f001 ff40 	bl	8015c84 <SUBGRF_ReadRegister>
 8013e04:	4603      	mov	r3, r0
 8013e06:	f043 0304 	orr.w	r3, r3, #4
 8013e0a:	b2db      	uxtb	r3, r3
 8013e0c:	4619      	mov	r1, r3
 8013e0e:	f640 0089 	movw	r0, #2185	; 0x889
 8013e12:	f001 ff23 	bl	8015c5c <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8013e16:	4b59      	ldr	r3, [pc, #356]	; (8013f7c <RadioSend+0x1d8>)
 8013e18:	781b      	ldrb	r3, [r3, #0]
 8013e1a:	2b03      	cmp	r3, #3
 8013e1c:	f200 809f 	bhi.w	8013f5e <RadioSend+0x1ba>
 8013e20:	a201      	add	r2, pc, #4	; (adr r2, 8013e28 <RadioSend+0x84>)
 8013e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e26:	bf00      	nop
 8013e28:	08013e53 	.word	0x08013e53
 8013e2c:	08013e39 	.word	0x08013e39
 8013e30:	08013ea7 	.word	0x08013ea7
 8013e34:	08013ec7 	.word	0x08013ec7
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8013e38:	4a50      	ldr	r2, [pc, #320]	; (8013f7c <RadioSend+0x1d8>)
 8013e3a:	78fb      	ldrb	r3, [r7, #3]
 8013e3c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013e3e:	4850      	ldr	r0, [pc, #320]	; (8013f80 <RadioSend+0x1dc>)
 8013e40:	f001 fdc4 	bl	80159cc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8013e44:	78fb      	ldrb	r3, [r7, #3]
 8013e46:	2200      	movs	r2, #0
 8013e48:	4619      	mov	r1, r3
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f001 f8ea 	bl	8015024 <SUBGRF_SendPayload>
            break;
 8013e50:	e086      	b.n	8013f60 <RadioSend+0x1bc>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8013e52:	f002 f9e2 	bl	801621a <RFW_Is_Init>
 8013e56:	4603      	mov	r3, r0
 8013e58:	2b01      	cmp	r3, #1
 8013e5a:	d117      	bne.n	8013e8c <RadioSend+0xe8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8013e5c:	f107 020d 	add.w	r2, r7, #13
 8013e60:	78fb      	ldrb	r3, [r7, #3]
 8013e62:	4619      	mov	r1, r3
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f002 f9f0 	bl	801624a <RFW_TransmitInit>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	f040 8081 	bne.w	8013f74 <RadioSend+0x1d0>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8013e72:	7b7a      	ldrb	r2, [r7, #13]
 8013e74:	4b41      	ldr	r3, [pc, #260]	; (8013f7c <RadioSend+0x1d8>)
 8013e76:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013e78:	4841      	ldr	r0, [pc, #260]	; (8013f80 <RadioSend+0x1dc>)
 8013e7a:	f001 fda7 	bl	80159cc <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8013e7e:	7b7b      	ldrb	r3, [r7, #13]
 8013e80:	2200      	movs	r2, #0
 8013e82:	4619      	mov	r1, r3
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f001 f8cd 	bl	8015024 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8013e8a:	e069      	b.n	8013f60 <RadioSend+0x1bc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8013e8c:	4a3b      	ldr	r2, [pc, #236]	; (8013f7c <RadioSend+0x1d8>)
 8013e8e:	78fb      	ldrb	r3, [r7, #3]
 8013e90:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013e92:	483b      	ldr	r0, [pc, #236]	; (8013f80 <RadioSend+0x1dc>)
 8013e94:	f001 fd9a 	bl	80159cc <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8013e98:	78fb      	ldrb	r3, [r7, #3]
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f001 f8c0 	bl	8015024 <SUBGRF_SendPayload>
            break;
 8013ea4:	e05c      	b.n	8013f60 <RadioSend+0x1bc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8013ea6:	4b35      	ldr	r3, [pc, #212]	; (8013f7c <RadioSend+0x1d8>)
 8013ea8:	2202      	movs	r2, #2
 8013eaa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8013eac:	4a33      	ldr	r2, [pc, #204]	; (8013f7c <RadioSend+0x1d8>)
 8013eae:	78fb      	ldrb	r3, [r7, #3]
 8013eb0:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013eb2:	4833      	ldr	r0, [pc, #204]	; (8013f80 <RadioSend+0x1dc>)
 8013eb4:	f001 fd8a 	bl	80159cc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8013eb8:	78fb      	ldrb	r3, [r7, #3]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	4619      	mov	r1, r3
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f001 f8b0 	bl	8015024 <SUBGRF_SendPayload>
            break;
 8013ec4:	e04c      	b.n	8013f60 <RadioSend+0x1bc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8013ec6:	78fb      	ldrb	r3, [r7, #3]
 8013ec8:	461a      	mov	r2, r3
 8013eca:	6879      	ldr	r1, [r7, #4]
 8013ecc:	482d      	ldr	r0, [pc, #180]	; (8013f84 <RadioSend+0x1e0>)
 8013ece:	f000 fc30 	bl	8014732 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8013ed2:	4b2a      	ldr	r3, [pc, #168]	; (8013f7c <RadioSend+0x1d8>)
 8013ed4:	2202      	movs	r2, #2
 8013ed6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8013ed8:	78fb      	ldrb	r3, [r7, #3]
 8013eda:	3301      	adds	r3, #1
 8013edc:	b2da      	uxtb	r2, r3
 8013ede:	4b27      	ldr	r3, [pc, #156]	; (8013f7c <RadioSend+0x1d8>)
 8013ee0:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013ee2:	4827      	ldr	r0, [pc, #156]	; (8013f80 <RadioSend+0x1dc>)
 8013ee4:	f001 fd72 	bl	80159cc <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8013ee8:	2100      	movs	r1, #0
 8013eea:	20f1      	movs	r0, #241	; 0xf1
 8013eec:	f000 f947 	bl	801417e <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8013ef0:	2100      	movs	r1, #0
 8013ef2:	20f0      	movs	r0, #240	; 0xf0
 8013ef4:	f000 f943 	bl	801417e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8013ef8:	4b20      	ldr	r3, [pc, #128]	; (8013f7c <RadioSend+0x1d8>)
 8013efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013efc:	2b64      	cmp	r3, #100	; 0x64
 8013efe:	d108      	bne.n	8013f12 <RadioSend+0x16e>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8013f00:	2170      	movs	r1, #112	; 0x70
 8013f02:	20f3      	movs	r0, #243	; 0xf3
 8013f04:	f000 f93b 	bl	801417e <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8013f08:	211d      	movs	r1, #29
 8013f0a:	20f2      	movs	r0, #242	; 0xf2
 8013f0c:	f000 f937 	bl	801417e <RadioWrite>
 8013f10:	e007      	b.n	8013f22 <RadioSend+0x17e>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8013f12:	21e1      	movs	r1, #225	; 0xe1
 8013f14:	20f3      	movs	r0, #243	; 0xf3
 8013f16:	f000 f932 	bl	801417e <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8013f1a:	2104      	movs	r1, #4
 8013f1c:	20f2      	movs	r0, #242	; 0xf2
 8013f1e:	f000 f92e 	bl	801417e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8013f22:	78fb      	ldrb	r3, [r7, #3]
 8013f24:	b29b      	uxth	r3, r3
 8013f26:	00db      	lsls	r3, r3, #3
 8013f28:	b29b      	uxth	r3, r3
 8013f2a:	3302      	adds	r3, #2
 8013f2c:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8013f2e:	89fb      	ldrh	r3, [r7, #14]
 8013f30:	0a1b      	lsrs	r3, r3, #8
 8013f32:	b29b      	uxth	r3, r3
 8013f34:	b2db      	uxtb	r3, r3
 8013f36:	4619      	mov	r1, r3
 8013f38:	20f4      	movs	r0, #244	; 0xf4
 8013f3a:	f000 f920 	bl	801417e <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8013f3e:	89fb      	ldrh	r3, [r7, #14]
 8013f40:	b2db      	uxtb	r3, r3
 8013f42:	4619      	mov	r1, r3
 8013f44:	20f5      	movs	r0, #245	; 0xf5
 8013f46:	f000 f91a 	bl	801417e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8013f4a:	78fb      	ldrb	r3, [r7, #3]
 8013f4c:	3301      	adds	r3, #1
 8013f4e:	b2db      	uxtb	r3, r3
 8013f50:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8013f54:	4619      	mov	r1, r3
 8013f56:	480b      	ldr	r0, [pc, #44]	; (8013f84 <RadioSend+0x1e0>)
 8013f58:	f001 f864 	bl	8015024 <SUBGRF_SendPayload>
            break;
 8013f5c:	e000      	b.n	8013f60 <RadioSend+0x1bc>
        }
        default:
            break;
 8013f5e:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8013f60:	4b06      	ldr	r3, [pc, #24]	; (8013f7c <RadioSend+0x1d8>)
 8013f62:	685b      	ldr	r3, [r3, #4]
 8013f64:	4619      	mov	r1, r3
 8013f66:	4808      	ldr	r0, [pc, #32]	; (8013f88 <RadioSend+0x1e4>)
 8013f68:	f002 fc48 	bl	80167fc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8013f6c:	4806      	ldr	r0, [pc, #24]	; (8013f88 <RadioSend+0x1e4>)
 8013f6e:	f002 fb67 	bl	8016640 <UTIL_TIMER_Start>
 8013f72:	e000      	b.n	8013f76 <RadioSend+0x1d2>
                return;
 8013f74:	bf00      	nop
}
 8013f76:	3710      	adds	r7, #16
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}
 8013f7c:	20001234 	.word	0x20001234
 8013f80:	20001242 	.word	0x20001242
 8013f84:	20000f68 	.word	0x20000f68
 8013f88:	2000128c 	.word	0x2000128c

08013f8c <RadioSleep>:

static void RadioSleep( void )
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b082      	sub	sp, #8
 8013f90:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8013f92:	2300      	movs	r3, #0
 8013f94:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8013f96:	793b      	ldrb	r3, [r7, #4]
 8013f98:	f043 0304 	orr.w	r3, r3, #4
 8013f9c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8013f9e:	7938      	ldrb	r0, [r7, #4]
 8013fa0:	f001 f91c 	bl	80151dc <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8013fa4:	2002      	movs	r0, #2
 8013fa6:	f7ed fa5b 	bl	8001460 <HAL_Delay>
}
 8013faa:	bf00      	nop
 8013fac:	3708      	adds	r7, #8
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}

08013fb2 <RadioStandby>:

static void RadioStandby( void )
{
 8013fb2:	b580      	push	{r7, lr}
 8013fb4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8013fb6:	2000      	movs	r0, #0
 8013fb8:	f001 f942 	bl	8015240 <SUBGRF_SetStandby>
}
 8013fbc:	bf00      	nop
 8013fbe:	bd80      	pop	{r7, pc}

08013fc0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b082      	sub	sp, #8
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8013fc8:	f002 f927 	bl	801621a <RFW_Is_Init>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	2b01      	cmp	r3, #1
 8013fd0:	d102      	bne.n	8013fd8 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8013fd2:	f002 f94a 	bl	801626a <RFW_ReceiveInit>
 8013fd6:	e007      	b.n	8013fe8 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8013fd8:	2300      	movs	r3, #0
 8013fda:	2200      	movs	r2, #0
 8013fdc:	f240 2162 	movw	r1, #610	; 0x262
 8013fe0:	f240 2062 	movw	r0, #610	; 0x262
 8013fe4:	f001 fafc 	bl	80155e0 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d006      	beq.n	8013ffc <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8013fee:	6879      	ldr	r1, [r7, #4]
 8013ff0:	480f      	ldr	r0, [pc, #60]	; (8014030 <RadioRx+0x70>)
 8013ff2:	f002 fc03 	bl	80167fc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8013ff6:	480e      	ldr	r0, [pc, #56]	; (8014030 <RadioRx+0x70>)
 8013ff8:	f002 fb22 	bl	8016640 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8013ffc:	4b0d      	ldr	r3, [pc, #52]	; (8014034 <RadioRx+0x74>)
 8013ffe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8014002:	2100      	movs	r1, #0
 8014004:	4618      	mov	r0, r3
 8014006:	f001 ff1d 	bl	8015e44 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801400a:	4b0a      	ldr	r3, [pc, #40]	; (8014034 <RadioRx+0x74>)
 801400c:	785b      	ldrb	r3, [r3, #1]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d004      	beq.n	801401c <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8014012:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014016:	f001 f94f 	bl	80152b8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801401a:	e005      	b.n	8014028 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801401c:	4b05      	ldr	r3, [pc, #20]	; (8014034 <RadioRx+0x74>)
 801401e:	689b      	ldr	r3, [r3, #8]
 8014020:	019b      	lsls	r3, r3, #6
 8014022:	4618      	mov	r0, r3
 8014024:	f001 f948 	bl	80152b8 <SUBGRF_SetRx>
}
 8014028:	bf00      	nop
 801402a:	3708      	adds	r7, #8
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}
 8014030:	200012a4 	.word	0x200012a4
 8014034:	20001234 	.word	0x20001234

08014038 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b082      	sub	sp, #8
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8014040:	f002 f8eb 	bl	801621a <RFW_Is_Init>
 8014044:	4603      	mov	r3, r0
 8014046:	2b01      	cmp	r3, #1
 8014048:	d102      	bne.n	8014050 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 801404a:	f002 f90e 	bl	801626a <RFW_ReceiveInit>
 801404e:	e007      	b.n	8014060 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8014050:	2300      	movs	r3, #0
 8014052:	2200      	movs	r2, #0
 8014054:	f240 2162 	movw	r1, #610	; 0x262
 8014058:	f240 2062 	movw	r0, #610	; 0x262
 801405c:	f001 fac0 	bl	80155e0 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d006      	beq.n	8014074 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8014066:	6879      	ldr	r1, [r7, #4]
 8014068:	480f      	ldr	r0, [pc, #60]	; (80140a8 <RadioRxBoosted+0x70>)
 801406a:	f002 fbc7 	bl	80167fc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801406e:	480e      	ldr	r0, [pc, #56]	; (80140a8 <RadioRxBoosted+0x70>)
 8014070:	f002 fae6 	bl	8016640 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8014074:	4b0d      	ldr	r3, [pc, #52]	; (80140ac <RadioRxBoosted+0x74>)
 8014076:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801407a:	2100      	movs	r1, #0
 801407c:	4618      	mov	r0, r3
 801407e:	f001 fee1 	bl	8015e44 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8014082:	4b0a      	ldr	r3, [pc, #40]	; (80140ac <RadioRxBoosted+0x74>)
 8014084:	785b      	ldrb	r3, [r3, #1]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d004      	beq.n	8014094 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801408a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801408e:	f001 f933 	bl	80152f8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8014092:	e005      	b.n	80140a0 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8014094:	4b05      	ldr	r3, [pc, #20]	; (80140ac <RadioRxBoosted+0x74>)
 8014096:	689b      	ldr	r3, [r3, #8]
 8014098:	019b      	lsls	r3, r3, #6
 801409a:	4618      	mov	r0, r3
 801409c:	f001 f92c 	bl	80152f8 <SUBGRF_SetRxBoosted>
}
 80140a0:	bf00      	nop
 80140a2:	3708      	adds	r7, #8
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bd80      	pop	{r7, pc}
 80140a8:	200012a4 	.word	0x200012a4
 80140ac:	20001234 	.word	0x20001234

080140b0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80140ba:	4b07      	ldr	r3, [pc, #28]	; (80140d8 <RadioSetRxDutyCycle+0x28>)
 80140bc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80140c0:	2100      	movs	r1, #0
 80140c2:	4618      	mov	r0, r3
 80140c4:	f001 febe 	bl	8015e44 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80140c8:	6839      	ldr	r1, [r7, #0]
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f001 f938 	bl	8015340 <SUBGRF_SetRxDutyCycle>
}
 80140d0:	bf00      	nop
 80140d2:	3708      	adds	r7, #8
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}
 80140d8:	20001234 	.word	0x20001234

080140dc <RadioStartCad>:

static void RadioStartCad( void )
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80140e0:	4b09      	ldr	r3, [pc, #36]	; (8014108 <RadioStartCad+0x2c>)
 80140e2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80140e6:	2100      	movs	r1, #0
 80140e8:	4618      	mov	r0, r3
 80140ea:	f001 feab 	bl	8015e44 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80140ee:	2300      	movs	r3, #0
 80140f0:	2200      	movs	r2, #0
 80140f2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80140f6:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80140fa:	f001 fa71 	bl	80155e0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80140fe:	f001 f94b 	bl	8015398 <SUBGRF_SetCad>
}
 8014102:	bf00      	nop
 8014104:	bd80      	pop	{r7, pc}
 8014106:	bf00      	nop
 8014108:	20001234 	.word	0x20001234

0801410c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b084      	sub	sp, #16
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
 8014114:	460b      	mov	r3, r1
 8014116:	70fb      	strb	r3, [r7, #3]
 8014118:	4613      	mov	r3, r2
 801411a:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801411c:	883b      	ldrh	r3, [r7, #0]
 801411e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014122:	fb02 f303 	mul.w	r3, r2, r3
 8014126:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f001 fab5 	bl	8015698 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801412e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014132:	4618      	mov	r0, r3
 8014134:	f001 feae 	bl	8015e94 <SUBGRF_SetRfTxPower>
 8014138:	4603      	mov	r3, r0
 801413a:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 801413c:	7afb      	ldrb	r3, [r7, #11]
 801413e:	2101      	movs	r1, #1
 8014140:	4618      	mov	r0, r3
 8014142:	f001 fe7f 	bl	8015e44 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8014146:	f001 f935 	bl	80153b4 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801414a:	68f9      	ldr	r1, [r7, #12]
 801414c:	4804      	ldr	r0, [pc, #16]	; (8014160 <RadioSetTxContinuousWave+0x54>)
 801414e:	f002 fb55 	bl	80167fc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8014152:	4803      	ldr	r0, [pc, #12]	; (8014160 <RadioSetTxContinuousWave+0x54>)
 8014154:	f002 fa74 	bl	8016640 <UTIL_TIMER_Start>
}
 8014158:	bf00      	nop
 801415a:	3710      	adds	r7, #16
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}
 8014160:	2000128c 	.word	0x2000128c

08014164 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b082      	sub	sp, #8
 8014168:	af00      	add	r7, sp, #0
 801416a:	4603      	mov	r3, r0
 801416c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801416e:	f001 fce2 	bl	8015b36 <SUBGRF_GetRssiInst>
 8014172:	4603      	mov	r3, r0
 8014174:	b21b      	sxth	r3, r3
}
 8014176:	4618      	mov	r0, r3
 8014178:	3708      	adds	r7, #8
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}

0801417e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801417e:	b580      	push	{r7, lr}
 8014180:	b082      	sub	sp, #8
 8014182:	af00      	add	r7, sp, #0
 8014184:	4603      	mov	r3, r0
 8014186:	460a      	mov	r2, r1
 8014188:	80fb      	strh	r3, [r7, #6]
 801418a:	4613      	mov	r3, r2
 801418c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 801418e:	797a      	ldrb	r2, [r7, #5]
 8014190:	88fb      	ldrh	r3, [r7, #6]
 8014192:	4611      	mov	r1, r2
 8014194:	4618      	mov	r0, r3
 8014196:	f001 fd61 	bl	8015c5c <SUBGRF_WriteRegister>
}
 801419a:	bf00      	nop
 801419c:	3708      	adds	r7, #8
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}

080141a2 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80141a2:	b580      	push	{r7, lr}
 80141a4:	b082      	sub	sp, #8
 80141a6:	af00      	add	r7, sp, #0
 80141a8:	4603      	mov	r3, r0
 80141aa:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 80141ac:	88fb      	ldrh	r3, [r7, #6]
 80141ae:	4618      	mov	r0, r3
 80141b0:	f001 fd68 	bl	8015c84 <SUBGRF_ReadRegister>
 80141b4:	4603      	mov	r3, r0
}
 80141b6:	4618      	mov	r0, r3
 80141b8:	3708      	adds	r7, #8
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bd80      	pop	{r7, pc}

080141be <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80141be:	b580      	push	{r7, lr}
 80141c0:	b082      	sub	sp, #8
 80141c2:	af00      	add	r7, sp, #0
 80141c4:	4603      	mov	r3, r0
 80141c6:	6039      	str	r1, [r7, #0]
 80141c8:	80fb      	strh	r3, [r7, #6]
 80141ca:	4613      	mov	r3, r2
 80141cc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80141ce:	797b      	ldrb	r3, [r7, #5]
 80141d0:	b29a      	uxth	r2, r3
 80141d2:	88fb      	ldrh	r3, [r7, #6]
 80141d4:	6839      	ldr	r1, [r7, #0]
 80141d6:	4618      	mov	r0, r3
 80141d8:	f001 fd68 	bl	8015cac <SUBGRF_WriteRegisters>
}
 80141dc:	bf00      	nop
 80141de:	3708      	adds	r7, #8
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}

080141e4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b082      	sub	sp, #8
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	4603      	mov	r3, r0
 80141ec:	6039      	str	r1, [r7, #0]
 80141ee:	80fb      	strh	r3, [r7, #6]
 80141f0:	4613      	mov	r3, r2
 80141f2:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80141f4:	797b      	ldrb	r3, [r7, #5]
 80141f6:	b29a      	uxth	r2, r3
 80141f8:	88fb      	ldrh	r3, [r7, #6]
 80141fa:	6839      	ldr	r1, [r7, #0]
 80141fc:	4618      	mov	r0, r3
 80141fe:	f001 fd77 	bl	8015cf0 <SUBGRF_ReadRegisters>
}
 8014202:	bf00      	nop
 8014204:	3708      	adds	r7, #8
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}
	...

0801420c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b082      	sub	sp, #8
 8014210:	af00      	add	r7, sp, #0
 8014212:	4603      	mov	r3, r0
 8014214:	460a      	mov	r2, r1
 8014216:	71fb      	strb	r3, [r7, #7]
 8014218:	4613      	mov	r3, r2
 801421a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801421c:	79fb      	ldrb	r3, [r7, #7]
 801421e:	2b01      	cmp	r3, #1
 8014220:	d10a      	bne.n	8014238 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8014222:	4a0e      	ldr	r2, [pc, #56]	; (801425c <RadioSetMaxPayloadLength+0x50>)
 8014224:	79bb      	ldrb	r3, [r7, #6]
 8014226:	7013      	strb	r3, [r2, #0]
 8014228:	4b0c      	ldr	r3, [pc, #48]	; (801425c <RadioSetMaxPayloadLength+0x50>)
 801422a:	781a      	ldrb	r2, [r3, #0]
 801422c:	4b0c      	ldr	r3, [pc, #48]	; (8014260 <RadioSetMaxPayloadLength+0x54>)
 801422e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014230:	480c      	ldr	r0, [pc, #48]	; (8014264 <RadioSetMaxPayloadLength+0x58>)
 8014232:	f001 fbcb 	bl	80159cc <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8014236:	e00d      	b.n	8014254 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8014238:	4b09      	ldr	r3, [pc, #36]	; (8014260 <RadioSetMaxPayloadLength+0x54>)
 801423a:	7d5b      	ldrb	r3, [r3, #21]
 801423c:	2b01      	cmp	r3, #1
 801423e:	d109      	bne.n	8014254 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8014240:	4a06      	ldr	r2, [pc, #24]	; (801425c <RadioSetMaxPayloadLength+0x50>)
 8014242:	79bb      	ldrb	r3, [r7, #6]
 8014244:	7013      	strb	r3, [r2, #0]
 8014246:	4b05      	ldr	r3, [pc, #20]	; (801425c <RadioSetMaxPayloadLength+0x50>)
 8014248:	781a      	ldrb	r2, [r3, #0]
 801424a:	4b05      	ldr	r3, [pc, #20]	; (8014260 <RadioSetMaxPayloadLength+0x54>)
 801424c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801424e:	4805      	ldr	r0, [pc, #20]	; (8014264 <RadioSetMaxPayloadLength+0x58>)
 8014250:	f001 fbbc 	bl	80159cc <SUBGRF_SetPacketParams>
}
 8014254:	bf00      	nop
 8014256:	3708      	adds	r7, #8
 8014258:	46bd      	mov	sp, r7
 801425a:	bd80      	pop	{r7, pc}
 801425c:	200000ec 	.word	0x200000ec
 8014260:	20001234 	.word	0x20001234
 8014264:	20001242 	.word	0x20001242

08014268 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b082      	sub	sp, #8
 801426c:	af00      	add	r7, sp, #0
 801426e:	4603      	mov	r3, r0
 8014270:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8014272:	4a13      	ldr	r2, [pc, #76]	; (80142c0 <RadioSetPublicNetwork+0x58>)
 8014274:	79fb      	ldrb	r3, [r7, #7]
 8014276:	7313      	strb	r3, [r2, #12]
 8014278:	4b11      	ldr	r3, [pc, #68]	; (80142c0 <RadioSetPublicNetwork+0x58>)
 801427a:	7b1a      	ldrb	r2, [r3, #12]
 801427c:	4b10      	ldr	r3, [pc, #64]	; (80142c0 <RadioSetPublicNetwork+0x58>)
 801427e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8014280:	2001      	movs	r0, #1
 8014282:	f7ff f831 	bl	80132e8 <RadioSetModem>
    if( enable == true )
 8014286:	79fb      	ldrb	r3, [r7, #7]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d00a      	beq.n	80142a2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801428c:	2134      	movs	r1, #52	; 0x34
 801428e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8014292:	f001 fce3 	bl	8015c5c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8014296:	2144      	movs	r1, #68	; 0x44
 8014298:	f240 7041 	movw	r0, #1857	; 0x741
 801429c:	f001 fcde 	bl	8015c5c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80142a0:	e009      	b.n	80142b6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80142a2:	2114      	movs	r1, #20
 80142a4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80142a8:	f001 fcd8 	bl	8015c5c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80142ac:	2124      	movs	r1, #36	; 0x24
 80142ae:	f240 7041 	movw	r0, #1857	; 0x741
 80142b2:	f001 fcd3 	bl	8015c5c <SUBGRF_WriteRegister>
}
 80142b6:	bf00      	nop
 80142b8:	3708      	adds	r7, #8
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}
 80142be:	bf00      	nop
 80142c0:	20001234 	.word	0x20001234

080142c4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80142c8:	f001 fe18 	bl	8015efc <SUBGRF_GetRadioWakeUpTime>
 80142cc:	4603      	mov	r3, r0
 80142ce:	3303      	adds	r3, #3
}
 80142d0:	4618      	mov	r0, r3
 80142d2:	bd80      	pop	{r7, pc}

080142d4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b082      	sub	sp, #8
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80142dc:	f000 f80e 	bl	80142fc <RadioOnTxTimeoutProcess>
}
 80142e0:	bf00      	nop
 80142e2:	3708      	adds	r7, #8
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}

080142e8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b082      	sub	sp, #8
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80142f0:	f000 f818 	bl	8014324 <RadioOnRxTimeoutProcess>
}
 80142f4:	bf00      	nop
 80142f6:	3708      	adds	r7, #8
 80142f8:	46bd      	mov	sp, r7
 80142fa:	bd80      	pop	{r7, pc}

080142fc <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8014300:	4b07      	ldr	r3, [pc, #28]	; (8014320 <RadioOnTxTimeoutProcess+0x24>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d008      	beq.n	801431a <RadioOnTxTimeoutProcess+0x1e>
 8014308:	4b05      	ldr	r3, [pc, #20]	; (8014320 <RadioOnTxTimeoutProcess+0x24>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	685b      	ldr	r3, [r3, #4]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d003      	beq.n	801431a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8014312:	4b03      	ldr	r3, [pc, #12]	; (8014320 <RadioOnTxTimeoutProcess+0x24>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	685b      	ldr	r3, [r3, #4]
 8014318:	4798      	blx	r3
    }
}
 801431a:	bf00      	nop
 801431c:	bd80      	pop	{r7, pc}
 801431e:	bf00      	nop
 8014320:	20001068 	.word	0x20001068

08014324 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8014324:	b580      	push	{r7, lr}
 8014326:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014328:	4b07      	ldr	r3, [pc, #28]	; (8014348 <RadioOnRxTimeoutProcess+0x24>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d008      	beq.n	8014342 <RadioOnRxTimeoutProcess+0x1e>
 8014330:	4b05      	ldr	r3, [pc, #20]	; (8014348 <RadioOnRxTimeoutProcess+0x24>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	68db      	ldr	r3, [r3, #12]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d003      	beq.n	8014342 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801433a:	4b03      	ldr	r3, [pc, #12]	; (8014348 <RadioOnRxTimeoutProcess+0x24>)
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	68db      	ldr	r3, [r3, #12]
 8014340:	4798      	blx	r3
    }
}
 8014342:	bf00      	nop
 8014344:	bd80      	pop	{r7, pc}
 8014346:	bf00      	nop
 8014348:	20001068 	.word	0x20001068

0801434c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801434c:	b580      	push	{r7, lr}
 801434e:	b082      	sub	sp, #8
 8014350:	af00      	add	r7, sp, #0
 8014352:	4603      	mov	r3, r0
 8014354:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8014356:	4a05      	ldr	r2, [pc, #20]	; (801436c <RadioOnDioIrq+0x20>)
 8014358:	88fb      	ldrh	r3, [r7, #6]
 801435a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801435e:	f000 f807 	bl	8014370 <RadioIrqProcess>
}
 8014362:	bf00      	nop
 8014364:	3708      	adds	r7, #8
 8014366:	46bd      	mov	sp, r7
 8014368:	bd80      	pop	{r7, pc}
 801436a:	bf00      	nop
 801436c:	20001234 	.word	0x20001234

08014370 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8014370:	b590      	push	{r4, r7, lr}
 8014372:	b083      	sub	sp, #12
 8014374:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8014376:	2300      	movs	r3, #0
 8014378:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801437a:	2300      	movs	r3, #0
 801437c:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 801437e:	4bb4      	ldr	r3, [pc, #720]	; (8014650 <RadioIrqProcess+0x2e0>)
 8014380:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8014384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014388:	f000 810c 	beq.w	80145a4 <RadioIrqProcess+0x234>
 801438c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014390:	f300 8184 	bgt.w	801469c <RadioIrqProcess+0x32c>
 8014394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014398:	f000 80f0 	beq.w	801457c <RadioIrqProcess+0x20c>
 801439c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80143a0:	f300 817c 	bgt.w	801469c <RadioIrqProcess+0x32c>
 80143a4:	2b80      	cmp	r3, #128	; 0x80
 80143a6:	f000 80d5 	beq.w	8014554 <RadioIrqProcess+0x1e4>
 80143aa:	2b80      	cmp	r3, #128	; 0x80
 80143ac:	f300 8176 	bgt.w	801469c <RadioIrqProcess+0x32c>
 80143b0:	2b20      	cmp	r3, #32
 80143b2:	dc49      	bgt.n	8014448 <RadioIrqProcess+0xd8>
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	f340 8171 	ble.w	801469c <RadioIrqProcess+0x32c>
 80143ba:	3b01      	subs	r3, #1
 80143bc:	2b1f      	cmp	r3, #31
 80143be:	f200 816d 	bhi.w	801469c <RadioIrqProcess+0x32c>
 80143c2:	a201      	add	r2, pc, #4	; (adr r2, 80143c8 <RadioIrqProcess+0x58>)
 80143c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143c8:	08014451 	.word	0x08014451
 80143cc:	0801448b 	.word	0x0801448b
 80143d0:	0801469d 	.word	0x0801469d
 80143d4:	0801469d 	.word	0x0801469d
 80143d8:	0801469d 	.word	0x0801469d
 80143dc:	0801469d 	.word	0x0801469d
 80143e0:	0801469d 	.word	0x0801469d
 80143e4:	08014609 	.word	0x08014609
 80143e8:	0801469d 	.word	0x0801469d
 80143ec:	0801469d 	.word	0x0801469d
 80143f0:	0801469d 	.word	0x0801469d
 80143f4:	0801469d 	.word	0x0801469d
 80143f8:	0801469d 	.word	0x0801469d
 80143fc:	0801469d 	.word	0x0801469d
 8014400:	0801469d 	.word	0x0801469d
 8014404:	0801469d 	.word	0x0801469d
 8014408:	0801469d 	.word	0x0801469d
 801440c:	0801469d 	.word	0x0801469d
 8014410:	0801469d 	.word	0x0801469d
 8014414:	0801469d 	.word	0x0801469d
 8014418:	0801469d 	.word	0x0801469d
 801441c:	0801469d 	.word	0x0801469d
 8014420:	0801469d 	.word	0x0801469d
 8014424:	0801469d 	.word	0x0801469d
 8014428:	0801469d 	.word	0x0801469d
 801442c:	0801469d 	.word	0x0801469d
 8014430:	0801469d 	.word	0x0801469d
 8014434:	0801469d 	.word	0x0801469d
 8014438:	0801469d 	.word	0x0801469d
 801443c:	0801469d 	.word	0x0801469d
 8014440:	0801469d 	.word	0x0801469d
 8014444:	08014619 	.word	0x08014619
 8014448:	2b40      	cmp	r3, #64	; 0x40
 801444a:	f000 810f 	beq.w	801466c <RadioIrqProcess+0x2fc>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801444e:	e125      	b.n	801469c <RadioIrqProcess+0x32c>
        TimerStop( &TxTimeoutTimer );
 8014450:	4880      	ldr	r0, [pc, #512]	; (8014654 <RadioIrqProcess+0x2e4>)
 8014452:	f002 f963 	bl	801671c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8014456:	2000      	movs	r0, #0
 8014458:	f000 fef2 	bl	8015240 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 801445c:	f001 fee4 	bl	8016228 <RFW_Is_LongPacketModeEnabled>
 8014460:	4603      	mov	r3, r0
 8014462:	2b01      	cmp	r3, #1
 8014464:	d101      	bne.n	801446a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8014466:	f001 ff08 	bl	801627a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801446a:	4b7b      	ldr	r3, [pc, #492]	; (8014658 <RadioIrqProcess+0x2e8>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	2b00      	cmp	r3, #0
 8014470:	f000 8116 	beq.w	80146a0 <RadioIrqProcess+0x330>
 8014474:	4b78      	ldr	r3, [pc, #480]	; (8014658 <RadioIrqProcess+0x2e8>)
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	2b00      	cmp	r3, #0
 801447c:	f000 8110 	beq.w	80146a0 <RadioIrqProcess+0x330>
            RadioEvents->TxDone( );
 8014480:	4b75      	ldr	r3, [pc, #468]	; (8014658 <RadioIrqProcess+0x2e8>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	4798      	blx	r3
        break;
 8014488:	e10a      	b.n	80146a0 <RadioIrqProcess+0x330>
        TimerStop( &RxTimeoutTimer );
 801448a:	4874      	ldr	r0, [pc, #464]	; (801465c <RadioIrqProcess+0x2ec>)
 801448c:	f002 f946 	bl	801671c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8014490:	4b6f      	ldr	r3, [pc, #444]	; (8014650 <RadioIrqProcess+0x2e0>)
 8014492:	785b      	ldrb	r3, [r3, #1]
 8014494:	f083 0301 	eor.w	r3, r3, #1
 8014498:	b2db      	uxtb	r3, r3
 801449a:	2b00      	cmp	r3, #0
 801449c:	d014      	beq.n	80144c8 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801449e:	2000      	movs	r0, #0
 80144a0:	f000 fece 	bl	8015240 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 80144a4:	2100      	movs	r1, #0
 80144a6:	f640 1002 	movw	r0, #2306	; 0x902
 80144aa:	f001 fbd7 	bl	8015c5c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 80144ae:	f640 1044 	movw	r0, #2372	; 0x944
 80144b2:	f001 fbe7 	bl	8015c84 <SUBGRF_ReadRegister>
 80144b6:	4603      	mov	r3, r0
 80144b8:	f043 0302 	orr.w	r3, r3, #2
 80144bc:	b2db      	uxtb	r3, r3
 80144be:	4619      	mov	r1, r3
 80144c0:	f640 1044 	movw	r0, #2372	; 0x944
 80144c4:	f001 fbca 	bl	8015c5c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 80144c8:	1dfb      	adds	r3, r7, #7
 80144ca:	22ff      	movs	r2, #255	; 0xff
 80144cc:	4619      	mov	r1, r3
 80144ce:	4864      	ldr	r0, [pc, #400]	; (8014660 <RadioIrqProcess+0x2f0>)
 80144d0:	f000 fd86 	bl	8014fe0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 80144d4:	4863      	ldr	r0, [pc, #396]	; (8014664 <RadioIrqProcess+0x2f4>)
 80144d6:	f001 fb6f 	bl	8015bb8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80144da:	4b5f      	ldr	r3, [pc, #380]	; (8014658 <RadioIrqProcess+0x2e8>)
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d036      	beq.n	8014550 <RadioIrqProcess+0x1e0>
 80144e2:	4b5d      	ldr	r3, [pc, #372]	; (8014658 <RadioIrqProcess+0x2e8>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	689b      	ldr	r3, [r3, #8]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d031      	beq.n	8014550 <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 80144ec:	4b58      	ldr	r3, [pc, #352]	; (8014650 <RadioIrqProcess+0x2e0>)
 80144ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80144f2:	2b01      	cmp	r3, #1
 80144f4:	d10e      	bne.n	8014514 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80144f6:	4b58      	ldr	r3, [pc, #352]	; (8014658 <RadioIrqProcess+0x2e8>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	689c      	ldr	r4, [r3, #8]
 80144fc:	79fb      	ldrb	r3, [r7, #7]
 80144fe:	b299      	uxth	r1, r3
 8014500:	4b53      	ldr	r3, [pc, #332]	; (8014650 <RadioIrqProcess+0x2e0>)
 8014502:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8014506:	b21a      	sxth	r2, r3
 8014508:	4b51      	ldr	r3, [pc, #324]	; (8014650 <RadioIrqProcess+0x2e0>)
 801450a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801450e:	4854      	ldr	r0, [pc, #336]	; (8014660 <RadioIrqProcess+0x2f0>)
 8014510:	47a0      	blx	r4
                break;
 8014512:	e01e      	b.n	8014552 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8014514:	4b4e      	ldr	r3, [pc, #312]	; (8014650 <RadioIrqProcess+0x2e0>)
 8014516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014518:	463a      	mov	r2, r7
 801451a:	4611      	mov	r1, r2
 801451c:	4618      	mov	r0, r3
 801451e:	f001 fdcf 	bl	80160c0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8014522:	4b4d      	ldr	r3, [pc, #308]	; (8014658 <RadioIrqProcess+0x2e8>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	689c      	ldr	r4, [r3, #8]
 8014528:	79fb      	ldrb	r3, [r7, #7]
 801452a:	b299      	uxth	r1, r3
 801452c:	4b48      	ldr	r3, [pc, #288]	; (8014650 <RadioIrqProcess+0x2e0>)
 801452e:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8014532:	b218      	sxth	r0, r3
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801453a:	4a4b      	ldr	r2, [pc, #300]	; (8014668 <RadioIrqProcess+0x2f8>)
 801453c:	fb82 c203 	smull	ip, r2, r2, r3
 8014540:	1192      	asrs	r2, r2, #6
 8014542:	17db      	asrs	r3, r3, #31
 8014544:	1ad3      	subs	r3, r2, r3
 8014546:	b25b      	sxtb	r3, r3
 8014548:	4602      	mov	r2, r0
 801454a:	4845      	ldr	r0, [pc, #276]	; (8014660 <RadioIrqProcess+0x2f0>)
 801454c:	47a0      	blx	r4
                break;
 801454e:	e000      	b.n	8014552 <RadioIrqProcess+0x1e2>
        }
 8014550:	bf00      	nop
        break;
 8014552:	e0b2      	b.n	80146ba <RadioIrqProcess+0x34a>
        SUBGRF_SetStandby( STDBY_RC );
 8014554:	2000      	movs	r0, #0
 8014556:	f000 fe73 	bl	8015240 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801455a:	4b3f      	ldr	r3, [pc, #252]	; (8014658 <RadioIrqProcess+0x2e8>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	2b00      	cmp	r3, #0
 8014560:	f000 80a0 	beq.w	80146a4 <RadioIrqProcess+0x334>
 8014564:	4b3c      	ldr	r3, [pc, #240]	; (8014658 <RadioIrqProcess+0x2e8>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	699b      	ldr	r3, [r3, #24]
 801456a:	2b00      	cmp	r3, #0
 801456c:	f000 809a 	beq.w	80146a4 <RadioIrqProcess+0x334>
            RadioEvents->CadDone( false );
 8014570:	4b39      	ldr	r3, [pc, #228]	; (8014658 <RadioIrqProcess+0x2e8>)
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	699b      	ldr	r3, [r3, #24]
 8014576:	2000      	movs	r0, #0
 8014578:	4798      	blx	r3
        break;
 801457a:	e093      	b.n	80146a4 <RadioIrqProcess+0x334>
        SUBGRF_SetStandby( STDBY_RC );
 801457c:	2000      	movs	r0, #0
 801457e:	f000 fe5f 	bl	8015240 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8014582:	4b35      	ldr	r3, [pc, #212]	; (8014658 <RadioIrqProcess+0x2e8>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	2b00      	cmp	r3, #0
 8014588:	f000 808e 	beq.w	80146a8 <RadioIrqProcess+0x338>
 801458c:	4b32      	ldr	r3, [pc, #200]	; (8014658 <RadioIrqProcess+0x2e8>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	699b      	ldr	r3, [r3, #24]
 8014592:	2b00      	cmp	r3, #0
 8014594:	f000 8088 	beq.w	80146a8 <RadioIrqProcess+0x338>
            RadioEvents->CadDone( true );
 8014598:	4b2f      	ldr	r3, [pc, #188]	; (8014658 <RadioIrqProcess+0x2e8>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	699b      	ldr	r3, [r3, #24]
 801459e:	2001      	movs	r0, #1
 80145a0:	4798      	blx	r3
        break;
 80145a2:	e081      	b.n	80146a8 <RadioIrqProcess+0x338>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80145a4:	f000 fd02 	bl	8014fac <SUBGRF_GetOperatingMode>
 80145a8:	4603      	mov	r3, r0
 80145aa:	2b04      	cmp	r3, #4
 80145ac:	d113      	bne.n	80145d6 <RadioIrqProcess+0x266>
            TimerStop( &TxTimeoutTimer );
 80145ae:	4829      	ldr	r0, [pc, #164]	; (8014654 <RadioIrqProcess+0x2e4>)
 80145b0:	f002 f8b4 	bl	801671c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80145b4:	2000      	movs	r0, #0
 80145b6:	f000 fe43 	bl	8015240 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80145ba:	4b27      	ldr	r3, [pc, #156]	; (8014658 <RadioIrqProcess+0x2e8>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d074      	beq.n	80146ac <RadioIrqProcess+0x33c>
 80145c2:	4b25      	ldr	r3, [pc, #148]	; (8014658 <RadioIrqProcess+0x2e8>)
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	685b      	ldr	r3, [r3, #4]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d06f      	beq.n	80146ac <RadioIrqProcess+0x33c>
                RadioEvents->TxTimeout( );
 80145cc:	4b22      	ldr	r3, [pc, #136]	; (8014658 <RadioIrqProcess+0x2e8>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	685b      	ldr	r3, [r3, #4]
 80145d2:	4798      	blx	r3
        break;
 80145d4:	e06a      	b.n	80146ac <RadioIrqProcess+0x33c>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80145d6:	f000 fce9 	bl	8014fac <SUBGRF_GetOperatingMode>
 80145da:	4603      	mov	r3, r0
 80145dc:	2b05      	cmp	r3, #5
 80145de:	d165      	bne.n	80146ac <RadioIrqProcess+0x33c>
            TimerStop( &RxTimeoutTimer );
 80145e0:	481e      	ldr	r0, [pc, #120]	; (801465c <RadioIrqProcess+0x2ec>)
 80145e2:	f002 f89b 	bl	801671c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80145e6:	2000      	movs	r0, #0
 80145e8:	f000 fe2a 	bl	8015240 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80145ec:	4b1a      	ldr	r3, [pc, #104]	; (8014658 <RadioIrqProcess+0x2e8>)
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d05b      	beq.n	80146ac <RadioIrqProcess+0x33c>
 80145f4:	4b18      	ldr	r3, [pc, #96]	; (8014658 <RadioIrqProcess+0x2e8>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	68db      	ldr	r3, [r3, #12]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d056      	beq.n	80146ac <RadioIrqProcess+0x33c>
                RadioEvents->RxTimeout( );
 80145fe:	4b16      	ldr	r3, [pc, #88]	; (8014658 <RadioIrqProcess+0x2e8>)
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	68db      	ldr	r3, [r3, #12]
 8014604:	4798      	blx	r3
        break;
 8014606:	e051      	b.n	80146ac <RadioIrqProcess+0x33c>
        if ( 1UL == RFW_Is_Init( ) )
 8014608:	f001 fe07 	bl	801621a <RFW_Is_Init>
 801460c:	4603      	mov	r3, r0
 801460e:	2b01      	cmp	r3, #1
 8014610:	d14e      	bne.n	80146b0 <RadioIrqProcess+0x340>
            RFW_ReceivePayload( );
 8014612:	f001 fe38 	bl	8016286 <RFW_ReceivePayload>
        break;
 8014616:	e04b      	b.n	80146b0 <RadioIrqProcess+0x340>
        TimerStop( &RxTimeoutTimer );
 8014618:	4810      	ldr	r0, [pc, #64]	; (801465c <RadioIrqProcess+0x2ec>)
 801461a:	f002 f87f 	bl	801671c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801461e:	4b0c      	ldr	r3, [pc, #48]	; (8014650 <RadioIrqProcess+0x2e0>)
 8014620:	785b      	ldrb	r3, [r3, #1]
 8014622:	f083 0301 	eor.w	r3, r3, #1
 8014626:	b2db      	uxtb	r3, r3
 8014628:	2b00      	cmp	r3, #0
 801462a:	d002      	beq.n	8014632 <RadioIrqProcess+0x2c2>
            SUBGRF_SetStandby( STDBY_RC );
 801462c:	2000      	movs	r0, #0
 801462e:	f000 fe07 	bl	8015240 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014632:	4b09      	ldr	r3, [pc, #36]	; (8014658 <RadioIrqProcess+0x2e8>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d03c      	beq.n	80146b4 <RadioIrqProcess+0x344>
 801463a:	4b07      	ldr	r3, [pc, #28]	; (8014658 <RadioIrqProcess+0x2e8>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	68db      	ldr	r3, [r3, #12]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d037      	beq.n	80146b4 <RadioIrqProcess+0x344>
            RadioEvents->RxTimeout( );
 8014644:	4b04      	ldr	r3, [pc, #16]	; (8014658 <RadioIrqProcess+0x2e8>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	68db      	ldr	r3, [r3, #12]
 801464a:	4798      	blx	r3
        break;
 801464c:	e032      	b.n	80146b4 <RadioIrqProcess+0x344>
 801464e:	bf00      	nop
 8014650:	20001234 	.word	0x20001234
 8014654:	2000128c 	.word	0x2000128c
 8014658:	20001068 	.word	0x20001068
 801465c:	200012a4 	.word	0x200012a4
 8014660:	20000f68 	.word	0x20000f68
 8014664:	20001258 	.word	0x20001258
 8014668:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 801466c:	4b15      	ldr	r3, [pc, #84]	; (80146c4 <RadioIrqProcess+0x354>)
 801466e:	785b      	ldrb	r3, [r3, #1]
 8014670:	f083 0301 	eor.w	r3, r3, #1
 8014674:	b2db      	uxtb	r3, r3
 8014676:	2b00      	cmp	r3, #0
 8014678:	d002      	beq.n	8014680 <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 801467a:	2000      	movs	r0, #0
 801467c:	f000 fde0 	bl	8015240 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8014680:	4b11      	ldr	r3, [pc, #68]	; (80146c8 <RadioIrqProcess+0x358>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d017      	beq.n	80146b8 <RadioIrqProcess+0x348>
 8014688:	4b0f      	ldr	r3, [pc, #60]	; (80146c8 <RadioIrqProcess+0x358>)
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	691b      	ldr	r3, [r3, #16]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d012      	beq.n	80146b8 <RadioIrqProcess+0x348>
            RadioEvents->RxError( );
 8014692:	4b0d      	ldr	r3, [pc, #52]	; (80146c8 <RadioIrqProcess+0x358>)
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	691b      	ldr	r3, [r3, #16]
 8014698:	4798      	blx	r3
        break;
 801469a:	e00d      	b.n	80146b8 <RadioIrqProcess+0x348>
        break;
 801469c:	bf00      	nop
 801469e:	e00c      	b.n	80146ba <RadioIrqProcess+0x34a>
        break;
 80146a0:	bf00      	nop
 80146a2:	e00a      	b.n	80146ba <RadioIrqProcess+0x34a>
        break;
 80146a4:	bf00      	nop
 80146a6:	e008      	b.n	80146ba <RadioIrqProcess+0x34a>
        break;
 80146a8:	bf00      	nop
 80146aa:	e006      	b.n	80146ba <RadioIrqProcess+0x34a>
        break;
 80146ac:	bf00      	nop
 80146ae:	e004      	b.n	80146ba <RadioIrqProcess+0x34a>
        break;
 80146b0:	bf00      	nop
 80146b2:	e002      	b.n	80146ba <RadioIrqProcess+0x34a>
        break;
 80146b4:	bf00      	nop
 80146b6:	e000      	b.n	80146ba <RadioIrqProcess+0x34a>
        break;
 80146b8:	bf00      	nop
  }
}
 80146ba:	bf00      	nop
 80146bc:	370c      	adds	r7, #12
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd90      	pop	{r4, r7, pc}
 80146c2:	bf00      	nop
 80146c4:	20001234 	.word	0x20001234
 80146c8:	20001068 	.word	0x20001068

080146cc <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80146d0:	4b09      	ldr	r3, [pc, #36]	; (80146f8 <RadioTxPrbs+0x2c>)
 80146d2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80146d6:	2101      	movs	r1, #1
 80146d8:	4618      	mov	r0, r3
 80146da:	f001 fbb3 	bl	8015e44 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 80146de:	4b07      	ldr	r3, [pc, #28]	; (80146fc <RadioTxPrbs+0x30>)
 80146e0:	212d      	movs	r1, #45	; 0x2d
 80146e2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80146e6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80146e8:	f000 fe6d 	bl	80153c6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80146ec:	4804      	ldr	r0, [pc, #16]	; (8014700 <RadioTxPrbs+0x34>)
 80146ee:	f000 fdc3 	bl	8015278 <SUBGRF_SetTx>
}
 80146f2:	bf00      	nop
 80146f4:	bd80      	pop	{r7, pc}
 80146f6:	bf00      	nop
 80146f8:	20001234 	.word	0x20001234
 80146fc:	0801417f 	.word	0x0801417f
 8014700:	000fffff 	.word	0x000fffff

08014704 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b084      	sub	sp, #16
 8014708:	af00      	add	r7, sp, #0
 801470a:	4603      	mov	r3, r0
 801470c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801470e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014712:	4618      	mov	r0, r3
 8014714:	f001 fbbe 	bl	8015e94 <SUBGRF_SetRfTxPower>
 8014718:	4603      	mov	r3, r0
 801471a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801471c:	7bfb      	ldrb	r3, [r7, #15]
 801471e:	2101      	movs	r1, #1
 8014720:	4618      	mov	r0, r3
 8014722:	f001 fb8f 	bl	8015e44 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8014726:	f000 fe45 	bl	80153b4 <SUBGRF_SetTxContinuousWave>
}
 801472a:	bf00      	nop
 801472c:	3710      	adds	r7, #16
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}

08014732 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8014732:	b480      	push	{r7}
 8014734:	b089      	sub	sp, #36	; 0x24
 8014736:	af00      	add	r7, sp, #0
 8014738:	60f8      	str	r0, [r7, #12]
 801473a:	60b9      	str	r1, [r7, #8]
 801473c:	4613      	mov	r3, r2
 801473e:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8014740:	2300      	movs	r3, #0
 8014742:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8014744:	2300      	movs	r3, #0
 8014746:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8014748:	2300      	movs	r3, #0
 801474a:	61bb      	str	r3, [r7, #24]
 801474c:	e011      	b.n	8014772 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801474e:	69bb      	ldr	r3, [r7, #24]
 8014750:	68ba      	ldr	r2, [r7, #8]
 8014752:	4413      	add	r3, r2
 8014754:	781a      	ldrb	r2, [r3, #0]
 8014756:	69bb      	ldr	r3, [r7, #24]
 8014758:	68b9      	ldr	r1, [r7, #8]
 801475a:	440b      	add	r3, r1
 801475c:	43d2      	mvns	r2, r2
 801475e:	b2d2      	uxtb	r2, r2
 8014760:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8014762:	69bb      	ldr	r3, [r7, #24]
 8014764:	68fa      	ldr	r2, [r7, #12]
 8014766:	4413      	add	r3, r2
 8014768:	2200      	movs	r2, #0
 801476a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 801476c:	69bb      	ldr	r3, [r7, #24]
 801476e:	3301      	adds	r3, #1
 8014770:	61bb      	str	r3, [r7, #24]
 8014772:	79fb      	ldrb	r3, [r7, #7]
 8014774:	69ba      	ldr	r2, [r7, #24]
 8014776:	429a      	cmp	r2, r3
 8014778:	dbe9      	blt.n	801474e <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 801477a:	2300      	movs	r3, #0
 801477c:	61bb      	str	r3, [r7, #24]
 801477e:	e049      	b.n	8014814 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8014780:	69bb      	ldr	r3, [r7, #24]
 8014782:	425a      	negs	r2, r3
 8014784:	f003 0307 	and.w	r3, r3, #7
 8014788:	f002 0207 	and.w	r2, r2, #7
 801478c:	bf58      	it	pl
 801478e:	4253      	negpl	r3, r2
 8014790:	b2db      	uxtb	r3, r3
 8014792:	f1c3 0307 	rsb	r3, r3, #7
 8014796:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8014798:	69bb      	ldr	r3, [r7, #24]
 801479a:	2b00      	cmp	r3, #0
 801479c:	da00      	bge.n	80147a0 <payload_integration+0x6e>
 801479e:	3307      	adds	r3, #7
 80147a0:	10db      	asrs	r3, r3, #3
 80147a2:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80147a4:	69bb      	ldr	r3, [r7, #24]
 80147a6:	3301      	adds	r3, #1
 80147a8:	425a      	negs	r2, r3
 80147aa:	f003 0307 	and.w	r3, r3, #7
 80147ae:	f002 0207 	and.w	r2, r2, #7
 80147b2:	bf58      	it	pl
 80147b4:	4253      	negpl	r3, r2
 80147b6:	b2db      	uxtb	r3, r3
 80147b8:	f1c3 0307 	rsb	r3, r3, #7
 80147bc:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80147be:	69bb      	ldr	r3, [r7, #24]
 80147c0:	3301      	adds	r3, #1
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	da00      	bge.n	80147c8 <payload_integration+0x96>
 80147c6:	3307      	adds	r3, #7
 80147c8:	10db      	asrs	r3, r3, #3
 80147ca:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80147cc:	7dbb      	ldrb	r3, [r7, #22]
 80147ce:	68ba      	ldr	r2, [r7, #8]
 80147d0:	4413      	add	r3, r2
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	461a      	mov	r2, r3
 80147d6:	7dfb      	ldrb	r3, [r7, #23]
 80147d8:	fa42 f303 	asr.w	r3, r2, r3
 80147dc:	b2db      	uxtb	r3, r3
 80147de:	f003 0301 	and.w	r3, r3, #1
 80147e2:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80147e4:	7ffa      	ldrb	r2, [r7, #31]
 80147e6:	7cfb      	ldrb	r3, [r7, #19]
 80147e8:	4053      	eors	r3, r2
 80147ea:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80147ec:	7d3b      	ldrb	r3, [r7, #20]
 80147ee:	68fa      	ldr	r2, [r7, #12]
 80147f0:	4413      	add	r3, r2
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	b25a      	sxtb	r2, r3
 80147f6:	7ff9      	ldrb	r1, [r7, #31]
 80147f8:	7d7b      	ldrb	r3, [r7, #21]
 80147fa:	fa01 f303 	lsl.w	r3, r1, r3
 80147fe:	b25b      	sxtb	r3, r3
 8014800:	4313      	orrs	r3, r2
 8014802:	b259      	sxtb	r1, r3
 8014804:	7d3b      	ldrb	r3, [r7, #20]
 8014806:	68fa      	ldr	r2, [r7, #12]
 8014808:	4413      	add	r3, r2
 801480a:	b2ca      	uxtb	r2, r1
 801480c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 801480e:	69bb      	ldr	r3, [r7, #24]
 8014810:	3301      	adds	r3, #1
 8014812:	61bb      	str	r3, [r7, #24]
 8014814:	79fb      	ldrb	r3, [r7, #7]
 8014816:	00db      	lsls	r3, r3, #3
 8014818:	69ba      	ldr	r2, [r7, #24]
 801481a:	429a      	cmp	r2, r3
 801481c:	dbb0      	blt.n	8014780 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801481e:	7ffb      	ldrb	r3, [r7, #31]
 8014820:	01db      	lsls	r3, r3, #7
 8014822:	b25a      	sxtb	r2, r3
 8014824:	7ffb      	ldrb	r3, [r7, #31]
 8014826:	019b      	lsls	r3, r3, #6
 8014828:	b25b      	sxtb	r3, r3
 801482a:	4313      	orrs	r3, r2
 801482c:	b25b      	sxtb	r3, r3
 801482e:	7ffa      	ldrb	r2, [r7, #31]
 8014830:	2a00      	cmp	r2, #0
 8014832:	d101      	bne.n	8014838 <payload_integration+0x106>
 8014834:	2220      	movs	r2, #32
 8014836:	e000      	b.n	801483a <payload_integration+0x108>
 8014838:	2200      	movs	r2, #0
 801483a:	4313      	orrs	r3, r2
 801483c:	b259      	sxtb	r1, r3
 801483e:	79fb      	ldrb	r3, [r7, #7]
 8014840:	68fa      	ldr	r2, [r7, #12]
 8014842:	4413      	add	r3, r2
 8014844:	b2ca      	uxtb	r2, r1
 8014846:	701a      	strb	r2, [r3, #0]
}
 8014848:	bf00      	nop
 801484a:	3724      	adds	r7, #36	; 0x24
 801484c:	46bd      	mov	sp, r7
 801484e:	bc80      	pop	{r7}
 8014850:	4770      	bx	lr
	...

08014854 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b08c      	sub	sp, #48	; 0x30
 8014858:	af00      	add	r7, sp, #0
 801485a:	60b9      	str	r1, [r7, #8]
 801485c:	607a      	str	r2, [r7, #4]
 801485e:	603b      	str	r3, [r7, #0]
 8014860:	4603      	mov	r3, r0
 8014862:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8014864:	2300      	movs	r3, #0
 8014866:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8014868:	2300      	movs	r3, #0
 801486a:	61fb      	str	r3, [r7, #28]
 801486c:	2300      	movs	r3, #0
 801486e:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8014870:	f001 fccd 	bl	801620e <RFW_DeInit>

    if( rxContinuous != 0 )
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d001      	beq.n	801487e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801487a:	2300      	movs	r3, #0
 801487c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	2b00      	cmp	r3, #0
 8014882:	bf14      	ite	ne
 8014884:	2301      	movne	r3, #1
 8014886:	2300      	moveq	r3, #0
 8014888:	b2da      	uxtb	r2, r3
 801488a:	4ba9      	ldr	r3, [pc, #676]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 801488c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801488e:	7bfb      	ldrb	r3, [r7, #15]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d003      	beq.n	801489c <RadioSetRxGenericConfig+0x48>
 8014894:	2b01      	cmp	r3, #1
 8014896:	f000 80e8 	beq.w	8014a6a <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801489a:	e1a0      	b.n	8014bde <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801489c:	68bb      	ldr	r3, [r7, #8]
 801489e:	68db      	ldr	r3, [r3, #12]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d003      	beq.n	80148ac <RadioSetRxGenericConfig+0x58>
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	691b      	ldr	r3, [r3, #16]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d102      	bne.n	80148b2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 80148ac:	f04f 33ff 	mov.w	r3, #4294967295
 80148b0:	e196      	b.n	8014be0 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 80148b2:	68bb      	ldr	r3, [r7, #8]
 80148b4:	7d5b      	ldrb	r3, [r3, #21]
 80148b6:	2b08      	cmp	r3, #8
 80148b8:	d902      	bls.n	80148c0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80148ba:	f04f 33ff 	mov.w	r3, #4294967295
 80148be:	e18f      	b.n	8014be0 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80148c0:	2300      	movs	r3, #0
 80148c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80148c4:	e00d      	b.n	80148e2 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 80148c6:	68bb      	ldr	r3, [r7, #8]
 80148c8:	699a      	ldr	r2, [r3, #24]
 80148ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148cc:	4413      	add	r3, r2
 80148ce:	7819      	ldrb	r1, [r3, #0]
 80148d0:	f107 021c 	add.w	r2, r7, #28
 80148d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d6:	4413      	add	r3, r2
 80148d8:	460a      	mov	r2, r1
 80148da:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80148dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148de:	3301      	adds	r3, #1
 80148e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80148e2:	68bb      	ldr	r3, [r7, #8]
 80148e4:	7d5b      	ldrb	r3, [r3, #21]
 80148e6:	461a      	mov	r2, r3
 80148e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ea:	4293      	cmp	r3, r2
 80148ec:	dbeb      	blt.n	80148c6 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	bf14      	ite	ne
 80148f6:	2301      	movne	r3, #1
 80148f8:	2300      	moveq	r3, #0
 80148fa:	b2db      	uxtb	r3, r3
 80148fc:	4618      	mov	r0, r3
 80148fe:	f000 fd6b 	bl	80153d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8014902:	4b8b      	ldr	r3, [pc, #556]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014904:	2200      	movs	r2, #0
 8014906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	68db      	ldr	r3, [r3, #12]
 801490e:	4a88      	ldr	r2, [pc, #544]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014910:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	791a      	ldrb	r2, [r3, #4]
 8014916:	4b86      	ldr	r3, [pc, #536]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	689b      	ldr	r3, [r3, #8]
 8014920:	4618      	mov	r0, r3
 8014922:	f001 fba5 	bl	8016070 <SUBGRF_GetFskBandwidthRegValue>
 8014926:	4603      	mov	r3, r0
 8014928:	461a      	mov	r2, r3
 801492a:	4b81      	ldr	r3, [pc, #516]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 801492c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8014930:	4b7f      	ldr	r3, [pc, #508]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014932:	2200      	movs	r2, #0
 8014934:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8014936:	68bb      	ldr	r3, [r7, #8]
 8014938:	691b      	ldr	r3, [r3, #16]
 801493a:	b29b      	uxth	r3, r3
 801493c:	00db      	lsls	r3, r3, #3
 801493e:	b29a      	uxth	r2, r3
 8014940:	4b7b      	ldr	r3, [pc, #492]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014942:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	7d1a      	ldrb	r2, [r3, #20]
 8014948:	4b79      	ldr	r3, [pc, #484]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 801494a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	7d5b      	ldrb	r3, [r3, #21]
 8014950:	00db      	lsls	r3, r3, #3
 8014952:	b2da      	uxtb	r2, r3
 8014954:	4b76      	ldr	r3, [pc, #472]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014956:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801495e:	4b74      	ldr	r3, [pc, #464]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014960:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8014962:	68bb      	ldr	r3, [r7, #8]
 8014964:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8014968:	2b00      	cmp	r3, #0
 801496a:	d105      	bne.n	8014978 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	69db      	ldr	r3, [r3, #28]
 8014970:	b2da      	uxtb	r2, r3
 8014972:	4b6f      	ldr	r3, [pc, #444]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014974:	759a      	strb	r2, [r3, #22]
 8014976:	e00b      	b.n	8014990 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801497e:	2b02      	cmp	r3, #2
 8014980:	d103      	bne.n	801498a <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8014982:	4b6b      	ldr	r3, [pc, #428]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014984:	22ff      	movs	r2, #255	; 0xff
 8014986:	759a      	strb	r2, [r3, #22]
 8014988:	e002      	b.n	8014990 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801498a:	4b69      	ldr	r3, [pc, #420]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 801498c:	22ff      	movs	r2, #255	; 0xff
 801498e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8014996:	2b02      	cmp	r3, #2
 8014998:	d004      	beq.n	80149a4 <RadioSetRxGenericConfig+0x150>
 801499a:	68bb      	ldr	r3, [r7, #8]
 801499c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80149a0:	2b02      	cmp	r3, #2
 80149a2:	d12d      	bne.n	8014a00 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80149aa:	2bf1      	cmp	r3, #241	; 0xf1
 80149ac:	d00c      	beq.n	80149c8 <RadioSetRxGenericConfig+0x174>
 80149ae:	68bb      	ldr	r3, [r7, #8]
 80149b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80149b4:	2bf2      	cmp	r3, #242	; 0xf2
 80149b6:	d007      	beq.n	80149c8 <RadioSetRxGenericConfig+0x174>
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80149be:	2b01      	cmp	r3, #1
 80149c0:	d002      	beq.n	80149c8 <RadioSetRxGenericConfig+0x174>
            return -1;
 80149c2:	f04f 33ff 	mov.w	r3, #4294967295
 80149c6:	e10b      	b.n	8014be0 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 80149c8:	2300      	movs	r3, #0
 80149ca:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80149d0:	4b58      	ldr	r3, [pc, #352]	; (8014b34 <RadioSetRxGenericConfig+0x2e0>)
 80149d2:	6819      	ldr	r1, [r3, #0]
 80149d4:	f107 0310 	add.w	r3, r7, #16
 80149d8:	4a57      	ldr	r2, [pc, #348]	; (8014b38 <RadioSetRxGenericConfig+0x2e4>)
 80149da:	4618      	mov	r0, r3
 80149dc:	f001 fc0a 	bl	80161f4 <RFW_Init>
 80149e0:	4603      	mov	r3, r0
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d002      	beq.n	80149ec <RadioSetRxGenericConfig+0x198>
            return -1;
 80149e6:	f04f 33ff 	mov.w	r3, #4294967295
 80149ea:	e0f9      	b.n	8014be0 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80149ec:	4b50      	ldr	r3, [pc, #320]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 80149ee:	2200      	movs	r2, #0
 80149f0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80149f2:	4b4f      	ldr	r3, [pc, #316]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 80149f4:	2201      	movs	r2, #1
 80149f6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80149f8:	4b4d      	ldr	r3, [pc, #308]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 80149fa:	2200      	movs	r2, #0
 80149fc:	755a      	strb	r2, [r3, #21]
        {
 80149fe:	e00e      	b.n	8014a1e <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8014a06:	4b4a      	ldr	r3, [pc, #296]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014a08:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8014a0a:	68bb      	ldr	r3, [r7, #8]
 8014a0c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8014a10:	4b47      	ldr	r3, [pc, #284]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014a12:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8014a1a:	4b45      	ldr	r3, [pc, #276]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014a1c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8014a1e:	f7ff fac8 	bl	8013fb2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8014a22:	2000      	movs	r0, #0
 8014a24:	f7fe fc60 	bl	80132e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8014a28:	4844      	ldr	r0, [pc, #272]	; (8014b3c <RadioSetRxGenericConfig+0x2e8>)
 8014a2a:	f000 ff03 	bl	8015834 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014a2e:	4844      	ldr	r0, [pc, #272]	; (8014b40 <RadioSetRxGenericConfig+0x2ec>)
 8014a30:	f000 ffcc 	bl	80159cc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8014a34:	f107 031c 	add.w	r3, r7, #28
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f000 fb06 	bl	801504a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	8c1b      	ldrh	r3, [r3, #32]
 8014a42:	4618      	mov	r0, r3
 8014a44:	f000 fb50 	bl	80150e8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8014a48:	68bb      	ldr	r3, [r7, #8]
 8014a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f000 fb2b 	bl	80150a8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8014a52:	683b      	ldr	r3, [r7, #0]
 8014a54:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014a58:	fb02 f203 	mul.w	r2, r2, r3
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	68db      	ldr	r3, [r3, #12]
 8014a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a64:	4a32      	ldr	r2, [pc, #200]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014a66:	6093      	str	r3, [r2, #8]
        break;
 8014a68:	e0b9      	b.n	8014bde <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d102      	bne.n	8014a78 <RadioSetRxGenericConfig+0x224>
            return -1;
 8014a72:	f04f 33ff 	mov.w	r3, #4294967295
 8014a76:	e0b3      	b.n	8014be0 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8014a7e:	2b01      	cmp	r3, #1
 8014a80:	d104      	bne.n	8014a8c <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	69db      	ldr	r3, [r3, #28]
 8014a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014a8a:	e002      	b.n	8014a92 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8014a8c:	23ff      	movs	r3, #255	; 0xff
 8014a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8014a92:	68bb      	ldr	r3, [r7, #8]
 8014a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	bf14      	ite	ne
 8014a9a:	2301      	movne	r3, #1
 8014a9c:	2300      	moveq	r3, #0
 8014a9e:	b2db      	uxtb	r3, r3
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f000 fc99 	bl	80153d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8014aa6:	683b      	ldr	r3, [r7, #0]
 8014aa8:	b2db      	uxtb	r3, r3
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f000 fca3 	bl	80153f6 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8014ab0:	4b1f      	ldr	r3, [pc, #124]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014ab2:	2201      	movs	r2, #1
 8014ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8014ab8:	68bb      	ldr	r3, [r7, #8]
 8014aba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014abe:	4b1c      	ldr	r3, [pc, #112]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8014ac4:	68bb      	ldr	r3, [r7, #8]
 8014ac6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8014aca:	4b19      	ldr	r3, [pc, #100]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8014ad0:	68bb      	ldr	r3, [r7, #8]
 8014ad2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8014ad6:	4b16      	ldr	r3, [pc, #88]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014ad8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8014adc:	68bb      	ldr	r3, [r7, #8]
 8014ade:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8014ae2:	2b02      	cmp	r3, #2
 8014ae4:	d010      	beq.n	8014b08 <RadioSetRxGenericConfig+0x2b4>
 8014ae6:	2b02      	cmp	r3, #2
 8014ae8:	dc2c      	bgt.n	8014b44 <RadioSetRxGenericConfig+0x2f0>
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d002      	beq.n	8014af4 <RadioSetRxGenericConfig+0x2a0>
 8014aee:	2b01      	cmp	r3, #1
 8014af0:	d005      	beq.n	8014afe <RadioSetRxGenericConfig+0x2aa>
            break;
 8014af2:	e027      	b.n	8014b44 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8014af4:	4b0e      	ldr	r3, [pc, #56]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014af6:	2200      	movs	r2, #0
 8014af8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8014afc:	e023      	b.n	8014b46 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8014afe:	4b0c      	ldr	r3, [pc, #48]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014b00:	2201      	movs	r2, #1
 8014b02:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8014b06:	e01e      	b.n	8014b46 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8014b08:	68bb      	ldr	r3, [r7, #8]
 8014b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b0e:	2b0b      	cmp	r3, #11
 8014b10:	d004      	beq.n	8014b1c <RadioSetRxGenericConfig+0x2c8>
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b18:	2b0c      	cmp	r3, #12
 8014b1a:	d104      	bne.n	8014b26 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8014b1c:	4b04      	ldr	r3, [pc, #16]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014b1e:	2201      	movs	r2, #1
 8014b20:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8014b24:	e00f      	b.n	8014b46 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8014b26:	4b02      	ldr	r3, [pc, #8]	; (8014b30 <RadioSetRxGenericConfig+0x2dc>)
 8014b28:	2200      	movs	r2, #0
 8014b2a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8014b2e:	e00a      	b.n	8014b46 <RadioSetRxGenericConfig+0x2f2>
 8014b30:	20001234 	.word	0x20001234
 8014b34:	20001068 	.word	0x20001068
 8014b38:	200012a4 	.word	0x200012a4
 8014b3c:	2000126c 	.word	0x2000126c
 8014b40:	20001242 	.word	0x20001242
            break;
 8014b44:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8014b46:	4b28      	ldr	r3, [pc, #160]	; (8014be8 <RadioSetRxGenericConfig+0x394>)
 8014b48:	2201      	movs	r2, #1
 8014b4a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8014b4c:	68bb      	ldr	r3, [r7, #8]
 8014b4e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8014b50:	4b25      	ldr	r3, [pc, #148]	; (8014be8 <RadioSetRxGenericConfig+0x394>)
 8014b52:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8014b5a:	4b23      	ldr	r3, [pc, #140]	; (8014be8 <RadioSetRxGenericConfig+0x394>)
 8014b5c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8014b5e:	4a22      	ldr	r2, [pc, #136]	; (8014be8 <RadioSetRxGenericConfig+0x394>)
 8014b60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b64:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8014b66:	68bb      	ldr	r3, [r7, #8]
 8014b68:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8014b6c:	4b1e      	ldr	r3, [pc, #120]	; (8014be8 <RadioSetRxGenericConfig+0x394>)
 8014b6e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8014b72:	68bb      	ldr	r3, [r7, #8]
 8014b74:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8014b78:	4b1b      	ldr	r3, [pc, #108]	; (8014be8 <RadioSetRxGenericConfig+0x394>)
 8014b7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8014b7e:	f7ff fa18 	bl	8013fb2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8014b82:	2001      	movs	r0, #1
 8014b84:	f7fe fbb0 	bl	80132e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8014b88:	4818      	ldr	r0, [pc, #96]	; (8014bec <RadioSetRxGenericConfig+0x398>)
 8014b8a:	f000 fe53 	bl	8015834 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014b8e:	4818      	ldr	r0, [pc, #96]	; (8014bf0 <RadioSetRxGenericConfig+0x39c>)
 8014b90:	f000 ff1c 	bl	80159cc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8014b94:	4b14      	ldr	r3, [pc, #80]	; (8014be8 <RadioSetRxGenericConfig+0x394>)
 8014b96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8014b9a:	2b01      	cmp	r3, #1
 8014b9c:	d10d      	bne.n	8014bba <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8014b9e:	f240 7036 	movw	r0, #1846	; 0x736
 8014ba2:	f001 f86f 	bl	8015c84 <SUBGRF_ReadRegister>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	f023 0304 	bic.w	r3, r3, #4
 8014bac:	b2db      	uxtb	r3, r3
 8014bae:	4619      	mov	r1, r3
 8014bb0:	f240 7036 	movw	r0, #1846	; 0x736
 8014bb4:	f001 f852 	bl	8015c5c <SUBGRF_WriteRegister>
 8014bb8:	e00c      	b.n	8014bd4 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8014bba:	f240 7036 	movw	r0, #1846	; 0x736
 8014bbe:	f001 f861 	bl	8015c84 <SUBGRF_ReadRegister>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	f043 0304 	orr.w	r3, r3, #4
 8014bc8:	b2db      	uxtb	r3, r3
 8014bca:	4619      	mov	r1, r3
 8014bcc:	f240 7036 	movw	r0, #1846	; 0x736
 8014bd0:	f001 f844 	bl	8015c5c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8014bd4:	4b04      	ldr	r3, [pc, #16]	; (8014be8 <RadioSetRxGenericConfig+0x394>)
 8014bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014bda:	609a      	str	r2, [r3, #8]
        break;
 8014bdc:	bf00      	nop
    }
    return status;
 8014bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014be0:	4618      	mov	r0, r3
 8014be2:	3730      	adds	r7, #48	; 0x30
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}
 8014be8:	20001234 	.word	0x20001234
 8014bec:	2000126c 	.word	0x2000126c
 8014bf0:	20001242 	.word	0x20001242

08014bf4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b08a      	sub	sp, #40	; 0x28
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	60b9      	str	r1, [r7, #8]
 8014bfc:	607b      	str	r3, [r7, #4]
 8014bfe:	4603      	mov	r3, r0
 8014c00:	73fb      	strb	r3, [r7, #15]
 8014c02:	4613      	mov	r3, r2
 8014c04:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8014c06:	2300      	movs	r3, #0
 8014c08:	61fb      	str	r3, [r7, #28]
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8014c0e:	f001 fafe 	bl	801620e <RFW_DeInit>
    switch( modem )
 8014c12:	7bfb      	ldrb	r3, [r7, #15]
 8014c14:	2b02      	cmp	r3, #2
 8014c16:	f000 8144 	beq.w	8014ea2 <RadioSetTxGenericConfig+0x2ae>
 8014c1a:	2b02      	cmp	r3, #2
 8014c1c:	f300 8160 	bgt.w	8014ee0 <RadioSetTxGenericConfig+0x2ec>
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d003      	beq.n	8014c2c <RadioSetTxGenericConfig+0x38>
 8014c24:	2b01      	cmp	r3, #1
 8014c26:	f000 80b7 	beq.w	8014d98 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8014c2a:	e159      	b.n	8014ee0 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	689b      	ldr	r3, [r3, #8]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d003      	beq.n	8014c3c <RadioSetTxGenericConfig+0x48>
 8014c34:	68bb      	ldr	r3, [r7, #8]
 8014c36:	691b      	ldr	r3, [r3, #16]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d102      	bne.n	8014c42 <RadioSetTxGenericConfig+0x4e>
            return -1;
 8014c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c40:	e163      	b.n	8014f0a <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 8014c42:	68bb      	ldr	r3, [r7, #8]
 8014c44:	7d1b      	ldrb	r3, [r3, #20]
 8014c46:	2b08      	cmp	r3, #8
 8014c48:	d902      	bls.n	8014c50 <RadioSetTxGenericConfig+0x5c>
            return -1;
 8014c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c4e:	e15c      	b.n	8014f0a <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8014c50:	2300      	movs	r3, #0
 8014c52:	627b      	str	r3, [r7, #36]	; 0x24
 8014c54:	e00d      	b.n	8014c72 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8014c56:	68bb      	ldr	r3, [r7, #8]
 8014c58:	699a      	ldr	r2, [r3, #24]
 8014c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5c:	4413      	add	r3, r2
 8014c5e:	7819      	ldrb	r1, [r3, #0]
 8014c60:	f107 021c 	add.w	r2, r7, #28
 8014c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c66:	4413      	add	r3, r2
 8014c68:	460a      	mov	r2, r1
 8014c6a:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8014c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c6e:	3301      	adds	r3, #1
 8014c70:	627b      	str	r3, [r7, #36]	; 0x24
 8014c72:	68bb      	ldr	r3, [r7, #8]
 8014c74:	7d1b      	ldrb	r3, [r3, #20]
 8014c76:	461a      	mov	r2, r3
 8014c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c7a:	4293      	cmp	r3, r2
 8014c7c:	dbeb      	blt.n	8014c56 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8014c7e:	4ba5      	ldr	r3, [pc, #660]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014c80:	2200      	movs	r2, #0
 8014c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8014c86:	68bb      	ldr	r3, [r7, #8]
 8014c88:	689b      	ldr	r3, [r3, #8]
 8014c8a:	4aa2      	ldr	r2, [pc, #648]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014c8c:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8014c8e:	68bb      	ldr	r3, [r7, #8]
 8014c90:	781a      	ldrb	r2, [r3, #0]
 8014c92:	4ba0      	ldr	r3, [pc, #640]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	685b      	ldr	r3, [r3, #4]
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f001 f9e7 	bl	8016070 <SUBGRF_GetFskBandwidthRegValue>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	461a      	mov	r2, r3
 8014ca6:	4b9b      	ldr	r3, [pc, #620]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8014cac:	68bb      	ldr	r3, [r7, #8]
 8014cae:	68db      	ldr	r3, [r3, #12]
 8014cb0:	4a98      	ldr	r2, [pc, #608]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014cb2:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8014cb4:	4b97      	ldr	r3, [pc, #604]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8014cba:	68bb      	ldr	r3, [r7, #8]
 8014cbc:	691b      	ldr	r3, [r3, #16]
 8014cbe:	b29b      	uxth	r3, r3
 8014cc0:	00db      	lsls	r3, r3, #3
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	4b93      	ldr	r3, [pc, #588]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014cc6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8014cc8:	4b92      	ldr	r3, [pc, #584]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014cca:	2204      	movs	r2, #4
 8014ccc:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8014cce:	68bb      	ldr	r3, [r7, #8]
 8014cd0:	7d1b      	ldrb	r3, [r3, #20]
 8014cd2:	00db      	lsls	r3, r3, #3
 8014cd4:	b2da      	uxtb	r2, r3
 8014cd6:	4b8f      	ldr	r3, [pc, #572]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014cd8:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8014cda:	4b8e      	ldr	r3, [pc, #568]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014cdc:	2200      	movs	r2, #0
 8014cde:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8014ce0:	68bb      	ldr	r3, [r7, #8]
 8014ce2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014ce6:	2b02      	cmp	r3, #2
 8014ce8:	d003      	beq.n	8014cf2 <RadioSetTxGenericConfig+0xfe>
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	7f9b      	ldrb	r3, [r3, #30]
 8014cee:	2b02      	cmp	r3, #2
 8014cf0:	d12a      	bne.n	8014d48 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	7fdb      	ldrb	r3, [r3, #31]
 8014cf6:	2bf1      	cmp	r3, #241	; 0xf1
 8014cf8:	d00a      	beq.n	8014d10 <RadioSetTxGenericConfig+0x11c>
 8014cfa:	68bb      	ldr	r3, [r7, #8]
 8014cfc:	7fdb      	ldrb	r3, [r3, #31]
 8014cfe:	2bf2      	cmp	r3, #242	; 0xf2
 8014d00:	d006      	beq.n	8014d10 <RadioSetTxGenericConfig+0x11c>
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	7fdb      	ldrb	r3, [r3, #31]
 8014d06:	2b01      	cmp	r3, #1
 8014d08:	d002      	beq.n	8014d10 <RadioSetTxGenericConfig+0x11c>
                return -1;
 8014d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d0e:	e0fc      	b.n	8014f0a <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8014d10:	2301      	movs	r3, #1
 8014d12:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8014d14:	68bb      	ldr	r3, [r7, #8]
 8014d16:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8014d18:	4b7f      	ldr	r3, [pc, #508]	; (8014f18 <RadioSetTxGenericConfig+0x324>)
 8014d1a:	6819      	ldr	r1, [r3, #0]
 8014d1c:	f107 0310 	add.w	r3, r7, #16
 8014d20:	4a7e      	ldr	r2, [pc, #504]	; (8014f1c <RadioSetTxGenericConfig+0x328>)
 8014d22:	4618      	mov	r0, r3
 8014d24:	f001 fa66 	bl	80161f4 <RFW_Init>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d002      	beq.n	8014d34 <RadioSetTxGenericConfig+0x140>
              return -1;
 8014d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8014d32:	e0ea      	b.n	8014f0a <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8014d34:	4b77      	ldr	r3, [pc, #476]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014d36:	2200      	movs	r2, #0
 8014d38:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8014d3a:	4b76      	ldr	r3, [pc, #472]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014d3c:	2201      	movs	r2, #1
 8014d3e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8014d40:	4b74      	ldr	r3, [pc, #464]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014d42:	2200      	movs	r2, #0
 8014d44:	755a      	strb	r2, [r3, #21]
        {
 8014d46:	e00c      	b.n	8014d62 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	7fda      	ldrb	r2, [r3, #31]
 8014d4c:	4b71      	ldr	r3, [pc, #452]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014d4e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8014d56:	4b6f      	ldr	r3, [pc, #444]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014d58:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	7f9a      	ldrb	r2, [r3, #30]
 8014d5e:	4b6d      	ldr	r3, [pc, #436]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014d60:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8014d62:	f7ff f926 	bl	8013fb2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8014d66:	2000      	movs	r0, #0
 8014d68:	f7fe fabe 	bl	80132e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8014d6c:	486c      	ldr	r0, [pc, #432]	; (8014f20 <RadioSetTxGenericConfig+0x32c>)
 8014d6e:	f000 fd61 	bl	8015834 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014d72:	486c      	ldr	r0, [pc, #432]	; (8014f24 <RadioSetTxGenericConfig+0x330>)
 8014d74:	f000 fe2a 	bl	80159cc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8014d78:	f107 031c 	add.w	r3, r7, #28
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f000 f964 	bl	801504a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	8b9b      	ldrh	r3, [r3, #28]
 8014d86:	4618      	mov	r0, r3
 8014d88:	f000 f9ae 	bl	80150e8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	8c1b      	ldrh	r3, [r3, #32]
 8014d90:	4618      	mov	r0, r3
 8014d92:	f000 f989 	bl	80150a8 <SUBGRF_SetCrcPolynomial>
        break;
 8014d96:	e0a4      	b.n	8014ee2 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8014d98:	4b5e      	ldr	r3, [pc, #376]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014d9a:	2201      	movs	r2, #1
 8014d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8014da0:	68bb      	ldr	r3, [r7, #8]
 8014da2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8014da6:	4b5b      	ldr	r3, [pc, #364]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8014dac:	68bb      	ldr	r3, [r7, #8]
 8014dae:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8014db2:	4b58      	ldr	r3, [pc, #352]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8014dbe:	4b55      	ldr	r3, [pc, #340]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014dc0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8014dc4:	68bb      	ldr	r3, [r7, #8]
 8014dc6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8014dca:	2b02      	cmp	r3, #2
 8014dcc:	d010      	beq.n	8014df0 <RadioSetTxGenericConfig+0x1fc>
 8014dce:	2b02      	cmp	r3, #2
 8014dd0:	dc22      	bgt.n	8014e18 <RadioSetTxGenericConfig+0x224>
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d002      	beq.n	8014ddc <RadioSetTxGenericConfig+0x1e8>
 8014dd6:	2b01      	cmp	r3, #1
 8014dd8:	d005      	beq.n	8014de6 <RadioSetTxGenericConfig+0x1f2>
            break;
 8014dda:	e01d      	b.n	8014e18 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8014ddc:	4b4d      	ldr	r3, [pc, #308]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014dde:	2200      	movs	r2, #0
 8014de0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8014de4:	e019      	b.n	8014e1a <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8014de6:	4b4b      	ldr	r3, [pc, #300]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014de8:	2201      	movs	r2, #1
 8014dea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8014dee:	e014      	b.n	8014e1a <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8014df0:	68bb      	ldr	r3, [r7, #8]
 8014df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014df6:	2b0b      	cmp	r3, #11
 8014df8:	d004      	beq.n	8014e04 <RadioSetTxGenericConfig+0x210>
 8014dfa:	68bb      	ldr	r3, [r7, #8]
 8014dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e00:	2b0c      	cmp	r3, #12
 8014e02:	d104      	bne.n	8014e0e <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8014e04:	4b43      	ldr	r3, [pc, #268]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014e06:	2201      	movs	r2, #1
 8014e08:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8014e0c:	e005      	b.n	8014e1a <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8014e0e:	4b41      	ldr	r3, [pc, #260]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014e10:	2200      	movs	r2, #0
 8014e12:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8014e16:	e000      	b.n	8014e1a <RadioSetTxGenericConfig+0x226>
            break;
 8014e18:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8014e1a:	4b3e      	ldr	r3, [pc, #248]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014e1c:	2201      	movs	r2, #1
 8014e1e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8014e20:	68bb      	ldr	r3, [r7, #8]
 8014e22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8014e24:	4b3b      	ldr	r3, [pc, #236]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014e26:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8014e28:	68bb      	ldr	r3, [r7, #8]
 8014e2a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8014e2e:	4b39      	ldr	r3, [pc, #228]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014e30:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8014e38:	4b36      	ldr	r3, [pc, #216]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014e3a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8014e3e:	68bb      	ldr	r3, [r7, #8]
 8014e40:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014e44:	4b33      	ldr	r3, [pc, #204]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8014e4a:	f7ff f8b2 	bl	8013fb2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8014e4e:	2001      	movs	r0, #1
 8014e50:	f7fe fa4a 	bl	80132e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8014e54:	4832      	ldr	r0, [pc, #200]	; (8014f20 <RadioSetTxGenericConfig+0x32c>)
 8014e56:	f000 fced 	bl	8015834 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014e5a:	4832      	ldr	r0, [pc, #200]	; (8014f24 <RadioSetTxGenericConfig+0x330>)
 8014e5c:	f000 fdb6 	bl	80159cc <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8014e60:	4b2c      	ldr	r3, [pc, #176]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014e62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014e66:	2b06      	cmp	r3, #6
 8014e68:	d10d      	bne.n	8014e86 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8014e6a:	f640 0089 	movw	r0, #2185	; 0x889
 8014e6e:	f000 ff09 	bl	8015c84 <SUBGRF_ReadRegister>
 8014e72:	4603      	mov	r3, r0
 8014e74:	f023 0304 	bic.w	r3, r3, #4
 8014e78:	b2db      	uxtb	r3, r3
 8014e7a:	4619      	mov	r1, r3
 8014e7c:	f640 0089 	movw	r0, #2185	; 0x889
 8014e80:	f000 feec 	bl	8015c5c <SUBGRF_WriteRegister>
        break;
 8014e84:	e02d      	b.n	8014ee2 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8014e86:	f640 0089 	movw	r0, #2185	; 0x889
 8014e8a:	f000 fefb 	bl	8015c84 <SUBGRF_ReadRegister>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	f043 0304 	orr.w	r3, r3, #4
 8014e94:	b2db      	uxtb	r3, r3
 8014e96:	4619      	mov	r1, r3
 8014e98:	f640 0089 	movw	r0, #2185	; 0x889
 8014e9c:	f000 fede 	bl	8015c5c <SUBGRF_WriteRegister>
        break;
 8014ea0:	e01f      	b.n	8014ee2 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8014ea2:	68bb      	ldr	r3, [r7, #8]
 8014ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d004      	beq.n	8014eb4 <RadioSetTxGenericConfig+0x2c0>
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014eae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014eb2:	d902      	bls.n	8014eba <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8014eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8014eb8:	e027      	b.n	8014f0a <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8014eba:	2002      	movs	r0, #2
 8014ebc:	f7fe fa14 	bl	80132e8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8014ec0:	4b14      	ldr	r3, [pc, #80]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014ec2:	2202      	movs	r2, #2
 8014ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8014ec8:	68bb      	ldr	r3, [r7, #8]
 8014eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ecc:	4a11      	ldr	r2, [pc, #68]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014ece:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8014ed0:	4b10      	ldr	r3, [pc, #64]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014ed2:	2216      	movs	r2, #22
 8014ed4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8014ed8:	4811      	ldr	r0, [pc, #68]	; (8014f20 <RadioSetTxGenericConfig+0x32c>)
 8014eda:	f000 fcab 	bl	8015834 <SUBGRF_SetModulationParams>
        break;
 8014ede:	e000      	b.n	8014ee2 <RadioSetTxGenericConfig+0x2ee>
        break;
 8014ee0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8014ee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f000 ffd4 	bl	8015e94 <SUBGRF_SetRfTxPower>
 8014eec:	4603      	mov	r3, r0
 8014eee:	461a      	mov	r2, r3
 8014ef0:	4b08      	ldr	r3, [pc, #32]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014ef2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8014ef6:	4b07      	ldr	r3, [pc, #28]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014ef8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8014efc:	4618      	mov	r0, r3
 8014efe:	f001 f99a 	bl	8016236 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8014f02:	4a04      	ldr	r2, [pc, #16]	; (8014f14 <RadioSetTxGenericConfig+0x320>)
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	6053      	str	r3, [r2, #4]
    return 0;
 8014f08:	2300      	movs	r3, #0
}
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	3728      	adds	r7, #40	; 0x28
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}
 8014f12:	bf00      	nop
 8014f14:	20001234 	.word	0x20001234
 8014f18:	20001068 	.word	0x20001068
 8014f1c:	2000128c 	.word	0x2000128c
 8014f20:	2000126c 	.word	0x2000126c
 8014f24:	20001242 	.word	0x20001242

08014f28 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b084      	sub	sp, #16
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d002      	beq.n	8014f3c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8014f36:	4a1a      	ldr	r2, [pc, #104]	; (8014fa0 <SUBGRF_Init+0x78>)
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8014f3c:	f7ec f98c 	bl	8001258 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8014f40:	2002      	movs	r0, #2
 8014f42:	f001 f873 	bl	801602c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8014f46:	4b17      	ldr	r3, [pc, #92]	; (8014fa4 <SUBGRF_Init+0x7c>)
 8014f48:	2200      	movs	r2, #0
 8014f4a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8014f4c:	2000      	movs	r0, #0
 8014f4e:	f000 f977 	bl	8015240 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8014f52:	f7f1 f998 	bl	8006286 <RBI_IsTCXO>
 8014f56:	4603      	mov	r3, r0
 8014f58:	2b01      	cmp	r3, #1
 8014f5a:	d10e      	bne.n	8014f7a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8014f5c:	2140      	movs	r1, #64	; 0x40
 8014f5e:	2001      	movs	r0, #1
 8014f60:	f000 fb78 	bl	8015654 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8014f64:	2100      	movs	r1, #0
 8014f66:	f640 1011 	movw	r0, #2321	; 0x911
 8014f6a:	f000 fe77 	bl	8015c5c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8014f6e:	237f      	movs	r3, #127	; 0x7f
 8014f70:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8014f72:	7b38      	ldrb	r0, [r7, #12]
 8014f74:	f000 fa85 	bl	8015482 <SUBGRF_Calibrate>
 8014f78:	e009      	b.n	8014f8e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8014f7a:	2120      	movs	r1, #32
 8014f7c:	f640 1011 	movw	r0, #2321	; 0x911
 8014f80:	f000 fe6c 	bl	8015c5c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8014f84:	2120      	movs	r1, #32
 8014f86:	f640 1012 	movw	r0, #2322	; 0x912
 8014f8a:	f000 fe67 	bl	8015c5c <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8014f8e:	f7f1 f957 	bl	8006240 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8014f92:	4b05      	ldr	r3, [pc, #20]	; (8014fa8 <SUBGRF_Init+0x80>)
 8014f94:	2201      	movs	r2, #1
 8014f96:	701a      	strb	r2, [r3, #0]
}
 8014f98:	bf00      	nop
 8014f9a:	3710      	adds	r7, #16
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}
 8014fa0:	20001078 	.word	0x20001078
 8014fa4:	20001074 	.word	0x20001074
 8014fa8:	2000106c 	.word	0x2000106c

08014fac <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8014fac:	b480      	push	{r7}
 8014fae:	af00      	add	r7, sp, #0
    return OperatingMode;
 8014fb0:	4b02      	ldr	r3, [pc, #8]	; (8014fbc <SUBGRF_GetOperatingMode+0x10>)
 8014fb2:	781b      	ldrb	r3, [r3, #0]
}
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bc80      	pop	{r7}
 8014fba:	4770      	bx	lr
 8014fbc:	2000106c 	.word	0x2000106c

08014fc0 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	460b      	mov	r3, r1
 8014fca:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8014fcc:	78fb      	ldrb	r3, [r7, #3]
 8014fce:	461a      	mov	r2, r3
 8014fd0:	6879      	ldr	r1, [r7, #4]
 8014fd2:	2000      	movs	r0, #0
 8014fd4:	f000 feae 	bl	8015d34 <SUBGRF_WriteBuffer>
}
 8014fd8:	bf00      	nop
 8014fda:	3708      	adds	r7, #8
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b086      	sub	sp, #24
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	60f8      	str	r0, [r7, #12]
 8014fe8:	60b9      	str	r1, [r7, #8]
 8014fea:	4613      	mov	r3, r2
 8014fec:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8014fee:	2300      	movs	r3, #0
 8014ff0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8014ff2:	f107 0317 	add.w	r3, r7, #23
 8014ff6:	4619      	mov	r1, r3
 8014ff8:	68b8      	ldr	r0, [r7, #8]
 8014ffa:	f000 fdb1 	bl	8015b60 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	781b      	ldrb	r3, [r3, #0]
 8015002:	79fa      	ldrb	r2, [r7, #7]
 8015004:	429a      	cmp	r2, r3
 8015006:	d201      	bcs.n	801500c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8015008:	2301      	movs	r3, #1
 801500a:	e007      	b.n	801501c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801500c:	7df8      	ldrb	r0, [r7, #23]
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	781b      	ldrb	r3, [r3, #0]
 8015012:	461a      	mov	r2, r3
 8015014:	68f9      	ldr	r1, [r7, #12]
 8015016:	f000 feaf 	bl	8015d78 <SUBGRF_ReadBuffer>

    return 0;
 801501a:	2300      	movs	r3, #0
}
 801501c:	4618      	mov	r0, r3
 801501e:	3718      	adds	r7, #24
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}

08015024 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b084      	sub	sp, #16
 8015028:	af00      	add	r7, sp, #0
 801502a:	60f8      	str	r0, [r7, #12]
 801502c:	460b      	mov	r3, r1
 801502e:	607a      	str	r2, [r7, #4]
 8015030:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8015032:	7afb      	ldrb	r3, [r7, #11]
 8015034:	4619      	mov	r1, r3
 8015036:	68f8      	ldr	r0, [r7, #12]
 8015038:	f7ff ffc2 	bl	8014fc0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	f000 f91b 	bl	8015278 <SUBGRF_SetTx>
}
 8015042:	bf00      	nop
 8015044:	3710      	adds	r7, #16
 8015046:	46bd      	mov	sp, r7
 8015048:	bd80      	pop	{r7, pc}

0801504a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801504a:	b580      	push	{r7, lr}
 801504c:	b082      	sub	sp, #8
 801504e:	af00      	add	r7, sp, #0
 8015050:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8015052:	2208      	movs	r2, #8
 8015054:	6879      	ldr	r1, [r7, #4]
 8015056:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801505a:	f000 fe27 	bl	8015cac <SUBGRF_WriteRegisters>
    return 0;
 801505e:	2300      	movs	r3, #0
}
 8015060:	4618      	mov	r0, r3
 8015062:	3708      	adds	r7, #8
 8015064:	46bd      	mov	sp, r7
 8015066:	bd80      	pop	{r7, pc}

08015068 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b084      	sub	sp, #16
 801506c:	af00      	add	r7, sp, #0
 801506e:	4603      	mov	r3, r0
 8015070:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8015072:	88fb      	ldrh	r3, [r7, #6]
 8015074:	0a1b      	lsrs	r3, r3, #8
 8015076:	b29b      	uxth	r3, r3
 8015078:	b2db      	uxtb	r3, r3
 801507a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801507c:	88fb      	ldrh	r3, [r7, #6]
 801507e:	b2db      	uxtb	r3, r3
 8015080:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8015082:	f000 fb67 	bl	8015754 <SUBGRF_GetPacketType>
 8015086:	4603      	mov	r3, r0
 8015088:	2b00      	cmp	r3, #0
 801508a:	d108      	bne.n	801509e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801508c:	f107 030c 	add.w	r3, r7, #12
 8015090:	2202      	movs	r2, #2
 8015092:	4619      	mov	r1, r3
 8015094:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8015098:	f000 fe08 	bl	8015cac <SUBGRF_WriteRegisters>
            break;
 801509c:	e000      	b.n	80150a0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801509e:	bf00      	nop
    }
}
 80150a0:	bf00      	nop
 80150a2:	3710      	adds	r7, #16
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}

080150a8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b084      	sub	sp, #16
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	4603      	mov	r3, r0
 80150b0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80150b2:	88fb      	ldrh	r3, [r7, #6]
 80150b4:	0a1b      	lsrs	r3, r3, #8
 80150b6:	b29b      	uxth	r3, r3
 80150b8:	b2db      	uxtb	r3, r3
 80150ba:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80150bc:	88fb      	ldrh	r3, [r7, #6]
 80150be:	b2db      	uxtb	r3, r3
 80150c0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80150c2:	f000 fb47 	bl	8015754 <SUBGRF_GetPacketType>
 80150c6:	4603      	mov	r3, r0
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d108      	bne.n	80150de <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80150cc:	f107 030c 	add.w	r3, r7, #12
 80150d0:	2202      	movs	r2, #2
 80150d2:	4619      	mov	r1, r3
 80150d4:	f240 60be 	movw	r0, #1726	; 0x6be
 80150d8:	f000 fde8 	bl	8015cac <SUBGRF_WriteRegisters>
            break;
 80150dc:	e000      	b.n	80150e0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80150de:	bf00      	nop
    }
}
 80150e0:	bf00      	nop
 80150e2:	3710      	adds	r7, #16
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}

080150e8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b084      	sub	sp, #16
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	4603      	mov	r3, r0
 80150f0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80150f2:	2300      	movs	r3, #0
 80150f4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80150f6:	f000 fb2d 	bl	8015754 <SUBGRF_GetPacketType>
 80150fa:	4603      	mov	r3, r0
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d121      	bne.n	8015144 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8015100:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8015104:	f000 fdbe 	bl	8015c84 <SUBGRF_ReadRegister>
 8015108:	4603      	mov	r3, r0
 801510a:	f023 0301 	bic.w	r3, r3, #1
 801510e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8015110:	88fb      	ldrh	r3, [r7, #6]
 8015112:	0a1b      	lsrs	r3, r3, #8
 8015114:	b29b      	uxth	r3, r3
 8015116:	b25b      	sxtb	r3, r3
 8015118:	f003 0301 	and.w	r3, r3, #1
 801511c:	b25a      	sxtb	r2, r3
 801511e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015122:	4313      	orrs	r3, r2
 8015124:	b25b      	sxtb	r3, r3
 8015126:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8015128:	7bfb      	ldrb	r3, [r7, #15]
 801512a:	4619      	mov	r1, r3
 801512c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8015130:	f000 fd94 	bl	8015c5c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8015134:	88fb      	ldrh	r3, [r7, #6]
 8015136:	b2db      	uxtb	r3, r3
 8015138:	4619      	mov	r1, r3
 801513a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801513e:	f000 fd8d 	bl	8015c5c <SUBGRF_WriteRegister>
            break;
 8015142:	e000      	b.n	8015146 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8015144:	bf00      	nop
    }
}
 8015146:	bf00      	nop
 8015148:	3710      	adds	r7, #16
 801514a:	46bd      	mov	sp, r7
 801514c:	bd80      	pop	{r7, pc}

0801514e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801514e:	b580      	push	{r7, lr}
 8015150:	b082      	sub	sp, #8
 8015152:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8015154:	2300      	movs	r3, #0
 8015156:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8015158:	2300      	movs	r3, #0
 801515a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801515c:	2300      	movs	r3, #0
 801515e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8015160:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8015164:	f000 fd8e 	bl	8015c84 <SUBGRF_ReadRegister>
 8015168:	4603      	mov	r3, r0
 801516a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801516c:	79fb      	ldrb	r3, [r7, #7]
 801516e:	f023 0301 	bic.w	r3, r3, #1
 8015172:	b2db      	uxtb	r3, r3
 8015174:	4619      	mov	r1, r3
 8015176:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801517a:	f000 fd6f 	bl	8015c5c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801517e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8015182:	f000 fd7f 	bl	8015c84 <SUBGRF_ReadRegister>
 8015186:	4603      	mov	r3, r0
 8015188:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801518a:	79bb      	ldrb	r3, [r7, #6]
 801518c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015190:	b2db      	uxtb	r3, r3
 8015192:	4619      	mov	r1, r3
 8015194:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8015198:	f000 fd60 	bl	8015c5c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801519c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80151a0:	f000 f88a 	bl	80152b8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80151a4:	463b      	mov	r3, r7
 80151a6:	2204      	movs	r2, #4
 80151a8:	4619      	mov	r1, r3
 80151aa:	f640 0019 	movw	r0, #2073	; 0x819
 80151ae:	f000 fd9f 	bl	8015cf0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80151b2:	2000      	movs	r0, #0
 80151b4:	f000 f844 	bl	8015240 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80151b8:	79fb      	ldrb	r3, [r7, #7]
 80151ba:	4619      	mov	r1, r3
 80151bc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80151c0:	f000 fd4c 	bl	8015c5c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80151c4:	79bb      	ldrb	r3, [r7, #6]
 80151c6:	4619      	mov	r1, r3
 80151c8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80151cc:	f000 fd46 	bl	8015c5c <SUBGRF_WriteRegister>

    return number;
 80151d0:	683b      	ldr	r3, [r7, #0]
}
 80151d2:	4618      	mov	r0, r3
 80151d4:	3708      	adds	r7, #8
 80151d6:	46bd      	mov	sp, r7
 80151d8:	bd80      	pop	{r7, pc}
	...

080151dc <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b084      	sub	sp, #16
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80151e4:	2000      	movs	r0, #0
 80151e6:	f7f1 f836 	bl	8006256 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80151ea:	2002      	movs	r0, #2
 80151ec:	f000 ff1e 	bl	801602c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80151f0:	793b      	ldrb	r3, [r7, #4]
 80151f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80151f6:	b2db      	uxtb	r3, r3
 80151f8:	009b      	lsls	r3, r3, #2
 80151fa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80151fc:	793b      	ldrb	r3, [r7, #4]
 80151fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015202:	b2db      	uxtb	r3, r3
 8015204:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8015206:	b25b      	sxtb	r3, r3
 8015208:	4313      	orrs	r3, r2
 801520a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801520c:	793b      	ldrb	r3, [r7, #4]
 801520e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015212:	b2db      	uxtb	r3, r3
 8015214:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8015216:	4313      	orrs	r3, r2
 8015218:	b25b      	sxtb	r3, r3
 801521a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801521c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801521e:	f107 030f 	add.w	r3, r7, #15
 8015222:	2201      	movs	r2, #1
 8015224:	4619      	mov	r1, r3
 8015226:	2084      	movs	r0, #132	; 0x84
 8015228:	f000 fdc8 	bl	8015dbc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801522c:	4b03      	ldr	r3, [pc, #12]	; (801523c <SUBGRF_SetSleep+0x60>)
 801522e:	2200      	movs	r2, #0
 8015230:	701a      	strb	r2, [r3, #0]
}
 8015232:	bf00      	nop
 8015234:	3710      	adds	r7, #16
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}
 801523a:	bf00      	nop
 801523c:	2000106c 	.word	0x2000106c

08015240 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b082      	sub	sp, #8
 8015244:	af00      	add	r7, sp, #0
 8015246:	4603      	mov	r3, r0
 8015248:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801524a:	1dfb      	adds	r3, r7, #7
 801524c:	2201      	movs	r2, #1
 801524e:	4619      	mov	r1, r3
 8015250:	2080      	movs	r0, #128	; 0x80
 8015252:	f000 fdb3 	bl	8015dbc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8015256:	79fb      	ldrb	r3, [r7, #7]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d103      	bne.n	8015264 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801525c:	4b05      	ldr	r3, [pc, #20]	; (8015274 <SUBGRF_SetStandby+0x34>)
 801525e:	2201      	movs	r2, #1
 8015260:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8015262:	e002      	b.n	801526a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8015264:	4b03      	ldr	r3, [pc, #12]	; (8015274 <SUBGRF_SetStandby+0x34>)
 8015266:	2202      	movs	r2, #2
 8015268:	701a      	strb	r2, [r3, #0]
}
 801526a:	bf00      	nop
 801526c:	3708      	adds	r7, #8
 801526e:	46bd      	mov	sp, r7
 8015270:	bd80      	pop	{r7, pc}
 8015272:	bf00      	nop
 8015274:	2000106c 	.word	0x2000106c

08015278 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b084      	sub	sp, #16
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8015280:	4b0c      	ldr	r3, [pc, #48]	; (80152b4 <SUBGRF_SetTx+0x3c>)
 8015282:	2204      	movs	r2, #4
 8015284:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	0c1b      	lsrs	r3, r3, #16
 801528a:	b2db      	uxtb	r3, r3
 801528c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	0a1b      	lsrs	r3, r3, #8
 8015292:	b2db      	uxtb	r3, r3
 8015294:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	b2db      	uxtb	r3, r3
 801529a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801529c:	f107 030c 	add.w	r3, r7, #12
 80152a0:	2203      	movs	r2, #3
 80152a2:	4619      	mov	r1, r3
 80152a4:	2083      	movs	r0, #131	; 0x83
 80152a6:	f000 fd89 	bl	8015dbc <SUBGRF_WriteCommand>
}
 80152aa:	bf00      	nop
 80152ac:	3710      	adds	r7, #16
 80152ae:	46bd      	mov	sp, r7
 80152b0:	bd80      	pop	{r7, pc}
 80152b2:	bf00      	nop
 80152b4:	2000106c 	.word	0x2000106c

080152b8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b084      	sub	sp, #16
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80152c0:	4b0c      	ldr	r3, [pc, #48]	; (80152f4 <SUBGRF_SetRx+0x3c>)
 80152c2:	2205      	movs	r2, #5
 80152c4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	0c1b      	lsrs	r3, r3, #16
 80152ca:	b2db      	uxtb	r3, r3
 80152cc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	0a1b      	lsrs	r3, r3, #8
 80152d2:	b2db      	uxtb	r3, r3
 80152d4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	b2db      	uxtb	r3, r3
 80152da:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80152dc:	f107 030c 	add.w	r3, r7, #12
 80152e0:	2203      	movs	r2, #3
 80152e2:	4619      	mov	r1, r3
 80152e4:	2082      	movs	r0, #130	; 0x82
 80152e6:	f000 fd69 	bl	8015dbc <SUBGRF_WriteCommand>
}
 80152ea:	bf00      	nop
 80152ec:	3710      	adds	r7, #16
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}
 80152f2:	bf00      	nop
 80152f4:	2000106c 	.word	0x2000106c

080152f8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b084      	sub	sp, #16
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8015300:	4b0e      	ldr	r3, [pc, #56]	; (801533c <SUBGRF_SetRxBoosted+0x44>)
 8015302:	2205      	movs	r2, #5
 8015304:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8015306:	2197      	movs	r1, #151	; 0x97
 8015308:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801530c:	f000 fca6 	bl	8015c5c <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	0c1b      	lsrs	r3, r3, #16
 8015314:	b2db      	uxtb	r3, r3
 8015316:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	0a1b      	lsrs	r3, r3, #8
 801531c:	b2db      	uxtb	r3, r3
 801531e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	b2db      	uxtb	r3, r3
 8015324:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8015326:	f107 030c 	add.w	r3, r7, #12
 801532a:	2203      	movs	r2, #3
 801532c:	4619      	mov	r1, r3
 801532e:	2082      	movs	r0, #130	; 0x82
 8015330:	f000 fd44 	bl	8015dbc <SUBGRF_WriteCommand>
}
 8015334:	bf00      	nop
 8015336:	3710      	adds	r7, #16
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}
 801533c:	2000106c 	.word	0x2000106c

08015340 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b084      	sub	sp, #16
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
 8015348:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	0c1b      	lsrs	r3, r3, #16
 801534e:	b2db      	uxtb	r3, r3
 8015350:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	0a1b      	lsrs	r3, r3, #8
 8015356:	b2db      	uxtb	r3, r3
 8015358:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	b2db      	uxtb	r3, r3
 801535e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	0c1b      	lsrs	r3, r3, #16
 8015364:	b2db      	uxtb	r3, r3
 8015366:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	0a1b      	lsrs	r3, r3, #8
 801536c:	b2db      	uxtb	r3, r3
 801536e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8015370:	683b      	ldr	r3, [r7, #0]
 8015372:	b2db      	uxtb	r3, r3
 8015374:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8015376:	f107 0308 	add.w	r3, r7, #8
 801537a:	2206      	movs	r2, #6
 801537c:	4619      	mov	r1, r3
 801537e:	2094      	movs	r0, #148	; 0x94
 8015380:	f000 fd1c 	bl	8015dbc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8015384:	4b03      	ldr	r3, [pc, #12]	; (8015394 <SUBGRF_SetRxDutyCycle+0x54>)
 8015386:	2206      	movs	r2, #6
 8015388:	701a      	strb	r2, [r3, #0]
}
 801538a:	bf00      	nop
 801538c:	3710      	adds	r7, #16
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}
 8015392:	bf00      	nop
 8015394:	2000106c 	.word	0x2000106c

08015398 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8015398:	b580      	push	{r7, lr}
 801539a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801539c:	2200      	movs	r2, #0
 801539e:	2100      	movs	r1, #0
 80153a0:	20c5      	movs	r0, #197	; 0xc5
 80153a2:	f000 fd0b 	bl	8015dbc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80153a6:	4b02      	ldr	r3, [pc, #8]	; (80153b0 <SUBGRF_SetCad+0x18>)
 80153a8:	2207      	movs	r2, #7
 80153aa:	701a      	strb	r2, [r3, #0]
}
 80153ac:	bf00      	nop
 80153ae:	bd80      	pop	{r7, pc}
 80153b0:	2000106c 	.word	0x2000106c

080153b4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80153b8:	2200      	movs	r2, #0
 80153ba:	2100      	movs	r1, #0
 80153bc:	20d1      	movs	r0, #209	; 0xd1
 80153be:	f000 fcfd 	bl	8015dbc <SUBGRF_WriteCommand>
}
 80153c2:	bf00      	nop
 80153c4:	bd80      	pop	{r7, pc}

080153c6 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 80153c6:	b580      	push	{r7, lr}
 80153c8:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80153ca:	2200      	movs	r2, #0
 80153cc:	2100      	movs	r1, #0
 80153ce:	20d2      	movs	r0, #210	; 0xd2
 80153d0:	f000 fcf4 	bl	8015dbc <SUBGRF_WriteCommand>
}
 80153d4:	bf00      	nop
 80153d6:	bd80      	pop	{r7, pc}

080153d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b082      	sub	sp, #8
 80153dc:	af00      	add	r7, sp, #0
 80153de:	4603      	mov	r3, r0
 80153e0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80153e2:	1dfb      	adds	r3, r7, #7
 80153e4:	2201      	movs	r2, #1
 80153e6:	4619      	mov	r1, r3
 80153e8:	209f      	movs	r0, #159	; 0x9f
 80153ea:	f000 fce7 	bl	8015dbc <SUBGRF_WriteCommand>
}
 80153ee:	bf00      	nop
 80153f0:	3708      	adds	r7, #8
 80153f2:	46bd      	mov	sp, r7
 80153f4:	bd80      	pop	{r7, pc}

080153f6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 80153f6:	b580      	push	{r7, lr}
 80153f8:	b084      	sub	sp, #16
 80153fa:	af00      	add	r7, sp, #0
 80153fc:	4603      	mov	r3, r0
 80153fe:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8015400:	1dfb      	adds	r3, r7, #7
 8015402:	2201      	movs	r2, #1
 8015404:	4619      	mov	r1, r3
 8015406:	20a0      	movs	r0, #160	; 0xa0
 8015408:	f000 fcd8 	bl	8015dbc <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801540c:	79fb      	ldrb	r3, [r7, #7]
 801540e:	2b3f      	cmp	r3, #63	; 0x3f
 8015410:	d91c      	bls.n	801544c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8015412:	79fb      	ldrb	r3, [r7, #7]
 8015414:	085b      	lsrs	r3, r3, #1
 8015416:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8015418:	2300      	movs	r3, #0
 801541a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801541c:	2300      	movs	r3, #0
 801541e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8015420:	e005      	b.n	801542e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8015422:	7bfb      	ldrb	r3, [r7, #15]
 8015424:	089b      	lsrs	r3, r3, #2
 8015426:	73fb      	strb	r3, [r7, #15]
            exp++;
 8015428:	7bbb      	ldrb	r3, [r7, #14]
 801542a:	3301      	adds	r3, #1
 801542c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801542e:	7bfb      	ldrb	r3, [r7, #15]
 8015430:	2b1f      	cmp	r3, #31
 8015432:	d8f6      	bhi.n	8015422 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8015434:	7bfb      	ldrb	r3, [r7, #15]
 8015436:	00db      	lsls	r3, r3, #3
 8015438:	b2da      	uxtb	r2, r3
 801543a:	7bbb      	ldrb	r3, [r7, #14]
 801543c:	4413      	add	r3, r2
 801543e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8015440:	7b7b      	ldrb	r3, [r7, #13]
 8015442:	4619      	mov	r1, r3
 8015444:	f240 7006 	movw	r0, #1798	; 0x706
 8015448:	f000 fc08 	bl	8015c5c <SUBGRF_WriteRegister>
    }
}
 801544c:	bf00      	nop
 801544e:	3710      	adds	r7, #16
 8015450:	46bd      	mov	sp, r7
 8015452:	bd80      	pop	{r7, pc}

08015454 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b082      	sub	sp, #8
 8015458:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801545a:	f7f0 ff1f 	bl	800629c <RBI_IsDCDC>
 801545e:	4603      	mov	r3, r0
 8015460:	2b01      	cmp	r3, #1
 8015462:	d102      	bne.n	801546a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8015464:	2301      	movs	r3, #1
 8015466:	71fb      	strb	r3, [r7, #7]
 8015468:	e001      	b.n	801546e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801546a:	2300      	movs	r3, #0
 801546c:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801546e:	1dfb      	adds	r3, r7, #7
 8015470:	2201      	movs	r2, #1
 8015472:	4619      	mov	r1, r3
 8015474:	2096      	movs	r0, #150	; 0x96
 8015476:	f000 fca1 	bl	8015dbc <SUBGRF_WriteCommand>
}
 801547a:	bf00      	nop
 801547c:	3708      	adds	r7, #8
 801547e:	46bd      	mov	sp, r7
 8015480:	bd80      	pop	{r7, pc}

08015482 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8015482:	b580      	push	{r7, lr}
 8015484:	b084      	sub	sp, #16
 8015486:	af00      	add	r7, sp, #0
 8015488:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801548a:	793b      	ldrb	r3, [r7, #4]
 801548c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015490:	b2db      	uxtb	r3, r3
 8015492:	019b      	lsls	r3, r3, #6
 8015494:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8015496:	793b      	ldrb	r3, [r7, #4]
 8015498:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801549c:	b2db      	uxtb	r3, r3
 801549e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80154a0:	b25b      	sxtb	r3, r3
 80154a2:	4313      	orrs	r3, r2
 80154a4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80154a6:	793b      	ldrb	r3, [r7, #4]
 80154a8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80154ac:	b2db      	uxtb	r3, r3
 80154ae:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80154b0:	b25b      	sxtb	r3, r3
 80154b2:	4313      	orrs	r3, r2
 80154b4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80154b6:	793b      	ldrb	r3, [r7, #4]
 80154b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80154bc:	b2db      	uxtb	r3, r3
 80154be:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80154c0:	b25b      	sxtb	r3, r3
 80154c2:	4313      	orrs	r3, r2
 80154c4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80154c6:	793b      	ldrb	r3, [r7, #4]
 80154c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80154cc:	b2db      	uxtb	r3, r3
 80154ce:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80154d0:	b25b      	sxtb	r3, r3
 80154d2:	4313      	orrs	r3, r2
 80154d4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80154d6:	793b      	ldrb	r3, [r7, #4]
 80154d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80154dc:	b2db      	uxtb	r3, r3
 80154de:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80154e0:	b25b      	sxtb	r3, r3
 80154e2:	4313      	orrs	r3, r2
 80154e4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80154e6:	793b      	ldrb	r3, [r7, #4]
 80154e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80154ec:	b2db      	uxtb	r3, r3
 80154ee:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80154f0:	4313      	orrs	r3, r2
 80154f2:	b25b      	sxtb	r3, r3
 80154f4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80154f6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80154f8:	f107 030f 	add.w	r3, r7, #15
 80154fc:	2201      	movs	r2, #1
 80154fe:	4619      	mov	r1, r3
 8015500:	2089      	movs	r0, #137	; 0x89
 8015502:	f000 fc5b 	bl	8015dbc <SUBGRF_WriteCommand>
}
 8015506:	bf00      	nop
 8015508:	3710      	adds	r7, #16
 801550a:	46bd      	mov	sp, r7
 801550c:	bd80      	pop	{r7, pc}
	...

08015510 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b084      	sub	sp, #16
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	4a1b      	ldr	r2, [pc, #108]	; (8015588 <SUBGRF_CalibrateImage+0x78>)
 801551c:	4293      	cmp	r3, r2
 801551e:	d904      	bls.n	801552a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8015520:	23e1      	movs	r3, #225	; 0xe1
 8015522:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8015524:	23e9      	movs	r3, #233	; 0xe9
 8015526:	737b      	strb	r3, [r7, #13]
 8015528:	e022      	b.n	8015570 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	4a17      	ldr	r2, [pc, #92]	; (801558c <SUBGRF_CalibrateImage+0x7c>)
 801552e:	4293      	cmp	r3, r2
 8015530:	d904      	bls.n	801553c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8015532:	23d7      	movs	r3, #215	; 0xd7
 8015534:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8015536:	23db      	movs	r3, #219	; 0xdb
 8015538:	737b      	strb	r3, [r7, #13]
 801553a:	e019      	b.n	8015570 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	4a14      	ldr	r2, [pc, #80]	; (8015590 <SUBGRF_CalibrateImage+0x80>)
 8015540:	4293      	cmp	r3, r2
 8015542:	d904      	bls.n	801554e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8015544:	23c1      	movs	r3, #193	; 0xc1
 8015546:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8015548:	23c5      	movs	r3, #197	; 0xc5
 801554a:	737b      	strb	r3, [r7, #13]
 801554c:	e010      	b.n	8015570 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	4a10      	ldr	r2, [pc, #64]	; (8015594 <SUBGRF_CalibrateImage+0x84>)
 8015552:	4293      	cmp	r3, r2
 8015554:	d904      	bls.n	8015560 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8015556:	2375      	movs	r3, #117	; 0x75
 8015558:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801555a:	2381      	movs	r3, #129	; 0x81
 801555c:	737b      	strb	r3, [r7, #13]
 801555e:	e007      	b.n	8015570 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	4a0d      	ldr	r2, [pc, #52]	; (8015598 <SUBGRF_CalibrateImage+0x88>)
 8015564:	4293      	cmp	r3, r2
 8015566:	d903      	bls.n	8015570 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8015568:	236b      	movs	r3, #107	; 0x6b
 801556a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801556c:	236f      	movs	r3, #111	; 0x6f
 801556e:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8015570:	f107 030c 	add.w	r3, r7, #12
 8015574:	2202      	movs	r2, #2
 8015576:	4619      	mov	r1, r3
 8015578:	2098      	movs	r0, #152	; 0x98
 801557a:	f000 fc1f 	bl	8015dbc <SUBGRF_WriteCommand>
}
 801557e:	bf00      	nop
 8015580:	3710      	adds	r7, #16
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}
 8015586:	bf00      	nop
 8015588:	35a4e900 	.word	0x35a4e900
 801558c:	32a9f880 	.word	0x32a9f880
 8015590:	2de54480 	.word	0x2de54480
 8015594:	1b6b0b00 	.word	0x1b6b0b00
 8015598:	1954fc40 	.word	0x1954fc40

0801559c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801559c:	b590      	push	{r4, r7, lr}
 801559e:	b085      	sub	sp, #20
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	4604      	mov	r4, r0
 80155a4:	4608      	mov	r0, r1
 80155a6:	4611      	mov	r1, r2
 80155a8:	461a      	mov	r2, r3
 80155aa:	4623      	mov	r3, r4
 80155ac:	71fb      	strb	r3, [r7, #7]
 80155ae:	4603      	mov	r3, r0
 80155b0:	71bb      	strb	r3, [r7, #6]
 80155b2:	460b      	mov	r3, r1
 80155b4:	717b      	strb	r3, [r7, #5]
 80155b6:	4613      	mov	r3, r2
 80155b8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80155ba:	79fb      	ldrb	r3, [r7, #7]
 80155bc:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80155be:	79bb      	ldrb	r3, [r7, #6]
 80155c0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80155c2:	797b      	ldrb	r3, [r7, #5]
 80155c4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80155c6:	793b      	ldrb	r3, [r7, #4]
 80155c8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80155ca:	f107 030c 	add.w	r3, r7, #12
 80155ce:	2204      	movs	r2, #4
 80155d0:	4619      	mov	r1, r3
 80155d2:	2095      	movs	r0, #149	; 0x95
 80155d4:	f000 fbf2 	bl	8015dbc <SUBGRF_WriteCommand>
}
 80155d8:	bf00      	nop
 80155da:	3714      	adds	r7, #20
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd90      	pop	{r4, r7, pc}

080155e0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80155e0:	b590      	push	{r4, r7, lr}
 80155e2:	b085      	sub	sp, #20
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	4604      	mov	r4, r0
 80155e8:	4608      	mov	r0, r1
 80155ea:	4611      	mov	r1, r2
 80155ec:	461a      	mov	r2, r3
 80155ee:	4623      	mov	r3, r4
 80155f0:	80fb      	strh	r3, [r7, #6]
 80155f2:	4603      	mov	r3, r0
 80155f4:	80bb      	strh	r3, [r7, #4]
 80155f6:	460b      	mov	r3, r1
 80155f8:	807b      	strh	r3, [r7, #2]
 80155fa:	4613      	mov	r3, r2
 80155fc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80155fe:	88fb      	ldrh	r3, [r7, #6]
 8015600:	0a1b      	lsrs	r3, r3, #8
 8015602:	b29b      	uxth	r3, r3
 8015604:	b2db      	uxtb	r3, r3
 8015606:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8015608:	88fb      	ldrh	r3, [r7, #6]
 801560a:	b2db      	uxtb	r3, r3
 801560c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801560e:	88bb      	ldrh	r3, [r7, #4]
 8015610:	0a1b      	lsrs	r3, r3, #8
 8015612:	b29b      	uxth	r3, r3
 8015614:	b2db      	uxtb	r3, r3
 8015616:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8015618:	88bb      	ldrh	r3, [r7, #4]
 801561a:	b2db      	uxtb	r3, r3
 801561c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801561e:	887b      	ldrh	r3, [r7, #2]
 8015620:	0a1b      	lsrs	r3, r3, #8
 8015622:	b29b      	uxth	r3, r3
 8015624:	b2db      	uxtb	r3, r3
 8015626:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8015628:	887b      	ldrh	r3, [r7, #2]
 801562a:	b2db      	uxtb	r3, r3
 801562c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801562e:	883b      	ldrh	r3, [r7, #0]
 8015630:	0a1b      	lsrs	r3, r3, #8
 8015632:	b29b      	uxth	r3, r3
 8015634:	b2db      	uxtb	r3, r3
 8015636:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8015638:	883b      	ldrh	r3, [r7, #0]
 801563a:	b2db      	uxtb	r3, r3
 801563c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801563e:	f107 0308 	add.w	r3, r7, #8
 8015642:	2208      	movs	r2, #8
 8015644:	4619      	mov	r1, r3
 8015646:	2008      	movs	r0, #8
 8015648:	f000 fbb8 	bl	8015dbc <SUBGRF_WriteCommand>
}
 801564c:	bf00      	nop
 801564e:	3714      	adds	r7, #20
 8015650:	46bd      	mov	sp, r7
 8015652:	bd90      	pop	{r4, r7, pc}

08015654 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b084      	sub	sp, #16
 8015658:	af00      	add	r7, sp, #0
 801565a:	4603      	mov	r3, r0
 801565c:	6039      	str	r1, [r7, #0]
 801565e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8015660:	79fb      	ldrb	r3, [r7, #7]
 8015662:	f003 0307 	and.w	r3, r3, #7
 8015666:	b2db      	uxtb	r3, r3
 8015668:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	0c1b      	lsrs	r3, r3, #16
 801566e:	b2db      	uxtb	r3, r3
 8015670:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	0a1b      	lsrs	r3, r3, #8
 8015676:	b2db      	uxtb	r3, r3
 8015678:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	b2db      	uxtb	r3, r3
 801567e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8015680:	f107 030c 	add.w	r3, r7, #12
 8015684:	2204      	movs	r2, #4
 8015686:	4619      	mov	r1, r3
 8015688:	2097      	movs	r0, #151	; 0x97
 801568a:	f000 fb97 	bl	8015dbc <SUBGRF_WriteCommand>
}
 801568e:	bf00      	nop
 8015690:	3710      	adds	r7, #16
 8015692:	46bd      	mov	sp, r7
 8015694:	bd80      	pop	{r7, pc}
	...

08015698 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8015698:	b5b0      	push	{r4, r5, r7, lr}
 801569a:	b084      	sub	sp, #16
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80156a0:	2300      	movs	r3, #0
 80156a2:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80156a4:	4b1b      	ldr	r3, [pc, #108]	; (8015714 <SUBGRF_SetRfFrequency+0x7c>)
 80156a6:	781b      	ldrb	r3, [r3, #0]
 80156a8:	f083 0301 	eor.w	r3, r3, #1
 80156ac:	b2db      	uxtb	r3, r3
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d005      	beq.n	80156be <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 80156b2:	6878      	ldr	r0, [r7, #4]
 80156b4:	f7ff ff2c 	bl	8015510 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80156b8:	4b16      	ldr	r3, [pc, #88]	; (8015714 <SUBGRF_SetRfFrequency+0x7c>)
 80156ba:	2201      	movs	r2, #1
 80156bc:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	461a      	mov	r2, r3
 80156c2:	f04f 0300 	mov.w	r3, #0
 80156c6:	09d5      	lsrs	r5, r2, #7
 80156c8:	0654      	lsls	r4, r2, #25
 80156ca:	4a13      	ldr	r2, [pc, #76]	; (8015718 <SUBGRF_SetRfFrequency+0x80>)
 80156cc:	f04f 0300 	mov.w	r3, #0
 80156d0:	4620      	mov	r0, r4
 80156d2:	4629      	mov	r1, r5
 80156d4:	f7eb f91e 	bl	8000914 <__aeabi_uldivmod>
 80156d8:	4602      	mov	r2, r0
 80156da:	460b      	mov	r3, r1
 80156dc:	4613      	mov	r3, r2
 80156de:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	0e1b      	lsrs	r3, r3, #24
 80156e4:	b2db      	uxtb	r3, r3
 80156e6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	0c1b      	lsrs	r3, r3, #16
 80156ec:	b2db      	uxtb	r3, r3
 80156ee:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	0a1b      	lsrs	r3, r3, #8
 80156f4:	b2db      	uxtb	r3, r3
 80156f6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	b2db      	uxtb	r3, r3
 80156fc:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80156fe:	f107 0308 	add.w	r3, r7, #8
 8015702:	2204      	movs	r2, #4
 8015704:	4619      	mov	r1, r3
 8015706:	2086      	movs	r0, #134	; 0x86
 8015708:	f000 fb58 	bl	8015dbc <SUBGRF_WriteCommand>
}
 801570c:	bf00      	nop
 801570e:	3710      	adds	r7, #16
 8015710:	46bd      	mov	sp, r7
 8015712:	bdb0      	pop	{r4, r5, r7, pc}
 8015714:	20001074 	.word	0x20001074
 8015718:	01e84800 	.word	0x01e84800

0801571c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b082      	sub	sp, #8
 8015720:	af00      	add	r7, sp, #0
 8015722:	4603      	mov	r3, r0
 8015724:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8015726:	79fa      	ldrb	r2, [r7, #7]
 8015728:	4b09      	ldr	r3, [pc, #36]	; (8015750 <SUBGRF_SetPacketType+0x34>)
 801572a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801572c:	79fb      	ldrb	r3, [r7, #7]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d104      	bne.n	801573c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8015732:	2100      	movs	r1, #0
 8015734:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8015738:	f000 fa90 	bl	8015c5c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801573c:	1dfb      	adds	r3, r7, #7
 801573e:	2201      	movs	r2, #1
 8015740:	4619      	mov	r1, r3
 8015742:	208a      	movs	r0, #138	; 0x8a
 8015744:	f000 fb3a 	bl	8015dbc <SUBGRF_WriteCommand>
}
 8015748:	bf00      	nop
 801574a:	3708      	adds	r7, #8
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}
 8015750:	2000106d 	.word	0x2000106d

08015754 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8015754:	b480      	push	{r7}
 8015756:	af00      	add	r7, sp, #0
    return PacketType;
 8015758:	4b02      	ldr	r3, [pc, #8]	; (8015764 <SUBGRF_GetPacketType+0x10>)
 801575a:	781b      	ldrb	r3, [r3, #0]
}
 801575c:	4618      	mov	r0, r3
 801575e:	46bd      	mov	sp, r7
 8015760:	bc80      	pop	{r7}
 8015762:	4770      	bx	lr
 8015764:	2000106d 	.word	0x2000106d

08015768 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b084      	sub	sp, #16
 801576c:	af00      	add	r7, sp, #0
 801576e:	4603      	mov	r3, r0
 8015770:	71fb      	strb	r3, [r7, #7]
 8015772:	460b      	mov	r3, r1
 8015774:	71bb      	strb	r3, [r7, #6]
 8015776:	4613      	mov	r3, r2
 8015778:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 801577a:	79fb      	ldrb	r3, [r7, #7]
 801577c:	2b01      	cmp	r3, #1
 801577e:	d124      	bne.n	80157ca <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8015780:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015784:	2b0f      	cmp	r3, #15
 8015786:	d106      	bne.n	8015796 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8015788:	2301      	movs	r3, #1
 801578a:	2201      	movs	r2, #1
 801578c:	2100      	movs	r1, #0
 801578e:	2006      	movs	r0, #6
 8015790:	f7ff ff04 	bl	801559c <SUBGRF_SetPaConfig>
 8015794:	e005      	b.n	80157a2 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8015796:	2301      	movs	r3, #1
 8015798:	2201      	movs	r2, #1
 801579a:	2100      	movs	r1, #0
 801579c:	2004      	movs	r0, #4
 801579e:	f7ff fefd 	bl	801559c <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 80157a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80157a6:	2b0d      	cmp	r3, #13
 80157a8:	dd02      	ble.n	80157b0 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 80157aa:	230e      	movs	r3, #14
 80157ac:	71bb      	strb	r3, [r7, #6]
 80157ae:	e006      	b.n	80157be <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 80157b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80157b4:	f113 0f11 	cmn.w	r3, #17
 80157b8:	da01      	bge.n	80157be <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 80157ba:	23ef      	movs	r3, #239	; 0xef
 80157bc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 80157be:	2118      	movs	r1, #24
 80157c0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80157c4:	f000 fa4a 	bl	8015c5c <SUBGRF_WriteRegister>
 80157c8:	e025      	b.n	8015816 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 80157ca:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80157ce:	f000 fa59 	bl	8015c84 <SUBGRF_ReadRegister>
 80157d2:	4603      	mov	r3, r0
 80157d4:	f043 031e 	orr.w	r3, r3, #30
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	4619      	mov	r1, r3
 80157dc:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80157e0:	f000 fa3c 	bl	8015c5c <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 80157e4:	2301      	movs	r3, #1
 80157e6:	2200      	movs	r2, #0
 80157e8:	2107      	movs	r1, #7
 80157ea:	2004      	movs	r0, #4
 80157ec:	f7ff fed6 	bl	801559c <SUBGRF_SetPaConfig>
        if( power > 22 )
 80157f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80157f4:	2b16      	cmp	r3, #22
 80157f6:	dd02      	ble.n	80157fe <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 80157f8:	2316      	movs	r3, #22
 80157fa:	71bb      	strb	r3, [r7, #6]
 80157fc:	e006      	b.n	801580c <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 80157fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015802:	f113 0f09 	cmn.w	r3, #9
 8015806:	da01      	bge.n	801580c <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8015808:	23f7      	movs	r3, #247	; 0xf7
 801580a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 801580c:	2138      	movs	r1, #56	; 0x38
 801580e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8015812:	f000 fa23 	bl	8015c5c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8015816:	79bb      	ldrb	r3, [r7, #6]
 8015818:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 801581a:	797b      	ldrb	r3, [r7, #5]
 801581c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 801581e:	f107 030c 	add.w	r3, r7, #12
 8015822:	2202      	movs	r2, #2
 8015824:	4619      	mov	r1, r3
 8015826:	208e      	movs	r0, #142	; 0x8e
 8015828:	f000 fac8 	bl	8015dbc <SUBGRF_WriteCommand>
}
 801582c:	bf00      	nop
 801582e:	3710      	adds	r7, #16
 8015830:	46bd      	mov	sp, r7
 8015832:	bd80      	pop	{r7, pc}

08015834 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8015834:	b5b0      	push	{r4, r5, r7, lr}
 8015836:	b086      	sub	sp, #24
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801583c:	2300      	movs	r3, #0
 801583e:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8015840:	4a5e      	ldr	r2, [pc, #376]	; (80159bc <SUBGRF_SetModulationParams+0x188>)
 8015842:	f107 0308 	add.w	r3, r7, #8
 8015846:	e892 0003 	ldmia.w	r2, {r0, r1}
 801584a:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	781a      	ldrb	r2, [r3, #0]
 8015852:	4b5b      	ldr	r3, [pc, #364]	; (80159c0 <SUBGRF_SetModulationParams+0x18c>)
 8015854:	781b      	ldrb	r3, [r3, #0]
 8015856:	429a      	cmp	r2, r3
 8015858:	d004      	beq.n	8015864 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	4618      	mov	r0, r3
 8015860:	f7ff ff5c 	bl	801571c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	781b      	ldrb	r3, [r3, #0]
 8015868:	2b03      	cmp	r3, #3
 801586a:	f200 80a2 	bhi.w	80159b2 <SUBGRF_SetModulationParams+0x17e>
 801586e:	a201      	add	r2, pc, #4	; (adr r2, 8015874 <SUBGRF_SetModulationParams+0x40>)
 8015870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015874:	08015885 	.word	0x08015885
 8015878:	08015941 	.word	0x08015941
 801587c:	08015903 	.word	0x08015903
 8015880:	0801596f 	.word	0x0801596f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8015884:	2308      	movs	r3, #8
 8015886:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	685b      	ldr	r3, [r3, #4]
 801588c:	4a4d      	ldr	r2, [pc, #308]	; (80159c4 <SUBGRF_SetModulationParams+0x190>)
 801588e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015892:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8015894:	697b      	ldr	r3, [r7, #20]
 8015896:	0c1b      	lsrs	r3, r3, #16
 8015898:	b2db      	uxtb	r3, r3
 801589a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801589c:	697b      	ldr	r3, [r7, #20]
 801589e:	0a1b      	lsrs	r3, r3, #8
 80158a0:	b2db      	uxtb	r3, r3
 80158a2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80158a4:	697b      	ldr	r3, [r7, #20]
 80158a6:	b2db      	uxtb	r3, r3
 80158a8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	7b1b      	ldrb	r3, [r3, #12]
 80158ae:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	7b5b      	ldrb	r3, [r3, #13]
 80158b4:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	689b      	ldr	r3, [r3, #8]
 80158ba:	461a      	mov	r2, r3
 80158bc:	f04f 0300 	mov.w	r3, #0
 80158c0:	09d5      	lsrs	r5, r2, #7
 80158c2:	0654      	lsls	r4, r2, #25
 80158c4:	4a40      	ldr	r2, [pc, #256]	; (80159c8 <SUBGRF_SetModulationParams+0x194>)
 80158c6:	f04f 0300 	mov.w	r3, #0
 80158ca:	4620      	mov	r0, r4
 80158cc:	4629      	mov	r1, r5
 80158ce:	f7eb f821 	bl	8000914 <__aeabi_uldivmod>
 80158d2:	4602      	mov	r2, r0
 80158d4:	460b      	mov	r3, r1
 80158d6:	4613      	mov	r3, r2
 80158d8:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80158da:	697b      	ldr	r3, [r7, #20]
 80158dc:	0c1b      	lsrs	r3, r3, #16
 80158de:	b2db      	uxtb	r3, r3
 80158e0:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80158e2:	697b      	ldr	r3, [r7, #20]
 80158e4:	0a1b      	lsrs	r3, r3, #8
 80158e6:	b2db      	uxtb	r3, r3
 80158e8:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80158ea:	697b      	ldr	r3, [r7, #20]
 80158ec:	b2db      	uxtb	r3, r3
 80158ee:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80158f0:	7cfb      	ldrb	r3, [r7, #19]
 80158f2:	b29a      	uxth	r2, r3
 80158f4:	f107 0308 	add.w	r3, r7, #8
 80158f8:	4619      	mov	r1, r3
 80158fa:	208b      	movs	r0, #139	; 0x8b
 80158fc:	f000 fa5e 	bl	8015dbc <SUBGRF_WriteCommand>
        break;
 8015900:	e058      	b.n	80159b4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8015902:	2304      	movs	r3, #4
 8015904:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	691b      	ldr	r3, [r3, #16]
 801590a:	4a2e      	ldr	r2, [pc, #184]	; (80159c4 <SUBGRF_SetModulationParams+0x190>)
 801590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015910:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8015912:	697b      	ldr	r3, [r7, #20]
 8015914:	0c1b      	lsrs	r3, r3, #16
 8015916:	b2db      	uxtb	r3, r3
 8015918:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801591a:	697b      	ldr	r3, [r7, #20]
 801591c:	0a1b      	lsrs	r3, r3, #8
 801591e:	b2db      	uxtb	r3, r3
 8015920:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8015922:	697b      	ldr	r3, [r7, #20]
 8015924:	b2db      	uxtb	r3, r3
 8015926:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	7d1b      	ldrb	r3, [r3, #20]
 801592c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801592e:	7cfb      	ldrb	r3, [r7, #19]
 8015930:	b29a      	uxth	r2, r3
 8015932:	f107 0308 	add.w	r3, r7, #8
 8015936:	4619      	mov	r1, r3
 8015938:	208b      	movs	r0, #139	; 0x8b
 801593a:	f000 fa3f 	bl	8015dbc <SUBGRF_WriteCommand>
        break;
 801593e:	e039      	b.n	80159b4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8015940:	2304      	movs	r3, #4
 8015942:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	7e1b      	ldrb	r3, [r3, #24]
 8015948:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	7e5b      	ldrb	r3, [r3, #25]
 801594e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	7e9b      	ldrb	r3, [r3, #26]
 8015954:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	7edb      	ldrb	r3, [r3, #27]
 801595a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801595c:	7cfb      	ldrb	r3, [r7, #19]
 801595e:	b29a      	uxth	r2, r3
 8015960:	f107 0308 	add.w	r3, r7, #8
 8015964:	4619      	mov	r1, r3
 8015966:	208b      	movs	r0, #139	; 0x8b
 8015968:	f000 fa28 	bl	8015dbc <SUBGRF_WriteCommand>

        break;
 801596c:	e022      	b.n	80159b4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 801596e:	2305      	movs	r3, #5
 8015970:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	685b      	ldr	r3, [r3, #4]
 8015976:	4a13      	ldr	r2, [pc, #76]	; (80159c4 <SUBGRF_SetModulationParams+0x190>)
 8015978:	fbb2 f3f3 	udiv	r3, r2, r3
 801597c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801597e:	697b      	ldr	r3, [r7, #20]
 8015980:	0c1b      	lsrs	r3, r3, #16
 8015982:	b2db      	uxtb	r3, r3
 8015984:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	0a1b      	lsrs	r3, r3, #8
 801598a:	b2db      	uxtb	r3, r3
 801598c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	b2db      	uxtb	r3, r3
 8015992:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	7b1b      	ldrb	r3, [r3, #12]
 8015998:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	7b5b      	ldrb	r3, [r3, #13]
 801599e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80159a0:	7cfb      	ldrb	r3, [r7, #19]
 80159a2:	b29a      	uxth	r2, r3
 80159a4:	f107 0308 	add.w	r3, r7, #8
 80159a8:	4619      	mov	r1, r3
 80159aa:	208b      	movs	r0, #139	; 0x8b
 80159ac:	f000 fa06 	bl	8015dbc <SUBGRF_WriteCommand>
        break;
 80159b0:	e000      	b.n	80159b4 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 80159b2:	bf00      	nop
    }
}
 80159b4:	bf00      	nop
 80159b6:	3718      	adds	r7, #24
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bdb0      	pop	{r4, r5, r7, pc}
 80159bc:	08017ef8 	.word	0x08017ef8
 80159c0:	2000106d 	.word	0x2000106d
 80159c4:	3d090000 	.word	0x3d090000
 80159c8:	01e84800 	.word	0x01e84800

080159cc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b086      	sub	sp, #24
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80159d4:	2300      	movs	r3, #0
 80159d6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80159d8:	4a48      	ldr	r2, [pc, #288]	; (8015afc <SUBGRF_SetPacketParams+0x130>)
 80159da:	f107 030c 	add.w	r3, r7, #12
 80159de:	ca07      	ldmia	r2, {r0, r1, r2}
 80159e0:	c303      	stmia	r3!, {r0, r1}
 80159e2:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	781a      	ldrb	r2, [r3, #0]
 80159e8:	4b45      	ldr	r3, [pc, #276]	; (8015b00 <SUBGRF_SetPacketParams+0x134>)
 80159ea:	781b      	ldrb	r3, [r3, #0]
 80159ec:	429a      	cmp	r2, r3
 80159ee:	d004      	beq.n	80159fa <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	781b      	ldrb	r3, [r3, #0]
 80159f4:	4618      	mov	r0, r3
 80159f6:	f7ff fe91 	bl	801571c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	781b      	ldrb	r3, [r3, #0]
 80159fe:	2b03      	cmp	r3, #3
 8015a00:	d878      	bhi.n	8015af4 <SUBGRF_SetPacketParams+0x128>
 8015a02:	a201      	add	r2, pc, #4	; (adr r2, 8015a08 <SUBGRF_SetPacketParams+0x3c>)
 8015a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a08:	08015a19 	.word	0x08015a19
 8015a0c:	08015aa9 	.word	0x08015aa9
 8015a10:	08015a9d 	.word	0x08015a9d
 8015a14:	08015a19 	.word	0x08015a19
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	7a5b      	ldrb	r3, [r3, #9]
 8015a1c:	2bf1      	cmp	r3, #241	; 0xf1
 8015a1e:	d10a      	bne.n	8015a36 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8015a20:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015a24:	f7ff fb20 	bl	8015068 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8015a28:	f248 0005 	movw	r0, #32773	; 0x8005
 8015a2c:	f7ff fb3c 	bl	80150a8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8015a30:	2302      	movs	r3, #2
 8015a32:	75bb      	strb	r3, [r7, #22]
 8015a34:	e011      	b.n	8015a5a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	7a5b      	ldrb	r3, [r3, #9]
 8015a3a:	2bf2      	cmp	r3, #242	; 0xf2
 8015a3c:	d10a      	bne.n	8015a54 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8015a3e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8015a42:	f7ff fb11 	bl	8015068 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8015a46:	f241 0021 	movw	r0, #4129	; 0x1021
 8015a4a:	f7ff fb2d 	bl	80150a8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8015a4e:	2306      	movs	r3, #6
 8015a50:	75bb      	strb	r3, [r7, #22]
 8015a52:	e002      	b.n	8015a5a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	7a5b      	ldrb	r3, [r3, #9]
 8015a58:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8015a5a:	2309      	movs	r3, #9
 8015a5c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	885b      	ldrh	r3, [r3, #2]
 8015a62:	0a1b      	lsrs	r3, r3, #8
 8015a64:	b29b      	uxth	r3, r3
 8015a66:	b2db      	uxtb	r3, r3
 8015a68:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	885b      	ldrh	r3, [r3, #2]
 8015a6e:	b2db      	uxtb	r3, r3
 8015a70:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	791b      	ldrb	r3, [r3, #4]
 8015a76:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	795b      	ldrb	r3, [r3, #5]
 8015a7c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	799b      	ldrb	r3, [r3, #6]
 8015a82:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	79db      	ldrb	r3, [r3, #7]
 8015a88:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	7a1b      	ldrb	r3, [r3, #8]
 8015a8e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8015a90:	7dbb      	ldrb	r3, [r7, #22]
 8015a92:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	7a9b      	ldrb	r3, [r3, #10]
 8015a98:	753b      	strb	r3, [r7, #20]
        break;
 8015a9a:	e022      	b.n	8015ae2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8015a9c:	2301      	movs	r3, #1
 8015a9e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	7b1b      	ldrb	r3, [r3, #12]
 8015aa4:	733b      	strb	r3, [r7, #12]
        break;
 8015aa6:	e01c      	b.n	8015ae2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8015aa8:	2306      	movs	r3, #6
 8015aaa:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	89db      	ldrh	r3, [r3, #14]
 8015ab0:	0a1b      	lsrs	r3, r3, #8
 8015ab2:	b29b      	uxth	r3, r3
 8015ab4:	b2db      	uxtb	r3, r3
 8015ab6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	89db      	ldrh	r3, [r3, #14]
 8015abc:	b2db      	uxtb	r3, r3
 8015abe:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	7c1a      	ldrb	r2, [r3, #16]
 8015ac4:	4b0f      	ldr	r3, [pc, #60]	; (8015b04 <SUBGRF_SetPacketParams+0x138>)
 8015ac6:	4611      	mov	r1, r2
 8015ac8:	7019      	strb	r1, [r3, #0]
 8015aca:	4613      	mov	r3, r2
 8015acc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	7c5b      	ldrb	r3, [r3, #17]
 8015ad2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	7c9b      	ldrb	r3, [r3, #18]
 8015ad8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	7cdb      	ldrb	r3, [r3, #19]
 8015ade:	747b      	strb	r3, [r7, #17]
        break;
 8015ae0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8015ae2:	7dfb      	ldrb	r3, [r7, #23]
 8015ae4:	b29a      	uxth	r2, r3
 8015ae6:	f107 030c 	add.w	r3, r7, #12
 8015aea:	4619      	mov	r1, r3
 8015aec:	208c      	movs	r0, #140	; 0x8c
 8015aee:	f000 f965 	bl	8015dbc <SUBGRF_WriteCommand>
 8015af2:	e000      	b.n	8015af6 <SUBGRF_SetPacketParams+0x12a>
        return;
 8015af4:	bf00      	nop
}
 8015af6:	3718      	adds	r7, #24
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}
 8015afc:	08017f00 	.word	0x08017f00
 8015b00:	2000106d 	.word	0x2000106d
 8015b04:	2000106e 	.word	0x2000106e

08015b08 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b084      	sub	sp, #16
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	4603      	mov	r3, r0
 8015b10:	460a      	mov	r2, r1
 8015b12:	71fb      	strb	r3, [r7, #7]
 8015b14:	4613      	mov	r3, r2
 8015b16:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8015b18:	79fb      	ldrb	r3, [r7, #7]
 8015b1a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8015b1c:	79bb      	ldrb	r3, [r7, #6]
 8015b1e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8015b20:	f107 030c 	add.w	r3, r7, #12
 8015b24:	2202      	movs	r2, #2
 8015b26:	4619      	mov	r1, r3
 8015b28:	208f      	movs	r0, #143	; 0x8f
 8015b2a:	f000 f947 	bl	8015dbc <SUBGRF_WriteCommand>
}
 8015b2e:	bf00      	nop
 8015b30:	3710      	adds	r7, #16
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}

08015b36 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8015b36:	b580      	push	{r7, lr}
 8015b38:	b082      	sub	sp, #8
 8015b3a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8015b40:	1d3b      	adds	r3, r7, #4
 8015b42:	2201      	movs	r2, #1
 8015b44:	4619      	mov	r1, r3
 8015b46:	2015      	movs	r0, #21
 8015b48:	f000 f95a 	bl	8015e00 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8015b4c:	793b      	ldrb	r3, [r7, #4]
 8015b4e:	425b      	negs	r3, r3
 8015b50:	105b      	asrs	r3, r3, #1
 8015b52:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8015b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8015b58:	4618      	mov	r0, r3
 8015b5a:	3708      	adds	r7, #8
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}

08015b60 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b084      	sub	sp, #16
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
 8015b68:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8015b6a:	f107 030c 	add.w	r3, r7, #12
 8015b6e:	2202      	movs	r2, #2
 8015b70:	4619      	mov	r1, r3
 8015b72:	2013      	movs	r0, #19
 8015b74:	f000 f944 	bl	8015e00 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8015b78:	f7ff fdec 	bl	8015754 <SUBGRF_GetPacketType>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	2b01      	cmp	r3, #1
 8015b80:	d10d      	bne.n	8015b9e <SUBGRF_GetRxBufferStatus+0x3e>
 8015b82:	4b0c      	ldr	r3, [pc, #48]	; (8015bb4 <SUBGRF_GetRxBufferStatus+0x54>)
 8015b84:	781b      	ldrb	r3, [r3, #0]
 8015b86:	b2db      	uxtb	r3, r3
 8015b88:	2b01      	cmp	r3, #1
 8015b8a:	d108      	bne.n	8015b9e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8015b8c:	f240 7002 	movw	r0, #1794	; 0x702
 8015b90:	f000 f878 	bl	8015c84 <SUBGRF_ReadRegister>
 8015b94:	4603      	mov	r3, r0
 8015b96:	461a      	mov	r2, r3
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	701a      	strb	r2, [r3, #0]
 8015b9c:	e002      	b.n	8015ba4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8015b9e:	7b3a      	ldrb	r2, [r7, #12]
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8015ba4:	7b7a      	ldrb	r2, [r7, #13]
 8015ba6:	683b      	ldr	r3, [r7, #0]
 8015ba8:	701a      	strb	r2, [r3, #0]
}
 8015baa:	bf00      	nop
 8015bac:	3710      	adds	r7, #16
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	bd80      	pop	{r7, pc}
 8015bb2:	bf00      	nop
 8015bb4:	2000106e 	.word	0x2000106e

08015bb8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b084      	sub	sp, #16
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8015bc0:	f107 030c 	add.w	r3, r7, #12
 8015bc4:	2203      	movs	r2, #3
 8015bc6:	4619      	mov	r1, r3
 8015bc8:	2014      	movs	r0, #20
 8015bca:	f000 f919 	bl	8015e00 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8015bce:	f7ff fdc1 	bl	8015754 <SUBGRF_GetPacketType>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	461a      	mov	r2, r3
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	781b      	ldrb	r3, [r3, #0]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d002      	beq.n	8015be8 <SUBGRF_GetPacketStatus+0x30>
 8015be2:	2b01      	cmp	r3, #1
 8015be4:	d013      	beq.n	8015c0e <SUBGRF_GetPacketStatus+0x56>
 8015be6:	e02a      	b.n	8015c3e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8015be8:	7b3a      	ldrb	r2, [r7, #12]
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8015bee:	7b7b      	ldrb	r3, [r7, #13]
 8015bf0:	425b      	negs	r3, r3
 8015bf2:	105b      	asrs	r3, r3, #1
 8015bf4:	b25a      	sxtb	r2, r3
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8015bfa:	7bbb      	ldrb	r3, [r7, #14]
 8015bfc:	425b      	negs	r3, r3
 8015bfe:	105b      	asrs	r3, r3, #1
 8015c00:	b25a      	sxtb	r2, r3
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	2200      	movs	r2, #0
 8015c0a:	609a      	str	r2, [r3, #8]
            break;
 8015c0c:	e020      	b.n	8015c50 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8015c0e:	7b3b      	ldrb	r3, [r7, #12]
 8015c10:	425b      	negs	r3, r3
 8015c12:	105b      	asrs	r3, r3, #1
 8015c14:	b25a      	sxtb	r2, r3
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8015c1a:	7b7b      	ldrb	r3, [r7, #13]
 8015c1c:	b25b      	sxtb	r3, r3
 8015c1e:	3302      	adds	r3, #2
 8015c20:	109b      	asrs	r3, r3, #2
 8015c22:	b25a      	sxtb	r2, r3
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8015c28:	7bbb      	ldrb	r3, [r7, #14]
 8015c2a:	425b      	negs	r3, r3
 8015c2c:	105b      	asrs	r3, r3, #1
 8015c2e:	b25a      	sxtb	r2, r3
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8015c34:	4b08      	ldr	r3, [pc, #32]	; (8015c58 <SUBGRF_GetPacketStatus+0xa0>)
 8015c36:	681a      	ldr	r2, [r3, #0]
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	611a      	str	r2, [r3, #16]
            break;
 8015c3c:	e008      	b.n	8015c50 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8015c3e:	2214      	movs	r2, #20
 8015c40:	2100      	movs	r1, #0
 8015c42:	6878      	ldr	r0, [r7, #4]
 8015c44:	f000 fb4e 	bl	80162e4 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	220f      	movs	r2, #15
 8015c4c:	701a      	strb	r2, [r3, #0]
            break;
 8015c4e:	bf00      	nop
    }
}
 8015c50:	bf00      	nop
 8015c52:	3710      	adds	r7, #16
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}
 8015c58:	20001070 	.word	0x20001070

08015c5c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b082      	sub	sp, #8
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	4603      	mov	r3, r0
 8015c64:	460a      	mov	r2, r1
 8015c66:	80fb      	strh	r3, [r7, #6]
 8015c68:	4613      	mov	r3, r2
 8015c6a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8015c6c:	1d7a      	adds	r2, r7, #5
 8015c6e:	88f9      	ldrh	r1, [r7, #6]
 8015c70:	2301      	movs	r3, #1
 8015c72:	4803      	ldr	r0, [pc, #12]	; (8015c80 <SUBGRF_WriteRegister+0x24>)
 8015c74:	f7ee fbde 	bl	8004434 <HAL_SUBGHZ_WriteRegisters>
}
 8015c78:	bf00      	nop
 8015c7a:	3708      	adds	r7, #8
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bd80      	pop	{r7, pc}
 8015c80:	200010c0 	.word	0x200010c0

08015c84 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b084      	sub	sp, #16
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8015c8e:	f107 020f 	add.w	r2, r7, #15
 8015c92:	88f9      	ldrh	r1, [r7, #6]
 8015c94:	2301      	movs	r3, #1
 8015c96:	4804      	ldr	r0, [pc, #16]	; (8015ca8 <SUBGRF_ReadRegister+0x24>)
 8015c98:	f7ee fc2b 	bl	80044f2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8015c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	3710      	adds	r7, #16
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd80      	pop	{r7, pc}
 8015ca6:	bf00      	nop
 8015ca8:	200010c0 	.word	0x200010c0

08015cac <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b086      	sub	sp, #24
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	6039      	str	r1, [r7, #0]
 8015cb6:	80fb      	strh	r3, [r7, #6]
 8015cb8:	4613      	mov	r3, r2
 8015cba:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8015cc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8015cc2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8015cc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015cc6:	b672      	cpsid	i
}
 8015cc8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8015cca:	88bb      	ldrh	r3, [r7, #4]
 8015ccc:	88f9      	ldrh	r1, [r7, #6]
 8015cce:	683a      	ldr	r2, [r7, #0]
 8015cd0:	4806      	ldr	r0, [pc, #24]	; (8015cec <SUBGRF_WriteRegisters+0x40>)
 8015cd2:	f7ee fbaf 	bl	8004434 <HAL_SUBGHZ_WriteRegisters>
 8015cd6:	697b      	ldr	r3, [r7, #20]
 8015cd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015cda:	693b      	ldr	r3, [r7, #16]
 8015cdc:	f383 8810 	msr	PRIMASK, r3
}
 8015ce0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8015ce2:	bf00      	nop
 8015ce4:	3718      	adds	r7, #24
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bd80      	pop	{r7, pc}
 8015cea:	bf00      	nop
 8015cec:	200010c0 	.word	0x200010c0

08015cf0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b086      	sub	sp, #24
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	6039      	str	r1, [r7, #0]
 8015cfa:	80fb      	strh	r3, [r7, #6]
 8015cfc:	4613      	mov	r3, r2
 8015cfe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d00:	f3ef 8310 	mrs	r3, PRIMASK
 8015d04:	60fb      	str	r3, [r7, #12]
  return(result);
 8015d06:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8015d08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015d0a:	b672      	cpsid	i
}
 8015d0c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8015d0e:	88bb      	ldrh	r3, [r7, #4]
 8015d10:	88f9      	ldrh	r1, [r7, #6]
 8015d12:	683a      	ldr	r2, [r7, #0]
 8015d14:	4806      	ldr	r0, [pc, #24]	; (8015d30 <SUBGRF_ReadRegisters+0x40>)
 8015d16:	f7ee fbec 	bl	80044f2 <HAL_SUBGHZ_ReadRegisters>
 8015d1a:	697b      	ldr	r3, [r7, #20]
 8015d1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d1e:	693b      	ldr	r3, [r7, #16]
 8015d20:	f383 8810 	msr	PRIMASK, r3
}
 8015d24:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8015d26:	bf00      	nop
 8015d28:	3718      	adds	r7, #24
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}
 8015d2e:	bf00      	nop
 8015d30:	200010c0 	.word	0x200010c0

08015d34 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b086      	sub	sp, #24
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	6039      	str	r1, [r7, #0]
 8015d3e:	71fb      	strb	r3, [r7, #7]
 8015d40:	4613      	mov	r3, r2
 8015d42:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d44:	f3ef 8310 	mrs	r3, PRIMASK
 8015d48:	60fb      	str	r3, [r7, #12]
  return(result);
 8015d4a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8015d4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015d4e:	b672      	cpsid	i
}
 8015d50:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8015d52:	79bb      	ldrb	r3, [r7, #6]
 8015d54:	b29b      	uxth	r3, r3
 8015d56:	79f9      	ldrb	r1, [r7, #7]
 8015d58:	683a      	ldr	r2, [r7, #0]
 8015d5a:	4806      	ldr	r0, [pc, #24]	; (8015d74 <SUBGRF_WriteBuffer+0x40>)
 8015d5c:	f7ee fcdd 	bl	800471a <HAL_SUBGHZ_WriteBuffer>
 8015d60:	697b      	ldr	r3, [r7, #20]
 8015d62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d64:	693b      	ldr	r3, [r7, #16]
 8015d66:	f383 8810 	msr	PRIMASK, r3
}
 8015d6a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8015d6c:	bf00      	nop
 8015d6e:	3718      	adds	r7, #24
 8015d70:	46bd      	mov	sp, r7
 8015d72:	bd80      	pop	{r7, pc}
 8015d74:	200010c0 	.word	0x200010c0

08015d78 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b086      	sub	sp, #24
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	4603      	mov	r3, r0
 8015d80:	6039      	str	r1, [r7, #0]
 8015d82:	71fb      	strb	r3, [r7, #7]
 8015d84:	4613      	mov	r3, r2
 8015d86:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d88:	f3ef 8310 	mrs	r3, PRIMASK
 8015d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8015d8e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8015d90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015d92:	b672      	cpsid	i
}
 8015d94:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8015d96:	79bb      	ldrb	r3, [r7, #6]
 8015d98:	b29b      	uxth	r3, r3
 8015d9a:	79f9      	ldrb	r1, [r7, #7]
 8015d9c:	683a      	ldr	r2, [r7, #0]
 8015d9e:	4806      	ldr	r0, [pc, #24]	; (8015db8 <SUBGRF_ReadBuffer+0x40>)
 8015da0:	f7ee fd0e 	bl	80047c0 <HAL_SUBGHZ_ReadBuffer>
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015da8:	693b      	ldr	r3, [r7, #16]
 8015daa:	f383 8810 	msr	PRIMASK, r3
}
 8015dae:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8015db0:	bf00      	nop
 8015db2:	3718      	adds	r7, #24
 8015db4:	46bd      	mov	sp, r7
 8015db6:	bd80      	pop	{r7, pc}
 8015db8:	200010c0 	.word	0x200010c0

08015dbc <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b086      	sub	sp, #24
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	6039      	str	r1, [r7, #0]
 8015dc6:	71fb      	strb	r3, [r7, #7]
 8015dc8:	4613      	mov	r3, r2
 8015dca:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8015dd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8015dd2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8015dd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015dd6:	b672      	cpsid	i
}
 8015dd8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8015dda:	88bb      	ldrh	r3, [r7, #4]
 8015ddc:	79f9      	ldrb	r1, [r7, #7]
 8015dde:	683a      	ldr	r2, [r7, #0]
 8015de0:	4806      	ldr	r0, [pc, #24]	; (8015dfc <SUBGRF_WriteCommand+0x40>)
 8015de2:	f7ee fbe7 	bl	80045b4 <HAL_SUBGHZ_ExecSetCmd>
 8015de6:	697b      	ldr	r3, [r7, #20]
 8015de8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015dea:	693b      	ldr	r3, [r7, #16]
 8015dec:	f383 8810 	msr	PRIMASK, r3
}
 8015df0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8015df2:	bf00      	nop
 8015df4:	3718      	adds	r7, #24
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bd80      	pop	{r7, pc}
 8015dfa:	bf00      	nop
 8015dfc:	200010c0 	.word	0x200010c0

08015e00 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b086      	sub	sp, #24
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	4603      	mov	r3, r0
 8015e08:	6039      	str	r1, [r7, #0]
 8015e0a:	71fb      	strb	r3, [r7, #7]
 8015e0c:	4613      	mov	r3, r2
 8015e0e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e10:	f3ef 8310 	mrs	r3, PRIMASK
 8015e14:	60fb      	str	r3, [r7, #12]
  return(result);
 8015e16:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8015e18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015e1a:	b672      	cpsid	i
}
 8015e1c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8015e1e:	88bb      	ldrh	r3, [r7, #4]
 8015e20:	79f9      	ldrb	r1, [r7, #7]
 8015e22:	683a      	ldr	r2, [r7, #0]
 8015e24:	4806      	ldr	r0, [pc, #24]	; (8015e40 <SUBGRF_ReadCommand+0x40>)
 8015e26:	f7ee fc24 	bl	8004672 <HAL_SUBGHZ_ExecGetCmd>
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e2e:	693b      	ldr	r3, [r7, #16]
 8015e30:	f383 8810 	msr	PRIMASK, r3
}
 8015e34:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8015e36:	bf00      	nop
 8015e38:	3718      	adds	r7, #24
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	bd80      	pop	{r7, pc}
 8015e3e:	bf00      	nop
 8015e40:	200010c0 	.word	0x200010c0

08015e44 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b084      	sub	sp, #16
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	460a      	mov	r2, r1
 8015e4e:	71fb      	strb	r3, [r7, #7]
 8015e50:	4613      	mov	r3, r2
 8015e52:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8015e54:	2301      	movs	r3, #1
 8015e56:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8015e58:	79bb      	ldrb	r3, [r7, #6]
 8015e5a:	2b01      	cmp	r3, #1
 8015e5c:	d10d      	bne.n	8015e7a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8015e5e:	79fb      	ldrb	r3, [r7, #7]
 8015e60:	2b01      	cmp	r3, #1
 8015e62:	d104      	bne.n	8015e6e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8015e64:	2302      	movs	r3, #2
 8015e66:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8015e68:	2004      	movs	r0, #4
 8015e6a:	f000 f8df 	bl	801602c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8015e6e:	79fb      	ldrb	r3, [r7, #7]
 8015e70:	2b02      	cmp	r3, #2
 8015e72:	d107      	bne.n	8015e84 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8015e74:	2303      	movs	r3, #3
 8015e76:	73fb      	strb	r3, [r7, #15]
 8015e78:	e004      	b.n	8015e84 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8015e7a:	79bb      	ldrb	r3, [r7, #6]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d101      	bne.n	8015e84 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8015e80:	2301      	movs	r3, #1
 8015e82:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8015e84:	7bfb      	ldrb	r3, [r7, #15]
 8015e86:	4618      	mov	r0, r3
 8015e88:	f7f0 f9e5 	bl	8006256 <RBI_ConfigRFSwitch>
}
 8015e8c:	bf00      	nop
 8015e8e:	3710      	adds	r7, #16
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bd80      	pop	{r7, pc}

08015e94 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b084      	sub	sp, #16
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8015e9e:	2301      	movs	r3, #1
 8015ea0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8015ea2:	f7f0 f9e5 	bl	8006270 <RBI_GetTxConfig>
 8015ea6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8015ea8:	68bb      	ldr	r3, [r7, #8]
 8015eaa:	2b02      	cmp	r3, #2
 8015eac:	d016      	beq.n	8015edc <SUBGRF_SetRfTxPower+0x48>
 8015eae:	68bb      	ldr	r3, [r7, #8]
 8015eb0:	2b02      	cmp	r3, #2
 8015eb2:	dc16      	bgt.n	8015ee2 <SUBGRF_SetRfTxPower+0x4e>
 8015eb4:	68bb      	ldr	r3, [r7, #8]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d003      	beq.n	8015ec2 <SUBGRF_SetRfTxPower+0x2e>
 8015eba:	68bb      	ldr	r3, [r7, #8]
 8015ebc:	2b01      	cmp	r3, #1
 8015ebe:	d00a      	beq.n	8015ed6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8015ec0:	e00f      	b.n	8015ee2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8015ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ec6:	2b0f      	cmp	r3, #15
 8015ec8:	dd02      	ble.n	8015ed0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8015eca:	2302      	movs	r3, #2
 8015ecc:	73fb      	strb	r3, [r7, #15]
            break;
 8015ece:	e009      	b.n	8015ee4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	73fb      	strb	r3, [r7, #15]
            break;
 8015ed4:	e006      	b.n	8015ee4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8015ed6:	2301      	movs	r3, #1
 8015ed8:	73fb      	strb	r3, [r7, #15]
            break;
 8015eda:	e003      	b.n	8015ee4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8015edc:	2302      	movs	r3, #2
 8015ede:	73fb      	strb	r3, [r7, #15]
            break;
 8015ee0:	e000      	b.n	8015ee4 <SUBGRF_SetRfTxPower+0x50>
            break;
 8015ee2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8015ee4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8015ee8:	7bfb      	ldrb	r3, [r7, #15]
 8015eea:	2202      	movs	r2, #2
 8015eec:	4618      	mov	r0, r3
 8015eee:	f7ff fc3b 	bl	8015768 <SUBGRF_SetTxParams>

    return paSelect;
 8015ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	3710      	adds	r7, #16
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	bd80      	pop	{r7, pc}

08015efc <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8015efc:	b480      	push	{r7}
 8015efe:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8015f00:	2301      	movs	r3, #1
}
 8015f02:	4618      	mov	r0, r3
 8015f04:	46bd      	mov	sp, r7
 8015f06:	bc80      	pop	{r7}
 8015f08:	4770      	bx	lr
	...

08015f0c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b082      	sub	sp, #8
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8015f14:	4b03      	ldr	r3, [pc, #12]	; (8015f24 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	2001      	movs	r0, #1
 8015f1a:	4798      	blx	r3
}
 8015f1c:	bf00      	nop
 8015f1e:	3708      	adds	r7, #8
 8015f20:	46bd      	mov	sp, r7
 8015f22:	bd80      	pop	{r7, pc}
 8015f24:	20001078 	.word	0x20001078

08015f28 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b082      	sub	sp, #8
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8015f30:	4b03      	ldr	r3, [pc, #12]	; (8015f40 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	2002      	movs	r0, #2
 8015f36:	4798      	blx	r3
}
 8015f38:	bf00      	nop
 8015f3a:	3708      	adds	r7, #8
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	bd80      	pop	{r7, pc}
 8015f40:	20001078 	.word	0x20001078

08015f44 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b082      	sub	sp, #8
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8015f4c:	4b03      	ldr	r3, [pc, #12]	; (8015f5c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	2040      	movs	r0, #64	; 0x40
 8015f52:	4798      	blx	r3
}
 8015f54:	bf00      	nop
 8015f56:	3708      	adds	r7, #8
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bd80      	pop	{r7, pc}
 8015f5c:	20001078 	.word	0x20001078

08015f60 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b082      	sub	sp, #8
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
 8015f68:	460b      	mov	r3, r1
 8015f6a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8015f6c:	78fb      	ldrb	r3, [r7, #3]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d002      	beq.n	8015f78 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8015f72:	2b01      	cmp	r3, #1
 8015f74:	d005      	beq.n	8015f82 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8015f76:	e00a      	b.n	8015f8e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8015f78:	4b07      	ldr	r3, [pc, #28]	; (8015f98 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	2080      	movs	r0, #128	; 0x80
 8015f7e:	4798      	blx	r3
            break;
 8015f80:	e005      	b.n	8015f8e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8015f82:	4b05      	ldr	r3, [pc, #20]	; (8015f98 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015f8a:	4798      	blx	r3
            break;
 8015f8c:	bf00      	nop
    }
}
 8015f8e:	bf00      	nop
 8015f90:	3708      	adds	r7, #8
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd80      	pop	{r7, pc}
 8015f96:	bf00      	nop
 8015f98:	20001078 	.word	0x20001078

08015f9c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b082      	sub	sp, #8
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8015fa4:	4b04      	ldr	r3, [pc, #16]	; (8015fb8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015fac:	4798      	blx	r3
}
 8015fae:	bf00      	nop
 8015fb0:	3708      	adds	r7, #8
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bd80      	pop	{r7, pc}
 8015fb6:	bf00      	nop
 8015fb8:	20001078 	.word	0x20001078

08015fbc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8015fc4:	4b03      	ldr	r3, [pc, #12]	; (8015fd4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	2020      	movs	r0, #32
 8015fca:	4798      	blx	r3
}
 8015fcc:	bf00      	nop
 8015fce:	3708      	adds	r7, #8
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	bd80      	pop	{r7, pc}
 8015fd4:	20001078 	.word	0x20001078

08015fd8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b082      	sub	sp, #8
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8015fe0:	4b03      	ldr	r3, [pc, #12]	; (8015ff0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	2004      	movs	r0, #4
 8015fe6:	4798      	blx	r3
}
 8015fe8:	bf00      	nop
 8015fea:	3708      	adds	r7, #8
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}
 8015ff0:	20001078 	.word	0x20001078

08015ff4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b082      	sub	sp, #8
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8015ffc:	4b03      	ldr	r3, [pc, #12]	; (801600c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	2008      	movs	r0, #8
 8016002:	4798      	blx	r3
}
 8016004:	bf00      	nop
 8016006:	3708      	adds	r7, #8
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}
 801600c:	20001078 	.word	0x20001078

08016010 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b082      	sub	sp, #8
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8016018:	4b03      	ldr	r3, [pc, #12]	; (8016028 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	2010      	movs	r0, #16
 801601e:	4798      	blx	r3
}
 8016020:	bf00      	nop
 8016022:	3708      	adds	r7, #8
 8016024:	46bd      	mov	sp, r7
 8016026:	bd80      	pop	{r7, pc}
 8016028:	20001078 	.word	0x20001078

0801602c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b084      	sub	sp, #16
 8016030:	af00      	add	r7, sp, #0
 8016032:	4603      	mov	r3, r0
 8016034:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8016036:	f7f0 f931 	bl	800629c <RBI_IsDCDC>
 801603a:	4603      	mov	r3, r0
 801603c:	2b01      	cmp	r3, #1
 801603e:	d112      	bne.n	8016066 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8016040:	f640 1023 	movw	r0, #2339	; 0x923
 8016044:	f7ff fe1e 	bl	8015c84 <SUBGRF_ReadRegister>
 8016048:	4603      	mov	r3, r0
 801604a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801604c:	7bfb      	ldrb	r3, [r7, #15]
 801604e:	f023 0306 	bic.w	r3, r3, #6
 8016052:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8016054:	7bfa      	ldrb	r2, [r7, #15]
 8016056:	79fb      	ldrb	r3, [r7, #7]
 8016058:	4313      	orrs	r3, r2
 801605a:	b2db      	uxtb	r3, r3
 801605c:	4619      	mov	r1, r3
 801605e:	f640 1023 	movw	r0, #2339	; 0x923
 8016062:	f7ff fdfb 	bl	8015c5c <SUBGRF_WriteRegister>
  }
}
 8016066:	bf00      	nop
 8016068:	3710      	adds	r7, #16
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}
	...

08016070 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8016070:	b480      	push	{r7}
 8016072:	b085      	sub	sp, #20
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d101      	bne.n	8016082 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801607e:	231f      	movs	r3, #31
 8016080:	e016      	b.n	80160b0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8016082:	2300      	movs	r3, #0
 8016084:	73fb      	strb	r3, [r7, #15]
 8016086:	e00f      	b.n	80160a8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8016088:	7bfb      	ldrb	r3, [r7, #15]
 801608a:	4a0c      	ldr	r2, [pc, #48]	; (80160bc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801608c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016090:	687a      	ldr	r2, [r7, #4]
 8016092:	429a      	cmp	r2, r3
 8016094:	d205      	bcs.n	80160a2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8016096:	7bfb      	ldrb	r3, [r7, #15]
 8016098:	4a08      	ldr	r2, [pc, #32]	; (80160bc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801609a:	00db      	lsls	r3, r3, #3
 801609c:	4413      	add	r3, r2
 801609e:	791b      	ldrb	r3, [r3, #4]
 80160a0:	e006      	b.n	80160b0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80160a2:	7bfb      	ldrb	r3, [r7, #15]
 80160a4:	3301      	adds	r3, #1
 80160a6:	73fb      	strb	r3, [r7, #15]
 80160a8:	7bfb      	ldrb	r3, [r7, #15]
 80160aa:	2b15      	cmp	r3, #21
 80160ac:	d9ec      	bls.n	8016088 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 80160ae:	e7fe      	b.n	80160ae <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 80160b0:	4618      	mov	r0, r3
 80160b2:	3714      	adds	r7, #20
 80160b4:	46bd      	mov	sp, r7
 80160b6:	bc80      	pop	{r7}
 80160b8:	4770      	bx	lr
 80160ba:	bf00      	nop
 80160bc:	08018468 	.word	0x08018468

080160c0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b08a      	sub	sp, #40	; 0x28
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
 80160c8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80160ca:	4b36      	ldr	r3, [pc, #216]	; (80161a4 <SUBGRF_GetCFO+0xe4>)
 80160cc:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 80160ce:	f640 0007 	movw	r0, #2055	; 0x807
 80160d2:	f7ff fdd7 	bl	8015c84 <SUBGRF_ReadRegister>
 80160d6:	4603      	mov	r3, r0
 80160d8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80160da:	7ffb      	ldrb	r3, [r7, #31]
 80160dc:	08db      	lsrs	r3, r3, #3
 80160de:	b2db      	uxtb	r3, r3
 80160e0:	f003 0303 	and.w	r3, r3, #3
 80160e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80160e8:	4413      	add	r3, r2
 80160ea:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80160ee:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80160f0:	7ffb      	ldrb	r3, [r7, #31]
 80160f2:	f003 0307 	and.w	r3, r3, #7
 80160f6:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80160f8:	7fba      	ldrb	r2, [r7, #30]
 80160fa:	7f7b      	ldrb	r3, [r7, #29]
 80160fc:	3b01      	subs	r3, #1
 80160fe:	fa02 f303 	lsl.w	r3, r2, r3
 8016102:	461a      	mov	r2, r3
 8016104:	4b28      	ldr	r3, [pc, #160]	; (80161a8 <SUBGRF_GetCFO+0xe8>)
 8016106:	fbb3 f3f2 	udiv	r3, r3, r2
 801610a:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801610c:	69ba      	ldr	r2, [r7, #24]
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	fbb2 f3f3 	udiv	r3, r2, r3
 8016114:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8016116:	2301      	movs	r3, #1
 8016118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801611c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016120:	697a      	ldr	r2, [r7, #20]
 8016122:	fb02 f303 	mul.w	r3, r2, r3
 8016126:	2b07      	cmp	r3, #7
 8016128:	d802      	bhi.n	8016130 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 801612a:	2302      	movs	r3, #2
 801612c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8016130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016134:	697a      	ldr	r2, [r7, #20]
 8016136:	fb02 f303 	mul.w	r3, r2, r3
 801613a:	2b03      	cmp	r3, #3
 801613c:	d802      	bhi.n	8016144 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 801613e:	2304      	movs	r3, #4
 8016140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8016144:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016148:	69bb      	ldr	r3, [r7, #24]
 801614a:	fb02 f303 	mul.w	r3, r2, r3
 801614e:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8016150:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8016154:	f7ff fd96 	bl	8015c84 <SUBGRF_ReadRegister>
 8016158:	4603      	mov	r3, r0
 801615a:	021b      	lsls	r3, r3, #8
 801615c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8016160:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8016162:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8016166:	f7ff fd8d 	bl	8015c84 <SUBGRF_ReadRegister>
 801616a:	4603      	mov	r3, r0
 801616c:	461a      	mov	r2, r3
 801616e:	6a3b      	ldr	r3, [r7, #32]
 8016170:	4313      	orrs	r3, r2
 8016172:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8016174:	6a3b      	ldr	r3, [r7, #32]
 8016176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801617a:	2b00      	cmp	r3, #0
 801617c:	d005      	beq.n	801618a <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 801617e:	6a3b      	ldr	r3, [r7, #32]
 8016180:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8016184:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8016188:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801618a:	693b      	ldr	r3, [r7, #16]
 801618c:	095b      	lsrs	r3, r3, #5
 801618e:	6a3a      	ldr	r2, [r7, #32]
 8016190:	fb02 f303 	mul.w	r3, r2, r3
 8016194:	11da      	asrs	r2, r3, #7
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	601a      	str	r2, [r3, #0]
}
 801619a:	bf00      	nop
 801619c:	3728      	adds	r7, #40	; 0x28
 801619e:	46bd      	mov	sp, r7
 80161a0:	bd80      	pop	{r7, pc}
 80161a2:	bf00      	nop
 80161a4:	0c0a0804 	.word	0x0c0a0804
 80161a8:	01e84800 	.word	0x01e84800

080161ac <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 80161ac:	b480      	push	{r7}
 80161ae:	b087      	sub	sp, #28
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	4603      	mov	r3, r0
 80161b4:	60b9      	str	r1, [r7, #8]
 80161b6:	607a      	str	r2, [r7, #4]
 80161b8:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 80161ba:	2300      	movs	r3, #0
 80161bc:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 80161be:	f04f 33ff 	mov.w	r3, #4294967295
 80161c2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80161c4:	697b      	ldr	r3, [r7, #20]
}
 80161c6:	4618      	mov	r0, r3
 80161c8:	371c      	adds	r7, #28
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bc80      	pop	{r7}
 80161ce:	4770      	bx	lr

080161d0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 80161d0:	b480      	push	{r7}
 80161d2:	b087      	sub	sp, #28
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	4603      	mov	r3, r0
 80161d8:	60b9      	str	r1, [r7, #8]
 80161da:	607a      	str	r2, [r7, #4]
 80161dc:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 80161de:	2300      	movs	r3, #0
 80161e0:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 80161e2:	f04f 33ff 	mov.w	r3, #4294967295
 80161e6:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80161e8:	697b      	ldr	r3, [r7, #20]
}
 80161ea:	4618      	mov	r0, r3
 80161ec:	371c      	adds	r7, #28
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bc80      	pop	{r7}
 80161f2:	4770      	bx	lr

080161f4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 80161f4:	b480      	push	{r7}
 80161f6:	b085      	sub	sp, #20
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	60f8      	str	r0, [r7, #12]
 80161fc:	60b9      	str	r1, [r7, #8]
 80161fe:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8016200:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8016204:	4618      	mov	r0, r3
 8016206:	3714      	adds	r7, #20
 8016208:	46bd      	mov	sp, r7
 801620a:	bc80      	pop	{r7}
 801620c:	4770      	bx	lr

0801620e <RFW_DeInit>:

void RFW_DeInit( void)
{
 801620e:	b480      	push	{r7}
 8016210:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8016212:	bf00      	nop
 8016214:	46bd      	mov	sp, r7
 8016216:	bc80      	pop	{r7}
 8016218:	4770      	bx	lr

0801621a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801621a:	b480      	push	{r7}
 801621c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801621e:	2300      	movs	r3, #0
#endif
}
 8016220:	4618      	mov	r0, r3
 8016222:	46bd      	mov	sp, r7
 8016224:	bc80      	pop	{r7}
 8016226:	4770      	bx	lr

08016228 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8016228:	b480      	push	{r7}
 801622a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801622c:	2300      	movs	r3, #0
#endif
}
 801622e:	4618      	mov	r0, r3
 8016230:	46bd      	mov	sp, r7
 8016232:	bc80      	pop	{r7}
 8016234:	4770      	bx	lr

08016236 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8016236:	b480      	push	{r7}
 8016238:	b083      	sub	sp, #12
 801623a:	af00      	add	r7, sp, #0
 801623c:	4603      	mov	r3, r0
 801623e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8016240:	bf00      	nop
 8016242:	370c      	adds	r7, #12
 8016244:	46bd      	mov	sp, r7
 8016246:	bc80      	pop	{r7}
 8016248:	4770      	bx	lr

0801624a <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801624a:	b480      	push	{r7}
 801624c:	b087      	sub	sp, #28
 801624e:	af00      	add	r7, sp, #0
 8016250:	60f8      	str	r0, [r7, #12]
 8016252:	460b      	mov	r3, r1
 8016254:	607a      	str	r2, [r7, #4]
 8016256:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8016258:	f04f 33ff 	mov.w	r3, #4294967295
 801625c:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 801625e:	697b      	ldr	r3, [r7, #20]
}
 8016260:	4618      	mov	r0, r3
 8016262:	371c      	adds	r7, #28
 8016264:	46bd      	mov	sp, r7
 8016266:	bc80      	pop	{r7}
 8016268:	4770      	bx	lr

0801626a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801626a:	b480      	push	{r7}
 801626c:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801626e:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8016272:	4618      	mov	r0, r3
 8016274:	46bd      	mov	sp, r7
 8016276:	bc80      	pop	{r7}
 8016278:	4770      	bx	lr

0801627a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801627a:	b480      	push	{r7}
 801627c:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801627e:	bf00      	nop
 8016280:	46bd      	mov	sp, r7
 8016282:	bc80      	pop	{r7}
 8016284:	4770      	bx	lr

08016286 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8016286:	b480      	push	{r7}
 8016288:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801628a:	bf00      	nop
 801628c:	46bd      	mov	sp, r7
 801628e:	bc80      	pop	{r7}
 8016290:	4770      	bx	lr

08016292 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8016292:	b480      	push	{r7}
 8016294:	b083      	sub	sp, #12
 8016296:	af00      	add	r7, sp, #0
 8016298:	4603      	mov	r3, r0
 801629a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801629c:	bf00      	nop
 801629e:	370c      	adds	r7, #12
 80162a0:	46bd      	mov	sp, r7
 80162a2:	bc80      	pop	{r7}
 80162a4:	4770      	bx	lr

080162a6 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 80162a6:	b480      	push	{r7}
 80162a8:	b087      	sub	sp, #28
 80162aa:	af00      	add	r7, sp, #0
 80162ac:	60f8      	str	r0, [r7, #12]
 80162ae:	60b9      	str	r1, [r7, #8]
 80162b0:	4613      	mov	r3, r2
 80162b2:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	613b      	str	r3, [r7, #16]

  while( size-- )
 80162bc:	e007      	b.n	80162ce <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 80162be:	693a      	ldr	r2, [r7, #16]
 80162c0:	1c53      	adds	r3, r2, #1
 80162c2:	613b      	str	r3, [r7, #16]
 80162c4:	697b      	ldr	r3, [r7, #20]
 80162c6:	1c59      	adds	r1, r3, #1
 80162c8:	6179      	str	r1, [r7, #20]
 80162ca:	7812      	ldrb	r2, [r2, #0]
 80162cc:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80162ce:	88fb      	ldrh	r3, [r7, #6]
 80162d0:	1e5a      	subs	r2, r3, #1
 80162d2:	80fa      	strh	r2, [r7, #6]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d1f2      	bne.n	80162be <UTIL_MEM_cpy_8+0x18>
    }
}
 80162d8:	bf00      	nop
 80162da:	bf00      	nop
 80162dc:	371c      	adds	r7, #28
 80162de:	46bd      	mov	sp, r7
 80162e0:	bc80      	pop	{r7}
 80162e2:	4770      	bx	lr

080162e4 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80162e4:	b480      	push	{r7}
 80162e6:	b085      	sub	sp, #20
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	6078      	str	r0, [r7, #4]
 80162ec:	460b      	mov	r3, r1
 80162ee:	70fb      	strb	r3, [r7, #3]
 80162f0:	4613      	mov	r3, r2
 80162f2:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80162f8:	e004      	b.n	8016304 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	1c5a      	adds	r2, r3, #1
 80162fe:	60fa      	str	r2, [r7, #12]
 8016300:	78fa      	ldrb	r2, [r7, #3]
 8016302:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8016304:	883b      	ldrh	r3, [r7, #0]
 8016306:	1e5a      	subs	r2, r3, #1
 8016308:	803a      	strh	r2, [r7, #0]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d1f5      	bne.n	80162fa <UTIL_MEM_set_8+0x16>
  }
}
 801630e:	bf00      	nop
 8016310:	bf00      	nop
 8016312:	3714      	adds	r7, #20
 8016314:	46bd      	mov	sp, r7
 8016316:	bc80      	pop	{r7}
 8016318:	4770      	bx	lr

0801631a <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801631a:	b082      	sub	sp, #8
 801631c:	b480      	push	{r7}
 801631e:	b087      	sub	sp, #28
 8016320:	af00      	add	r7, sp, #0
 8016322:	60f8      	str	r0, [r7, #12]
 8016324:	1d38      	adds	r0, r7, #4
 8016326:	e880 0006 	stmia.w	r0, {r1, r2}
 801632a:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801632c:	2300      	movs	r3, #0
 801632e:	613b      	str	r3, [r7, #16]
 8016330:	2300      	movs	r3, #0
 8016332:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8016334:	687a      	ldr	r2, [r7, #4]
 8016336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016338:	4413      	add	r3, r2
 801633a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801633c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8016340:	b29a      	uxth	r2, r3
 8016342:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8016346:	b29b      	uxth	r3, r3
 8016348:	4413      	add	r3, r2
 801634a:	b29b      	uxth	r3, r3
 801634c:	b21b      	sxth	r3, r3
 801634e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8016350:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8016354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016358:	db0a      	blt.n	8016370 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801635a:	693b      	ldr	r3, [r7, #16]
 801635c:	3301      	adds	r3, #1
 801635e:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8016360:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8016364:	b29b      	uxth	r3, r3
 8016366:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801636a:	b29b      	uxth	r3, r3
 801636c:	b21b      	sxth	r3, r3
 801636e:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	461a      	mov	r2, r3
 8016374:	f107 0310 	add.w	r3, r7, #16
 8016378:	e893 0003 	ldmia.w	r3, {r0, r1}
 801637c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8016380:	68f8      	ldr	r0, [r7, #12]
 8016382:	371c      	adds	r7, #28
 8016384:	46bd      	mov	sp, r7
 8016386:	bc80      	pop	{r7}
 8016388:	b002      	add	sp, #8
 801638a:	4770      	bx	lr

0801638c <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801638c:	b082      	sub	sp, #8
 801638e:	b480      	push	{r7}
 8016390:	b087      	sub	sp, #28
 8016392:	af00      	add	r7, sp, #0
 8016394:	60f8      	str	r0, [r7, #12]
 8016396:	1d38      	adds	r0, r7, #4
 8016398:	e880 0006 	stmia.w	r0, {r1, r2}
 801639c:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801639e:	2300      	movs	r3, #0
 80163a0:	613b      	str	r3, [r7, #16]
 80163a2:	2300      	movs	r3, #0
 80163a4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 80163a6:	687a      	ldr	r2, [r7, #4]
 80163a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163aa:	1ad3      	subs	r3, r2, r3
 80163ac:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80163ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80163b2:	b29a      	uxth	r2, r3
 80163b4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80163b8:	b29b      	uxth	r3, r3
 80163ba:	1ad3      	subs	r3, r2, r3
 80163bc:	b29b      	uxth	r3, r3
 80163be:	b21b      	sxth	r3, r3
 80163c0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 80163c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	da0a      	bge.n	80163e0 <SysTimeSub+0x54>
  {
    c.Seconds--;
 80163ca:	693b      	ldr	r3, [r7, #16]
 80163cc:	3b01      	subs	r3, #1
 80163ce:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 80163d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80163d4:	b29b      	uxth	r3, r3
 80163d6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80163da:	b29b      	uxth	r3, r3
 80163dc:	b21b      	sxth	r3, r3
 80163de:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	461a      	mov	r2, r3
 80163e4:	f107 0310 	add.w	r3, r7, #16
 80163e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80163ec:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80163f0:	68f8      	ldr	r0, [r7, #12]
 80163f2:	371c      	adds	r7, #28
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bc80      	pop	{r7}
 80163f8:	b002      	add	sp, #8
 80163fa:	4770      	bx	lr

080163fc <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b088      	sub	sp, #32
 8016400:	af02      	add	r7, sp, #8
 8016402:	463b      	mov	r3, r7
 8016404:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8016408:	2300      	movs	r3, #0
 801640a:	60bb      	str	r3, [r7, #8]
 801640c:	2300      	movs	r3, #0
 801640e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8016410:	4b10      	ldr	r3, [pc, #64]	; (8016454 <SysTimeSet+0x58>)
 8016412:	691b      	ldr	r3, [r3, #16]
 8016414:	f107 0208 	add.w	r2, r7, #8
 8016418:	3204      	adds	r2, #4
 801641a:	4610      	mov	r0, r2
 801641c:	4798      	blx	r3
 801641e:	4603      	mov	r3, r0
 8016420:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8016422:	f107 0010 	add.w	r0, r7, #16
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	9300      	str	r3, [sp, #0]
 801642a:	68bb      	ldr	r3, [r7, #8]
 801642c:	463a      	mov	r2, r7
 801642e:	ca06      	ldmia	r2, {r1, r2}
 8016430:	f7ff ffac 	bl	801638c <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8016434:	4b07      	ldr	r3, [pc, #28]	; (8016454 <SysTimeSet+0x58>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	693a      	ldr	r2, [r7, #16]
 801643a:	4610      	mov	r0, r2
 801643c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801643e:	4b05      	ldr	r3, [pc, #20]	; (8016454 <SysTimeSet+0x58>)
 8016440:	689b      	ldr	r3, [r3, #8]
 8016442:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016446:	4610      	mov	r0, r2
 8016448:	4798      	blx	r3
}
 801644a:	bf00      	nop
 801644c:	3718      	adds	r7, #24
 801644e:	46bd      	mov	sp, r7
 8016450:	bd80      	pop	{r7, pc}
 8016452:	bf00      	nop
 8016454:	08017fd8 	.word	0x08017fd8

08016458 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b08a      	sub	sp, #40	; 0x28
 801645c:	af02      	add	r7, sp, #8
 801645e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8016460:	2300      	movs	r3, #0
 8016462:	61bb      	str	r3, [r7, #24]
 8016464:	2300      	movs	r3, #0
 8016466:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8016468:	2300      	movs	r3, #0
 801646a:	613b      	str	r3, [r7, #16]
 801646c:	2300      	movs	r3, #0
 801646e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8016470:	4b14      	ldr	r3, [pc, #80]	; (80164c4 <SysTimeGet+0x6c>)
 8016472:	691b      	ldr	r3, [r3, #16]
 8016474:	f107 0218 	add.w	r2, r7, #24
 8016478:	3204      	adds	r2, #4
 801647a:	4610      	mov	r0, r2
 801647c:	4798      	blx	r3
 801647e:	4603      	mov	r3, r0
 8016480:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8016482:	4b10      	ldr	r3, [pc, #64]	; (80164c4 <SysTimeGet+0x6c>)
 8016484:	68db      	ldr	r3, [r3, #12]
 8016486:	4798      	blx	r3
 8016488:	4603      	mov	r3, r0
 801648a:	b21b      	sxth	r3, r3
 801648c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801648e:	4b0d      	ldr	r3, [pc, #52]	; (80164c4 <SysTimeGet+0x6c>)
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	4798      	blx	r3
 8016494:	4603      	mov	r3, r0
 8016496:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8016498:	f107 0010 	add.w	r0, r7, #16
 801649c:	69fb      	ldr	r3, [r7, #28]
 801649e:	9300      	str	r3, [sp, #0]
 80164a0:	69bb      	ldr	r3, [r7, #24]
 80164a2:	f107 0208 	add.w	r2, r7, #8
 80164a6:	ca06      	ldmia	r2, {r1, r2}
 80164a8:	f7ff ff37 	bl	801631a <SysTimeAdd>

  return sysTime;
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	461a      	mov	r2, r3
 80164b0:	f107 0310 	add.w	r3, r7, #16
 80164b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80164b8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	3720      	adds	r7, #32
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}
 80164c4:	08017fd8 	.word	0x08017fd8

080164c8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b084      	sub	sp, #16
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80164d0:	2300      	movs	r3, #0
 80164d2:	60bb      	str	r3, [r7, #8]
 80164d4:	2300      	movs	r3, #0
 80164d6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80164d8:	4b0a      	ldr	r3, [pc, #40]	; (8016504 <SysTimeGetMcuTime+0x3c>)
 80164da:	691b      	ldr	r3, [r3, #16]
 80164dc:	f107 0208 	add.w	r2, r7, #8
 80164e0:	3204      	adds	r2, #4
 80164e2:	4610      	mov	r0, r2
 80164e4:	4798      	blx	r3
 80164e6:	4603      	mov	r3, r0
 80164e8:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	461a      	mov	r2, r3
 80164ee:	f107 0308 	add.w	r3, r7, #8
 80164f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80164f6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80164fa:	6878      	ldr	r0, [r7, #4]
 80164fc:	3710      	adds	r7, #16
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}
 8016502:	bf00      	nop
 8016504:	08017fd8 	.word	0x08017fd8

08016508 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b088      	sub	sp, #32
 801650c:	af02      	add	r7, sp, #8
 801650e:	463b      	mov	r3, r7
 8016510:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8016514:	4b0f      	ldr	r3, [pc, #60]	; (8016554 <SysTimeToMs+0x4c>)
 8016516:	68db      	ldr	r3, [r3, #12]
 8016518:	4798      	blx	r3
 801651a:	4603      	mov	r3, r0
 801651c:	b21b      	sxth	r3, r3
 801651e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8016520:	4b0c      	ldr	r3, [pc, #48]	; (8016554 <SysTimeToMs+0x4c>)
 8016522:	685b      	ldr	r3, [r3, #4]
 8016524:	4798      	blx	r3
 8016526:	4603      	mov	r3, r0
 8016528:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801652a:	f107 0008 	add.w	r0, r7, #8
 801652e:	697b      	ldr	r3, [r7, #20]
 8016530:	9300      	str	r3, [sp, #0]
 8016532:	693b      	ldr	r3, [r7, #16]
 8016534:	463a      	mov	r2, r7
 8016536:	ca06      	ldmia	r2, {r1, r2}
 8016538:	f7ff ff28 	bl	801638c <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801653c:	68bb      	ldr	r3, [r7, #8]
 801653e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016542:	fb02 f303 	mul.w	r3, r2, r3
 8016546:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801654a:	4413      	add	r3, r2
}
 801654c:	4618      	mov	r0, r3
 801654e:	3718      	adds	r7, #24
 8016550:	46bd      	mov	sp, r7
 8016552:	bd80      	pop	{r7, pc}
 8016554:	08017fd8 	.word	0x08017fd8

08016558 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b08a      	sub	sp, #40	; 0x28
 801655c:	af02      	add	r7, sp, #8
 801655e:	6078      	str	r0, [r7, #4]
 8016560:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	4a19      	ldr	r2, [pc, #100]	; (80165cc <SysTimeFromMs+0x74>)
 8016566:	fba2 2303 	umull	r2, r3, r2, r3
 801656a:	099b      	lsrs	r3, r3, #6
 801656c:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801656e:	69fb      	ldr	r3, [r7, #28]
 8016570:	617b      	str	r3, [r7, #20]
 8016572:	683b      	ldr	r3, [r7, #0]
 8016574:	b29a      	uxth	r2, r3
 8016576:	69fb      	ldr	r3, [r7, #28]
 8016578:	b29b      	uxth	r3, r3
 801657a:	4619      	mov	r1, r3
 801657c:	0149      	lsls	r1, r1, #5
 801657e:	1ac9      	subs	r1, r1, r3
 8016580:	0089      	lsls	r1, r1, #2
 8016582:	440b      	add	r3, r1
 8016584:	00db      	lsls	r3, r3, #3
 8016586:	b29b      	uxth	r3, r3
 8016588:	1ad3      	subs	r3, r2, r3
 801658a:	b29b      	uxth	r3, r3
 801658c:	b21b      	sxth	r3, r3
 801658e:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8016590:	f107 030c 	add.w	r3, r7, #12
 8016594:	2200      	movs	r2, #0
 8016596:	601a      	str	r2, [r3, #0]
 8016598:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801659a:	4b0d      	ldr	r3, [pc, #52]	; (80165d0 <SysTimeFromMs+0x78>)
 801659c:	68db      	ldr	r3, [r3, #12]
 801659e:	4798      	blx	r3
 80165a0:	4603      	mov	r3, r0
 80165a2:	b21b      	sxth	r3, r3
 80165a4:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80165a6:	4b0a      	ldr	r3, [pc, #40]	; (80165d0 <SysTimeFromMs+0x78>)
 80165a8:	685b      	ldr	r3, [r3, #4]
 80165aa:	4798      	blx	r3
 80165ac:	4603      	mov	r3, r0
 80165ae:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 80165b0:	6878      	ldr	r0, [r7, #4]
 80165b2:	693b      	ldr	r3, [r7, #16]
 80165b4:	9300      	str	r3, [sp, #0]
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	f107 0214 	add.w	r2, r7, #20
 80165bc:	ca06      	ldmia	r2, {r1, r2}
 80165be:	f7ff feac 	bl	801631a <SysTimeAdd>
}
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	3720      	adds	r7, #32
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}
 80165ca:	bf00      	nop
 80165cc:	10624dd3 	.word	0x10624dd3
 80165d0:	08017fd8 	.word	0x08017fd8

080165d4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b084      	sub	sp, #16
 80165d8:	af00      	add	r7, sp, #0
 80165da:	60f8      	str	r0, [r7, #12]
 80165dc:	60b9      	str	r1, [r7, #8]
 80165de:	603b      	str	r3, [r7, #0]
 80165e0:	4613      	mov	r3, r2
 80165e2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d023      	beq.n	8016632 <UTIL_TIMER_Create+0x5e>
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d020      	beq.n	8016632 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	2200      	movs	r2, #0
 80165f4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80165f6:	4b11      	ldr	r3, [pc, #68]	; (801663c <UTIL_TIMER_Create+0x68>)
 80165f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165fa:	68b8      	ldr	r0, [r7, #8]
 80165fc:	4798      	blx	r3
 80165fe:	4602      	mov	r2, r0
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	2200      	movs	r2, #0
 8016608:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	2200      	movs	r2, #0
 801660e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	2200      	movs	r2, #0
 8016614:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	683a      	ldr	r2, [r7, #0]
 801661a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	69ba      	ldr	r2, [r7, #24]
 8016620:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	79fa      	ldrb	r2, [r7, #7]
 8016626:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	2200      	movs	r2, #0
 801662c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801662e:	2300      	movs	r3, #0
 8016630:	e000      	b.n	8016634 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8016632:	2301      	movs	r3, #1
  }
}
 8016634:	4618      	mov	r0, r3
 8016636:	3710      	adds	r7, #16
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}
 801663c:	08017fac 	.word	0x08017fac

08016640 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b08a      	sub	sp, #40	; 0x28
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8016648:	2300      	movs	r3, #0
 801664a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d056      	beq.n	8016702 <UTIL_TIMER_Start+0xc2>
 8016654:	6878      	ldr	r0, [r7, #4]
 8016656:	f000 f929 	bl	80168ac <TimerExists>
 801665a:	4603      	mov	r3, r0
 801665c:	f083 0301 	eor.w	r3, r3, #1
 8016660:	b2db      	uxtb	r3, r3
 8016662:	2b00      	cmp	r3, #0
 8016664:	d04d      	beq.n	8016702 <UTIL_TIMER_Start+0xc2>
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	7a5b      	ldrb	r3, [r3, #9]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d149      	bne.n	8016702 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801666e:	f3ef 8310 	mrs	r3, PRIMASK
 8016672:	613b      	str	r3, [r7, #16]
  return(result);
 8016674:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8016676:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8016678:	b672      	cpsid	i
}
 801667a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	685b      	ldr	r3, [r3, #4]
 8016680:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8016682:	4b24      	ldr	r3, [pc, #144]	; (8016714 <UTIL_TIMER_Start+0xd4>)
 8016684:	6a1b      	ldr	r3, [r3, #32]
 8016686:	4798      	blx	r3
 8016688:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801668a:	6a3a      	ldr	r2, [r7, #32]
 801668c:	69bb      	ldr	r3, [r7, #24]
 801668e:	429a      	cmp	r2, r3
 8016690:	d201      	bcs.n	8016696 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8016692:	69bb      	ldr	r3, [r7, #24]
 8016694:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	6a3a      	ldr	r2, [r7, #32]
 801669a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	2200      	movs	r2, #0
 80166a0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2201      	movs	r2, #1
 80166a6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	2200      	movs	r2, #0
 80166ac:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 80166ae:	4b1a      	ldr	r3, [pc, #104]	; (8016718 <UTIL_TIMER_Start+0xd8>)
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d106      	bne.n	80166c4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 80166b6:	4b17      	ldr	r3, [pc, #92]	; (8016714 <UTIL_TIMER_Start+0xd4>)
 80166b8:	691b      	ldr	r3, [r3, #16]
 80166ba:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80166bc:	6878      	ldr	r0, [r7, #4]
 80166be:	f000 f96b 	bl	8016998 <TimerInsertNewHeadTimer>
 80166c2:	e017      	b.n	80166f4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80166c4:	4b13      	ldr	r3, [pc, #76]	; (8016714 <UTIL_TIMER_Start+0xd4>)
 80166c6:	699b      	ldr	r3, [r3, #24]
 80166c8:	4798      	blx	r3
 80166ca:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	681a      	ldr	r2, [r3, #0]
 80166d0:	697b      	ldr	r3, [r7, #20]
 80166d2:	441a      	add	r2, r3
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	681a      	ldr	r2, [r3, #0]
 80166dc:	4b0e      	ldr	r3, [pc, #56]	; (8016718 <UTIL_TIMER_Start+0xd8>)
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	429a      	cmp	r2, r3
 80166e4:	d203      	bcs.n	80166ee <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 80166e6:	6878      	ldr	r0, [r7, #4]
 80166e8:	f000 f956 	bl	8016998 <TimerInsertNewHeadTimer>
 80166ec:	e002      	b.n	80166f4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 80166ee:	6878      	ldr	r0, [r7, #4]
 80166f0:	f000 f922 	bl	8016938 <TimerInsertTimer>
 80166f4:	69fb      	ldr	r3, [r7, #28]
 80166f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	f383 8810 	msr	PRIMASK, r3
}
 80166fe:	bf00      	nop
  {
 8016700:	e002      	b.n	8016708 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8016702:	2301      	movs	r3, #1
 8016704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8016708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801670c:	4618      	mov	r0, r3
 801670e:	3728      	adds	r7, #40	; 0x28
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}
 8016714:	08017fac 	.word	0x08017fac
 8016718:	2000107c 	.word	0x2000107c

0801671c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b088      	sub	sp, #32
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8016724:	2300      	movs	r3, #0
 8016726:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d05b      	beq.n	80167e6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801672e:	f3ef 8310 	mrs	r3, PRIMASK
 8016732:	60fb      	str	r3, [r7, #12]
  return(result);
 8016734:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8016736:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016738:	b672      	cpsid	i
}
 801673a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801673c:	4b2d      	ldr	r3, [pc, #180]	; (80167f4 <UTIL_TIMER_Stop+0xd8>)
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8016742:	4b2c      	ldr	r3, [pc, #176]	; (80167f4 <UTIL_TIMER_Stop+0xd8>)
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	2201      	movs	r2, #1
 801674c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801674e:	4b29      	ldr	r3, [pc, #164]	; (80167f4 <UTIL_TIMER_Stop+0xd8>)
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d041      	beq.n	80167da <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	2200      	movs	r2, #0
 801675a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801675c:	4b25      	ldr	r3, [pc, #148]	; (80167f4 <UTIL_TIMER_Stop+0xd8>)
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	687a      	ldr	r2, [r7, #4]
 8016762:	429a      	cmp	r2, r3
 8016764:	d134      	bne.n	80167d0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8016766:	4b23      	ldr	r3, [pc, #140]	; (80167f4 <UTIL_TIMER_Stop+0xd8>)
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	2200      	movs	r2, #0
 801676c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801676e:	4b21      	ldr	r3, [pc, #132]	; (80167f4 <UTIL_TIMER_Stop+0xd8>)
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	695b      	ldr	r3, [r3, #20]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d00a      	beq.n	801678e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8016778:	4b1e      	ldr	r3, [pc, #120]	; (80167f4 <UTIL_TIMER_Stop+0xd8>)
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	695b      	ldr	r3, [r3, #20]
 801677e:	4a1d      	ldr	r2, [pc, #116]	; (80167f4 <UTIL_TIMER_Stop+0xd8>)
 8016780:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8016782:	4b1c      	ldr	r3, [pc, #112]	; (80167f4 <UTIL_TIMER_Stop+0xd8>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	4618      	mov	r0, r3
 8016788:	f000 f8ac 	bl	80168e4 <TimerSetTimeout>
 801678c:	e023      	b.n	80167d6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801678e:	4b1a      	ldr	r3, [pc, #104]	; (80167f8 <UTIL_TIMER_Stop+0xdc>)
 8016790:	68db      	ldr	r3, [r3, #12]
 8016792:	4798      	blx	r3
            TimerListHead = NULL;
 8016794:	4b17      	ldr	r3, [pc, #92]	; (80167f4 <UTIL_TIMER_Stop+0xd8>)
 8016796:	2200      	movs	r2, #0
 8016798:	601a      	str	r2, [r3, #0]
 801679a:	e01c      	b.n	80167d6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801679c:	697a      	ldr	r2, [r7, #20]
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d110      	bne.n	80167c6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 80167a4:	697b      	ldr	r3, [r7, #20]
 80167a6:	695b      	ldr	r3, [r3, #20]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d006      	beq.n	80167ba <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 80167ac:	697b      	ldr	r3, [r7, #20]
 80167ae:	695b      	ldr	r3, [r3, #20]
 80167b0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80167b2:	69bb      	ldr	r3, [r7, #24]
 80167b4:	697a      	ldr	r2, [r7, #20]
 80167b6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 80167b8:	e00d      	b.n	80167d6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 80167ba:	2300      	movs	r3, #0
 80167bc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80167be:	69bb      	ldr	r3, [r7, #24]
 80167c0:	697a      	ldr	r2, [r7, #20]
 80167c2:	615a      	str	r2, [r3, #20]
            break;
 80167c4:	e007      	b.n	80167d6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 80167c6:	697b      	ldr	r3, [r7, #20]
 80167c8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 80167ca:	697b      	ldr	r3, [r7, #20]
 80167cc:	695b      	ldr	r3, [r3, #20]
 80167ce:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 80167d0:	697b      	ldr	r3, [r7, #20]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d1e2      	bne.n	801679c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 80167d6:	2300      	movs	r3, #0
 80167d8:	77fb      	strb	r3, [r7, #31]
 80167da:	693b      	ldr	r3, [r7, #16]
 80167dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167de:	68bb      	ldr	r3, [r7, #8]
 80167e0:	f383 8810 	msr	PRIMASK, r3
}
 80167e4:	e001      	b.n	80167ea <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 80167e6:	2301      	movs	r3, #1
 80167e8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 80167ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80167ec:	4618      	mov	r0, r3
 80167ee:	3720      	adds	r7, #32
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd80      	pop	{r7, pc}
 80167f4:	2000107c 	.word	0x2000107c
 80167f8:	08017fac 	.word	0x08017fac

080167fc <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b084      	sub	sp, #16
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
 8016804:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8016806:	2300      	movs	r3, #0
 8016808:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d102      	bne.n	8016816 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8016810:	2301      	movs	r3, #1
 8016812:	73fb      	strb	r3, [r7, #15]
 8016814:	e014      	b.n	8016840 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8016816:	4b0d      	ldr	r3, [pc, #52]	; (801684c <UTIL_TIMER_SetPeriod+0x50>)
 8016818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801681a:	6838      	ldr	r0, [r7, #0]
 801681c:	4798      	blx	r3
 801681e:	4602      	mov	r2, r0
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8016824:	6878      	ldr	r0, [r7, #4]
 8016826:	f000 f841 	bl	80168ac <TimerExists>
 801682a:	4603      	mov	r3, r0
 801682c:	2b00      	cmp	r3, #0
 801682e:	d007      	beq.n	8016840 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8016830:	6878      	ldr	r0, [r7, #4]
 8016832:	f7ff ff73 	bl	801671c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	f7ff ff02 	bl	8016640 <UTIL_TIMER_Start>
 801683c:	4603      	mov	r3, r0
 801683e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8016840:	7bfb      	ldrb	r3, [r7, #15]
}
 8016842:	4618      	mov	r0, r3
 8016844:	3710      	adds	r7, #16
 8016846:	46bd      	mov	sp, r7
 8016848:	bd80      	pop	{r7, pc}
 801684a:	bf00      	nop
 801684c:	08017fac 	.word	0x08017fac

08016850 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8016856:	4b06      	ldr	r3, [pc, #24]	; (8016870 <UTIL_TIMER_GetCurrentTime+0x20>)
 8016858:	69db      	ldr	r3, [r3, #28]
 801685a:	4798      	blx	r3
 801685c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801685e:	4b04      	ldr	r3, [pc, #16]	; (8016870 <UTIL_TIMER_GetCurrentTime+0x20>)
 8016860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016862:	6878      	ldr	r0, [r7, #4]
 8016864:	4798      	blx	r3
 8016866:	4603      	mov	r3, r0
}
 8016868:	4618      	mov	r0, r3
 801686a:	3708      	adds	r7, #8
 801686c:	46bd      	mov	sp, r7
 801686e:	bd80      	pop	{r7, pc}
 8016870:	08017fac 	.word	0x08017fac

08016874 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b084      	sub	sp, #16
 8016878:	af00      	add	r7, sp, #0
 801687a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801687c:	4b0a      	ldr	r3, [pc, #40]	; (80168a8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801687e:	69db      	ldr	r3, [r3, #28]
 8016880:	4798      	blx	r3
 8016882:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8016884:	4b08      	ldr	r3, [pc, #32]	; (80168a8 <UTIL_TIMER_GetElapsedTime+0x34>)
 8016886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016888:	6878      	ldr	r0, [r7, #4]
 801688a:	4798      	blx	r3
 801688c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801688e:	4b06      	ldr	r3, [pc, #24]	; (80168a8 <UTIL_TIMER_GetElapsedTime+0x34>)
 8016890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016892:	68f9      	ldr	r1, [r7, #12]
 8016894:	68ba      	ldr	r2, [r7, #8]
 8016896:	1a8a      	subs	r2, r1, r2
 8016898:	4610      	mov	r0, r2
 801689a:	4798      	blx	r3
 801689c:	4603      	mov	r3, r0
}
 801689e:	4618      	mov	r0, r3
 80168a0:	3710      	adds	r7, #16
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	08017fac 	.word	0x08017fac

080168ac <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 80168ac:	b480      	push	{r7}
 80168ae:	b085      	sub	sp, #20
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80168b4:	4b0a      	ldr	r3, [pc, #40]	; (80168e0 <TimerExists+0x34>)
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 80168ba:	e008      	b.n	80168ce <TimerExists+0x22>
  {
    if( cur == TimerObject )
 80168bc:	68fa      	ldr	r2, [r7, #12]
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	429a      	cmp	r2, r3
 80168c2:	d101      	bne.n	80168c8 <TimerExists+0x1c>
    {
      return true;
 80168c4:	2301      	movs	r3, #1
 80168c6:	e006      	b.n	80168d6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	695b      	ldr	r3, [r3, #20]
 80168cc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d1f3      	bne.n	80168bc <TimerExists+0x10>
  }
  return false;
 80168d4:	2300      	movs	r3, #0
}
 80168d6:	4618      	mov	r0, r3
 80168d8:	3714      	adds	r7, #20
 80168da:	46bd      	mov	sp, r7
 80168dc:	bc80      	pop	{r7}
 80168de:	4770      	bx	lr
 80168e0:	2000107c 	.word	0x2000107c

080168e4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80168e4:	b590      	push	{r4, r7, lr}
 80168e6:	b085      	sub	sp, #20
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80168ec:	4b11      	ldr	r3, [pc, #68]	; (8016934 <TimerSetTimeout+0x50>)
 80168ee:	6a1b      	ldr	r3, [r3, #32]
 80168f0:	4798      	blx	r3
 80168f2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2201      	movs	r2, #1
 80168f8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	681c      	ldr	r4, [r3, #0]
 80168fe:	4b0d      	ldr	r3, [pc, #52]	; (8016934 <TimerSetTimeout+0x50>)
 8016900:	699b      	ldr	r3, [r3, #24]
 8016902:	4798      	blx	r3
 8016904:	4602      	mov	r2, r0
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	4413      	add	r3, r2
 801690a:	429c      	cmp	r4, r3
 801690c:	d207      	bcs.n	801691e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801690e:	4b09      	ldr	r3, [pc, #36]	; (8016934 <TimerSetTimeout+0x50>)
 8016910:	699b      	ldr	r3, [r3, #24]
 8016912:	4798      	blx	r3
 8016914:	4602      	mov	r2, r0
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	441a      	add	r2, r3
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801691e:	4b05      	ldr	r3, [pc, #20]	; (8016934 <TimerSetTimeout+0x50>)
 8016920:	689b      	ldr	r3, [r3, #8]
 8016922:	687a      	ldr	r2, [r7, #4]
 8016924:	6812      	ldr	r2, [r2, #0]
 8016926:	4610      	mov	r0, r2
 8016928:	4798      	blx	r3
}
 801692a:	bf00      	nop
 801692c:	3714      	adds	r7, #20
 801692e:	46bd      	mov	sp, r7
 8016930:	bd90      	pop	{r4, r7, pc}
 8016932:	bf00      	nop
 8016934:	08017fac 	.word	0x08017fac

08016938 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8016938:	b480      	push	{r7}
 801693a:	b085      	sub	sp, #20
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8016940:	4b14      	ldr	r3, [pc, #80]	; (8016994 <TimerInsertTimer+0x5c>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8016946:	4b13      	ldr	r3, [pc, #76]	; (8016994 <TimerInsertTimer+0x5c>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	695b      	ldr	r3, [r3, #20]
 801694c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801694e:	e012      	b.n	8016976 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	681a      	ldr	r2, [r3, #0]
 8016954:	68bb      	ldr	r3, [r7, #8]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	429a      	cmp	r2, r3
 801695a:	d905      	bls.n	8016968 <TimerInsertTimer+0x30>
    {
        cur = next;
 801695c:	68bb      	ldr	r3, [r7, #8]
 801695e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8016960:	68bb      	ldr	r3, [r7, #8]
 8016962:	695b      	ldr	r3, [r3, #20]
 8016964:	60bb      	str	r3, [r7, #8]
 8016966:	e006      	b.n	8016976 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	687a      	ldr	r2, [r7, #4]
 801696c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	68ba      	ldr	r2, [r7, #8]
 8016972:	615a      	str	r2, [r3, #20]
        return;
 8016974:	e009      	b.n	801698a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	695b      	ldr	r3, [r3, #20]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d1e8      	bne.n	8016950 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	687a      	ldr	r2, [r7, #4]
 8016982:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2200      	movs	r2, #0
 8016988:	615a      	str	r2, [r3, #20]
}
 801698a:	3714      	adds	r7, #20
 801698c:	46bd      	mov	sp, r7
 801698e:	bc80      	pop	{r7}
 8016990:	4770      	bx	lr
 8016992:	bf00      	nop
 8016994:	2000107c 	.word	0x2000107c

08016998 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b084      	sub	sp, #16
 801699c:	af00      	add	r7, sp, #0
 801699e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80169a0:	4b0b      	ldr	r3, [pc, #44]	; (80169d0 <TimerInsertNewHeadTimer+0x38>)
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d002      	beq.n	80169b2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	2200      	movs	r2, #0
 80169b0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	68fa      	ldr	r2, [r7, #12]
 80169b6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 80169b8:	4a05      	ldr	r2, [pc, #20]	; (80169d0 <TimerInsertNewHeadTimer+0x38>)
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 80169be:	4b04      	ldr	r3, [pc, #16]	; (80169d0 <TimerInsertNewHeadTimer+0x38>)
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	4618      	mov	r0, r3
 80169c4:	f7ff ff8e 	bl	80168e4 <TimerSetTimeout>
}
 80169c8:	bf00      	nop
 80169ca:	3710      	adds	r7, #16
 80169cc:	46bd      	mov	sp, r7
 80169ce:	bd80      	pop	{r7, pc}
 80169d0:	2000107c 	.word	0x2000107c

080169d4 <__errno>:
 80169d4:	4b01      	ldr	r3, [pc, #4]	; (80169dc <__errno+0x8>)
 80169d6:	6818      	ldr	r0, [r3, #0]
 80169d8:	4770      	bx	lr
 80169da:	bf00      	nop
 80169dc:	200000f0 	.word	0x200000f0

080169e0 <__libc_init_array>:
 80169e0:	b570      	push	{r4, r5, r6, lr}
 80169e2:	4d0d      	ldr	r5, [pc, #52]	; (8016a18 <__libc_init_array+0x38>)
 80169e4:	4c0d      	ldr	r4, [pc, #52]	; (8016a1c <__libc_init_array+0x3c>)
 80169e6:	1b64      	subs	r4, r4, r5
 80169e8:	10a4      	asrs	r4, r4, #2
 80169ea:	2600      	movs	r6, #0
 80169ec:	42a6      	cmp	r6, r4
 80169ee:	d109      	bne.n	8016a04 <__libc_init_array+0x24>
 80169f0:	4d0b      	ldr	r5, [pc, #44]	; (8016a20 <__libc_init_array+0x40>)
 80169f2:	4c0c      	ldr	r4, [pc, #48]	; (8016a24 <__libc_init_array+0x44>)
 80169f4:	f001 f868 	bl	8017ac8 <_init>
 80169f8:	1b64      	subs	r4, r4, r5
 80169fa:	10a4      	asrs	r4, r4, #2
 80169fc:	2600      	movs	r6, #0
 80169fe:	42a6      	cmp	r6, r4
 8016a00:	d105      	bne.n	8016a0e <__libc_init_array+0x2e>
 8016a02:	bd70      	pop	{r4, r5, r6, pc}
 8016a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a08:	4798      	blx	r3
 8016a0a:	3601      	adds	r6, #1
 8016a0c:	e7ee      	b.n	80169ec <__libc_init_array+0xc>
 8016a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a12:	4798      	blx	r3
 8016a14:	3601      	adds	r6, #1
 8016a16:	e7f2      	b.n	80169fe <__libc_init_array+0x1e>
 8016a18:	080185b8 	.word	0x080185b8
 8016a1c:	080185b8 	.word	0x080185b8
 8016a20:	080185b8 	.word	0x080185b8
 8016a24:	080185bc 	.word	0x080185bc

08016a28 <memset>:
 8016a28:	4402      	add	r2, r0
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	4293      	cmp	r3, r2
 8016a2e:	d100      	bne.n	8016a32 <memset+0xa>
 8016a30:	4770      	bx	lr
 8016a32:	f803 1b01 	strb.w	r1, [r3], #1
 8016a36:	e7f9      	b.n	8016a2c <memset+0x4>

08016a38 <iprintf>:
 8016a38:	b40f      	push	{r0, r1, r2, r3}
 8016a3a:	4b0a      	ldr	r3, [pc, #40]	; (8016a64 <iprintf+0x2c>)
 8016a3c:	b513      	push	{r0, r1, r4, lr}
 8016a3e:	681c      	ldr	r4, [r3, #0]
 8016a40:	b124      	cbz	r4, 8016a4c <iprintf+0x14>
 8016a42:	69a3      	ldr	r3, [r4, #24]
 8016a44:	b913      	cbnz	r3, 8016a4c <iprintf+0x14>
 8016a46:	4620      	mov	r0, r4
 8016a48:	f000 fa5e 	bl	8016f08 <__sinit>
 8016a4c:	ab05      	add	r3, sp, #20
 8016a4e:	9a04      	ldr	r2, [sp, #16]
 8016a50:	68a1      	ldr	r1, [r4, #8]
 8016a52:	9301      	str	r3, [sp, #4]
 8016a54:	4620      	mov	r0, r4
 8016a56:	f000 fc2b 	bl	80172b0 <_vfiprintf_r>
 8016a5a:	b002      	add	sp, #8
 8016a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a60:	b004      	add	sp, #16
 8016a62:	4770      	bx	lr
 8016a64:	200000f0 	.word	0x200000f0

08016a68 <_puts_r>:
 8016a68:	b570      	push	{r4, r5, r6, lr}
 8016a6a:	460e      	mov	r6, r1
 8016a6c:	4605      	mov	r5, r0
 8016a6e:	b118      	cbz	r0, 8016a78 <_puts_r+0x10>
 8016a70:	6983      	ldr	r3, [r0, #24]
 8016a72:	b90b      	cbnz	r3, 8016a78 <_puts_r+0x10>
 8016a74:	f000 fa48 	bl	8016f08 <__sinit>
 8016a78:	69ab      	ldr	r3, [r5, #24]
 8016a7a:	68ac      	ldr	r4, [r5, #8]
 8016a7c:	b913      	cbnz	r3, 8016a84 <_puts_r+0x1c>
 8016a7e:	4628      	mov	r0, r5
 8016a80:	f000 fa42 	bl	8016f08 <__sinit>
 8016a84:	4b2c      	ldr	r3, [pc, #176]	; (8016b38 <_puts_r+0xd0>)
 8016a86:	429c      	cmp	r4, r3
 8016a88:	d120      	bne.n	8016acc <_puts_r+0x64>
 8016a8a:	686c      	ldr	r4, [r5, #4]
 8016a8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016a8e:	07db      	lsls	r3, r3, #31
 8016a90:	d405      	bmi.n	8016a9e <_puts_r+0x36>
 8016a92:	89a3      	ldrh	r3, [r4, #12]
 8016a94:	0598      	lsls	r0, r3, #22
 8016a96:	d402      	bmi.n	8016a9e <_puts_r+0x36>
 8016a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a9a:	f000 fad3 	bl	8017044 <__retarget_lock_acquire_recursive>
 8016a9e:	89a3      	ldrh	r3, [r4, #12]
 8016aa0:	0719      	lsls	r1, r3, #28
 8016aa2:	d51d      	bpl.n	8016ae0 <_puts_r+0x78>
 8016aa4:	6923      	ldr	r3, [r4, #16]
 8016aa6:	b1db      	cbz	r3, 8016ae0 <_puts_r+0x78>
 8016aa8:	3e01      	subs	r6, #1
 8016aaa:	68a3      	ldr	r3, [r4, #8]
 8016aac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016ab0:	3b01      	subs	r3, #1
 8016ab2:	60a3      	str	r3, [r4, #8]
 8016ab4:	bb39      	cbnz	r1, 8016b06 <_puts_r+0x9e>
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	da38      	bge.n	8016b2c <_puts_r+0xc4>
 8016aba:	4622      	mov	r2, r4
 8016abc:	210a      	movs	r1, #10
 8016abe:	4628      	mov	r0, r5
 8016ac0:	f000 f848 	bl	8016b54 <__swbuf_r>
 8016ac4:	3001      	adds	r0, #1
 8016ac6:	d011      	beq.n	8016aec <_puts_r+0x84>
 8016ac8:	250a      	movs	r5, #10
 8016aca:	e011      	b.n	8016af0 <_puts_r+0x88>
 8016acc:	4b1b      	ldr	r3, [pc, #108]	; (8016b3c <_puts_r+0xd4>)
 8016ace:	429c      	cmp	r4, r3
 8016ad0:	d101      	bne.n	8016ad6 <_puts_r+0x6e>
 8016ad2:	68ac      	ldr	r4, [r5, #8]
 8016ad4:	e7da      	b.n	8016a8c <_puts_r+0x24>
 8016ad6:	4b1a      	ldr	r3, [pc, #104]	; (8016b40 <_puts_r+0xd8>)
 8016ad8:	429c      	cmp	r4, r3
 8016ada:	bf08      	it	eq
 8016adc:	68ec      	ldreq	r4, [r5, #12]
 8016ade:	e7d5      	b.n	8016a8c <_puts_r+0x24>
 8016ae0:	4621      	mov	r1, r4
 8016ae2:	4628      	mov	r0, r5
 8016ae4:	f000 f888 	bl	8016bf8 <__swsetup_r>
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	d0dd      	beq.n	8016aa8 <_puts_r+0x40>
 8016aec:	f04f 35ff 	mov.w	r5, #4294967295
 8016af0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016af2:	07da      	lsls	r2, r3, #31
 8016af4:	d405      	bmi.n	8016b02 <_puts_r+0x9a>
 8016af6:	89a3      	ldrh	r3, [r4, #12]
 8016af8:	059b      	lsls	r3, r3, #22
 8016afa:	d402      	bmi.n	8016b02 <_puts_r+0x9a>
 8016afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016afe:	f000 faa2 	bl	8017046 <__retarget_lock_release_recursive>
 8016b02:	4628      	mov	r0, r5
 8016b04:	bd70      	pop	{r4, r5, r6, pc}
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	da04      	bge.n	8016b14 <_puts_r+0xac>
 8016b0a:	69a2      	ldr	r2, [r4, #24]
 8016b0c:	429a      	cmp	r2, r3
 8016b0e:	dc06      	bgt.n	8016b1e <_puts_r+0xb6>
 8016b10:	290a      	cmp	r1, #10
 8016b12:	d004      	beq.n	8016b1e <_puts_r+0xb6>
 8016b14:	6823      	ldr	r3, [r4, #0]
 8016b16:	1c5a      	adds	r2, r3, #1
 8016b18:	6022      	str	r2, [r4, #0]
 8016b1a:	7019      	strb	r1, [r3, #0]
 8016b1c:	e7c5      	b.n	8016aaa <_puts_r+0x42>
 8016b1e:	4622      	mov	r2, r4
 8016b20:	4628      	mov	r0, r5
 8016b22:	f000 f817 	bl	8016b54 <__swbuf_r>
 8016b26:	3001      	adds	r0, #1
 8016b28:	d1bf      	bne.n	8016aaa <_puts_r+0x42>
 8016b2a:	e7df      	b.n	8016aec <_puts_r+0x84>
 8016b2c:	6823      	ldr	r3, [r4, #0]
 8016b2e:	250a      	movs	r5, #10
 8016b30:	1c5a      	adds	r2, r3, #1
 8016b32:	6022      	str	r2, [r4, #0]
 8016b34:	701d      	strb	r5, [r3, #0]
 8016b36:	e7db      	b.n	8016af0 <_puts_r+0x88>
 8016b38:	0801853c 	.word	0x0801853c
 8016b3c:	0801855c 	.word	0x0801855c
 8016b40:	0801851c 	.word	0x0801851c

08016b44 <puts>:
 8016b44:	4b02      	ldr	r3, [pc, #8]	; (8016b50 <puts+0xc>)
 8016b46:	4601      	mov	r1, r0
 8016b48:	6818      	ldr	r0, [r3, #0]
 8016b4a:	f7ff bf8d 	b.w	8016a68 <_puts_r>
 8016b4e:	bf00      	nop
 8016b50:	200000f0 	.word	0x200000f0

08016b54 <__swbuf_r>:
 8016b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b56:	460e      	mov	r6, r1
 8016b58:	4614      	mov	r4, r2
 8016b5a:	4605      	mov	r5, r0
 8016b5c:	b118      	cbz	r0, 8016b66 <__swbuf_r+0x12>
 8016b5e:	6983      	ldr	r3, [r0, #24]
 8016b60:	b90b      	cbnz	r3, 8016b66 <__swbuf_r+0x12>
 8016b62:	f000 f9d1 	bl	8016f08 <__sinit>
 8016b66:	4b21      	ldr	r3, [pc, #132]	; (8016bec <__swbuf_r+0x98>)
 8016b68:	429c      	cmp	r4, r3
 8016b6a:	d12b      	bne.n	8016bc4 <__swbuf_r+0x70>
 8016b6c:	686c      	ldr	r4, [r5, #4]
 8016b6e:	69a3      	ldr	r3, [r4, #24]
 8016b70:	60a3      	str	r3, [r4, #8]
 8016b72:	89a3      	ldrh	r3, [r4, #12]
 8016b74:	071a      	lsls	r2, r3, #28
 8016b76:	d52f      	bpl.n	8016bd8 <__swbuf_r+0x84>
 8016b78:	6923      	ldr	r3, [r4, #16]
 8016b7a:	b36b      	cbz	r3, 8016bd8 <__swbuf_r+0x84>
 8016b7c:	6923      	ldr	r3, [r4, #16]
 8016b7e:	6820      	ldr	r0, [r4, #0]
 8016b80:	1ac0      	subs	r0, r0, r3
 8016b82:	6963      	ldr	r3, [r4, #20]
 8016b84:	b2f6      	uxtb	r6, r6
 8016b86:	4283      	cmp	r3, r0
 8016b88:	4637      	mov	r7, r6
 8016b8a:	dc04      	bgt.n	8016b96 <__swbuf_r+0x42>
 8016b8c:	4621      	mov	r1, r4
 8016b8e:	4628      	mov	r0, r5
 8016b90:	f000 f926 	bl	8016de0 <_fflush_r>
 8016b94:	bb30      	cbnz	r0, 8016be4 <__swbuf_r+0x90>
 8016b96:	68a3      	ldr	r3, [r4, #8]
 8016b98:	3b01      	subs	r3, #1
 8016b9a:	60a3      	str	r3, [r4, #8]
 8016b9c:	6823      	ldr	r3, [r4, #0]
 8016b9e:	1c5a      	adds	r2, r3, #1
 8016ba0:	6022      	str	r2, [r4, #0]
 8016ba2:	701e      	strb	r6, [r3, #0]
 8016ba4:	6963      	ldr	r3, [r4, #20]
 8016ba6:	3001      	adds	r0, #1
 8016ba8:	4283      	cmp	r3, r0
 8016baa:	d004      	beq.n	8016bb6 <__swbuf_r+0x62>
 8016bac:	89a3      	ldrh	r3, [r4, #12]
 8016bae:	07db      	lsls	r3, r3, #31
 8016bb0:	d506      	bpl.n	8016bc0 <__swbuf_r+0x6c>
 8016bb2:	2e0a      	cmp	r6, #10
 8016bb4:	d104      	bne.n	8016bc0 <__swbuf_r+0x6c>
 8016bb6:	4621      	mov	r1, r4
 8016bb8:	4628      	mov	r0, r5
 8016bba:	f000 f911 	bl	8016de0 <_fflush_r>
 8016bbe:	b988      	cbnz	r0, 8016be4 <__swbuf_r+0x90>
 8016bc0:	4638      	mov	r0, r7
 8016bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bc4:	4b0a      	ldr	r3, [pc, #40]	; (8016bf0 <__swbuf_r+0x9c>)
 8016bc6:	429c      	cmp	r4, r3
 8016bc8:	d101      	bne.n	8016bce <__swbuf_r+0x7a>
 8016bca:	68ac      	ldr	r4, [r5, #8]
 8016bcc:	e7cf      	b.n	8016b6e <__swbuf_r+0x1a>
 8016bce:	4b09      	ldr	r3, [pc, #36]	; (8016bf4 <__swbuf_r+0xa0>)
 8016bd0:	429c      	cmp	r4, r3
 8016bd2:	bf08      	it	eq
 8016bd4:	68ec      	ldreq	r4, [r5, #12]
 8016bd6:	e7ca      	b.n	8016b6e <__swbuf_r+0x1a>
 8016bd8:	4621      	mov	r1, r4
 8016bda:	4628      	mov	r0, r5
 8016bdc:	f000 f80c 	bl	8016bf8 <__swsetup_r>
 8016be0:	2800      	cmp	r0, #0
 8016be2:	d0cb      	beq.n	8016b7c <__swbuf_r+0x28>
 8016be4:	f04f 37ff 	mov.w	r7, #4294967295
 8016be8:	e7ea      	b.n	8016bc0 <__swbuf_r+0x6c>
 8016bea:	bf00      	nop
 8016bec:	0801853c 	.word	0x0801853c
 8016bf0:	0801855c 	.word	0x0801855c
 8016bf4:	0801851c 	.word	0x0801851c

08016bf8 <__swsetup_r>:
 8016bf8:	4b32      	ldr	r3, [pc, #200]	; (8016cc4 <__swsetup_r+0xcc>)
 8016bfa:	b570      	push	{r4, r5, r6, lr}
 8016bfc:	681d      	ldr	r5, [r3, #0]
 8016bfe:	4606      	mov	r6, r0
 8016c00:	460c      	mov	r4, r1
 8016c02:	b125      	cbz	r5, 8016c0e <__swsetup_r+0x16>
 8016c04:	69ab      	ldr	r3, [r5, #24]
 8016c06:	b913      	cbnz	r3, 8016c0e <__swsetup_r+0x16>
 8016c08:	4628      	mov	r0, r5
 8016c0a:	f000 f97d 	bl	8016f08 <__sinit>
 8016c0e:	4b2e      	ldr	r3, [pc, #184]	; (8016cc8 <__swsetup_r+0xd0>)
 8016c10:	429c      	cmp	r4, r3
 8016c12:	d10f      	bne.n	8016c34 <__swsetup_r+0x3c>
 8016c14:	686c      	ldr	r4, [r5, #4]
 8016c16:	89a3      	ldrh	r3, [r4, #12]
 8016c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c1c:	0719      	lsls	r1, r3, #28
 8016c1e:	d42c      	bmi.n	8016c7a <__swsetup_r+0x82>
 8016c20:	06dd      	lsls	r5, r3, #27
 8016c22:	d411      	bmi.n	8016c48 <__swsetup_r+0x50>
 8016c24:	2309      	movs	r3, #9
 8016c26:	6033      	str	r3, [r6, #0]
 8016c28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016c2c:	81a3      	strh	r3, [r4, #12]
 8016c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8016c32:	e03e      	b.n	8016cb2 <__swsetup_r+0xba>
 8016c34:	4b25      	ldr	r3, [pc, #148]	; (8016ccc <__swsetup_r+0xd4>)
 8016c36:	429c      	cmp	r4, r3
 8016c38:	d101      	bne.n	8016c3e <__swsetup_r+0x46>
 8016c3a:	68ac      	ldr	r4, [r5, #8]
 8016c3c:	e7eb      	b.n	8016c16 <__swsetup_r+0x1e>
 8016c3e:	4b24      	ldr	r3, [pc, #144]	; (8016cd0 <__swsetup_r+0xd8>)
 8016c40:	429c      	cmp	r4, r3
 8016c42:	bf08      	it	eq
 8016c44:	68ec      	ldreq	r4, [r5, #12]
 8016c46:	e7e6      	b.n	8016c16 <__swsetup_r+0x1e>
 8016c48:	0758      	lsls	r0, r3, #29
 8016c4a:	d512      	bpl.n	8016c72 <__swsetup_r+0x7a>
 8016c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c4e:	b141      	cbz	r1, 8016c62 <__swsetup_r+0x6a>
 8016c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c54:	4299      	cmp	r1, r3
 8016c56:	d002      	beq.n	8016c5e <__swsetup_r+0x66>
 8016c58:	4630      	mov	r0, r6
 8016c5a:	f000 fa59 	bl	8017110 <_free_r>
 8016c5e:	2300      	movs	r3, #0
 8016c60:	6363      	str	r3, [r4, #52]	; 0x34
 8016c62:	89a3      	ldrh	r3, [r4, #12]
 8016c64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016c68:	81a3      	strh	r3, [r4, #12]
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	6063      	str	r3, [r4, #4]
 8016c6e:	6923      	ldr	r3, [r4, #16]
 8016c70:	6023      	str	r3, [r4, #0]
 8016c72:	89a3      	ldrh	r3, [r4, #12]
 8016c74:	f043 0308 	orr.w	r3, r3, #8
 8016c78:	81a3      	strh	r3, [r4, #12]
 8016c7a:	6923      	ldr	r3, [r4, #16]
 8016c7c:	b94b      	cbnz	r3, 8016c92 <__swsetup_r+0x9a>
 8016c7e:	89a3      	ldrh	r3, [r4, #12]
 8016c80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c88:	d003      	beq.n	8016c92 <__swsetup_r+0x9a>
 8016c8a:	4621      	mov	r1, r4
 8016c8c:	4630      	mov	r0, r6
 8016c8e:	f000 f9ff 	bl	8017090 <__smakebuf_r>
 8016c92:	89a0      	ldrh	r0, [r4, #12]
 8016c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c98:	f010 0301 	ands.w	r3, r0, #1
 8016c9c:	d00a      	beq.n	8016cb4 <__swsetup_r+0xbc>
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	60a3      	str	r3, [r4, #8]
 8016ca2:	6963      	ldr	r3, [r4, #20]
 8016ca4:	425b      	negs	r3, r3
 8016ca6:	61a3      	str	r3, [r4, #24]
 8016ca8:	6923      	ldr	r3, [r4, #16]
 8016caa:	b943      	cbnz	r3, 8016cbe <__swsetup_r+0xc6>
 8016cac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016cb0:	d1ba      	bne.n	8016c28 <__swsetup_r+0x30>
 8016cb2:	bd70      	pop	{r4, r5, r6, pc}
 8016cb4:	0781      	lsls	r1, r0, #30
 8016cb6:	bf58      	it	pl
 8016cb8:	6963      	ldrpl	r3, [r4, #20]
 8016cba:	60a3      	str	r3, [r4, #8]
 8016cbc:	e7f4      	b.n	8016ca8 <__swsetup_r+0xb0>
 8016cbe:	2000      	movs	r0, #0
 8016cc0:	e7f7      	b.n	8016cb2 <__swsetup_r+0xba>
 8016cc2:	bf00      	nop
 8016cc4:	200000f0 	.word	0x200000f0
 8016cc8:	0801853c 	.word	0x0801853c
 8016ccc:	0801855c 	.word	0x0801855c
 8016cd0:	0801851c 	.word	0x0801851c

08016cd4 <__sflush_r>:
 8016cd4:	898a      	ldrh	r2, [r1, #12]
 8016cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cda:	4605      	mov	r5, r0
 8016cdc:	0710      	lsls	r0, r2, #28
 8016cde:	460c      	mov	r4, r1
 8016ce0:	d458      	bmi.n	8016d94 <__sflush_r+0xc0>
 8016ce2:	684b      	ldr	r3, [r1, #4]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	dc05      	bgt.n	8016cf4 <__sflush_r+0x20>
 8016ce8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	dc02      	bgt.n	8016cf4 <__sflush_r+0x20>
 8016cee:	2000      	movs	r0, #0
 8016cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016cf6:	2e00      	cmp	r6, #0
 8016cf8:	d0f9      	beq.n	8016cee <__sflush_r+0x1a>
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016d00:	682f      	ldr	r7, [r5, #0]
 8016d02:	602b      	str	r3, [r5, #0]
 8016d04:	d032      	beq.n	8016d6c <__sflush_r+0x98>
 8016d06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016d08:	89a3      	ldrh	r3, [r4, #12]
 8016d0a:	075a      	lsls	r2, r3, #29
 8016d0c:	d505      	bpl.n	8016d1a <__sflush_r+0x46>
 8016d0e:	6863      	ldr	r3, [r4, #4]
 8016d10:	1ac0      	subs	r0, r0, r3
 8016d12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016d14:	b10b      	cbz	r3, 8016d1a <__sflush_r+0x46>
 8016d16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016d18:	1ac0      	subs	r0, r0, r3
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	4602      	mov	r2, r0
 8016d1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016d20:	6a21      	ldr	r1, [r4, #32]
 8016d22:	4628      	mov	r0, r5
 8016d24:	47b0      	blx	r6
 8016d26:	1c43      	adds	r3, r0, #1
 8016d28:	89a3      	ldrh	r3, [r4, #12]
 8016d2a:	d106      	bne.n	8016d3a <__sflush_r+0x66>
 8016d2c:	6829      	ldr	r1, [r5, #0]
 8016d2e:	291d      	cmp	r1, #29
 8016d30:	d82c      	bhi.n	8016d8c <__sflush_r+0xb8>
 8016d32:	4a2a      	ldr	r2, [pc, #168]	; (8016ddc <__sflush_r+0x108>)
 8016d34:	40ca      	lsrs	r2, r1
 8016d36:	07d6      	lsls	r6, r2, #31
 8016d38:	d528      	bpl.n	8016d8c <__sflush_r+0xb8>
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	6062      	str	r2, [r4, #4]
 8016d3e:	04d9      	lsls	r1, r3, #19
 8016d40:	6922      	ldr	r2, [r4, #16]
 8016d42:	6022      	str	r2, [r4, #0]
 8016d44:	d504      	bpl.n	8016d50 <__sflush_r+0x7c>
 8016d46:	1c42      	adds	r2, r0, #1
 8016d48:	d101      	bne.n	8016d4e <__sflush_r+0x7a>
 8016d4a:	682b      	ldr	r3, [r5, #0]
 8016d4c:	b903      	cbnz	r3, 8016d50 <__sflush_r+0x7c>
 8016d4e:	6560      	str	r0, [r4, #84]	; 0x54
 8016d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d52:	602f      	str	r7, [r5, #0]
 8016d54:	2900      	cmp	r1, #0
 8016d56:	d0ca      	beq.n	8016cee <__sflush_r+0x1a>
 8016d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016d5c:	4299      	cmp	r1, r3
 8016d5e:	d002      	beq.n	8016d66 <__sflush_r+0x92>
 8016d60:	4628      	mov	r0, r5
 8016d62:	f000 f9d5 	bl	8017110 <_free_r>
 8016d66:	2000      	movs	r0, #0
 8016d68:	6360      	str	r0, [r4, #52]	; 0x34
 8016d6a:	e7c1      	b.n	8016cf0 <__sflush_r+0x1c>
 8016d6c:	6a21      	ldr	r1, [r4, #32]
 8016d6e:	2301      	movs	r3, #1
 8016d70:	4628      	mov	r0, r5
 8016d72:	47b0      	blx	r6
 8016d74:	1c41      	adds	r1, r0, #1
 8016d76:	d1c7      	bne.n	8016d08 <__sflush_r+0x34>
 8016d78:	682b      	ldr	r3, [r5, #0]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d0c4      	beq.n	8016d08 <__sflush_r+0x34>
 8016d7e:	2b1d      	cmp	r3, #29
 8016d80:	d001      	beq.n	8016d86 <__sflush_r+0xb2>
 8016d82:	2b16      	cmp	r3, #22
 8016d84:	d101      	bne.n	8016d8a <__sflush_r+0xb6>
 8016d86:	602f      	str	r7, [r5, #0]
 8016d88:	e7b1      	b.n	8016cee <__sflush_r+0x1a>
 8016d8a:	89a3      	ldrh	r3, [r4, #12]
 8016d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d90:	81a3      	strh	r3, [r4, #12]
 8016d92:	e7ad      	b.n	8016cf0 <__sflush_r+0x1c>
 8016d94:	690f      	ldr	r7, [r1, #16]
 8016d96:	2f00      	cmp	r7, #0
 8016d98:	d0a9      	beq.n	8016cee <__sflush_r+0x1a>
 8016d9a:	0793      	lsls	r3, r2, #30
 8016d9c:	680e      	ldr	r6, [r1, #0]
 8016d9e:	bf08      	it	eq
 8016da0:	694b      	ldreq	r3, [r1, #20]
 8016da2:	600f      	str	r7, [r1, #0]
 8016da4:	bf18      	it	ne
 8016da6:	2300      	movne	r3, #0
 8016da8:	eba6 0807 	sub.w	r8, r6, r7
 8016dac:	608b      	str	r3, [r1, #8]
 8016dae:	f1b8 0f00 	cmp.w	r8, #0
 8016db2:	dd9c      	ble.n	8016cee <__sflush_r+0x1a>
 8016db4:	6a21      	ldr	r1, [r4, #32]
 8016db6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016db8:	4643      	mov	r3, r8
 8016dba:	463a      	mov	r2, r7
 8016dbc:	4628      	mov	r0, r5
 8016dbe:	47b0      	blx	r6
 8016dc0:	2800      	cmp	r0, #0
 8016dc2:	dc06      	bgt.n	8016dd2 <__sflush_r+0xfe>
 8016dc4:	89a3      	ldrh	r3, [r4, #12]
 8016dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016dca:	81a3      	strh	r3, [r4, #12]
 8016dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8016dd0:	e78e      	b.n	8016cf0 <__sflush_r+0x1c>
 8016dd2:	4407      	add	r7, r0
 8016dd4:	eba8 0800 	sub.w	r8, r8, r0
 8016dd8:	e7e9      	b.n	8016dae <__sflush_r+0xda>
 8016dda:	bf00      	nop
 8016ddc:	20400001 	.word	0x20400001

08016de0 <_fflush_r>:
 8016de0:	b538      	push	{r3, r4, r5, lr}
 8016de2:	690b      	ldr	r3, [r1, #16]
 8016de4:	4605      	mov	r5, r0
 8016de6:	460c      	mov	r4, r1
 8016de8:	b913      	cbnz	r3, 8016df0 <_fflush_r+0x10>
 8016dea:	2500      	movs	r5, #0
 8016dec:	4628      	mov	r0, r5
 8016dee:	bd38      	pop	{r3, r4, r5, pc}
 8016df0:	b118      	cbz	r0, 8016dfa <_fflush_r+0x1a>
 8016df2:	6983      	ldr	r3, [r0, #24]
 8016df4:	b90b      	cbnz	r3, 8016dfa <_fflush_r+0x1a>
 8016df6:	f000 f887 	bl	8016f08 <__sinit>
 8016dfa:	4b14      	ldr	r3, [pc, #80]	; (8016e4c <_fflush_r+0x6c>)
 8016dfc:	429c      	cmp	r4, r3
 8016dfe:	d11b      	bne.n	8016e38 <_fflush_r+0x58>
 8016e00:	686c      	ldr	r4, [r5, #4]
 8016e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d0ef      	beq.n	8016dea <_fflush_r+0xa>
 8016e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016e0c:	07d0      	lsls	r0, r2, #31
 8016e0e:	d404      	bmi.n	8016e1a <_fflush_r+0x3a>
 8016e10:	0599      	lsls	r1, r3, #22
 8016e12:	d402      	bmi.n	8016e1a <_fflush_r+0x3a>
 8016e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e16:	f000 f915 	bl	8017044 <__retarget_lock_acquire_recursive>
 8016e1a:	4628      	mov	r0, r5
 8016e1c:	4621      	mov	r1, r4
 8016e1e:	f7ff ff59 	bl	8016cd4 <__sflush_r>
 8016e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e24:	07da      	lsls	r2, r3, #31
 8016e26:	4605      	mov	r5, r0
 8016e28:	d4e0      	bmi.n	8016dec <_fflush_r+0xc>
 8016e2a:	89a3      	ldrh	r3, [r4, #12]
 8016e2c:	059b      	lsls	r3, r3, #22
 8016e2e:	d4dd      	bmi.n	8016dec <_fflush_r+0xc>
 8016e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e32:	f000 f908 	bl	8017046 <__retarget_lock_release_recursive>
 8016e36:	e7d9      	b.n	8016dec <_fflush_r+0xc>
 8016e38:	4b05      	ldr	r3, [pc, #20]	; (8016e50 <_fflush_r+0x70>)
 8016e3a:	429c      	cmp	r4, r3
 8016e3c:	d101      	bne.n	8016e42 <_fflush_r+0x62>
 8016e3e:	68ac      	ldr	r4, [r5, #8]
 8016e40:	e7df      	b.n	8016e02 <_fflush_r+0x22>
 8016e42:	4b04      	ldr	r3, [pc, #16]	; (8016e54 <_fflush_r+0x74>)
 8016e44:	429c      	cmp	r4, r3
 8016e46:	bf08      	it	eq
 8016e48:	68ec      	ldreq	r4, [r5, #12]
 8016e4a:	e7da      	b.n	8016e02 <_fflush_r+0x22>
 8016e4c:	0801853c 	.word	0x0801853c
 8016e50:	0801855c 	.word	0x0801855c
 8016e54:	0801851c 	.word	0x0801851c

08016e58 <std>:
 8016e58:	2300      	movs	r3, #0
 8016e5a:	b510      	push	{r4, lr}
 8016e5c:	4604      	mov	r4, r0
 8016e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8016e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016e66:	6083      	str	r3, [r0, #8]
 8016e68:	8181      	strh	r1, [r0, #12]
 8016e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8016e6c:	81c2      	strh	r2, [r0, #14]
 8016e6e:	6183      	str	r3, [r0, #24]
 8016e70:	4619      	mov	r1, r3
 8016e72:	2208      	movs	r2, #8
 8016e74:	305c      	adds	r0, #92	; 0x5c
 8016e76:	f7ff fdd7 	bl	8016a28 <memset>
 8016e7a:	4b05      	ldr	r3, [pc, #20]	; (8016e90 <std+0x38>)
 8016e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8016e7e:	4b05      	ldr	r3, [pc, #20]	; (8016e94 <std+0x3c>)
 8016e80:	62a3      	str	r3, [r4, #40]	; 0x28
 8016e82:	4b05      	ldr	r3, [pc, #20]	; (8016e98 <std+0x40>)
 8016e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016e86:	4b05      	ldr	r3, [pc, #20]	; (8016e9c <std+0x44>)
 8016e88:	6224      	str	r4, [r4, #32]
 8016e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8016e8c:	bd10      	pop	{r4, pc}
 8016e8e:	bf00      	nop
 8016e90:	08017859 	.word	0x08017859
 8016e94:	0801787b 	.word	0x0801787b
 8016e98:	080178b3 	.word	0x080178b3
 8016e9c:	080178d7 	.word	0x080178d7

08016ea0 <_cleanup_r>:
 8016ea0:	4901      	ldr	r1, [pc, #4]	; (8016ea8 <_cleanup_r+0x8>)
 8016ea2:	f000 b8af 	b.w	8017004 <_fwalk_reent>
 8016ea6:	bf00      	nop
 8016ea8:	08016de1 	.word	0x08016de1

08016eac <__sfmoreglue>:
 8016eac:	b570      	push	{r4, r5, r6, lr}
 8016eae:	1e4a      	subs	r2, r1, #1
 8016eb0:	2568      	movs	r5, #104	; 0x68
 8016eb2:	4355      	muls	r5, r2
 8016eb4:	460e      	mov	r6, r1
 8016eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016eba:	f000 f977 	bl	80171ac <_malloc_r>
 8016ebe:	4604      	mov	r4, r0
 8016ec0:	b140      	cbz	r0, 8016ed4 <__sfmoreglue+0x28>
 8016ec2:	2100      	movs	r1, #0
 8016ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8016ec8:	300c      	adds	r0, #12
 8016eca:	60a0      	str	r0, [r4, #8]
 8016ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016ed0:	f7ff fdaa 	bl	8016a28 <memset>
 8016ed4:	4620      	mov	r0, r4
 8016ed6:	bd70      	pop	{r4, r5, r6, pc}

08016ed8 <__sfp_lock_acquire>:
 8016ed8:	4801      	ldr	r0, [pc, #4]	; (8016ee0 <__sfp_lock_acquire+0x8>)
 8016eda:	f000 b8b3 	b.w	8017044 <__retarget_lock_acquire_recursive>
 8016ede:	bf00      	nop
 8016ee0:	200012c4 	.word	0x200012c4

08016ee4 <__sfp_lock_release>:
 8016ee4:	4801      	ldr	r0, [pc, #4]	; (8016eec <__sfp_lock_release+0x8>)
 8016ee6:	f000 b8ae 	b.w	8017046 <__retarget_lock_release_recursive>
 8016eea:	bf00      	nop
 8016eec:	200012c4 	.word	0x200012c4

08016ef0 <__sinit_lock_acquire>:
 8016ef0:	4801      	ldr	r0, [pc, #4]	; (8016ef8 <__sinit_lock_acquire+0x8>)
 8016ef2:	f000 b8a7 	b.w	8017044 <__retarget_lock_acquire_recursive>
 8016ef6:	bf00      	nop
 8016ef8:	200012bf 	.word	0x200012bf

08016efc <__sinit_lock_release>:
 8016efc:	4801      	ldr	r0, [pc, #4]	; (8016f04 <__sinit_lock_release+0x8>)
 8016efe:	f000 b8a2 	b.w	8017046 <__retarget_lock_release_recursive>
 8016f02:	bf00      	nop
 8016f04:	200012bf 	.word	0x200012bf

08016f08 <__sinit>:
 8016f08:	b510      	push	{r4, lr}
 8016f0a:	4604      	mov	r4, r0
 8016f0c:	f7ff fff0 	bl	8016ef0 <__sinit_lock_acquire>
 8016f10:	69a3      	ldr	r3, [r4, #24]
 8016f12:	b11b      	cbz	r3, 8016f1c <__sinit+0x14>
 8016f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f18:	f7ff bff0 	b.w	8016efc <__sinit_lock_release>
 8016f1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016f20:	6523      	str	r3, [r4, #80]	; 0x50
 8016f22:	4b13      	ldr	r3, [pc, #76]	; (8016f70 <__sinit+0x68>)
 8016f24:	4a13      	ldr	r2, [pc, #76]	; (8016f74 <__sinit+0x6c>)
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	62a2      	str	r2, [r4, #40]	; 0x28
 8016f2a:	42a3      	cmp	r3, r4
 8016f2c:	bf04      	itt	eq
 8016f2e:	2301      	moveq	r3, #1
 8016f30:	61a3      	streq	r3, [r4, #24]
 8016f32:	4620      	mov	r0, r4
 8016f34:	f000 f820 	bl	8016f78 <__sfp>
 8016f38:	6060      	str	r0, [r4, #4]
 8016f3a:	4620      	mov	r0, r4
 8016f3c:	f000 f81c 	bl	8016f78 <__sfp>
 8016f40:	60a0      	str	r0, [r4, #8]
 8016f42:	4620      	mov	r0, r4
 8016f44:	f000 f818 	bl	8016f78 <__sfp>
 8016f48:	2200      	movs	r2, #0
 8016f4a:	60e0      	str	r0, [r4, #12]
 8016f4c:	2104      	movs	r1, #4
 8016f4e:	6860      	ldr	r0, [r4, #4]
 8016f50:	f7ff ff82 	bl	8016e58 <std>
 8016f54:	68a0      	ldr	r0, [r4, #8]
 8016f56:	2201      	movs	r2, #1
 8016f58:	2109      	movs	r1, #9
 8016f5a:	f7ff ff7d 	bl	8016e58 <std>
 8016f5e:	68e0      	ldr	r0, [r4, #12]
 8016f60:	2202      	movs	r2, #2
 8016f62:	2112      	movs	r1, #18
 8016f64:	f7ff ff78 	bl	8016e58 <std>
 8016f68:	2301      	movs	r3, #1
 8016f6a:	61a3      	str	r3, [r4, #24]
 8016f6c:	e7d2      	b.n	8016f14 <__sinit+0xc>
 8016f6e:	bf00      	nop
 8016f70:	08018518 	.word	0x08018518
 8016f74:	08016ea1 	.word	0x08016ea1

08016f78 <__sfp>:
 8016f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f7a:	4607      	mov	r7, r0
 8016f7c:	f7ff ffac 	bl	8016ed8 <__sfp_lock_acquire>
 8016f80:	4b1e      	ldr	r3, [pc, #120]	; (8016ffc <__sfp+0x84>)
 8016f82:	681e      	ldr	r6, [r3, #0]
 8016f84:	69b3      	ldr	r3, [r6, #24]
 8016f86:	b913      	cbnz	r3, 8016f8e <__sfp+0x16>
 8016f88:	4630      	mov	r0, r6
 8016f8a:	f7ff ffbd 	bl	8016f08 <__sinit>
 8016f8e:	3648      	adds	r6, #72	; 0x48
 8016f90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016f94:	3b01      	subs	r3, #1
 8016f96:	d503      	bpl.n	8016fa0 <__sfp+0x28>
 8016f98:	6833      	ldr	r3, [r6, #0]
 8016f9a:	b30b      	cbz	r3, 8016fe0 <__sfp+0x68>
 8016f9c:	6836      	ldr	r6, [r6, #0]
 8016f9e:	e7f7      	b.n	8016f90 <__sfp+0x18>
 8016fa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016fa4:	b9d5      	cbnz	r5, 8016fdc <__sfp+0x64>
 8016fa6:	4b16      	ldr	r3, [pc, #88]	; (8017000 <__sfp+0x88>)
 8016fa8:	60e3      	str	r3, [r4, #12]
 8016faa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016fae:	6665      	str	r5, [r4, #100]	; 0x64
 8016fb0:	f000 f847 	bl	8017042 <__retarget_lock_init_recursive>
 8016fb4:	f7ff ff96 	bl	8016ee4 <__sfp_lock_release>
 8016fb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016fbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016fc0:	6025      	str	r5, [r4, #0]
 8016fc2:	61a5      	str	r5, [r4, #24]
 8016fc4:	2208      	movs	r2, #8
 8016fc6:	4629      	mov	r1, r5
 8016fc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016fcc:	f7ff fd2c 	bl	8016a28 <memset>
 8016fd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016fd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016fd8:	4620      	mov	r0, r4
 8016fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fdc:	3468      	adds	r4, #104	; 0x68
 8016fde:	e7d9      	b.n	8016f94 <__sfp+0x1c>
 8016fe0:	2104      	movs	r1, #4
 8016fe2:	4638      	mov	r0, r7
 8016fe4:	f7ff ff62 	bl	8016eac <__sfmoreglue>
 8016fe8:	4604      	mov	r4, r0
 8016fea:	6030      	str	r0, [r6, #0]
 8016fec:	2800      	cmp	r0, #0
 8016fee:	d1d5      	bne.n	8016f9c <__sfp+0x24>
 8016ff0:	f7ff ff78 	bl	8016ee4 <__sfp_lock_release>
 8016ff4:	230c      	movs	r3, #12
 8016ff6:	603b      	str	r3, [r7, #0]
 8016ff8:	e7ee      	b.n	8016fd8 <__sfp+0x60>
 8016ffa:	bf00      	nop
 8016ffc:	08018518 	.word	0x08018518
 8017000:	ffff0001 	.word	0xffff0001

08017004 <_fwalk_reent>:
 8017004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017008:	4606      	mov	r6, r0
 801700a:	4688      	mov	r8, r1
 801700c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017010:	2700      	movs	r7, #0
 8017012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017016:	f1b9 0901 	subs.w	r9, r9, #1
 801701a:	d505      	bpl.n	8017028 <_fwalk_reent+0x24>
 801701c:	6824      	ldr	r4, [r4, #0]
 801701e:	2c00      	cmp	r4, #0
 8017020:	d1f7      	bne.n	8017012 <_fwalk_reent+0xe>
 8017022:	4638      	mov	r0, r7
 8017024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017028:	89ab      	ldrh	r3, [r5, #12]
 801702a:	2b01      	cmp	r3, #1
 801702c:	d907      	bls.n	801703e <_fwalk_reent+0x3a>
 801702e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017032:	3301      	adds	r3, #1
 8017034:	d003      	beq.n	801703e <_fwalk_reent+0x3a>
 8017036:	4629      	mov	r1, r5
 8017038:	4630      	mov	r0, r6
 801703a:	47c0      	blx	r8
 801703c:	4307      	orrs	r7, r0
 801703e:	3568      	adds	r5, #104	; 0x68
 8017040:	e7e9      	b.n	8017016 <_fwalk_reent+0x12>

08017042 <__retarget_lock_init_recursive>:
 8017042:	4770      	bx	lr

08017044 <__retarget_lock_acquire_recursive>:
 8017044:	4770      	bx	lr

08017046 <__retarget_lock_release_recursive>:
 8017046:	4770      	bx	lr

08017048 <__swhatbuf_r>:
 8017048:	b570      	push	{r4, r5, r6, lr}
 801704a:	460e      	mov	r6, r1
 801704c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017050:	2900      	cmp	r1, #0
 8017052:	b096      	sub	sp, #88	; 0x58
 8017054:	4614      	mov	r4, r2
 8017056:	461d      	mov	r5, r3
 8017058:	da07      	bge.n	801706a <__swhatbuf_r+0x22>
 801705a:	2300      	movs	r3, #0
 801705c:	602b      	str	r3, [r5, #0]
 801705e:	89b3      	ldrh	r3, [r6, #12]
 8017060:	061a      	lsls	r2, r3, #24
 8017062:	d410      	bmi.n	8017086 <__swhatbuf_r+0x3e>
 8017064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017068:	e00e      	b.n	8017088 <__swhatbuf_r+0x40>
 801706a:	466a      	mov	r2, sp
 801706c:	f000 fc5a 	bl	8017924 <_fstat_r>
 8017070:	2800      	cmp	r0, #0
 8017072:	dbf2      	blt.n	801705a <__swhatbuf_r+0x12>
 8017074:	9a01      	ldr	r2, [sp, #4]
 8017076:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801707a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801707e:	425a      	negs	r2, r3
 8017080:	415a      	adcs	r2, r3
 8017082:	602a      	str	r2, [r5, #0]
 8017084:	e7ee      	b.n	8017064 <__swhatbuf_r+0x1c>
 8017086:	2340      	movs	r3, #64	; 0x40
 8017088:	2000      	movs	r0, #0
 801708a:	6023      	str	r3, [r4, #0]
 801708c:	b016      	add	sp, #88	; 0x58
 801708e:	bd70      	pop	{r4, r5, r6, pc}

08017090 <__smakebuf_r>:
 8017090:	898b      	ldrh	r3, [r1, #12]
 8017092:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017094:	079d      	lsls	r5, r3, #30
 8017096:	4606      	mov	r6, r0
 8017098:	460c      	mov	r4, r1
 801709a:	d507      	bpl.n	80170ac <__smakebuf_r+0x1c>
 801709c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80170a0:	6023      	str	r3, [r4, #0]
 80170a2:	6123      	str	r3, [r4, #16]
 80170a4:	2301      	movs	r3, #1
 80170a6:	6163      	str	r3, [r4, #20]
 80170a8:	b002      	add	sp, #8
 80170aa:	bd70      	pop	{r4, r5, r6, pc}
 80170ac:	ab01      	add	r3, sp, #4
 80170ae:	466a      	mov	r2, sp
 80170b0:	f7ff ffca 	bl	8017048 <__swhatbuf_r>
 80170b4:	9900      	ldr	r1, [sp, #0]
 80170b6:	4605      	mov	r5, r0
 80170b8:	4630      	mov	r0, r6
 80170ba:	f000 f877 	bl	80171ac <_malloc_r>
 80170be:	b948      	cbnz	r0, 80170d4 <__smakebuf_r+0x44>
 80170c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170c4:	059a      	lsls	r2, r3, #22
 80170c6:	d4ef      	bmi.n	80170a8 <__smakebuf_r+0x18>
 80170c8:	f023 0303 	bic.w	r3, r3, #3
 80170cc:	f043 0302 	orr.w	r3, r3, #2
 80170d0:	81a3      	strh	r3, [r4, #12]
 80170d2:	e7e3      	b.n	801709c <__smakebuf_r+0xc>
 80170d4:	4b0d      	ldr	r3, [pc, #52]	; (801710c <__smakebuf_r+0x7c>)
 80170d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80170d8:	89a3      	ldrh	r3, [r4, #12]
 80170da:	6020      	str	r0, [r4, #0]
 80170dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80170e0:	81a3      	strh	r3, [r4, #12]
 80170e2:	9b00      	ldr	r3, [sp, #0]
 80170e4:	6163      	str	r3, [r4, #20]
 80170e6:	9b01      	ldr	r3, [sp, #4]
 80170e8:	6120      	str	r0, [r4, #16]
 80170ea:	b15b      	cbz	r3, 8017104 <__smakebuf_r+0x74>
 80170ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80170f0:	4630      	mov	r0, r6
 80170f2:	f000 fc29 	bl	8017948 <_isatty_r>
 80170f6:	b128      	cbz	r0, 8017104 <__smakebuf_r+0x74>
 80170f8:	89a3      	ldrh	r3, [r4, #12]
 80170fa:	f023 0303 	bic.w	r3, r3, #3
 80170fe:	f043 0301 	orr.w	r3, r3, #1
 8017102:	81a3      	strh	r3, [r4, #12]
 8017104:	89a0      	ldrh	r0, [r4, #12]
 8017106:	4305      	orrs	r5, r0
 8017108:	81a5      	strh	r5, [r4, #12]
 801710a:	e7cd      	b.n	80170a8 <__smakebuf_r+0x18>
 801710c:	08016ea1 	.word	0x08016ea1

08017110 <_free_r>:
 8017110:	b538      	push	{r3, r4, r5, lr}
 8017112:	4605      	mov	r5, r0
 8017114:	2900      	cmp	r1, #0
 8017116:	d045      	beq.n	80171a4 <_free_r+0x94>
 8017118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801711c:	1f0c      	subs	r4, r1, #4
 801711e:	2b00      	cmp	r3, #0
 8017120:	bfb8      	it	lt
 8017122:	18e4      	addlt	r4, r4, r3
 8017124:	f000 fc32 	bl	801798c <__malloc_lock>
 8017128:	4a1f      	ldr	r2, [pc, #124]	; (80171a8 <_free_r+0x98>)
 801712a:	6813      	ldr	r3, [r2, #0]
 801712c:	4610      	mov	r0, r2
 801712e:	b933      	cbnz	r3, 801713e <_free_r+0x2e>
 8017130:	6063      	str	r3, [r4, #4]
 8017132:	6014      	str	r4, [r2, #0]
 8017134:	4628      	mov	r0, r5
 8017136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801713a:	f000 bc2d 	b.w	8017998 <__malloc_unlock>
 801713e:	42a3      	cmp	r3, r4
 8017140:	d90b      	bls.n	801715a <_free_r+0x4a>
 8017142:	6821      	ldr	r1, [r4, #0]
 8017144:	1862      	adds	r2, r4, r1
 8017146:	4293      	cmp	r3, r2
 8017148:	bf04      	itt	eq
 801714a:	681a      	ldreq	r2, [r3, #0]
 801714c:	685b      	ldreq	r3, [r3, #4]
 801714e:	6063      	str	r3, [r4, #4]
 8017150:	bf04      	itt	eq
 8017152:	1852      	addeq	r2, r2, r1
 8017154:	6022      	streq	r2, [r4, #0]
 8017156:	6004      	str	r4, [r0, #0]
 8017158:	e7ec      	b.n	8017134 <_free_r+0x24>
 801715a:	461a      	mov	r2, r3
 801715c:	685b      	ldr	r3, [r3, #4]
 801715e:	b10b      	cbz	r3, 8017164 <_free_r+0x54>
 8017160:	42a3      	cmp	r3, r4
 8017162:	d9fa      	bls.n	801715a <_free_r+0x4a>
 8017164:	6811      	ldr	r1, [r2, #0]
 8017166:	1850      	adds	r0, r2, r1
 8017168:	42a0      	cmp	r0, r4
 801716a:	d10b      	bne.n	8017184 <_free_r+0x74>
 801716c:	6820      	ldr	r0, [r4, #0]
 801716e:	4401      	add	r1, r0
 8017170:	1850      	adds	r0, r2, r1
 8017172:	4283      	cmp	r3, r0
 8017174:	6011      	str	r1, [r2, #0]
 8017176:	d1dd      	bne.n	8017134 <_free_r+0x24>
 8017178:	6818      	ldr	r0, [r3, #0]
 801717a:	685b      	ldr	r3, [r3, #4]
 801717c:	6053      	str	r3, [r2, #4]
 801717e:	4401      	add	r1, r0
 8017180:	6011      	str	r1, [r2, #0]
 8017182:	e7d7      	b.n	8017134 <_free_r+0x24>
 8017184:	d902      	bls.n	801718c <_free_r+0x7c>
 8017186:	230c      	movs	r3, #12
 8017188:	602b      	str	r3, [r5, #0]
 801718a:	e7d3      	b.n	8017134 <_free_r+0x24>
 801718c:	6820      	ldr	r0, [r4, #0]
 801718e:	1821      	adds	r1, r4, r0
 8017190:	428b      	cmp	r3, r1
 8017192:	bf04      	itt	eq
 8017194:	6819      	ldreq	r1, [r3, #0]
 8017196:	685b      	ldreq	r3, [r3, #4]
 8017198:	6063      	str	r3, [r4, #4]
 801719a:	bf04      	itt	eq
 801719c:	1809      	addeq	r1, r1, r0
 801719e:	6021      	streq	r1, [r4, #0]
 80171a0:	6054      	str	r4, [r2, #4]
 80171a2:	e7c7      	b.n	8017134 <_free_r+0x24>
 80171a4:	bd38      	pop	{r3, r4, r5, pc}
 80171a6:	bf00      	nop
 80171a8:	20001080 	.word	0x20001080

080171ac <_malloc_r>:
 80171ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171ae:	1ccd      	adds	r5, r1, #3
 80171b0:	f025 0503 	bic.w	r5, r5, #3
 80171b4:	3508      	adds	r5, #8
 80171b6:	2d0c      	cmp	r5, #12
 80171b8:	bf38      	it	cc
 80171ba:	250c      	movcc	r5, #12
 80171bc:	2d00      	cmp	r5, #0
 80171be:	4606      	mov	r6, r0
 80171c0:	db01      	blt.n	80171c6 <_malloc_r+0x1a>
 80171c2:	42a9      	cmp	r1, r5
 80171c4:	d903      	bls.n	80171ce <_malloc_r+0x22>
 80171c6:	230c      	movs	r3, #12
 80171c8:	6033      	str	r3, [r6, #0]
 80171ca:	2000      	movs	r0, #0
 80171cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171ce:	f000 fbdd 	bl	801798c <__malloc_lock>
 80171d2:	4921      	ldr	r1, [pc, #132]	; (8017258 <_malloc_r+0xac>)
 80171d4:	680a      	ldr	r2, [r1, #0]
 80171d6:	4614      	mov	r4, r2
 80171d8:	b99c      	cbnz	r4, 8017202 <_malloc_r+0x56>
 80171da:	4f20      	ldr	r7, [pc, #128]	; (801725c <_malloc_r+0xb0>)
 80171dc:	683b      	ldr	r3, [r7, #0]
 80171de:	b923      	cbnz	r3, 80171ea <_malloc_r+0x3e>
 80171e0:	4621      	mov	r1, r4
 80171e2:	4630      	mov	r0, r6
 80171e4:	f000 fb28 	bl	8017838 <_sbrk_r>
 80171e8:	6038      	str	r0, [r7, #0]
 80171ea:	4629      	mov	r1, r5
 80171ec:	4630      	mov	r0, r6
 80171ee:	f000 fb23 	bl	8017838 <_sbrk_r>
 80171f2:	1c43      	adds	r3, r0, #1
 80171f4:	d123      	bne.n	801723e <_malloc_r+0x92>
 80171f6:	230c      	movs	r3, #12
 80171f8:	6033      	str	r3, [r6, #0]
 80171fa:	4630      	mov	r0, r6
 80171fc:	f000 fbcc 	bl	8017998 <__malloc_unlock>
 8017200:	e7e3      	b.n	80171ca <_malloc_r+0x1e>
 8017202:	6823      	ldr	r3, [r4, #0]
 8017204:	1b5b      	subs	r3, r3, r5
 8017206:	d417      	bmi.n	8017238 <_malloc_r+0x8c>
 8017208:	2b0b      	cmp	r3, #11
 801720a:	d903      	bls.n	8017214 <_malloc_r+0x68>
 801720c:	6023      	str	r3, [r4, #0]
 801720e:	441c      	add	r4, r3
 8017210:	6025      	str	r5, [r4, #0]
 8017212:	e004      	b.n	801721e <_malloc_r+0x72>
 8017214:	6863      	ldr	r3, [r4, #4]
 8017216:	42a2      	cmp	r2, r4
 8017218:	bf0c      	ite	eq
 801721a:	600b      	streq	r3, [r1, #0]
 801721c:	6053      	strne	r3, [r2, #4]
 801721e:	4630      	mov	r0, r6
 8017220:	f000 fbba 	bl	8017998 <__malloc_unlock>
 8017224:	f104 000b 	add.w	r0, r4, #11
 8017228:	1d23      	adds	r3, r4, #4
 801722a:	f020 0007 	bic.w	r0, r0, #7
 801722e:	1ac2      	subs	r2, r0, r3
 8017230:	d0cc      	beq.n	80171cc <_malloc_r+0x20>
 8017232:	1a1b      	subs	r3, r3, r0
 8017234:	50a3      	str	r3, [r4, r2]
 8017236:	e7c9      	b.n	80171cc <_malloc_r+0x20>
 8017238:	4622      	mov	r2, r4
 801723a:	6864      	ldr	r4, [r4, #4]
 801723c:	e7cc      	b.n	80171d8 <_malloc_r+0x2c>
 801723e:	1cc4      	adds	r4, r0, #3
 8017240:	f024 0403 	bic.w	r4, r4, #3
 8017244:	42a0      	cmp	r0, r4
 8017246:	d0e3      	beq.n	8017210 <_malloc_r+0x64>
 8017248:	1a21      	subs	r1, r4, r0
 801724a:	4630      	mov	r0, r6
 801724c:	f000 faf4 	bl	8017838 <_sbrk_r>
 8017250:	3001      	adds	r0, #1
 8017252:	d1dd      	bne.n	8017210 <_malloc_r+0x64>
 8017254:	e7cf      	b.n	80171f6 <_malloc_r+0x4a>
 8017256:	bf00      	nop
 8017258:	20001080 	.word	0x20001080
 801725c:	20001084 	.word	0x20001084

08017260 <__sfputc_r>:
 8017260:	6893      	ldr	r3, [r2, #8]
 8017262:	3b01      	subs	r3, #1
 8017264:	2b00      	cmp	r3, #0
 8017266:	b410      	push	{r4}
 8017268:	6093      	str	r3, [r2, #8]
 801726a:	da07      	bge.n	801727c <__sfputc_r+0x1c>
 801726c:	6994      	ldr	r4, [r2, #24]
 801726e:	42a3      	cmp	r3, r4
 8017270:	db01      	blt.n	8017276 <__sfputc_r+0x16>
 8017272:	290a      	cmp	r1, #10
 8017274:	d102      	bne.n	801727c <__sfputc_r+0x1c>
 8017276:	bc10      	pop	{r4}
 8017278:	f7ff bc6c 	b.w	8016b54 <__swbuf_r>
 801727c:	6813      	ldr	r3, [r2, #0]
 801727e:	1c58      	adds	r0, r3, #1
 8017280:	6010      	str	r0, [r2, #0]
 8017282:	7019      	strb	r1, [r3, #0]
 8017284:	4608      	mov	r0, r1
 8017286:	bc10      	pop	{r4}
 8017288:	4770      	bx	lr

0801728a <__sfputs_r>:
 801728a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801728c:	4606      	mov	r6, r0
 801728e:	460f      	mov	r7, r1
 8017290:	4614      	mov	r4, r2
 8017292:	18d5      	adds	r5, r2, r3
 8017294:	42ac      	cmp	r4, r5
 8017296:	d101      	bne.n	801729c <__sfputs_r+0x12>
 8017298:	2000      	movs	r0, #0
 801729a:	e007      	b.n	80172ac <__sfputs_r+0x22>
 801729c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172a0:	463a      	mov	r2, r7
 80172a2:	4630      	mov	r0, r6
 80172a4:	f7ff ffdc 	bl	8017260 <__sfputc_r>
 80172a8:	1c43      	adds	r3, r0, #1
 80172aa:	d1f3      	bne.n	8017294 <__sfputs_r+0xa>
 80172ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080172b0 <_vfiprintf_r>:
 80172b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172b4:	460d      	mov	r5, r1
 80172b6:	b09d      	sub	sp, #116	; 0x74
 80172b8:	4614      	mov	r4, r2
 80172ba:	4698      	mov	r8, r3
 80172bc:	4606      	mov	r6, r0
 80172be:	b118      	cbz	r0, 80172c8 <_vfiprintf_r+0x18>
 80172c0:	6983      	ldr	r3, [r0, #24]
 80172c2:	b90b      	cbnz	r3, 80172c8 <_vfiprintf_r+0x18>
 80172c4:	f7ff fe20 	bl	8016f08 <__sinit>
 80172c8:	4b89      	ldr	r3, [pc, #548]	; (80174f0 <_vfiprintf_r+0x240>)
 80172ca:	429d      	cmp	r5, r3
 80172cc:	d11b      	bne.n	8017306 <_vfiprintf_r+0x56>
 80172ce:	6875      	ldr	r5, [r6, #4]
 80172d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80172d2:	07d9      	lsls	r1, r3, #31
 80172d4:	d405      	bmi.n	80172e2 <_vfiprintf_r+0x32>
 80172d6:	89ab      	ldrh	r3, [r5, #12]
 80172d8:	059a      	lsls	r2, r3, #22
 80172da:	d402      	bmi.n	80172e2 <_vfiprintf_r+0x32>
 80172dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80172de:	f7ff feb1 	bl	8017044 <__retarget_lock_acquire_recursive>
 80172e2:	89ab      	ldrh	r3, [r5, #12]
 80172e4:	071b      	lsls	r3, r3, #28
 80172e6:	d501      	bpl.n	80172ec <_vfiprintf_r+0x3c>
 80172e8:	692b      	ldr	r3, [r5, #16]
 80172ea:	b9eb      	cbnz	r3, 8017328 <_vfiprintf_r+0x78>
 80172ec:	4629      	mov	r1, r5
 80172ee:	4630      	mov	r0, r6
 80172f0:	f7ff fc82 	bl	8016bf8 <__swsetup_r>
 80172f4:	b1c0      	cbz	r0, 8017328 <_vfiprintf_r+0x78>
 80172f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80172f8:	07dc      	lsls	r4, r3, #31
 80172fa:	d50e      	bpl.n	801731a <_vfiprintf_r+0x6a>
 80172fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017300:	b01d      	add	sp, #116	; 0x74
 8017302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017306:	4b7b      	ldr	r3, [pc, #492]	; (80174f4 <_vfiprintf_r+0x244>)
 8017308:	429d      	cmp	r5, r3
 801730a:	d101      	bne.n	8017310 <_vfiprintf_r+0x60>
 801730c:	68b5      	ldr	r5, [r6, #8]
 801730e:	e7df      	b.n	80172d0 <_vfiprintf_r+0x20>
 8017310:	4b79      	ldr	r3, [pc, #484]	; (80174f8 <_vfiprintf_r+0x248>)
 8017312:	429d      	cmp	r5, r3
 8017314:	bf08      	it	eq
 8017316:	68f5      	ldreq	r5, [r6, #12]
 8017318:	e7da      	b.n	80172d0 <_vfiprintf_r+0x20>
 801731a:	89ab      	ldrh	r3, [r5, #12]
 801731c:	0598      	lsls	r0, r3, #22
 801731e:	d4ed      	bmi.n	80172fc <_vfiprintf_r+0x4c>
 8017320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017322:	f7ff fe90 	bl	8017046 <__retarget_lock_release_recursive>
 8017326:	e7e9      	b.n	80172fc <_vfiprintf_r+0x4c>
 8017328:	2300      	movs	r3, #0
 801732a:	9309      	str	r3, [sp, #36]	; 0x24
 801732c:	2320      	movs	r3, #32
 801732e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017332:	f8cd 800c 	str.w	r8, [sp, #12]
 8017336:	2330      	movs	r3, #48	; 0x30
 8017338:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80174fc <_vfiprintf_r+0x24c>
 801733c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017340:	f04f 0901 	mov.w	r9, #1
 8017344:	4623      	mov	r3, r4
 8017346:	469a      	mov	sl, r3
 8017348:	f813 2b01 	ldrb.w	r2, [r3], #1
 801734c:	b10a      	cbz	r2, 8017352 <_vfiprintf_r+0xa2>
 801734e:	2a25      	cmp	r2, #37	; 0x25
 8017350:	d1f9      	bne.n	8017346 <_vfiprintf_r+0x96>
 8017352:	ebba 0b04 	subs.w	fp, sl, r4
 8017356:	d00b      	beq.n	8017370 <_vfiprintf_r+0xc0>
 8017358:	465b      	mov	r3, fp
 801735a:	4622      	mov	r2, r4
 801735c:	4629      	mov	r1, r5
 801735e:	4630      	mov	r0, r6
 8017360:	f7ff ff93 	bl	801728a <__sfputs_r>
 8017364:	3001      	adds	r0, #1
 8017366:	f000 80aa 	beq.w	80174be <_vfiprintf_r+0x20e>
 801736a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801736c:	445a      	add	r2, fp
 801736e:	9209      	str	r2, [sp, #36]	; 0x24
 8017370:	f89a 3000 	ldrb.w	r3, [sl]
 8017374:	2b00      	cmp	r3, #0
 8017376:	f000 80a2 	beq.w	80174be <_vfiprintf_r+0x20e>
 801737a:	2300      	movs	r3, #0
 801737c:	f04f 32ff 	mov.w	r2, #4294967295
 8017380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017384:	f10a 0a01 	add.w	sl, sl, #1
 8017388:	9304      	str	r3, [sp, #16]
 801738a:	9307      	str	r3, [sp, #28]
 801738c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017390:	931a      	str	r3, [sp, #104]	; 0x68
 8017392:	4654      	mov	r4, sl
 8017394:	2205      	movs	r2, #5
 8017396:	f814 1b01 	ldrb.w	r1, [r4], #1
 801739a:	4858      	ldr	r0, [pc, #352]	; (80174fc <_vfiprintf_r+0x24c>)
 801739c:	f7e8 fef0 	bl	8000180 <memchr>
 80173a0:	9a04      	ldr	r2, [sp, #16]
 80173a2:	b9d8      	cbnz	r0, 80173dc <_vfiprintf_r+0x12c>
 80173a4:	06d1      	lsls	r1, r2, #27
 80173a6:	bf44      	itt	mi
 80173a8:	2320      	movmi	r3, #32
 80173aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80173ae:	0713      	lsls	r3, r2, #28
 80173b0:	bf44      	itt	mi
 80173b2:	232b      	movmi	r3, #43	; 0x2b
 80173b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80173b8:	f89a 3000 	ldrb.w	r3, [sl]
 80173bc:	2b2a      	cmp	r3, #42	; 0x2a
 80173be:	d015      	beq.n	80173ec <_vfiprintf_r+0x13c>
 80173c0:	9a07      	ldr	r2, [sp, #28]
 80173c2:	4654      	mov	r4, sl
 80173c4:	2000      	movs	r0, #0
 80173c6:	f04f 0c0a 	mov.w	ip, #10
 80173ca:	4621      	mov	r1, r4
 80173cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173d0:	3b30      	subs	r3, #48	; 0x30
 80173d2:	2b09      	cmp	r3, #9
 80173d4:	d94e      	bls.n	8017474 <_vfiprintf_r+0x1c4>
 80173d6:	b1b0      	cbz	r0, 8017406 <_vfiprintf_r+0x156>
 80173d8:	9207      	str	r2, [sp, #28]
 80173da:	e014      	b.n	8017406 <_vfiprintf_r+0x156>
 80173dc:	eba0 0308 	sub.w	r3, r0, r8
 80173e0:	fa09 f303 	lsl.w	r3, r9, r3
 80173e4:	4313      	orrs	r3, r2
 80173e6:	9304      	str	r3, [sp, #16]
 80173e8:	46a2      	mov	sl, r4
 80173ea:	e7d2      	b.n	8017392 <_vfiprintf_r+0xe2>
 80173ec:	9b03      	ldr	r3, [sp, #12]
 80173ee:	1d19      	adds	r1, r3, #4
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	9103      	str	r1, [sp, #12]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	bfbb      	ittet	lt
 80173f8:	425b      	neglt	r3, r3
 80173fa:	f042 0202 	orrlt.w	r2, r2, #2
 80173fe:	9307      	strge	r3, [sp, #28]
 8017400:	9307      	strlt	r3, [sp, #28]
 8017402:	bfb8      	it	lt
 8017404:	9204      	strlt	r2, [sp, #16]
 8017406:	7823      	ldrb	r3, [r4, #0]
 8017408:	2b2e      	cmp	r3, #46	; 0x2e
 801740a:	d10c      	bne.n	8017426 <_vfiprintf_r+0x176>
 801740c:	7863      	ldrb	r3, [r4, #1]
 801740e:	2b2a      	cmp	r3, #42	; 0x2a
 8017410:	d135      	bne.n	801747e <_vfiprintf_r+0x1ce>
 8017412:	9b03      	ldr	r3, [sp, #12]
 8017414:	1d1a      	adds	r2, r3, #4
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	9203      	str	r2, [sp, #12]
 801741a:	2b00      	cmp	r3, #0
 801741c:	bfb8      	it	lt
 801741e:	f04f 33ff 	movlt.w	r3, #4294967295
 8017422:	3402      	adds	r4, #2
 8017424:	9305      	str	r3, [sp, #20]
 8017426:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801750c <_vfiprintf_r+0x25c>
 801742a:	7821      	ldrb	r1, [r4, #0]
 801742c:	2203      	movs	r2, #3
 801742e:	4650      	mov	r0, sl
 8017430:	f7e8 fea6 	bl	8000180 <memchr>
 8017434:	b140      	cbz	r0, 8017448 <_vfiprintf_r+0x198>
 8017436:	2340      	movs	r3, #64	; 0x40
 8017438:	eba0 000a 	sub.w	r0, r0, sl
 801743c:	fa03 f000 	lsl.w	r0, r3, r0
 8017440:	9b04      	ldr	r3, [sp, #16]
 8017442:	4303      	orrs	r3, r0
 8017444:	3401      	adds	r4, #1
 8017446:	9304      	str	r3, [sp, #16]
 8017448:	f814 1b01 	ldrb.w	r1, [r4], #1
 801744c:	482c      	ldr	r0, [pc, #176]	; (8017500 <_vfiprintf_r+0x250>)
 801744e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017452:	2206      	movs	r2, #6
 8017454:	f7e8 fe94 	bl	8000180 <memchr>
 8017458:	2800      	cmp	r0, #0
 801745a:	d03f      	beq.n	80174dc <_vfiprintf_r+0x22c>
 801745c:	4b29      	ldr	r3, [pc, #164]	; (8017504 <_vfiprintf_r+0x254>)
 801745e:	bb1b      	cbnz	r3, 80174a8 <_vfiprintf_r+0x1f8>
 8017460:	9b03      	ldr	r3, [sp, #12]
 8017462:	3307      	adds	r3, #7
 8017464:	f023 0307 	bic.w	r3, r3, #7
 8017468:	3308      	adds	r3, #8
 801746a:	9303      	str	r3, [sp, #12]
 801746c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801746e:	443b      	add	r3, r7
 8017470:	9309      	str	r3, [sp, #36]	; 0x24
 8017472:	e767      	b.n	8017344 <_vfiprintf_r+0x94>
 8017474:	fb0c 3202 	mla	r2, ip, r2, r3
 8017478:	460c      	mov	r4, r1
 801747a:	2001      	movs	r0, #1
 801747c:	e7a5      	b.n	80173ca <_vfiprintf_r+0x11a>
 801747e:	2300      	movs	r3, #0
 8017480:	3401      	adds	r4, #1
 8017482:	9305      	str	r3, [sp, #20]
 8017484:	4619      	mov	r1, r3
 8017486:	f04f 0c0a 	mov.w	ip, #10
 801748a:	4620      	mov	r0, r4
 801748c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017490:	3a30      	subs	r2, #48	; 0x30
 8017492:	2a09      	cmp	r2, #9
 8017494:	d903      	bls.n	801749e <_vfiprintf_r+0x1ee>
 8017496:	2b00      	cmp	r3, #0
 8017498:	d0c5      	beq.n	8017426 <_vfiprintf_r+0x176>
 801749a:	9105      	str	r1, [sp, #20]
 801749c:	e7c3      	b.n	8017426 <_vfiprintf_r+0x176>
 801749e:	fb0c 2101 	mla	r1, ip, r1, r2
 80174a2:	4604      	mov	r4, r0
 80174a4:	2301      	movs	r3, #1
 80174a6:	e7f0      	b.n	801748a <_vfiprintf_r+0x1da>
 80174a8:	ab03      	add	r3, sp, #12
 80174aa:	9300      	str	r3, [sp, #0]
 80174ac:	462a      	mov	r2, r5
 80174ae:	4b16      	ldr	r3, [pc, #88]	; (8017508 <_vfiprintf_r+0x258>)
 80174b0:	a904      	add	r1, sp, #16
 80174b2:	4630      	mov	r0, r6
 80174b4:	f3af 8000 	nop.w
 80174b8:	4607      	mov	r7, r0
 80174ba:	1c78      	adds	r0, r7, #1
 80174bc:	d1d6      	bne.n	801746c <_vfiprintf_r+0x1bc>
 80174be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174c0:	07d9      	lsls	r1, r3, #31
 80174c2:	d405      	bmi.n	80174d0 <_vfiprintf_r+0x220>
 80174c4:	89ab      	ldrh	r3, [r5, #12]
 80174c6:	059a      	lsls	r2, r3, #22
 80174c8:	d402      	bmi.n	80174d0 <_vfiprintf_r+0x220>
 80174ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80174cc:	f7ff fdbb 	bl	8017046 <__retarget_lock_release_recursive>
 80174d0:	89ab      	ldrh	r3, [r5, #12]
 80174d2:	065b      	lsls	r3, r3, #25
 80174d4:	f53f af12 	bmi.w	80172fc <_vfiprintf_r+0x4c>
 80174d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80174da:	e711      	b.n	8017300 <_vfiprintf_r+0x50>
 80174dc:	ab03      	add	r3, sp, #12
 80174de:	9300      	str	r3, [sp, #0]
 80174e0:	462a      	mov	r2, r5
 80174e2:	4b09      	ldr	r3, [pc, #36]	; (8017508 <_vfiprintf_r+0x258>)
 80174e4:	a904      	add	r1, sp, #16
 80174e6:	4630      	mov	r0, r6
 80174e8:	f000 f880 	bl	80175ec <_printf_i>
 80174ec:	e7e4      	b.n	80174b8 <_vfiprintf_r+0x208>
 80174ee:	bf00      	nop
 80174f0:	0801853c 	.word	0x0801853c
 80174f4:	0801855c 	.word	0x0801855c
 80174f8:	0801851c 	.word	0x0801851c
 80174fc:	0801857c 	.word	0x0801857c
 8017500:	08018586 	.word	0x08018586
 8017504:	00000000 	.word	0x00000000
 8017508:	0801728b 	.word	0x0801728b
 801750c:	08018582 	.word	0x08018582

08017510 <_printf_common>:
 8017510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017514:	4616      	mov	r6, r2
 8017516:	4699      	mov	r9, r3
 8017518:	688a      	ldr	r2, [r1, #8]
 801751a:	690b      	ldr	r3, [r1, #16]
 801751c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017520:	4293      	cmp	r3, r2
 8017522:	bfb8      	it	lt
 8017524:	4613      	movlt	r3, r2
 8017526:	6033      	str	r3, [r6, #0]
 8017528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801752c:	4607      	mov	r7, r0
 801752e:	460c      	mov	r4, r1
 8017530:	b10a      	cbz	r2, 8017536 <_printf_common+0x26>
 8017532:	3301      	adds	r3, #1
 8017534:	6033      	str	r3, [r6, #0]
 8017536:	6823      	ldr	r3, [r4, #0]
 8017538:	0699      	lsls	r1, r3, #26
 801753a:	bf42      	ittt	mi
 801753c:	6833      	ldrmi	r3, [r6, #0]
 801753e:	3302      	addmi	r3, #2
 8017540:	6033      	strmi	r3, [r6, #0]
 8017542:	6825      	ldr	r5, [r4, #0]
 8017544:	f015 0506 	ands.w	r5, r5, #6
 8017548:	d106      	bne.n	8017558 <_printf_common+0x48>
 801754a:	f104 0a19 	add.w	sl, r4, #25
 801754e:	68e3      	ldr	r3, [r4, #12]
 8017550:	6832      	ldr	r2, [r6, #0]
 8017552:	1a9b      	subs	r3, r3, r2
 8017554:	42ab      	cmp	r3, r5
 8017556:	dc26      	bgt.n	80175a6 <_printf_common+0x96>
 8017558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801755c:	1e13      	subs	r3, r2, #0
 801755e:	6822      	ldr	r2, [r4, #0]
 8017560:	bf18      	it	ne
 8017562:	2301      	movne	r3, #1
 8017564:	0692      	lsls	r2, r2, #26
 8017566:	d42b      	bmi.n	80175c0 <_printf_common+0xb0>
 8017568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801756c:	4649      	mov	r1, r9
 801756e:	4638      	mov	r0, r7
 8017570:	47c0      	blx	r8
 8017572:	3001      	adds	r0, #1
 8017574:	d01e      	beq.n	80175b4 <_printf_common+0xa4>
 8017576:	6823      	ldr	r3, [r4, #0]
 8017578:	68e5      	ldr	r5, [r4, #12]
 801757a:	6832      	ldr	r2, [r6, #0]
 801757c:	f003 0306 	and.w	r3, r3, #6
 8017580:	2b04      	cmp	r3, #4
 8017582:	bf08      	it	eq
 8017584:	1aad      	subeq	r5, r5, r2
 8017586:	68a3      	ldr	r3, [r4, #8]
 8017588:	6922      	ldr	r2, [r4, #16]
 801758a:	bf0c      	ite	eq
 801758c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017590:	2500      	movne	r5, #0
 8017592:	4293      	cmp	r3, r2
 8017594:	bfc4      	itt	gt
 8017596:	1a9b      	subgt	r3, r3, r2
 8017598:	18ed      	addgt	r5, r5, r3
 801759a:	2600      	movs	r6, #0
 801759c:	341a      	adds	r4, #26
 801759e:	42b5      	cmp	r5, r6
 80175a0:	d11a      	bne.n	80175d8 <_printf_common+0xc8>
 80175a2:	2000      	movs	r0, #0
 80175a4:	e008      	b.n	80175b8 <_printf_common+0xa8>
 80175a6:	2301      	movs	r3, #1
 80175a8:	4652      	mov	r2, sl
 80175aa:	4649      	mov	r1, r9
 80175ac:	4638      	mov	r0, r7
 80175ae:	47c0      	blx	r8
 80175b0:	3001      	adds	r0, #1
 80175b2:	d103      	bne.n	80175bc <_printf_common+0xac>
 80175b4:	f04f 30ff 	mov.w	r0, #4294967295
 80175b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175bc:	3501      	adds	r5, #1
 80175be:	e7c6      	b.n	801754e <_printf_common+0x3e>
 80175c0:	18e1      	adds	r1, r4, r3
 80175c2:	1c5a      	adds	r2, r3, #1
 80175c4:	2030      	movs	r0, #48	; 0x30
 80175c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80175ca:	4422      	add	r2, r4
 80175cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80175d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80175d4:	3302      	adds	r3, #2
 80175d6:	e7c7      	b.n	8017568 <_printf_common+0x58>
 80175d8:	2301      	movs	r3, #1
 80175da:	4622      	mov	r2, r4
 80175dc:	4649      	mov	r1, r9
 80175de:	4638      	mov	r0, r7
 80175e0:	47c0      	blx	r8
 80175e2:	3001      	adds	r0, #1
 80175e4:	d0e6      	beq.n	80175b4 <_printf_common+0xa4>
 80175e6:	3601      	adds	r6, #1
 80175e8:	e7d9      	b.n	801759e <_printf_common+0x8e>
	...

080175ec <_printf_i>:
 80175ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80175f0:	460c      	mov	r4, r1
 80175f2:	4691      	mov	r9, r2
 80175f4:	7e27      	ldrb	r7, [r4, #24]
 80175f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80175f8:	2f78      	cmp	r7, #120	; 0x78
 80175fa:	4680      	mov	r8, r0
 80175fc:	469a      	mov	sl, r3
 80175fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017602:	d807      	bhi.n	8017614 <_printf_i+0x28>
 8017604:	2f62      	cmp	r7, #98	; 0x62
 8017606:	d80a      	bhi.n	801761e <_printf_i+0x32>
 8017608:	2f00      	cmp	r7, #0
 801760a:	f000 80d8 	beq.w	80177be <_printf_i+0x1d2>
 801760e:	2f58      	cmp	r7, #88	; 0x58
 8017610:	f000 80a3 	beq.w	801775a <_printf_i+0x16e>
 8017614:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801761c:	e03a      	b.n	8017694 <_printf_i+0xa8>
 801761e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017622:	2b15      	cmp	r3, #21
 8017624:	d8f6      	bhi.n	8017614 <_printf_i+0x28>
 8017626:	a001      	add	r0, pc, #4	; (adr r0, 801762c <_printf_i+0x40>)
 8017628:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801762c:	08017685 	.word	0x08017685
 8017630:	08017699 	.word	0x08017699
 8017634:	08017615 	.word	0x08017615
 8017638:	08017615 	.word	0x08017615
 801763c:	08017615 	.word	0x08017615
 8017640:	08017615 	.word	0x08017615
 8017644:	08017699 	.word	0x08017699
 8017648:	08017615 	.word	0x08017615
 801764c:	08017615 	.word	0x08017615
 8017650:	08017615 	.word	0x08017615
 8017654:	08017615 	.word	0x08017615
 8017658:	080177a5 	.word	0x080177a5
 801765c:	080176c9 	.word	0x080176c9
 8017660:	08017787 	.word	0x08017787
 8017664:	08017615 	.word	0x08017615
 8017668:	08017615 	.word	0x08017615
 801766c:	080177c7 	.word	0x080177c7
 8017670:	08017615 	.word	0x08017615
 8017674:	080176c9 	.word	0x080176c9
 8017678:	08017615 	.word	0x08017615
 801767c:	08017615 	.word	0x08017615
 8017680:	0801778f 	.word	0x0801778f
 8017684:	680b      	ldr	r3, [r1, #0]
 8017686:	1d1a      	adds	r2, r3, #4
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	600a      	str	r2, [r1, #0]
 801768c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017694:	2301      	movs	r3, #1
 8017696:	e0a3      	b.n	80177e0 <_printf_i+0x1f4>
 8017698:	6825      	ldr	r5, [r4, #0]
 801769a:	6808      	ldr	r0, [r1, #0]
 801769c:	062e      	lsls	r6, r5, #24
 801769e:	f100 0304 	add.w	r3, r0, #4
 80176a2:	d50a      	bpl.n	80176ba <_printf_i+0xce>
 80176a4:	6805      	ldr	r5, [r0, #0]
 80176a6:	600b      	str	r3, [r1, #0]
 80176a8:	2d00      	cmp	r5, #0
 80176aa:	da03      	bge.n	80176b4 <_printf_i+0xc8>
 80176ac:	232d      	movs	r3, #45	; 0x2d
 80176ae:	426d      	negs	r5, r5
 80176b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80176b4:	485e      	ldr	r0, [pc, #376]	; (8017830 <_printf_i+0x244>)
 80176b6:	230a      	movs	r3, #10
 80176b8:	e019      	b.n	80176ee <_printf_i+0x102>
 80176ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80176be:	6805      	ldr	r5, [r0, #0]
 80176c0:	600b      	str	r3, [r1, #0]
 80176c2:	bf18      	it	ne
 80176c4:	b22d      	sxthne	r5, r5
 80176c6:	e7ef      	b.n	80176a8 <_printf_i+0xbc>
 80176c8:	680b      	ldr	r3, [r1, #0]
 80176ca:	6825      	ldr	r5, [r4, #0]
 80176cc:	1d18      	adds	r0, r3, #4
 80176ce:	6008      	str	r0, [r1, #0]
 80176d0:	0628      	lsls	r0, r5, #24
 80176d2:	d501      	bpl.n	80176d8 <_printf_i+0xec>
 80176d4:	681d      	ldr	r5, [r3, #0]
 80176d6:	e002      	b.n	80176de <_printf_i+0xf2>
 80176d8:	0669      	lsls	r1, r5, #25
 80176da:	d5fb      	bpl.n	80176d4 <_printf_i+0xe8>
 80176dc:	881d      	ldrh	r5, [r3, #0]
 80176de:	4854      	ldr	r0, [pc, #336]	; (8017830 <_printf_i+0x244>)
 80176e0:	2f6f      	cmp	r7, #111	; 0x6f
 80176e2:	bf0c      	ite	eq
 80176e4:	2308      	moveq	r3, #8
 80176e6:	230a      	movne	r3, #10
 80176e8:	2100      	movs	r1, #0
 80176ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80176ee:	6866      	ldr	r6, [r4, #4]
 80176f0:	60a6      	str	r6, [r4, #8]
 80176f2:	2e00      	cmp	r6, #0
 80176f4:	bfa2      	ittt	ge
 80176f6:	6821      	ldrge	r1, [r4, #0]
 80176f8:	f021 0104 	bicge.w	r1, r1, #4
 80176fc:	6021      	strge	r1, [r4, #0]
 80176fe:	b90d      	cbnz	r5, 8017704 <_printf_i+0x118>
 8017700:	2e00      	cmp	r6, #0
 8017702:	d04d      	beq.n	80177a0 <_printf_i+0x1b4>
 8017704:	4616      	mov	r6, r2
 8017706:	fbb5 f1f3 	udiv	r1, r5, r3
 801770a:	fb03 5711 	mls	r7, r3, r1, r5
 801770e:	5dc7      	ldrb	r7, [r0, r7]
 8017710:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017714:	462f      	mov	r7, r5
 8017716:	42bb      	cmp	r3, r7
 8017718:	460d      	mov	r5, r1
 801771a:	d9f4      	bls.n	8017706 <_printf_i+0x11a>
 801771c:	2b08      	cmp	r3, #8
 801771e:	d10b      	bne.n	8017738 <_printf_i+0x14c>
 8017720:	6823      	ldr	r3, [r4, #0]
 8017722:	07df      	lsls	r7, r3, #31
 8017724:	d508      	bpl.n	8017738 <_printf_i+0x14c>
 8017726:	6923      	ldr	r3, [r4, #16]
 8017728:	6861      	ldr	r1, [r4, #4]
 801772a:	4299      	cmp	r1, r3
 801772c:	bfde      	ittt	le
 801772e:	2330      	movle	r3, #48	; 0x30
 8017730:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017734:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017738:	1b92      	subs	r2, r2, r6
 801773a:	6122      	str	r2, [r4, #16]
 801773c:	f8cd a000 	str.w	sl, [sp]
 8017740:	464b      	mov	r3, r9
 8017742:	aa03      	add	r2, sp, #12
 8017744:	4621      	mov	r1, r4
 8017746:	4640      	mov	r0, r8
 8017748:	f7ff fee2 	bl	8017510 <_printf_common>
 801774c:	3001      	adds	r0, #1
 801774e:	d14c      	bne.n	80177ea <_printf_i+0x1fe>
 8017750:	f04f 30ff 	mov.w	r0, #4294967295
 8017754:	b004      	add	sp, #16
 8017756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801775a:	4835      	ldr	r0, [pc, #212]	; (8017830 <_printf_i+0x244>)
 801775c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017760:	6823      	ldr	r3, [r4, #0]
 8017762:	680e      	ldr	r6, [r1, #0]
 8017764:	061f      	lsls	r7, r3, #24
 8017766:	f856 5b04 	ldr.w	r5, [r6], #4
 801776a:	600e      	str	r6, [r1, #0]
 801776c:	d514      	bpl.n	8017798 <_printf_i+0x1ac>
 801776e:	07d9      	lsls	r1, r3, #31
 8017770:	bf44      	itt	mi
 8017772:	f043 0320 	orrmi.w	r3, r3, #32
 8017776:	6023      	strmi	r3, [r4, #0]
 8017778:	b91d      	cbnz	r5, 8017782 <_printf_i+0x196>
 801777a:	6823      	ldr	r3, [r4, #0]
 801777c:	f023 0320 	bic.w	r3, r3, #32
 8017780:	6023      	str	r3, [r4, #0]
 8017782:	2310      	movs	r3, #16
 8017784:	e7b0      	b.n	80176e8 <_printf_i+0xfc>
 8017786:	6823      	ldr	r3, [r4, #0]
 8017788:	f043 0320 	orr.w	r3, r3, #32
 801778c:	6023      	str	r3, [r4, #0]
 801778e:	2378      	movs	r3, #120	; 0x78
 8017790:	4828      	ldr	r0, [pc, #160]	; (8017834 <_printf_i+0x248>)
 8017792:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017796:	e7e3      	b.n	8017760 <_printf_i+0x174>
 8017798:	065e      	lsls	r6, r3, #25
 801779a:	bf48      	it	mi
 801779c:	b2ad      	uxthmi	r5, r5
 801779e:	e7e6      	b.n	801776e <_printf_i+0x182>
 80177a0:	4616      	mov	r6, r2
 80177a2:	e7bb      	b.n	801771c <_printf_i+0x130>
 80177a4:	680b      	ldr	r3, [r1, #0]
 80177a6:	6826      	ldr	r6, [r4, #0]
 80177a8:	6960      	ldr	r0, [r4, #20]
 80177aa:	1d1d      	adds	r5, r3, #4
 80177ac:	600d      	str	r5, [r1, #0]
 80177ae:	0635      	lsls	r5, r6, #24
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	d501      	bpl.n	80177b8 <_printf_i+0x1cc>
 80177b4:	6018      	str	r0, [r3, #0]
 80177b6:	e002      	b.n	80177be <_printf_i+0x1d2>
 80177b8:	0671      	lsls	r1, r6, #25
 80177ba:	d5fb      	bpl.n	80177b4 <_printf_i+0x1c8>
 80177bc:	8018      	strh	r0, [r3, #0]
 80177be:	2300      	movs	r3, #0
 80177c0:	6123      	str	r3, [r4, #16]
 80177c2:	4616      	mov	r6, r2
 80177c4:	e7ba      	b.n	801773c <_printf_i+0x150>
 80177c6:	680b      	ldr	r3, [r1, #0]
 80177c8:	1d1a      	adds	r2, r3, #4
 80177ca:	600a      	str	r2, [r1, #0]
 80177cc:	681e      	ldr	r6, [r3, #0]
 80177ce:	6862      	ldr	r2, [r4, #4]
 80177d0:	2100      	movs	r1, #0
 80177d2:	4630      	mov	r0, r6
 80177d4:	f7e8 fcd4 	bl	8000180 <memchr>
 80177d8:	b108      	cbz	r0, 80177de <_printf_i+0x1f2>
 80177da:	1b80      	subs	r0, r0, r6
 80177dc:	6060      	str	r0, [r4, #4]
 80177de:	6863      	ldr	r3, [r4, #4]
 80177e0:	6123      	str	r3, [r4, #16]
 80177e2:	2300      	movs	r3, #0
 80177e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80177e8:	e7a8      	b.n	801773c <_printf_i+0x150>
 80177ea:	6923      	ldr	r3, [r4, #16]
 80177ec:	4632      	mov	r2, r6
 80177ee:	4649      	mov	r1, r9
 80177f0:	4640      	mov	r0, r8
 80177f2:	47d0      	blx	sl
 80177f4:	3001      	adds	r0, #1
 80177f6:	d0ab      	beq.n	8017750 <_printf_i+0x164>
 80177f8:	6823      	ldr	r3, [r4, #0]
 80177fa:	079b      	lsls	r3, r3, #30
 80177fc:	d413      	bmi.n	8017826 <_printf_i+0x23a>
 80177fe:	68e0      	ldr	r0, [r4, #12]
 8017800:	9b03      	ldr	r3, [sp, #12]
 8017802:	4298      	cmp	r0, r3
 8017804:	bfb8      	it	lt
 8017806:	4618      	movlt	r0, r3
 8017808:	e7a4      	b.n	8017754 <_printf_i+0x168>
 801780a:	2301      	movs	r3, #1
 801780c:	4632      	mov	r2, r6
 801780e:	4649      	mov	r1, r9
 8017810:	4640      	mov	r0, r8
 8017812:	47d0      	blx	sl
 8017814:	3001      	adds	r0, #1
 8017816:	d09b      	beq.n	8017750 <_printf_i+0x164>
 8017818:	3501      	adds	r5, #1
 801781a:	68e3      	ldr	r3, [r4, #12]
 801781c:	9903      	ldr	r1, [sp, #12]
 801781e:	1a5b      	subs	r3, r3, r1
 8017820:	42ab      	cmp	r3, r5
 8017822:	dcf2      	bgt.n	801780a <_printf_i+0x21e>
 8017824:	e7eb      	b.n	80177fe <_printf_i+0x212>
 8017826:	2500      	movs	r5, #0
 8017828:	f104 0619 	add.w	r6, r4, #25
 801782c:	e7f5      	b.n	801781a <_printf_i+0x22e>
 801782e:	bf00      	nop
 8017830:	0801858d 	.word	0x0801858d
 8017834:	0801859e 	.word	0x0801859e

08017838 <_sbrk_r>:
 8017838:	b538      	push	{r3, r4, r5, lr}
 801783a:	4d06      	ldr	r5, [pc, #24]	; (8017854 <_sbrk_r+0x1c>)
 801783c:	2300      	movs	r3, #0
 801783e:	4604      	mov	r4, r0
 8017840:	4608      	mov	r0, r1
 8017842:	602b      	str	r3, [r5, #0]
 8017844:	f7e9 fe82 	bl	800154c <_sbrk>
 8017848:	1c43      	adds	r3, r0, #1
 801784a:	d102      	bne.n	8017852 <_sbrk_r+0x1a>
 801784c:	682b      	ldr	r3, [r5, #0]
 801784e:	b103      	cbz	r3, 8017852 <_sbrk_r+0x1a>
 8017850:	6023      	str	r3, [r4, #0]
 8017852:	bd38      	pop	{r3, r4, r5, pc}
 8017854:	200012c8 	.word	0x200012c8

08017858 <__sread>:
 8017858:	b510      	push	{r4, lr}
 801785a:	460c      	mov	r4, r1
 801785c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017860:	f000 f8a0 	bl	80179a4 <_read_r>
 8017864:	2800      	cmp	r0, #0
 8017866:	bfab      	itete	ge
 8017868:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801786a:	89a3      	ldrhlt	r3, [r4, #12]
 801786c:	181b      	addge	r3, r3, r0
 801786e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017872:	bfac      	ite	ge
 8017874:	6563      	strge	r3, [r4, #84]	; 0x54
 8017876:	81a3      	strhlt	r3, [r4, #12]
 8017878:	bd10      	pop	{r4, pc}

0801787a <__swrite>:
 801787a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801787e:	461f      	mov	r7, r3
 8017880:	898b      	ldrh	r3, [r1, #12]
 8017882:	05db      	lsls	r3, r3, #23
 8017884:	4605      	mov	r5, r0
 8017886:	460c      	mov	r4, r1
 8017888:	4616      	mov	r6, r2
 801788a:	d505      	bpl.n	8017898 <__swrite+0x1e>
 801788c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017890:	2302      	movs	r3, #2
 8017892:	2200      	movs	r2, #0
 8017894:	f000 f868 	bl	8017968 <_lseek_r>
 8017898:	89a3      	ldrh	r3, [r4, #12]
 801789a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801789e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80178a2:	81a3      	strh	r3, [r4, #12]
 80178a4:	4632      	mov	r2, r6
 80178a6:	463b      	mov	r3, r7
 80178a8:	4628      	mov	r0, r5
 80178aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178ae:	f000 b817 	b.w	80178e0 <_write_r>

080178b2 <__sseek>:
 80178b2:	b510      	push	{r4, lr}
 80178b4:	460c      	mov	r4, r1
 80178b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178ba:	f000 f855 	bl	8017968 <_lseek_r>
 80178be:	1c43      	adds	r3, r0, #1
 80178c0:	89a3      	ldrh	r3, [r4, #12]
 80178c2:	bf15      	itete	ne
 80178c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80178c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80178ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80178ce:	81a3      	strheq	r3, [r4, #12]
 80178d0:	bf18      	it	ne
 80178d2:	81a3      	strhne	r3, [r4, #12]
 80178d4:	bd10      	pop	{r4, pc}

080178d6 <__sclose>:
 80178d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178da:	f000 b813 	b.w	8017904 <_close_r>
	...

080178e0 <_write_r>:
 80178e0:	b538      	push	{r3, r4, r5, lr}
 80178e2:	4d07      	ldr	r5, [pc, #28]	; (8017900 <_write_r+0x20>)
 80178e4:	4604      	mov	r4, r0
 80178e6:	4608      	mov	r0, r1
 80178e8:	4611      	mov	r1, r2
 80178ea:	2200      	movs	r2, #0
 80178ec:	602a      	str	r2, [r5, #0]
 80178ee:	461a      	mov	r2, r3
 80178f0:	f7e9 fddf 	bl	80014b2 <_write>
 80178f4:	1c43      	adds	r3, r0, #1
 80178f6:	d102      	bne.n	80178fe <_write_r+0x1e>
 80178f8:	682b      	ldr	r3, [r5, #0]
 80178fa:	b103      	cbz	r3, 80178fe <_write_r+0x1e>
 80178fc:	6023      	str	r3, [r4, #0]
 80178fe:	bd38      	pop	{r3, r4, r5, pc}
 8017900:	200012c8 	.word	0x200012c8

08017904 <_close_r>:
 8017904:	b538      	push	{r3, r4, r5, lr}
 8017906:	4d06      	ldr	r5, [pc, #24]	; (8017920 <_close_r+0x1c>)
 8017908:	2300      	movs	r3, #0
 801790a:	4604      	mov	r4, r0
 801790c:	4608      	mov	r0, r1
 801790e:	602b      	str	r3, [r5, #0]
 8017910:	f7e9 fdeb 	bl	80014ea <_close>
 8017914:	1c43      	adds	r3, r0, #1
 8017916:	d102      	bne.n	801791e <_close_r+0x1a>
 8017918:	682b      	ldr	r3, [r5, #0]
 801791a:	b103      	cbz	r3, 801791e <_close_r+0x1a>
 801791c:	6023      	str	r3, [r4, #0]
 801791e:	bd38      	pop	{r3, r4, r5, pc}
 8017920:	200012c8 	.word	0x200012c8

08017924 <_fstat_r>:
 8017924:	b538      	push	{r3, r4, r5, lr}
 8017926:	4d07      	ldr	r5, [pc, #28]	; (8017944 <_fstat_r+0x20>)
 8017928:	2300      	movs	r3, #0
 801792a:	4604      	mov	r4, r0
 801792c:	4608      	mov	r0, r1
 801792e:	4611      	mov	r1, r2
 8017930:	602b      	str	r3, [r5, #0]
 8017932:	f7e9 fde5 	bl	8001500 <_fstat>
 8017936:	1c43      	adds	r3, r0, #1
 8017938:	d102      	bne.n	8017940 <_fstat_r+0x1c>
 801793a:	682b      	ldr	r3, [r5, #0]
 801793c:	b103      	cbz	r3, 8017940 <_fstat_r+0x1c>
 801793e:	6023      	str	r3, [r4, #0]
 8017940:	bd38      	pop	{r3, r4, r5, pc}
 8017942:	bf00      	nop
 8017944:	200012c8 	.word	0x200012c8

08017948 <_isatty_r>:
 8017948:	b538      	push	{r3, r4, r5, lr}
 801794a:	4d06      	ldr	r5, [pc, #24]	; (8017964 <_isatty_r+0x1c>)
 801794c:	2300      	movs	r3, #0
 801794e:	4604      	mov	r4, r0
 8017950:	4608      	mov	r0, r1
 8017952:	602b      	str	r3, [r5, #0]
 8017954:	f7e9 fde3 	bl	800151e <_isatty>
 8017958:	1c43      	adds	r3, r0, #1
 801795a:	d102      	bne.n	8017962 <_isatty_r+0x1a>
 801795c:	682b      	ldr	r3, [r5, #0]
 801795e:	b103      	cbz	r3, 8017962 <_isatty_r+0x1a>
 8017960:	6023      	str	r3, [r4, #0]
 8017962:	bd38      	pop	{r3, r4, r5, pc}
 8017964:	200012c8 	.word	0x200012c8

08017968 <_lseek_r>:
 8017968:	b538      	push	{r3, r4, r5, lr}
 801796a:	4d07      	ldr	r5, [pc, #28]	; (8017988 <_lseek_r+0x20>)
 801796c:	4604      	mov	r4, r0
 801796e:	4608      	mov	r0, r1
 8017970:	4611      	mov	r1, r2
 8017972:	2200      	movs	r2, #0
 8017974:	602a      	str	r2, [r5, #0]
 8017976:	461a      	mov	r2, r3
 8017978:	f7e9 fddb 	bl	8001532 <_lseek>
 801797c:	1c43      	adds	r3, r0, #1
 801797e:	d102      	bne.n	8017986 <_lseek_r+0x1e>
 8017980:	682b      	ldr	r3, [r5, #0]
 8017982:	b103      	cbz	r3, 8017986 <_lseek_r+0x1e>
 8017984:	6023      	str	r3, [r4, #0]
 8017986:	bd38      	pop	{r3, r4, r5, pc}
 8017988:	200012c8 	.word	0x200012c8

0801798c <__malloc_lock>:
 801798c:	4801      	ldr	r0, [pc, #4]	; (8017994 <__malloc_lock+0x8>)
 801798e:	f7ff bb59 	b.w	8017044 <__retarget_lock_acquire_recursive>
 8017992:	bf00      	nop
 8017994:	200012c0 	.word	0x200012c0

08017998 <__malloc_unlock>:
 8017998:	4801      	ldr	r0, [pc, #4]	; (80179a0 <__malloc_unlock+0x8>)
 801799a:	f7ff bb54 	b.w	8017046 <__retarget_lock_release_recursive>
 801799e:	bf00      	nop
 80179a0:	200012c0 	.word	0x200012c0

080179a4 <_read_r>:
 80179a4:	b538      	push	{r3, r4, r5, lr}
 80179a6:	4d07      	ldr	r5, [pc, #28]	; (80179c4 <_read_r+0x20>)
 80179a8:	4604      	mov	r4, r0
 80179aa:	4608      	mov	r0, r1
 80179ac:	4611      	mov	r1, r2
 80179ae:	2200      	movs	r2, #0
 80179b0:	602a      	str	r2, [r5, #0]
 80179b2:	461a      	mov	r2, r3
 80179b4:	f7e9 fd60 	bl	8001478 <_read>
 80179b8:	1c43      	adds	r3, r0, #1
 80179ba:	d102      	bne.n	80179c2 <_read_r+0x1e>
 80179bc:	682b      	ldr	r3, [r5, #0]
 80179be:	b103      	cbz	r3, 80179c2 <_read_r+0x1e>
 80179c0:	6023      	str	r3, [r4, #0]
 80179c2:	bd38      	pop	{r3, r4, r5, pc}
 80179c4:	200012c8 	.word	0x200012c8

080179c8 <floor>:
 80179c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179cc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80179d0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80179d4:	2e13      	cmp	r6, #19
 80179d6:	4602      	mov	r2, r0
 80179d8:	460b      	mov	r3, r1
 80179da:	4607      	mov	r7, r0
 80179dc:	460c      	mov	r4, r1
 80179de:	4605      	mov	r5, r0
 80179e0:	dc34      	bgt.n	8017a4c <floor+0x84>
 80179e2:	2e00      	cmp	r6, #0
 80179e4:	da15      	bge.n	8017a12 <floor+0x4a>
 80179e6:	a334      	add	r3, pc, #208	; (adr r3, 8017ab8 <floor+0xf0>)
 80179e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179ec:	f7e8 fc1e 	bl	800022c <__adddf3>
 80179f0:	2200      	movs	r2, #0
 80179f2:	2300      	movs	r3, #0
 80179f4:	f7e8 fe4e 	bl	8000694 <__aeabi_dcmpgt>
 80179f8:	b140      	cbz	r0, 8017a0c <floor+0x44>
 80179fa:	2c00      	cmp	r4, #0
 80179fc:	da59      	bge.n	8017ab2 <floor+0xea>
 80179fe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8017a02:	ea57 0503 	orrs.w	r5, r7, r3
 8017a06:	d001      	beq.n	8017a0c <floor+0x44>
 8017a08:	4c2d      	ldr	r4, [pc, #180]	; (8017ac0 <floor+0xf8>)
 8017a0a:	2500      	movs	r5, #0
 8017a0c:	4623      	mov	r3, r4
 8017a0e:	462f      	mov	r7, r5
 8017a10:	e025      	b.n	8017a5e <floor+0x96>
 8017a12:	4a2c      	ldr	r2, [pc, #176]	; (8017ac4 <floor+0xfc>)
 8017a14:	fa42 f806 	asr.w	r8, r2, r6
 8017a18:	ea01 0208 	and.w	r2, r1, r8
 8017a1c:	4302      	orrs	r2, r0
 8017a1e:	d01e      	beq.n	8017a5e <floor+0x96>
 8017a20:	a325      	add	r3, pc, #148	; (adr r3, 8017ab8 <floor+0xf0>)
 8017a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a26:	f7e8 fc01 	bl	800022c <__adddf3>
 8017a2a:	2200      	movs	r2, #0
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	f7e8 fe31 	bl	8000694 <__aeabi_dcmpgt>
 8017a32:	2800      	cmp	r0, #0
 8017a34:	d0ea      	beq.n	8017a0c <floor+0x44>
 8017a36:	2c00      	cmp	r4, #0
 8017a38:	bfbe      	ittt	lt
 8017a3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8017a3e:	fa43 f606 	asrlt.w	r6, r3, r6
 8017a42:	19a4      	addlt	r4, r4, r6
 8017a44:	ea24 0408 	bic.w	r4, r4, r8
 8017a48:	2500      	movs	r5, #0
 8017a4a:	e7df      	b.n	8017a0c <floor+0x44>
 8017a4c:	2e33      	cmp	r6, #51	; 0x33
 8017a4e:	dd0a      	ble.n	8017a66 <floor+0x9e>
 8017a50:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017a54:	d103      	bne.n	8017a5e <floor+0x96>
 8017a56:	f7e8 fbe9 	bl	800022c <__adddf3>
 8017a5a:	4607      	mov	r7, r0
 8017a5c:	460b      	mov	r3, r1
 8017a5e:	4638      	mov	r0, r7
 8017a60:	4619      	mov	r1, r3
 8017a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a66:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8017a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8017a6e:	fa22 f808 	lsr.w	r8, r2, r8
 8017a72:	ea18 0f00 	tst.w	r8, r0
 8017a76:	d0f2      	beq.n	8017a5e <floor+0x96>
 8017a78:	a30f      	add	r3, pc, #60	; (adr r3, 8017ab8 <floor+0xf0>)
 8017a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a7e:	f7e8 fbd5 	bl	800022c <__adddf3>
 8017a82:	2200      	movs	r2, #0
 8017a84:	2300      	movs	r3, #0
 8017a86:	f7e8 fe05 	bl	8000694 <__aeabi_dcmpgt>
 8017a8a:	2800      	cmp	r0, #0
 8017a8c:	d0be      	beq.n	8017a0c <floor+0x44>
 8017a8e:	2c00      	cmp	r4, #0
 8017a90:	da02      	bge.n	8017a98 <floor+0xd0>
 8017a92:	2e14      	cmp	r6, #20
 8017a94:	d103      	bne.n	8017a9e <floor+0xd6>
 8017a96:	3401      	adds	r4, #1
 8017a98:	ea25 0508 	bic.w	r5, r5, r8
 8017a9c:	e7b6      	b.n	8017a0c <floor+0x44>
 8017a9e:	2301      	movs	r3, #1
 8017aa0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017aa4:	fa03 f606 	lsl.w	r6, r3, r6
 8017aa8:	4435      	add	r5, r6
 8017aaa:	42bd      	cmp	r5, r7
 8017aac:	bf38      	it	cc
 8017aae:	18e4      	addcc	r4, r4, r3
 8017ab0:	e7f2      	b.n	8017a98 <floor+0xd0>
 8017ab2:	2500      	movs	r5, #0
 8017ab4:	462c      	mov	r4, r5
 8017ab6:	e7a9      	b.n	8017a0c <floor+0x44>
 8017ab8:	8800759c 	.word	0x8800759c
 8017abc:	7e37e43c 	.word	0x7e37e43c
 8017ac0:	bff00000 	.word	0xbff00000
 8017ac4:	000fffff 	.word	0x000fffff

08017ac8 <_init>:
 8017ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017aca:	bf00      	nop
 8017acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ace:	bc08      	pop	{r3}
 8017ad0:	469e      	mov	lr, r3
 8017ad2:	4770      	bx	lr

08017ad4 <_fini>:
 8017ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ad6:	bf00      	nop
 8017ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ada:	bc08      	pop	{r3}
 8017adc:	469e      	mov	lr, r3
 8017ade:	4770      	bx	lr
